
build/kernel.elf:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000080000 <_start>:

_start:	
//"================================================================"
//  Initilize MPID/MPIDR registers for all Cores
//"================================================================"
	mrs	x0, midr_el1
   80000:	d5380000 	mrs	x0, midr_el1
	mrs	x1, mpidr_el1
   80004:	d53800a1 	mrs	x1, mpidr_el1
	msr	vpidr_el2, x0
   80008:	d51c0000 	msr	vpidr_el2, x0
	msr	vmpidr_el2, x1
   8000c:	d51c00a1 	msr	vmpidr_el2, x1

//"================================================================"
//  Disable coprocessor traps for all Cores
//"================================================================"
	mov	x0, #0x33ff
   80010:	d2867fe0 	mov	x0, #0x33ff                	// #13311
	msr	cptr_el2, x0						// Disable coprocessor traps to EL2
   80014:	d51c1140 	msr	cptr_el2, x0
	msr	hstr_el2, xzr						// Disable coprocessor traps to EL2
   80018:	d51c117f 	msr	hstr_el2, xzr
	mov	x0, #3 << 20
   8001c:	d2a00600 	mov	x0, #0x300000              	// #3145728
	msr	cpacr_el1, x0						// Enable FP/SIMD at EL1
   80020:	d5181040 	msr	cpacr_el1, x0

//"================================================================"
//  Enable CNTP for EL1
//"================================================================"
	mrs	x0, cnthctl_el2
   80024:	d53ce100 	mrs	x0, cnthctl_el2
	orr	x0, x0, #3
   80028:	b2400400 	orr	x0, x0, #0x3
	msr	cnthctl_el2, x0
   8002c:	d51ce100 	msr	cnthctl_el2, x0
	msr	cntvoff_el2, xzr
   80030:	d51ce07f 	msr	cntvoff_el2, xzr

//"================================================================"
//  Initialize HCR_EL2 so EL1 is 64 bits for all Cores
//"================================================================"
	mov	x0, #(1 << 31)						// 64bit EL1
   80034:	d2b00000 	mov	x0, #0x80000000            	// #2147483648
	msr	hcr_el2, x0
   80038:	d51c1100 	msr	hcr_el2, x0
//"================================================================"
	/*  RES1 bits (29,28,23,22,20,11) to 1
	 *  RES0 bits (31,30,27,21,17,13,10,6) +
	 *  UCI,EE,EOE,WXN,nTWE,nTWI,UCT,DZE,I,UMA,SED,ITD,
	 *  CP15BEN,SA0,SA,C,A,M to 0 */
	mov	x0, #0x0800
   8003c:	d2810000 	mov	x0, #0x800                 	// #2048
	movk	x0, #0x30d0, lsl #16
   80040:	f2a61a00 	movk	x0, #0x30d0, lsl #16
	orr    x0, x0, #(0x1 << 2)            // The C bit on (data cache). 
   80044:	b27e0000 	orr	x0, x0, #0x4
	orr    x0, x0, #(0x1 << 12)           // The I bit on (instruction cache)
   80048:	b2740000 	orr	x0, x0, #0x1000
	msr	sctlr_el1, x0
   8004c:	d5181000 	msr	sctlr_el1, x0

//"================================================================"
//  Set up exception handlers
//"================================================================"
	ldr	x2, =(0x80800)
   80050:	58004a42 	ldr	x2, 80998 <_vectors+0x198>
	msr	vbar_el1, x2
   80054:	d518c002 	msr	vbar_el1, x2

//"================================================================"
//  Return to the EL1_SP1 mode from EL2 for all Cores
//"================================================================"
	mov	x0, #0x3c5					// EL1_SP1 | D | A | I | F
   80058:	d28078a0 	mov	x0, #0x3c5                 	// #965
	msr	spsr_el2, x0					// Set spsr_el2 with settings
   8005c:	d51c4000 	msr	spsr_el2, x0
	adr	x0, exit_el1					// Address to exit EL2
   80060:	10000060 	adr	x0, 8006c <exit_el1>
	msr	elr_el2, x0					// Set elevated return register
   80064:	d51c4020 	msr	elr_el2, x0
	eret							// Call elevated return
   80068:	d69f03e0 	eret

000000000008006c <exit_el1>:

//"================================================================"
//  Branch all cores to their destination
//"================================================================"
exit_el1:	
	mrs 	x1, mpidr_el1 // Read core id on AARCH64
   8006c:	d53800a1 	mrs	x1, mpidr_el1
	and 	x1, x1, #0x3  // Make core 2 bit bitmask in x1
   80070:	92400421 	and	x1, x1, #0x3
	cbz  	x1, 2f	      // Core 0 jumps out to label 2
   80074:	b4000101 	cbz	x1, 80094 <exit_el1+0x28>
	cmp 	x1, #1        // Check for core1
   80078:	f100043f 	cmp	x1, #0x1
	beq  	1f
   8007c:	54000040 	b.eq	80084 <exit_el1+0x18>  // b.none
	b 	_hang
   80080:	1400000f 	b	800bc <_hang>

1:
	ldr     x1, =(_start-0x10000)
   80084:	580048e1 	ldr	x1, 809a0 <_vectors+0x1a0>
	mov     sp, x1
   80088:	9100003f 	mov	sp, x1
	bl       core1_main
   8008c:	94004311 	bl	90cd0 <core1_main>
	b _hang
   80090:	1400000b 	b	800bc <_hang>

// core0 main
2:	
	ldr     x1, =_start
   80094:	580048a1 	ldr	x1, 809a8 <_vectors+0x1a8>
	mov     sp, x1
   80098:	9100003f 	mov	sp, x1


//"================================================================"
//  About to go to into C kernel clear BSS (Core0 only)
//"================================================================"
	ldr x3, =__bss_end
   8009c:	580048a3 	ldr	x3, 809b0 <_vectors+0x1b0>
	ldr x0, =__bss_start
   800a0:	580048c0 	ldr	x0, 809b8 <_vectors+0x1b8>
	cmp	x0, x3
   800a4:	eb03001f 	cmp	x0, x3
	bcs	main
   800a8:	5401a402 	b.cs	83528 <main>  // b.hs, b.nlast

00000000000800ac <.bss_zero_loop>:
.bss_zero_loop:
	str	wzr, [x0], 4
   800ac:	b800441f 	str	wzr, [x0], #4
	cmp	x3, x0
   800b0:	eb00007f 	cmp	x3, x0
	bhi	.bss_zero_loop
   800b4:	54ffffc8 	b.hi	800ac <.bss_zero_loop>  // b.pmore

.global _asm_enter_main
	bl	main
   800b8:	94000d1c 	bl	83528 <main>

00000000000800bc <_hang>:

.global _hang
_hang:
	wfe
   800bc:	d503205f 	wfe
	b _hang
   800c0:	17ffffff 	b	800bc <_hang>

00000000000800c4 <dbg_saveregs>:


// save registers before we call any C code
dbg_saveregs:
	str     x0, [sp, #-16]!     // push x0
   800c4:	f81f0fe0 	str	x0, [sp, #-16]!
	ldr     x0, =dbg_regs+8
   800c8:	580047c0 	ldr	x0, 809c0 <_vectors+0x1c0>
	str     x1, [x0], #8        // dbg_regs[1]=x1
   800cc:	f8008401 	str	x1, [x0], #8
	ldr     x1, [sp, #16]       // pop x1
   800d0:	f9400be1 	ldr	x1, [sp, #16]
	str     x1, [x0, #-16]!     // dbg_regs[0]=x1 (x0)
   800d4:	f81f0c01 	str	x1, [x0, #-16]!
	add     x0, x0, #16
   800d8:	91004000 	add	x0, x0, #0x10
	str     x2, [x0], #8        // dbg_regs[2]=x2
   800dc:	f8008402 	str	x2, [x0], #8
	str     x3, [x0], #8        // ...etc.
   800e0:	f8008403 	str	x3, [x0], #8
	str     x4, [x0], #8
   800e4:	f8008404 	str	x4, [x0], #8
	str     x5, [x0], #8
   800e8:	f8008405 	str	x5, [x0], #8
	str     x6, [x0], #8
   800ec:	f8008406 	str	x6, [x0], #8
	str     x7, [x0], #8
   800f0:	f8008407 	str	x7, [x0], #8
	str     x8, [x0], #8
   800f4:	f8008408 	str	x8, [x0], #8
	str     x9, [x0], #8
   800f8:	f8008409 	str	x9, [x0], #8
	str     x10, [x0], #8
   800fc:	f800840a 	str	x10, [x0], #8
	str     x11, [x0], #8
   80100:	f800840b 	str	x11, [x0], #8
	str     x12, [x0], #8
   80104:	f800840c 	str	x12, [x0], #8
	str     x13, [x0], #8
   80108:	f800840d 	str	x13, [x0], #8
	str     x14, [x0], #8
   8010c:	f800840e 	str	x14, [x0], #8
	str     x15, [x0], #8
   80110:	f800840f 	str	x15, [x0], #8
	str     x16, [x0], #8
   80114:	f8008410 	str	x16, [x0], #8
	str     x17, [x0], #8
   80118:	f8008411 	str	x17, [x0], #8
	str     x18, [x0], #8
   8011c:	f8008412 	str	x18, [x0], #8
	str     x19, [x0], #8
   80120:	f8008413 	str	x19, [x0], #8
	str     x20, [x0], #8
   80124:	f8008414 	str	x20, [x0], #8
	str     x21, [x0], #8
   80128:	f8008415 	str	x21, [x0], #8
	str     x22, [x0], #8
   8012c:	f8008416 	str	x22, [x0], #8
	str     x23, [x0], #8
   80130:	f8008417 	str	x23, [x0], #8
	str     x24, [x0], #8
   80134:	f8008418 	str	x24, [x0], #8
	str     x25, [x0], #8
   80138:	f8008419 	str	x25, [x0], #8
	str     x26, [x0], #8
   8013c:	f800841a 	str	x26, [x0], #8
	str     x27, [x0], #8
   80140:	f800841b 	str	x27, [x0], #8
	str     x28, [x0], #8
   80144:	f800841c 	str	x28, [x0], #8
	str     x29, [x0], #8
   80148:	f800841d 	str	x29, [x0], #8
	ldr     x1, [sp, #16]       // pop x30
   8014c:	f9400be1 	ldr	x1, [sp, #16]
	str     x1, [x0], #8
   80150:	f8008401 	str	x1, [x0], #8
	// also read and store some system registers
	mrs     x1, elr_el1
   80154:	d5384021 	mrs	x1, elr_el1
	str     x1, [x0], #8
   80158:	f8008401 	str	x1, [x0], #8
	mrs     x1, spsr_el1
   8015c:	d5384001 	mrs	x1, spsr_el1
	str     x1, [x0], #8
   80160:	f8008401 	str	x1, [x0], #8
	mrs     x1, esr_el1
   80164:	d5385201 	mrs	x1, esr_el1
	str     x1, [x0], #8
   80168:	f8008401 	str	x1, [x0], #8
	mrs     x1, far_el1
   8016c:	d5386001 	mrs	x1, far_el1
	str     x1, [x0], #8
   80170:	f8008401 	str	x1, [x0], #8
	mrs     x1, sctlr_el1
   80174:	d5381001 	mrs	x1, sctlr_el1
	str     x1, [x0], #8
   80178:	f8008401 	str	x1, [x0], #8
	mrs     x1, tcr_el1
   8017c:	d5382041 	mrs	x1, tcr_el1
	str     x1, [x0], #8
   80180:	f8008401 	str	x1, [x0], #8
	ret
   80184:	d65f03c0 	ret
   80188:	d503201f 	nop
   8018c:	d503201f 	nop
   80190:	d503201f 	nop
   80194:	d503201f 	nop
   80198:	d503201f 	nop
   8019c:	d503201f 	nop
   801a0:	d503201f 	nop
   801a4:	d503201f 	nop
   801a8:	d503201f 	nop
   801ac:	d503201f 	nop
   801b0:	d503201f 	nop
   801b4:	d503201f 	nop
   801b8:	d503201f 	nop
   801bc:	d503201f 	nop
   801c0:	d503201f 	nop
   801c4:	d503201f 	nop
   801c8:	d503201f 	nop
   801cc:	d503201f 	nop
   801d0:	d503201f 	nop
   801d4:	d503201f 	nop
   801d8:	d503201f 	nop
   801dc:	d503201f 	nop
   801e0:	d503201f 	nop
   801e4:	d503201f 	nop
   801e8:	d503201f 	nop
   801ec:	d503201f 	nop
   801f0:	d503201f 	nop
   801f4:	d503201f 	nop
   801f8:	d503201f 	nop
   801fc:	d503201f 	nop
   80200:	d503201f 	nop
   80204:	d503201f 	nop
   80208:	d503201f 	nop
   8020c:	d503201f 	nop
   80210:	d503201f 	nop
   80214:	d503201f 	nop
   80218:	d503201f 	nop
   8021c:	d503201f 	nop
   80220:	d503201f 	nop
   80224:	d503201f 	nop
   80228:	d503201f 	nop
   8022c:	d503201f 	nop
   80230:	d503201f 	nop
   80234:	d503201f 	nop
   80238:	d503201f 	nop
   8023c:	d503201f 	nop
   80240:	d503201f 	nop
   80244:	d503201f 	nop
   80248:	d503201f 	nop
   8024c:	d503201f 	nop
   80250:	d503201f 	nop
   80254:	d503201f 	nop
   80258:	d503201f 	nop
   8025c:	d503201f 	nop
   80260:	d503201f 	nop
   80264:	d503201f 	nop
   80268:	d503201f 	nop
   8026c:	d503201f 	nop
   80270:	d503201f 	nop
   80274:	d503201f 	nop
   80278:	d503201f 	nop
   8027c:	d503201f 	nop
   80280:	d503201f 	nop
   80284:	d503201f 	nop
   80288:	d503201f 	nop
   8028c:	d503201f 	nop
   80290:	d503201f 	nop
   80294:	d503201f 	nop
   80298:	d503201f 	nop
   8029c:	d503201f 	nop
   802a0:	d503201f 	nop
   802a4:	d503201f 	nop
   802a8:	d503201f 	nop
   802ac:	d503201f 	nop
   802b0:	d503201f 	nop
   802b4:	d503201f 	nop
   802b8:	d503201f 	nop
   802bc:	d503201f 	nop
   802c0:	d503201f 	nop
   802c4:	d503201f 	nop
   802c8:	d503201f 	nop
   802cc:	d503201f 	nop
   802d0:	d503201f 	nop
   802d4:	d503201f 	nop
   802d8:	d503201f 	nop
   802dc:	d503201f 	nop
   802e0:	d503201f 	nop
   802e4:	d503201f 	nop
   802e8:	d503201f 	nop
   802ec:	d503201f 	nop
   802f0:	d503201f 	nop
   802f4:	d503201f 	nop
   802f8:	d503201f 	nop
   802fc:	d503201f 	nop
   80300:	d503201f 	nop
   80304:	d503201f 	nop
   80308:	d503201f 	nop
   8030c:	d503201f 	nop
   80310:	d503201f 	nop
   80314:	d503201f 	nop
   80318:	d503201f 	nop
   8031c:	d503201f 	nop
   80320:	d503201f 	nop
   80324:	d503201f 	nop
   80328:	d503201f 	nop
   8032c:	d503201f 	nop
   80330:	d503201f 	nop
   80334:	d503201f 	nop
   80338:	d503201f 	nop
   8033c:	d503201f 	nop
   80340:	d503201f 	nop
   80344:	d503201f 	nop
   80348:	d503201f 	nop
   8034c:	d503201f 	nop
   80350:	d503201f 	nop
   80354:	d503201f 	nop
   80358:	d503201f 	nop
   8035c:	d503201f 	nop
   80360:	d503201f 	nop
   80364:	d503201f 	nop
   80368:	d503201f 	nop
   8036c:	d503201f 	nop
   80370:	d503201f 	nop
   80374:	d503201f 	nop
   80378:	d503201f 	nop
   8037c:	d503201f 	nop
   80380:	d503201f 	nop
   80384:	d503201f 	nop
   80388:	d503201f 	nop
   8038c:	d503201f 	nop
   80390:	d503201f 	nop
   80394:	d503201f 	nop
   80398:	d503201f 	nop
   8039c:	d503201f 	nop
   803a0:	d503201f 	nop
   803a4:	d503201f 	nop
   803a8:	d503201f 	nop
   803ac:	d503201f 	nop
   803b0:	d503201f 	nop
   803b4:	d503201f 	nop
   803b8:	d503201f 	nop
   803bc:	d503201f 	nop
   803c0:	d503201f 	nop
   803c4:	d503201f 	nop
   803c8:	d503201f 	nop
   803cc:	d503201f 	nop
   803d0:	d503201f 	nop
   803d4:	d503201f 	nop
   803d8:	d503201f 	nop
   803dc:	d503201f 	nop
   803e0:	d503201f 	nop
   803e4:	d503201f 	nop
   803e8:	d503201f 	nop
   803ec:	d503201f 	nop
   803f0:	d503201f 	nop
   803f4:	d503201f 	nop
   803f8:	d503201f 	nop
   803fc:	d503201f 	nop
   80400:	d503201f 	nop
   80404:	d503201f 	nop
   80408:	d503201f 	nop
   8040c:	d503201f 	nop
   80410:	d503201f 	nop
   80414:	d503201f 	nop
   80418:	d503201f 	nop
   8041c:	d503201f 	nop
   80420:	d503201f 	nop
   80424:	d503201f 	nop
   80428:	d503201f 	nop
   8042c:	d503201f 	nop
   80430:	d503201f 	nop
   80434:	d503201f 	nop
   80438:	d503201f 	nop
   8043c:	d503201f 	nop
   80440:	d503201f 	nop
   80444:	d503201f 	nop
   80448:	d503201f 	nop
   8044c:	d503201f 	nop
   80450:	d503201f 	nop
   80454:	d503201f 	nop
   80458:	d503201f 	nop
   8045c:	d503201f 	nop
   80460:	d503201f 	nop
   80464:	d503201f 	nop
   80468:	d503201f 	nop
   8046c:	d503201f 	nop
   80470:	d503201f 	nop
   80474:	d503201f 	nop
   80478:	d503201f 	nop
   8047c:	d503201f 	nop
   80480:	d503201f 	nop
   80484:	d503201f 	nop
   80488:	d503201f 	nop
   8048c:	d503201f 	nop
   80490:	d503201f 	nop
   80494:	d503201f 	nop
   80498:	d503201f 	nop
   8049c:	d503201f 	nop
   804a0:	d503201f 	nop
   804a4:	d503201f 	nop
   804a8:	d503201f 	nop
   804ac:	d503201f 	nop
   804b0:	d503201f 	nop
   804b4:	d503201f 	nop
   804b8:	d503201f 	nop
   804bc:	d503201f 	nop
   804c0:	d503201f 	nop
   804c4:	d503201f 	nop
   804c8:	d503201f 	nop
   804cc:	d503201f 	nop
   804d0:	d503201f 	nop
   804d4:	d503201f 	nop
   804d8:	d503201f 	nop
   804dc:	d503201f 	nop
   804e0:	d503201f 	nop
   804e4:	d503201f 	nop
   804e8:	d503201f 	nop
   804ec:	d503201f 	nop
   804f0:	d503201f 	nop
   804f4:	d503201f 	nop
   804f8:	d503201f 	nop
   804fc:	d503201f 	nop
   80500:	d503201f 	nop
   80504:	d503201f 	nop
   80508:	d503201f 	nop
   8050c:	d503201f 	nop
   80510:	d503201f 	nop
   80514:	d503201f 	nop
   80518:	d503201f 	nop
   8051c:	d503201f 	nop
   80520:	d503201f 	nop
   80524:	d503201f 	nop
   80528:	d503201f 	nop
   8052c:	d503201f 	nop
   80530:	d503201f 	nop
   80534:	d503201f 	nop
   80538:	d503201f 	nop
   8053c:	d503201f 	nop
   80540:	d503201f 	nop
   80544:	d503201f 	nop
   80548:	d503201f 	nop
   8054c:	d503201f 	nop
   80550:	d503201f 	nop
   80554:	d503201f 	nop
   80558:	d503201f 	nop
   8055c:	d503201f 	nop
   80560:	d503201f 	nop
   80564:	d503201f 	nop
   80568:	d503201f 	nop
   8056c:	d503201f 	nop
   80570:	d503201f 	nop
   80574:	d503201f 	nop
   80578:	d503201f 	nop
   8057c:	d503201f 	nop
   80580:	d503201f 	nop
   80584:	d503201f 	nop
   80588:	d503201f 	nop
   8058c:	d503201f 	nop
   80590:	d503201f 	nop
   80594:	d503201f 	nop
   80598:	d503201f 	nop
   8059c:	d503201f 	nop
   805a0:	d503201f 	nop
   805a4:	d503201f 	nop
   805a8:	d503201f 	nop
   805ac:	d503201f 	nop
   805b0:	d503201f 	nop
   805b4:	d503201f 	nop
   805b8:	d503201f 	nop
   805bc:	d503201f 	nop
   805c0:	d503201f 	nop
   805c4:	d503201f 	nop
   805c8:	d503201f 	nop
   805cc:	d503201f 	nop
   805d0:	d503201f 	nop
   805d4:	d503201f 	nop
   805d8:	d503201f 	nop
   805dc:	d503201f 	nop
   805e0:	d503201f 	nop
   805e4:	d503201f 	nop
   805e8:	d503201f 	nop
   805ec:	d503201f 	nop
   805f0:	d503201f 	nop
   805f4:	d503201f 	nop
   805f8:	d503201f 	nop
   805fc:	d503201f 	nop
   80600:	d503201f 	nop
   80604:	d503201f 	nop
   80608:	d503201f 	nop
   8060c:	d503201f 	nop
   80610:	d503201f 	nop
   80614:	d503201f 	nop
   80618:	d503201f 	nop
   8061c:	d503201f 	nop
   80620:	d503201f 	nop
   80624:	d503201f 	nop
   80628:	d503201f 	nop
   8062c:	d503201f 	nop
   80630:	d503201f 	nop
   80634:	d503201f 	nop
   80638:	d503201f 	nop
   8063c:	d503201f 	nop
   80640:	d503201f 	nop
   80644:	d503201f 	nop
   80648:	d503201f 	nop
   8064c:	d503201f 	nop
   80650:	d503201f 	nop
   80654:	d503201f 	nop
   80658:	d503201f 	nop
   8065c:	d503201f 	nop
   80660:	d503201f 	nop
   80664:	d503201f 	nop
   80668:	d503201f 	nop
   8066c:	d503201f 	nop
   80670:	d503201f 	nop
   80674:	d503201f 	nop
   80678:	d503201f 	nop
   8067c:	d503201f 	nop
   80680:	d503201f 	nop
   80684:	d503201f 	nop
   80688:	d503201f 	nop
   8068c:	d503201f 	nop
   80690:	d503201f 	nop
   80694:	d503201f 	nop
   80698:	d503201f 	nop
   8069c:	d503201f 	nop
   806a0:	d503201f 	nop
   806a4:	d503201f 	nop
   806a8:	d503201f 	nop
   806ac:	d503201f 	nop
   806b0:	d503201f 	nop
   806b4:	d503201f 	nop
   806b8:	d503201f 	nop
   806bc:	d503201f 	nop
   806c0:	d503201f 	nop
   806c4:	d503201f 	nop
   806c8:	d503201f 	nop
   806cc:	d503201f 	nop
   806d0:	d503201f 	nop
   806d4:	d503201f 	nop
   806d8:	d503201f 	nop
   806dc:	d503201f 	nop
   806e0:	d503201f 	nop
   806e4:	d503201f 	nop
   806e8:	d503201f 	nop
   806ec:	d503201f 	nop
   806f0:	d503201f 	nop
   806f4:	d503201f 	nop
   806f8:	d503201f 	nop
   806fc:	d503201f 	nop
   80700:	d503201f 	nop
   80704:	d503201f 	nop
   80708:	d503201f 	nop
   8070c:	d503201f 	nop
   80710:	d503201f 	nop
   80714:	d503201f 	nop
   80718:	d503201f 	nop
   8071c:	d503201f 	nop
   80720:	d503201f 	nop
   80724:	d503201f 	nop
   80728:	d503201f 	nop
   8072c:	d503201f 	nop
   80730:	d503201f 	nop
   80734:	d503201f 	nop
   80738:	d503201f 	nop
   8073c:	d503201f 	nop
   80740:	d503201f 	nop
   80744:	d503201f 	nop
   80748:	d503201f 	nop
   8074c:	d503201f 	nop
   80750:	d503201f 	nop
   80754:	d503201f 	nop
   80758:	d503201f 	nop
   8075c:	d503201f 	nop
   80760:	d503201f 	nop
   80764:	d503201f 	nop
   80768:	d503201f 	nop
   8076c:	d503201f 	nop
   80770:	d503201f 	nop
   80774:	d503201f 	nop
   80778:	d503201f 	nop
   8077c:	d503201f 	nop
   80780:	d503201f 	nop
   80784:	d503201f 	nop
   80788:	d503201f 	nop
   8078c:	d503201f 	nop
   80790:	d503201f 	nop
   80794:	d503201f 	nop
   80798:	d503201f 	nop
   8079c:	d503201f 	nop
   807a0:	d503201f 	nop
   807a4:	d503201f 	nop
   807a8:	d503201f 	nop
   807ac:	d503201f 	nop
   807b0:	d503201f 	nop
   807b4:	d503201f 	nop
   807b8:	d503201f 	nop
   807bc:	d503201f 	nop
   807c0:	d503201f 	nop
   807c4:	d503201f 	nop
   807c8:	d503201f 	nop
   807cc:	d503201f 	nop
   807d0:	d503201f 	nop
   807d4:	d503201f 	nop
   807d8:	d503201f 	nop
   807dc:	d503201f 	nop
   807e0:	d503201f 	nop
   807e4:	d503201f 	nop
   807e8:	d503201f 	nop
   807ec:	d503201f 	nop
   807f0:	d503201f 	nop
   807f4:	d503201f 	nop
   807f8:	d503201f 	nop
   807fc:	d503201f 	nop

0000000000080800 <_vectors>:
	// important, code has to be properly aligned
	.align 11
_vectors:
	// synchronous
	.align  7
	mov     x0, #1
   80800:	d2800020 	mov	x0, #0x1                   	// #1
	bl      set_ACT_LED
   80804:	94004121 	bl	90c88 <set_ACT_LED>
	str     x30, [sp, #-16]!     // push x30
   80808:	f81f0ffe 	str	x30, [sp, #-16]!
	bl      dbg_saveregs
   8080c:	97fffe2e 	bl	800c4 <dbg_saveregs>
	mov     x0, #0
   80810:	d2800000 	mov	x0, #0x0                   	// #0
	bl      dbg_decodeexc
   80814:	94003ddf 	bl	8ff90 <dbg_decodeexc>
	bl      dbg_main
   80818:	94003f9c 	bl	90688 <dbg_main>
	eret
   8081c:	d69f03e0 	eret
   80820:	d503201f 	nop
   80824:	d503201f 	nop
   80828:	d503201f 	nop
   8082c:	d503201f 	nop
   80830:	d503201f 	nop
   80834:	d503201f 	nop
   80838:	d503201f 	nop
   8083c:	d503201f 	nop
   80840:	d503201f 	nop
   80844:	d503201f 	nop
   80848:	d503201f 	nop
   8084c:	d503201f 	nop
   80850:	d503201f 	nop
   80854:	d503201f 	nop
   80858:	d503201f 	nop
   8085c:	d503201f 	nop
   80860:	d503201f 	nop
   80864:	d503201f 	nop
   80868:	d503201f 	nop
   8086c:	d503201f 	nop
   80870:	d503201f 	nop
   80874:	d503201f 	nop
   80878:	d503201f 	nop
   8087c:	d503201f 	nop

	// IRQ
	.align  7
	str     x30, [sp, #-16]!     // push x30
   80880:	f81f0ffe 	str	x30, [sp, #-16]!
	bl      dbg_saveregs
   80884:	97fffe10 	bl	800c4 <dbg_saveregs>
	mov     x0, #1
   80888:	d2800020 	mov	x0, #0x1                   	// #1
	bl      dbg_decodeexc
   8088c:	94003dc1 	bl	8ff90 <dbg_decodeexc>
	bl      dbg_main
   80890:	94003f7e 	bl	90688 <dbg_main>
	eret
   80894:	d69f03e0 	eret
   80898:	d503201f 	nop
   8089c:	d503201f 	nop
   808a0:	d503201f 	nop
   808a4:	d503201f 	nop
   808a8:	d503201f 	nop
   808ac:	d503201f 	nop
   808b0:	d503201f 	nop
   808b4:	d503201f 	nop
   808b8:	d503201f 	nop
   808bc:	d503201f 	nop
   808c0:	d503201f 	nop
   808c4:	d503201f 	nop
   808c8:	d503201f 	nop
   808cc:	d503201f 	nop
   808d0:	d503201f 	nop
   808d4:	d503201f 	nop
   808d8:	d503201f 	nop
   808dc:	d503201f 	nop
   808e0:	d503201f 	nop
   808e4:	d503201f 	nop
   808e8:	d503201f 	nop
   808ec:	d503201f 	nop
   808f0:	d503201f 	nop
   808f4:	d503201f 	nop
   808f8:	d503201f 	nop
   808fc:	d503201f 	nop

	// FIQ
	.align  7
	str     x30, [sp, #-16]!     // push x30
   80900:	f81f0ffe 	str	x30, [sp, #-16]!
	bl      dbg_saveregs
   80904:	97fffdf0 	bl	800c4 <dbg_saveregs>
	mov     x0, #2
   80908:	d2800040 	mov	x0, #0x2                   	// #2
	bl      dbg_decodeexc
   8090c:	94003da1 	bl	8ff90 <dbg_decodeexc>
	bl      dbg_main
   80910:	94003f5e 	bl	90688 <dbg_main>
	eret
   80914:	d69f03e0 	eret
   80918:	d503201f 	nop
   8091c:	d503201f 	nop
   80920:	d503201f 	nop
   80924:	d503201f 	nop
   80928:	d503201f 	nop
   8092c:	d503201f 	nop
   80930:	d503201f 	nop
   80934:	d503201f 	nop
   80938:	d503201f 	nop
   8093c:	d503201f 	nop
   80940:	d503201f 	nop
   80944:	d503201f 	nop
   80948:	d503201f 	nop
   8094c:	d503201f 	nop
   80950:	d503201f 	nop
   80954:	d503201f 	nop
   80958:	d503201f 	nop
   8095c:	d503201f 	nop
   80960:	d503201f 	nop
   80964:	d503201f 	nop
   80968:	d503201f 	nop
   8096c:	d503201f 	nop
   80970:	d503201f 	nop
   80974:	d503201f 	nop
   80978:	d503201f 	nop
   8097c:	d503201f 	nop

	// SError
	.align  7
	str     x30, [sp, #-16]!     // push x30
   80980:	f81f0ffe 	str	x30, [sp, #-16]!
	bl      dbg_saveregs
   80984:	97fffdd0 	bl	800c4 <dbg_saveregs>
	mov     x0, #3
   80988:	d2800060 	mov	x0, #0x3                   	// #3
	bl      dbg_decodeexc
   8098c:	94003d81 	bl	8ff90 <dbg_decodeexc>
	bl      dbg_main
   80990:	94003f3e 	bl	90688 <dbg_main>
eret
   80994:	d69f03e0 	eret
   80998:	00080800 	.word	0x00080800
   8099c:	00000000 	.word	0x00000000
   809a0:	00070000 	.word	0x00070000
   809a4:	00000000 	.word	0x00000000
   809a8:	00080000 	.word	0x00080000
   809ac:	00000000 	.word	0x00000000
   809b0:	015d59b0 	.word	0x015d59b0
   809b4:	00000000 	.word	0x00000000
   809b8:	013dd4a0 	.word	0x013dd4a0
   809bc:	00000000 	.word	0x00000000
   809c0:	015d56c8 	.word	0x015d56c8
   809c4:	00000000 	.word	0x00000000

00000000000809c8 <ammount_to_alloc_with_symbols>:
    console_print(s);
    free(s);
}

size_t ammount_to_alloc_with_symbols(char *str, __builtin_va_list args)
{
   809c8:	a9bd7bfd 	stp	x29, x30, [sp, #-48]!
   809cc:	910003fd 	mov	x29, sp
   809d0:	a90153f3 	stp	x19, x20, [sp, #16]
   809d4:	aa0003f4 	mov	x20, x0
   809d8:	a9025bf5 	stp	x21, x22, [sp, #32]
   809dc:	aa0103f5 	mov	x21, x1
	//The purpose of this function is to determine how much memory needs to be allocated to
	//contain the output of vsprintf
	unsigned long val = 0, len, counter;

	val = strlen(str);
   809e0:	94000622 	bl	82268 <strlen>

	while(*str)
   809e4:	39400282 	ldrb	w2, [x20]
	val = strlen(str);
   809e8:	93407c00 	sxtw	x0, w0
	while(*str)
   809ec:	35000082 	cbnz	w2, 809fc <ammount_to_alloc_with_symbols+0x34>
   809f0:	1400002b 	b	80a9c <ammount_to_alloc_with_symbols+0xd4>
			{
				val -= 2;       
	        		val += strlen((char *)__builtin_va_arg(args, char *));
			}	
		}
		str++;
   809f4:	aa1303f4 	mov	x20, x19
	while(*str)
   809f8:	34000522 	cbz	w2, 80a9c <ammount_to_alloc_with_symbols+0xd4>
		if(*str == '%')
   809fc:	7100945f 	cmp	w2, #0x25
   80a00:	91000693 	add	x19, x20, #0x1
   80a04:	39400682 	ldrb	w2, [x20, #1]
   80a08:	54ffff61 	b.ne	809f4 <ammount_to_alloc_with_symbols+0x2c>  // b.any
			if(*str == '%')
   80a0c:	7100945f 	cmp	w2, #0x25
   80a10:	54000800 	b.eq	80b10 <ammount_to_alloc_with_symbols+0x148>  // b.none
			while(*str >= '0' && *str <= '9')
   80a14:	5100c044 	sub	w4, w2, #0x30
   80a18:	12001c81 	and	w1, w4, #0xff
   80a1c:	7100243f 	cmp	w1, #0x9
   80a20:	540001e8 	b.hi	80a5c <ammount_to_alloc_with_symbols+0x94>  // b.pmore
			counter = 0;
   80a24:	d2800005 	mov	x5, #0x0                   	// #0
			len = 0;
   80a28:	d2800003 	mov	x3, #0x0                   	// #0
   80a2c:	d503201f 	nop
			while(*str >= '0' && *str <= '9')
   80a30:	38401e62 	ldrb	w2, [x19, #1]!
				len += *str - '0';
   80a34:	93407c87 	sxtw	x7, w4
				len *= 10;
   80a38:	8b030863 	add	x3, x3, x3, lsl #2
				counter++;
   80a3c:	910004a5 	add	x5, x5, #0x1
			while(*str >= '0' && *str <= '9')
   80a40:	5100c044 	sub	w4, w2, #0x30
   80a44:	12001c86 	and	w6, w4, #0xff
				len += *str - '0';
   80a48:	8b0304e3 	add	x3, x7, x3, lsl #1
			while(*str >= '0' && *str <= '9')
   80a4c:	710024df 	cmp	w6, #0x9
   80a50:	54ffff09 	b.ls	80a30 <ammount_to_alloc_with_symbols+0x68>  // b.plast
   80a54:	8b000063 	add	x3, x3, x0
   80a58:	cb050060 	sub	x0, x3, x5
			if(*str == 'c')
   80a5c:	71018c5f 	cmp	w2, #0x63
   80a60:	54000260 	b.eq	80aac <ammount_to_alloc_with_symbols+0xe4>  // b.none
			if(*str == 'd')
   80a64:	7101905f 	cmp	w2, #0x64
   80a68:	54000580 	b.eq	80b18 <ammount_to_alloc_with_symbols+0x150>  // b.none
			if(*str == 'x')
   80a6c:	7101e05f 	cmp	w2, #0x78
   80a70:	540002c1 	b.ne	80ac8 <ammount_to_alloc_with_symbols+0x100>  // b.any
				__builtin_va_arg(args, long int);	//because %x already has space
   80a74:	b9401aa2 	ldr	w2, [x21, #24]
				val += 18;				//Was 20 but reduced by two
   80a78:	91004800 	add	x0, x0, #0x12
				__builtin_va_arg(args, long int);	//because %x already has space
   80a7c:	f94002a1 	ldr	x1, [x21]
   80a80:	37f808c2 	tbnz	w2, #31, 80b98 <ammount_to_alloc_with_symbols+0x1d0>
   80a84:	38401e62 	ldrb	w2, [x19, #1]!
   80a88:	91003c21 	add	x1, x1, #0xf
   80a8c:	927df021 	and	x1, x1, #0xfffffffffffffff8
   80a90:	f90002a1 	str	x1, [x21]
		str++;
   80a94:	aa1303f4 	mov	x20, x19
	while(*str)
   80a98:	35fffb22 	cbnz	w2, 809fc <ammount_to_alloc_with_symbols+0x34>
	}
	__builtin_va_end(args);
	
	return (size_t)val;
}
   80a9c:	a94153f3 	ldp	x19, x20, [sp, #16]
   80aa0:	a9425bf5 	ldp	x21, x22, [sp, #32]
   80aa4:	a8c37bfd 	ldp	x29, x30, [sp], #48
   80aa8:	d65f03c0 	ret
				__builtin_va_arg(args, int);	//denoting a char %c and only one is
   80aac:	b9401aa3 	ldr	w3, [x21, #24]
				val--;				//Becuase there are two characters 
   80ab0:	d1000400 	sub	x0, x0, #0x1
				__builtin_va_arg(args, int);	//denoting a char %c and only one is
   80ab4:	f94002a1 	ldr	x1, [x21]
   80ab8:	37f80663 	tbnz	w3, #31, 80b84 <ammount_to_alloc_with_symbols+0x1bc>
   80abc:	91002c21 	add	x1, x1, #0xb
   80ac0:	927df021 	and	x1, x1, #0xfffffffffffffff8
   80ac4:	f90002a1 	str	x1, [x21]
   80ac8:	aa1303f4 	mov	x20, x19
			if(*str == 's')
   80acc:	91000673 	add	x19, x19, #0x1
   80ad0:	7101cc5f 	cmp	w2, #0x73
   80ad4:	54000060 	b.eq	80ae0 <ammount_to_alloc_with_symbols+0x118>  // b.none
   80ad8:	39400682 	ldrb	w2, [x20, #1]
   80adc:	17ffffc6 	b	809f4 <ammount_to_alloc_with_symbols+0x2c>
	        		val += strlen((char *)__builtin_va_arg(args, char *));
   80ae0:	b9401aa1 	ldr	w1, [x21, #24]
				val -= 2;       
   80ae4:	d1000816 	sub	x22, x0, #0x2
	        		val += strlen((char *)__builtin_va_arg(args, char *));
   80ae8:	f94002a0 	ldr	x0, [x21]
   80aec:	37f803e1 	tbnz	w1, #31, 80b68 <ammount_to_alloc_with_symbols+0x1a0>
   80af0:	91003c01 	add	x1, x0, #0xf
   80af4:	927df021 	and	x1, x1, #0xfffffffffffffff8
   80af8:	f90002a1 	str	x1, [x21]
   80afc:	f9400000 	ldr	x0, [x0]
   80b00:	940005da 	bl	82268 <strlen>
   80b04:	8b20c2c0 	add	x0, x22, w0, sxtw
   80b08:	39400682 	ldrb	w2, [x20, #1]
   80b0c:	17ffffba 	b	809f4 <ammount_to_alloc_with_symbols+0x2c>
				val--;	//Becuase two bytes have already been allocated for a one byte
   80b10:	d1000400 	sub	x0, x0, #0x1
			if(*str == 'c')
   80b14:	17ffffed 	b	80ac8 <ammount_to_alloc_with_symbols+0x100>
				__builtin_va_arg(args, int);	//because %d already has space
   80b18:	b9401aa3 	ldr	w3, [x21, #24]
				val += 18;			//Was 20 but reduced by two 
   80b1c:	91004800 	add	x0, x0, #0x12
				__builtin_va_arg(args, int);	//because %d already has space
   80b20:	f94002a1 	ldr	x1, [x21]
   80b24:	36f80183 	tbz	w3, #31, 80b54 <ammount_to_alloc_with_symbols+0x18c>
   80b28:	11002063 	add	w3, w3, #0x8
   80b2c:	b9001aa3 	str	w3, [x21, #24]
   80b30:	7100007f 	cmp	w3, #0x0
   80b34:	5400008d 	b.le	80b44 <ammount_to_alloc_with_symbols+0x17c>
   80b38:	91002c21 	add	x1, x1, #0xb
   80b3c:	927df021 	and	x1, x1, #0xfffffffffffffff8
   80b40:	f90002a1 	str	x1, [x21]
			if(*str == 's')
   80b44:	aa1303f4 	mov	x20, x19
   80b48:	91000673 	add	x19, x19, #0x1
   80b4c:	39400682 	ldrb	w2, [x20, #1]
   80b50:	17ffffa9 	b	809f4 <ammount_to_alloc_with_symbols+0x2c>
				__builtin_va_arg(args, int);	//because %d already has space
   80b54:	91002c21 	add	x1, x1, #0xb
   80b58:	aa1303f4 	mov	x20, x19
   80b5c:	927df021 	and	x1, x1, #0xfffffffffffffff8
   80b60:	f90002a1 	str	x1, [x21]
			if(*str == 'x')
   80b64:	17ffffda 	b	80acc <ammount_to_alloc_with_symbols+0x104>
	        		val += strlen((char *)__builtin_va_arg(args, char *));
   80b68:	11002022 	add	w2, w1, #0x8
   80b6c:	b9001aa2 	str	w2, [x21, #24]
   80b70:	7100005f 	cmp	w2, #0x0
   80b74:	54fffbec 	b.gt	80af0 <ammount_to_alloc_with_symbols+0x128>
   80b78:	f94006a0 	ldr	x0, [x21, #8]
   80b7c:	8b21c000 	add	x0, x0, w1, sxtw
   80b80:	17ffffdf 	b	80afc <ammount_to_alloc_with_symbols+0x134>
				__builtin_va_arg(args, int);	//denoting a char %c and only one is
   80b84:	11002063 	add	w3, w3, #0x8
   80b88:	b9001aa3 	str	w3, [x21, #24]
   80b8c:	7100007f 	cmp	w3, #0x0
   80b90:	54fff96c 	b.gt	80abc <ammount_to_alloc_with_symbols+0xf4>
   80b94:	17ffffcd 	b	80ac8 <ammount_to_alloc_with_symbols+0x100>
				__builtin_va_arg(args, long int);	//because %x already has space
   80b98:	11002042 	add	w2, w2, #0x8
   80b9c:	b9001aa2 	str	w2, [x21, #24]
   80ba0:	7100005f 	cmp	w2, #0x0
   80ba4:	54fff70c 	b.gt	80a84 <ammount_to_alloc_with_symbols+0xbc>
			if(*str == 's')
   80ba8:	38401e62 	ldrb	w2, [x19, #1]!
   80bac:	17ffffba 	b	80a94 <ammount_to_alloc_with_symbols+0xcc>

0000000000080bb0 <printf>:
void printf(char *fmt, ...) {
   80bb0:	a9ac7bfd 	stp	x29, x30, [sp, #-320]!
    __builtin_va_start(args, fmt);
   80bb4:	128006e9 	mov	w9, #0xffffffc8            	// #-56
   80bb8:	12800fe8 	mov	w8, #0xffffff80            	// #-128
void printf(char *fmt, ...) {
   80bbc:	910003fd 	mov	x29, sp
    __builtin_va_start(args, fmt);
   80bc0:	910403ea 	add	x10, sp, #0x100
   80bc4:	910503eb 	add	x11, sp, #0x140
   80bc8:	a9042feb 	stp	x11, x11, [sp, #64]
   80bcc:	f9002bea 	str	x10, [sp, #80]
   80bd0:	290b23e9 	stp	w9, w8, [sp, #88]
    __builtin_va_copy(args2, args);
   80bd4:	a9442fea 	ldp	x10, x11, [sp, #64]
void printf(char *fmt, ...) {
   80bd8:	a9108be1 	stp	x1, x2, [sp, #264]
    char *s = malloc(ammount_to_alloc_with_symbols(fmt, args2));
   80bdc:	910083e1 	add	x1, sp, #0x20
    __builtin_va_copy(args2, args);
   80be0:	a94527e8 	ldp	x8, x9, [sp, #80]
void printf(char *fmt, ...) {
   80be4:	a90153f3 	stp	x19, x20, [sp, #16]
   80be8:	aa0003f4 	mov	x20, x0
    char *s = malloc(ammount_to_alloc_with_symbols(fmt, args2));
   80bec:	a9022fea 	stp	x10, x11, [sp, #32]
   80bf0:	a90327e8 	stp	x8, x9, [sp, #48]
    __builtin_va_copy(args2, args);
   80bf4:	a9062fea 	stp	x10, x11, [sp, #96]
   80bf8:	a90727e8 	stp	x8, x9, [sp, #112]
void printf(char *fmt, ...) {
   80bfc:	3d8023e0 	str	q0, [sp, #128]
   80c00:	3d8027e1 	str	q1, [sp, #144]
   80c04:	3d802be2 	str	q2, [sp, #160]
   80c08:	3d802fe3 	str	q3, [sp, #176]
   80c0c:	3d8033e4 	str	q4, [sp, #192]
   80c10:	3d8037e5 	str	q5, [sp, #208]
   80c14:	3d803be6 	str	q6, [sp, #224]
   80c18:	3d803fe7 	str	q7, [sp, #240]
   80c1c:	a91193e3 	stp	x3, x4, [sp, #280]
   80c20:	a9129be5 	stp	x5, x6, [sp, #296]
   80c24:	f9009fe7 	str	x7, [sp, #312]
    char *s = malloc(ammount_to_alloc_with_symbols(fmt, args2));
   80c28:	97ffff68 	bl	809c8 <ammount_to_alloc_with_symbols>
   80c2c:	94003fcb 	bl	90b58 <malloc>
   80c30:	aa0003f3 	mov	x19, x0
    vsprintf(s,fmt,args);
   80c34:	a94417e4 	ldp	x4, x5, [sp, #64]
   80c38:	a90217e4 	stp	x4, x5, [sp, #32]
   80c3c:	910083e2 	add	x2, sp, #0x20
   80c40:	a94517e4 	ldp	x4, x5, [sp, #80]
   80c44:	aa1403e1 	mov	x1, x20
   80c48:	a90317e4 	stp	x4, x5, [sp, #48]
   80c4c:	94000381 	bl	81a50 <vsprintf>
    console_print(s);
   80c50:	aa1303e0 	mov	x0, x19
   80c54:	9400066f 	bl	82610 <console_print>
    free(s);
   80c58:	aa1303e0 	mov	x0, x19
   80c5c:	94003ff5 	bl	90c30 <free>
}
   80c60:	a94153f3 	ldp	x19, x20, [sp, #16]
   80c64:	a8d47bfd 	ldp	x29, x30, [sp], #320
   80c68:	d65f03c0 	ret
   80c6c:	00000000 	.inst	0x00000000 ; undefined

0000000000080c70 <Stepper2WireInit>:
#include "headers/project.h"

void Stepper2WireInit(int number_of_steps, int motor_pin_1, int motor_pin_2, StepperMotor *Stepper)
{
   80c70:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   80c74:	910003fd 	mov	x29, sp
   80c78:	f9000bf3 	str	x19, [sp, #16]
   80c7c:	aa0303f3 	mov	x19, x3
   80c80:	2a0103e3 	mov	w3, w1
  // Arduino pins for the motor control connection:
  Stepper->motor_pin_1 = motor_pin_1;
  Stepper->motor_pin_2 = motor_pin_2;

  // setup the pins on the microcontroller:
  pinMode(Stepper->motor_pin_1, GPIO_OUTPUT);
   80c84:	52800021 	mov	w1, #0x1                   	// #1
  Stepper->direction = 0;      // motor direction
   80c88:	b900027f 	str	wzr, [x19]
  Stepper->number_of_steps = number_of_steps; // total number of steps for this motor
   80c8c:	b9001260 	str	w0, [x19, #16]
  pinMode(Stepper->motor_pin_1, GPIO_OUTPUT);
   80c90:	2a0303e0 	mov	w0, w3
  Stepper->motor_pin_1 = motor_pin_1;
   80c94:	29030e7f 	stp	wzr, w3, [x19, #24]
  Stepper->motor_pin_2 = motor_pin_2;
   80c98:	b9002262 	str	w2, [x19, #32]
  Stepper->last_step_time = 0; // time stamp in us of the last step taken
   80c9c:	f9001a7f 	str	xzr, [x19, #48]
  pinMode(Stepper->motor_pin_1, GPIO_OUTPUT);
   80ca0:	94000808 	bl	82cc0 <pinMode>
  pinMode(Stepper->motor_pin_2, GPIO_OUTPUT);
   80ca4:	b9402260 	ldr	w0, [x19, #32]
   80ca8:	52800021 	mov	w1, #0x1                   	// #1
   80cac:	94000805 	bl	82cc0 <pinMode>

  // When there are only 2 pins, set the others to 0:
  Stepper->motor_pin_3 = 0;
   80cb0:	b900267f 	str	wzr, [x19, #36]
  Stepper->motor_pin_4 = 0;
  Stepper->motor_pin_5 = 0;

  // pin_count is used by the stepMotor() method:
  Stepper->pin_count = 2;
   80cb4:	52800040 	mov	w0, #0x2                   	// #2
   80cb8:	b9001660 	str	w0, [x19, #20]
  Stepper->motor_pin_4 = 0;
   80cbc:	f900167f 	str	xzr, [x19, #40]
}
   80cc0:	f9400bf3 	ldr	x19, [sp, #16]
   80cc4:	a8c27bfd 	ldp	x29, x30, [sp], #32
   80cc8:	d65f03c0 	ret
   80ccc:	d503201f 	nop

0000000000080cd0 <Stepper4WireInit>:
/*
 *   constructor for four-pin version
 *   Sets which wires should control the motor.
 */
void Stepper4WireInit(int number_of_steps, int motor_pin_1, int motor_pin_2, int motor_pin_3, int motor_pin_4, StepperMotor *Stepper)
{
   80cd0:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   80cd4:	910003fd 	mov	x29, sp
   80cd8:	f9000bf3 	str	x19, [sp, #16]
   80cdc:	aa0503f3 	mov	x19, x5
   80ce0:	2a0103e5 	mov	w5, w1
  Stepper->motor_pin_2 = motor_pin_2;
  Stepper->motor_pin_3 = motor_pin_3;
  Stepper->motor_pin_4 = motor_pin_4;

  // setup the pins on the microcontroller:
  pinMode(Stepper->motor_pin_1, GPIO_OUTPUT);
   80ce4:	52800021 	mov	w1, #0x1                   	// #1
  Stepper->direction = 0;      // motor direction
   80ce8:	b900027f 	str	wzr, [x19]
  Stepper->number_of_steps = number_of_steps; // total number of steps for this motor
   80cec:	b9001260 	str	w0, [x19, #16]
  pinMode(Stepper->motor_pin_1, GPIO_OUTPUT);
   80cf0:	2a0503e0 	mov	w0, w5
  Stepper->motor_pin_1 = motor_pin_1;
   80cf4:	2903167f 	stp	wzr, w5, [x19, #24]
  Stepper->motor_pin_3 = motor_pin_3;
   80cf8:	29040e62 	stp	w2, w3, [x19, #32]
  Stepper->motor_pin_4 = motor_pin_4;
   80cfc:	b9002a64 	str	w4, [x19, #40]
  Stepper->last_step_time = 0; // time stamp in us of the last step taken
   80d00:	f9001a7f 	str	xzr, [x19, #48]
  pinMode(Stepper->motor_pin_1, GPIO_OUTPUT);
   80d04:	940007ef 	bl	82cc0 <pinMode>
  pinMode(Stepper->motor_pin_2, GPIO_OUTPUT);
   80d08:	b9402260 	ldr	w0, [x19, #32]
   80d0c:	52800021 	mov	w1, #0x1                   	// #1
   80d10:	940007ec 	bl	82cc0 <pinMode>
  pinMode(Stepper->motor_pin_3, GPIO_OUTPUT);
   80d14:	b9402660 	ldr	w0, [x19, #36]
   80d18:	52800021 	mov	w1, #0x1                   	// #1
   80d1c:	940007e9 	bl	82cc0 <pinMode>
  pinMode(Stepper->motor_pin_4, GPIO_OUTPUT);
   80d20:	b9402a60 	ldr	w0, [x19, #40]
   80d24:	52800021 	mov	w1, #0x1                   	// #1
   80d28:	940007e6 	bl	82cc0 <pinMode>

  // When there are 4 pins, set the others to 0:
  Stepper->motor_pin_5 = 0;
   80d2c:	b9002e7f 	str	wzr, [x19, #44]

  // pin_count is used by the stepMotor() method:
  Stepper->pin_count = 4;
   80d30:	52800080 	mov	w0, #0x4                   	// #4
   80d34:	b9001660 	str	w0, [x19, #20]
}
   80d38:	f9400bf3 	ldr	x19, [sp, #16]
   80d3c:	a8c27bfd 	ldp	x29, x30, [sp], #32
   80d40:	d65f03c0 	ret
   80d44:	d503201f 	nop

0000000000080d48 <Stepper5WireInit>:
/*
 *   constructor for five phase motor with five wires
 *   Sets which wires should control the motor.
 */
void Stepper5WireInit(int number_of_steps, int motor_pin_1, int motor_pin_2, int motor_pin_3, int motor_pin_4, int motor_pin_5, StepperMotor *Stepper)
{
   80d48:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   80d4c:	910003fd 	mov	x29, sp
   80d50:	f9000bf3 	str	x19, [sp, #16]
   80d54:	aa0603f3 	mov	x19, x6
   80d58:	2a0103e6 	mov	w6, w1
  Stepper->motor_pin_3 = motor_pin_3;
  Stepper->motor_pin_4 = motor_pin_4;
  Stepper->motor_pin_5 = motor_pin_5;

  // setup the pins on the microcontroller:
  pinMode(Stepper->motor_pin_1, GPIO_OUTPUT);
   80d5c:	52800021 	mov	w1, #0x1                   	// #1
  Stepper->direction = 0;      // motor direction
   80d60:	b900027f 	str	wzr, [x19]
  Stepper->number_of_steps = number_of_steps; // total number of steps for this motor
   80d64:	b9001260 	str	w0, [x19, #16]
  pinMode(Stepper->motor_pin_1, GPIO_OUTPUT);
   80d68:	2a0603e0 	mov	w0, w6
  Stepper->motor_pin_1 = motor_pin_1;
   80d6c:	29031a7f 	stp	wzr, w6, [x19, #24]
  Stepper->motor_pin_3 = motor_pin_3;
   80d70:	29040e62 	stp	w2, w3, [x19, #32]
  Stepper->motor_pin_5 = motor_pin_5;
   80d74:	29051664 	stp	w4, w5, [x19, #40]
  Stepper->last_step_time = 0; // time stamp in us of the last step taken
   80d78:	f9001a7f 	str	xzr, [x19, #48]
  pinMode(Stepper->motor_pin_1, GPIO_OUTPUT);
   80d7c:	940007d1 	bl	82cc0 <pinMode>
  pinMode(Stepper->motor_pin_2, GPIO_OUTPUT);
   80d80:	b9402260 	ldr	w0, [x19, #32]
   80d84:	52800021 	mov	w1, #0x1                   	// #1
   80d88:	940007ce 	bl	82cc0 <pinMode>
  pinMode(Stepper->motor_pin_3, GPIO_OUTPUT);
   80d8c:	b9402660 	ldr	w0, [x19, #36]
   80d90:	52800021 	mov	w1, #0x1                   	// #1
   80d94:	940007cb 	bl	82cc0 <pinMode>
  pinMode(Stepper->motor_pin_4, GPIO_OUTPUT);
   80d98:	b9402a60 	ldr	w0, [x19, #40]
   80d9c:	52800021 	mov	w1, #0x1                   	// #1
   80da0:	940007c8 	bl	82cc0 <pinMode>
  pinMode(Stepper->motor_pin_5, GPIO_OUTPUT);
   80da4:	b9402e60 	ldr	w0, [x19, #44]
   80da8:	52800021 	mov	w1, #0x1                   	// #1
   80dac:	940007c5 	bl	82cc0 <pinMode>

  // pin_count is used by the stepStepperMotor() function:
  Stepper->pin_count = 5;
   80db0:	528000a0 	mov	w0, #0x5                   	// #5
   80db4:	b9001660 	str	w0, [x19, #20]
}
   80db8:	f9400bf3 	ldr	x19, [sp, #16]
   80dbc:	a8c27bfd 	ldp	x29, x30, [sp], #32
   80dc0:	d65f03c0 	ret
   80dc4:	d503201f 	nop

0000000000080dc8 <setStepperSpeed>:
/*
 * Sets the speed in revs per minute
 */
void setStepperSpeed(long whatSpeed, StepperMotor *Stepper)
{
  Stepper->step_delay = 60L * 1000L * 1000L / Stepper->number_of_steps / whatSpeed;
   80dc8:	b9801023 	ldrsw	x3, [x1, #16]
   80dcc:	d290e002 	mov	x2, #0x8700                	// #34560
   80dd0:	f2a07262 	movk	x2, #0x393, lsl #16
   80dd4:	9ac30c42 	sdiv	x2, x2, x3
   80dd8:	9ac00c40 	sdiv	x0, x2, x0
   80ddc:	f9000420 	str	x0, [x1, #8]
}
   80de0:	d65f03c0 	ret
   80de4:	d503201f 	nop

0000000000080de8 <stepStepperMotor>:

/*
 * Moves the motor forward or backwards.
 */
void stepStepperMotor(int thisStep, StepperMotor *Stepper)
{
   80de8:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   80dec:	910003fd 	mov	x29, sp
   80df0:	a90153f3 	stp	x19, x20, [sp, #16]
   80df4:	2a0003f4 	mov	w20, w0
  if (Stepper->pin_count == 2)
   80df8:	b9401420 	ldr	w0, [x1, #20]
{
   80dfc:	aa0103f3 	mov	x19, x1
  if (Stepper->pin_count == 2)
   80e00:	7100081f 	cmp	w0, #0x2
   80e04:	54000600 	b.eq	80ec4 <stepStepperMotor+0xdc>  // b.none
		digitalWrite(Stepper->motor_pin_1, LOW);
		digitalWrite(Stepper->motor_pin_2, LOW);
	  break;
	}
  }
  if (Stepper->pin_count == 4)
   80e08:	7100101f 	cmp	w0, #0x4
   80e0c:	540000c0 	b.eq	80e24 <stepStepperMotor+0x3c>  // b.none
		digitalWrite(Stepper->motor_pin_4, HIGH);
	  break;
	}
  }

  if (Stepper->pin_count == 5)
   80e10:	7100141f 	cmp	w0, #0x5
   80e14:	54000ac0 	b.eq	80f6c <stepStepperMotor+0x184>  // b.none
		digitalWrite(Stepper->motor_pin_4, LOW);
		digitalWrite(Stepper->motor_pin_5, HIGH);
		break;
	}
  }
}
   80e18:	a94153f3 	ldp	x19, x20, [sp, #16]
   80e1c:	a8c27bfd 	ldp	x29, x30, [sp], #32
   80e20:	d65f03c0 	ret
	switch (thisStep)
   80e24:	7100069f 	cmp	w20, #0x1
   80e28:	54001620 	b.eq	810ec <stepStepperMotor+0x304>  // b.none
   80e2c:	540002ad 	b.le	80e80 <stepStepperMotor+0x98>
   80e30:	71000a9f 	cmp	w20, #0x2
   80e34:	540012a0 	b.eq	81088 <stepStepperMotor+0x2a0>  // b.none
   80e38:	71000e9f 	cmp	w20, #0x3
   80e3c:	54fffee1 	b.ne	80e18 <stepStepperMotor+0x30>  // b.any
		digitalWrite(Stepper->motor_pin_1, HIGH);
   80e40:	b9401e60 	ldr	w0, [x19, #28]
   80e44:	52800021 	mov	w1, #0x1                   	// #1
   80e48:	940007a4 	bl	82cd8 <digitalWrite>
		digitalWrite(Stepper->motor_pin_2, LOW);
   80e4c:	b9402260 	ldr	w0, [x19, #32]
   80e50:	52800001 	mov	w1, #0x0                   	// #0
   80e54:	940007a1 	bl	82cd8 <digitalWrite>
		digitalWrite(Stepper->motor_pin_3, LOW);
   80e58:	b9402660 	ldr	w0, [x19, #36]
   80e5c:	52800001 	mov	w1, #0x0                   	// #0
   80e60:	9400079e 	bl	82cd8 <digitalWrite>
		digitalWrite(Stepper->motor_pin_4, HIGH);
   80e64:	b9402a60 	ldr	w0, [x19, #40]
   80e68:	52800021 	mov	w1, #0x1                   	// #1
   80e6c:	9400079b 	bl	82cd8 <digitalWrite>
  if (Stepper->pin_count == 5)
   80e70:	b9401660 	ldr	w0, [x19, #20]
   80e74:	7100141f 	cmp	w0, #0x5
   80e78:	54fffd01 	b.ne	80e18 <stepStepperMotor+0x30>  // b.any
   80e7c:	14000024 	b	80f0c <stepStepperMotor+0x124>
   80e80:	35fffcd4 	cbnz	w20, 80e18 <stepStepperMotor+0x30>
		digitalWrite(Stepper->motor_pin_1, HIGH);
   80e84:	b9401e60 	ldr	w0, [x19, #28]
   80e88:	52800021 	mov	w1, #0x1                   	// #1
   80e8c:	94000793 	bl	82cd8 <digitalWrite>
		digitalWrite(Stepper->motor_pin_2, LOW);
   80e90:	b9402260 	ldr	w0, [x19, #32]
   80e94:	52800001 	mov	w1, #0x0                   	// #0
   80e98:	94000790 	bl	82cd8 <digitalWrite>
		digitalWrite(Stepper->motor_pin_3, HIGH);
   80e9c:	b9402660 	ldr	w0, [x19, #36]
   80ea0:	52800021 	mov	w1, #0x1                   	// #1
   80ea4:	9400078d 	bl	82cd8 <digitalWrite>
		digitalWrite(Stepper->motor_pin_4, LOW);
   80ea8:	b9402a60 	ldr	w0, [x19, #40]
   80eac:	52800001 	mov	w1, #0x0                   	// #0
   80eb0:	9400078a 	bl	82cd8 <digitalWrite>
  if (Stepper->pin_count == 5)
   80eb4:	b9401660 	ldr	w0, [x19, #20]
   80eb8:	7100141f 	cmp	w0, #0x5
   80ebc:	54fffae1 	b.ne	80e18 <stepStepperMotor+0x30>  // b.any
   80ec0:	14000025 	b	80f54 <stepStepperMotor+0x16c>
	switch (thisStep)
   80ec4:	7100069f 	cmp	w20, #0x1
   80ec8:	54001000 	b.eq	810c8 <stepStepperMotor+0x2e0>  // b.none
   80ecc:	540002cd 	b.le	80f24 <stepStepperMotor+0x13c>
   80ed0:	71000a9f 	cmp	w20, #0x2
   80ed4:	54000c80 	b.eq	81064 <stepStepperMotor+0x27c>  // b.none
   80ed8:	71000e9f 	cmp	w20, #0x3
   80edc:	54fff9e1 	b.ne	80e18 <stepStepperMotor+0x30>  // b.any
		digitalWrite(Stepper->motor_pin_1, LOW);
   80ee0:	b9401e60 	ldr	w0, [x19, #28]
   80ee4:	52800001 	mov	w1, #0x0                   	// #0
   80ee8:	9400077c 	bl	82cd8 <digitalWrite>
		digitalWrite(Stepper->motor_pin_2, LOW);
   80eec:	b9402260 	ldr	w0, [x19, #32]
   80ef0:	52800001 	mov	w1, #0x0                   	// #0
   80ef4:	94000779 	bl	82cd8 <digitalWrite>
  if (Stepper->pin_count == 4)
   80ef8:	b9401660 	ldr	w0, [x19, #20]
   80efc:	7100101f 	cmp	w0, #0x4
   80f00:	54fffa00 	b.eq	80e40 <stepStepperMotor+0x58>  // b.none
  if (Stepper->pin_count == 5)
   80f04:	7100141f 	cmp	w0, #0x5
   80f08:	54fff881 	b.ne	80e18 <stepStepperMotor+0x30>  // b.any
		digitalWrite(Stepper->motor_pin_1, LOW);
   80f0c:	b9401e60 	ldr	w0, [x19, #28]
   80f10:	52800001 	mov	w1, #0x0                   	// #0
   80f14:	94000771 	bl	82cd8 <digitalWrite>
		digitalWrite(Stepper->motor_pin_2, HIGH);
   80f18:	52800021 	mov	w1, #0x1                   	// #1
   80f1c:	b9402260 	ldr	w0, [x19, #32]
   80f20:	14000088 	b	81140 <stepStepperMotor+0x358>
   80f24:	35fff7b4 	cbnz	w20, 80e18 <stepStepperMotor+0x30>
		digitalWrite(Stepper->motor_pin_1, LOW);
   80f28:	b9401e60 	ldr	w0, [x19, #28]
   80f2c:	52800001 	mov	w1, #0x0                   	// #0
   80f30:	9400076a 	bl	82cd8 <digitalWrite>
		digitalWrite(Stepper->motor_pin_2, HIGH);
   80f34:	b9402260 	ldr	w0, [x19, #32]
   80f38:	52800021 	mov	w1, #0x1                   	// #1
   80f3c:	94000767 	bl	82cd8 <digitalWrite>
  if (Stepper->pin_count == 4)
   80f40:	b9401660 	ldr	w0, [x19, #20]
   80f44:	7100101f 	cmp	w0, #0x4
   80f48:	54fff9e0 	b.eq	80e84 <stepStepperMotor+0x9c>  // b.none
  if (Stepper->pin_count == 5)
   80f4c:	7100141f 	cmp	w0, #0x5
   80f50:	54fff641 	b.ne	80e18 <stepStepperMotor+0x30>  // b.any
		digitalWrite(Stepper->motor_pin_1, LOW);
   80f54:	b9401e60 	ldr	w0, [x19, #28]
   80f58:	52800001 	mov	w1, #0x0                   	// #0
   80f5c:	9400075f 	bl	82cd8 <digitalWrite>
		digitalWrite(Stepper->motor_pin_2, HIGH);
   80f60:	52800021 	mov	w1, #0x1                   	// #1
   80f64:	b9402260 	ldr	w0, [x19, #32]
   80f68:	14000025 	b	80ffc <stepStepperMotor+0x214>
	switch (thisStep)
   80f6c:	7100129f 	cmp	w20, #0x4
   80f70:	54001460 	b.eq	811fc <stepStepperMotor+0x414>  // b.none
   80f74:	540005cd 	b.le	8102c <stepStepperMotor+0x244>
   80f78:	71001e9f 	cmp	w20, #0x7
   80f7c:	54001280 	b.eq	811cc <stepStepperMotor+0x3e4>  // b.none
   80f80:	540002cc 	b.gt	80fd8 <stepStepperMotor+0x1f0>
   80f84:	7100169f 	cmp	w20, #0x5
   80f88:	54000d20 	b.eq	8112c <stepStepperMotor+0x344>  // b.none
   80f8c:	71001a9f 	cmp	w20, #0x6
   80f90:	54fff441 	b.ne	80e18 <stepStepperMotor+0x30>  // b.any
		digitalWrite(Stepper->motor_pin_1, HIGH);
   80f94:	b9401e60 	ldr	w0, [x19, #28]
   80f98:	52800021 	mov	w1, #0x1                   	// #1
   80f9c:	9400074f 	bl	82cd8 <digitalWrite>
		digitalWrite(Stepper->motor_pin_2, LOW);
   80fa0:	b9402260 	ldr	w0, [x19, #32]
   80fa4:	52800001 	mov	w1, #0x0                   	// #0
   80fa8:	9400074c 	bl	82cd8 <digitalWrite>
		digitalWrite(Stepper->motor_pin_3, HIGH);
   80fac:	b9402660 	ldr	w0, [x19, #36]
   80fb0:	52800021 	mov	w1, #0x1                   	// #1
   80fb4:	94000749 	bl	82cd8 <digitalWrite>
		digitalWrite(Stepper->motor_pin_4, HIGH);
   80fb8:	b9402a60 	ldr	w0, [x19, #40]
   80fbc:	52800021 	mov	w1, #0x1                   	// #1
		digitalWrite(Stepper->motor_pin_4, LOW);
   80fc0:	94000746 	bl	82cd8 <digitalWrite>
		digitalWrite(Stepper->motor_pin_5, LOW);
   80fc4:	b9402e60 	ldr	w0, [x19, #44]
   80fc8:	52800001 	mov	w1, #0x0                   	// #0
}
   80fcc:	a94153f3 	ldp	x19, x20, [sp, #16]
   80fd0:	a8c27bfd 	ldp	x29, x30, [sp], #32
		digitalWrite(Stepper->motor_pin_5, LOW);
   80fd4:	14000741 	b	82cd8 <digitalWrite>
   80fd8:	7100229f 	cmp	w20, #0x8
   80fdc:	54000c00 	b.eq	8115c <stepStepperMotor+0x374>  // b.none
   80fe0:	7100269f 	cmp	w20, #0x9
   80fe4:	54fff1a1 	b.ne	80e18 <stepStepperMotor+0x30>  // b.any
		digitalWrite(Stepper->motor_pin_1, LOW);
   80fe8:	b9401e60 	ldr	w0, [x19, #28]
   80fec:	52800001 	mov	w1, #0x0                   	// #0
   80ff0:	9400073a 	bl	82cd8 <digitalWrite>
		digitalWrite(Stepper->motor_pin_2, LOW);
   80ff4:	b9402260 	ldr	w0, [x19, #32]
   80ff8:	52800001 	mov	w1, #0x0                   	// #0
   80ffc:	94000737 	bl	82cd8 <digitalWrite>
		digitalWrite(Stepper->motor_pin_3, HIGH);
   81000:	b9402660 	ldr	w0, [x19, #36]
   81004:	52800021 	mov	w1, #0x1                   	// #1
   81008:	94000734 	bl	82cd8 <digitalWrite>
		digitalWrite(Stepper->motor_pin_4, LOW);
   8100c:	b9402a60 	ldr	w0, [x19, #40]
   81010:	52800001 	mov	w1, #0x0                   	// #0
   81014:	94000731 	bl	82cd8 <digitalWrite>
		digitalWrite(Stepper->motor_pin_5, HIGH);
   81018:	b9402e60 	ldr	w0, [x19, #44]
   8101c:	52800021 	mov	w1, #0x1                   	// #1
}
   81020:	a94153f3 	ldp	x19, x20, [sp, #16]
   81024:	a8c27bfd 	ldp	x29, x30, [sp], #32
		digitalWrite(Stepper->motor_pin_5, HIGH);
   81028:	1400072c 	b	82cd8 <digitalWrite>
   8102c:	7100069f 	cmp	w20, #0x1
   81030:	54000a00 	b.eq	81170 <stepStepperMotor+0x388>  // b.none
   81034:	5400010d 	b.le	81054 <stepStepperMotor+0x26c>
   81038:	71000a9f 	cmp	w20, #0x2
   8103c:	54000b00 	b.eq	8119c <stepStepperMotor+0x3b4>  // b.none
   81040:	71000e9f 	cmp	w20, #0x3
   81044:	54fff640 	b.eq	80f0c <stepStepperMotor+0x124>  // b.none
}
   81048:	a94153f3 	ldp	x19, x20, [sp, #16]
   8104c:	a8c27bfd 	ldp	x29, x30, [sp], #32
   81050:	d65f03c0 	ret
   81054:	34fff814 	cbz	w20, 80f54 <stepStepperMotor+0x16c>
   81058:	a94153f3 	ldp	x19, x20, [sp, #16]
   8105c:	a8c27bfd 	ldp	x29, x30, [sp], #32
   81060:	d65f03c0 	ret
		digitalWrite(Stepper->motor_pin_1, HIGH);
   81064:	b9401e60 	ldr	w0, [x19, #28]
   81068:	52800021 	mov	w1, #0x1                   	// #1
   8106c:	9400071b 	bl	82cd8 <digitalWrite>
		digitalWrite(Stepper->motor_pin_2, LOW);
   81070:	b9402260 	ldr	w0, [x19, #32]
   81074:	52800001 	mov	w1, #0x0                   	// #0
   81078:	94000718 	bl	82cd8 <digitalWrite>
  if (Stepper->pin_count == 4)
   8107c:	b9401660 	ldr	w0, [x19, #20]
   81080:	7100101f 	cmp	w0, #0x4
   81084:	54000881 	b.ne	81194 <stepStepperMotor+0x3ac>  // b.any
		digitalWrite(Stepper->motor_pin_1, LOW);
   81088:	b9401e60 	ldr	w0, [x19, #28]
   8108c:	52800001 	mov	w1, #0x0                   	// #0
   81090:	94000712 	bl	82cd8 <digitalWrite>
		digitalWrite(Stepper->motor_pin_2, HIGH);
   81094:	b9402260 	ldr	w0, [x19, #32]
   81098:	52800021 	mov	w1, #0x1                   	// #1
   8109c:	9400070f 	bl	82cd8 <digitalWrite>
		digitalWrite(Stepper->motor_pin_3, LOW);
   810a0:	b9402660 	ldr	w0, [x19, #36]
   810a4:	52800001 	mov	w1, #0x0                   	// #0
   810a8:	9400070c 	bl	82cd8 <digitalWrite>
		digitalWrite(Stepper->motor_pin_4, HIGH);
   810ac:	b9402a60 	ldr	w0, [x19, #40]
   810b0:	52800021 	mov	w1, #0x1                   	// #1
   810b4:	94000709 	bl	82cd8 <digitalWrite>
  if (Stepper->pin_count == 5)
   810b8:	b9401660 	ldr	w0, [x19, #20]
   810bc:	7100141f 	cmp	w0, #0x5
   810c0:	54ffeac1 	b.ne	80e18 <stepStepperMotor+0x30>  // b.any
   810c4:	14000036 	b	8119c <stepStepperMotor+0x3b4>
		digitalWrite(Stepper->motor_pin_1, HIGH);
   810c8:	b9401e60 	ldr	w0, [x19, #28]
   810cc:	2a1403e1 	mov	w1, w20
   810d0:	94000702 	bl	82cd8 <digitalWrite>
		digitalWrite(Stepper->motor_pin_2, HIGH);
   810d4:	b9402260 	ldr	w0, [x19, #32]
   810d8:	2a1403e1 	mov	w1, w20
   810dc:	940006ff 	bl	82cd8 <digitalWrite>
  if (Stepper->pin_count == 4)
   810e0:	b9401660 	ldr	w0, [x19, #20]
   810e4:	7100101f 	cmp	w0, #0x4
   810e8:	54000401 	b.ne	81168 <stepStepperMotor+0x380>  // b.any
		digitalWrite(Stepper->motor_pin_1, LOW);
   810ec:	b9401e60 	ldr	w0, [x19, #28]
   810f0:	52800001 	mov	w1, #0x0                   	// #0
   810f4:	940006f9 	bl	82cd8 <digitalWrite>
		digitalWrite(Stepper->motor_pin_2, HIGH);
   810f8:	b9402260 	ldr	w0, [x19, #32]
   810fc:	52800021 	mov	w1, #0x1                   	// #1
   81100:	940006f6 	bl	82cd8 <digitalWrite>
		digitalWrite(Stepper->motor_pin_3, HIGH);
   81104:	b9402660 	ldr	w0, [x19, #36]
   81108:	52800021 	mov	w1, #0x1                   	// #1
   8110c:	940006f3 	bl	82cd8 <digitalWrite>
		digitalWrite(Stepper->motor_pin_4, LOW);
   81110:	b9402a60 	ldr	w0, [x19, #40]
   81114:	52800001 	mov	w1, #0x0                   	// #0
   81118:	940006f0 	bl	82cd8 <digitalWrite>
  if (Stepper->pin_count == 5)
   8111c:	b9401660 	ldr	w0, [x19, #20]
   81120:	7100141f 	cmp	w0, #0x5
   81124:	54ffe7a1 	b.ne	80e18 <stepStepperMotor+0x30>  // b.any
   81128:	14000012 	b	81170 <stepStepperMotor+0x388>
		digitalWrite(Stepper->motor_pin_1, HIGH);
   8112c:	b9401e60 	ldr	w0, [x19, #28]
   81130:	52800021 	mov	w1, #0x1                   	// #1
   81134:	940006e9 	bl	82cd8 <digitalWrite>
		digitalWrite(Stepper->motor_pin_2, LOW);
   81138:	b9402260 	ldr	w0, [x19, #32]
   8113c:	52800001 	mov	w1, #0x0                   	// #0
   81140:	940006e6 	bl	82cd8 <digitalWrite>
		digitalWrite(Stepper->motor_pin_3, LOW);
   81144:	b9402660 	ldr	w0, [x19, #36]
   81148:	52800001 	mov	w1, #0x0                   	// #0
   8114c:	940006e3 	bl	82cd8 <digitalWrite>
		digitalWrite(Stepper->motor_pin_4, HIGH);
   81150:	52800021 	mov	w1, #0x1                   	// #1
   81154:	b9402a60 	ldr	w0, [x19, #40]
   81158:	17ffff9a 	b	80fc0 <stepStepperMotor+0x1d8>
		digitalWrite(Stepper->motor_pin_1, HIGH);
   8115c:	52800021 	mov	w1, #0x1                   	// #1
   81160:	b9401e60 	ldr	w0, [x19, #28]
   81164:	17ffffa3 	b	80ff0 <stepStepperMotor+0x208>
  if (Stepper->pin_count == 5)
   81168:	7100141f 	cmp	w0, #0x5
   8116c:	54ffe561 	b.ne	80e18 <stepStepperMotor+0x30>  // b.any
		digitalWrite(Stepper->motor_pin_1, LOW);
   81170:	b9401e60 	ldr	w0, [x19, #28]
   81174:	52800001 	mov	w1, #0x0                   	// #0
   81178:	940006d8 	bl	82cd8 <digitalWrite>
		digitalWrite(Stepper->motor_pin_2, HIGH);
   8117c:	b9402260 	ldr	w0, [x19, #32]
   81180:	52800021 	mov	w1, #0x1                   	// #1
   81184:	940006d5 	bl	82cd8 <digitalWrite>
		digitalWrite(Stepper->motor_pin_3, LOW);
   81188:	52800001 	mov	w1, #0x0                   	// #0
   8118c:	b9402660 	ldr	w0, [x19, #36]
   81190:	17ffff9e 	b	81008 <stepStepperMotor+0x220>
  if (Stepper->pin_count == 5)
   81194:	7100141f 	cmp	w0, #0x5
   81198:	54ffe401 	b.ne	80e18 <stepStepperMotor+0x30>  // b.any
		digitalWrite(Stepper->motor_pin_1, LOW);
   8119c:	b9401e60 	ldr	w0, [x19, #28]
   811a0:	52800001 	mov	w1, #0x0                   	// #0
   811a4:	940006cd 	bl	82cd8 <digitalWrite>
		digitalWrite(Stepper->motor_pin_2, HIGH);
   811a8:	b9402260 	ldr	w0, [x19, #32]
   811ac:	52800021 	mov	w1, #0x1                   	// #1
   811b0:	940006ca 	bl	82cd8 <digitalWrite>
		digitalWrite(Stepper->motor_pin_3, LOW);
   811b4:	b9402660 	ldr	w0, [x19, #36]
   811b8:	52800001 	mov	w1, #0x0                   	// #0
   811bc:	940006c7 	bl	82cd8 <digitalWrite>
		digitalWrite(Stepper->motor_pin_4, HIGH);
   811c0:	52800021 	mov	w1, #0x1                   	// #1
   811c4:	b9402a60 	ldr	w0, [x19, #40]
   811c8:	17ffff93 	b	81014 <stepStepperMotor+0x22c>
		digitalWrite(Stepper->motor_pin_1, HIGH);
   811cc:	b9401e60 	ldr	w0, [x19, #28]
   811d0:	52800021 	mov	w1, #0x1                   	// #1
   811d4:	940006c1 	bl	82cd8 <digitalWrite>
		digitalWrite(Stepper->motor_pin_2, LOW);
   811d8:	b9402260 	ldr	w0, [x19, #32]
   811dc:	52800001 	mov	w1, #0x0                   	// #0
   811e0:	940006be 	bl	82cd8 <digitalWrite>
		digitalWrite(Stepper->motor_pin_3, HIGH);
   811e4:	b9402660 	ldr	w0, [x19, #36]
   811e8:	52800021 	mov	w1, #0x1                   	// #1
   811ec:	940006bb 	bl	82cd8 <digitalWrite>
		digitalWrite(Stepper->motor_pin_4, LOW);
   811f0:	52800001 	mov	w1, #0x0                   	// #0
   811f4:	b9402a60 	ldr	w0, [x19, #40]
   811f8:	17ffff72 	b	80fc0 <stepStepperMotor+0x1d8>
		digitalWrite(Stepper->motor_pin_1, HIGH);
   811fc:	b9401e60 	ldr	w0, [x19, #28]
   81200:	52800021 	mov	w1, #0x1                   	// #1
   81204:	940006b5 	bl	82cd8 <digitalWrite>
		digitalWrite(Stepper->motor_pin_2, HIGH);
   81208:	52800021 	mov	w1, #0x1                   	// #1
   8120c:	b9402260 	ldr	w0, [x19, #32]
   81210:	17ffffcc 	b	81140 <stepStepperMotor+0x358>
   81214:	d503201f 	nop

0000000000081218 <step>:
/*
 * Moves the motor steps_to_move steps.  If the number is negative,
 * the motor moves in the reverse direction.
 */
void step(int steps_to_move, StepperMotor *Stepper)
{
   81218:	a9bd7bfd 	stp	x29, x30, [sp, #-48]!
  int steps_left = abs(steps_to_move);  // how many steps to take
   8121c:	7100001f 	cmp	w0, #0x0
{
   81220:	910003fd 	mov	x29, sp
   81224:	a90153f3 	stp	x19, x20, [sp, #16]
   81228:	aa0103f3 	mov	x19, x1
  int steps_left = abs(steps_to_move);  // how many steps to take
   8122c:	5a80a414 	cneg	w20, w0, lt  // lt = tstop
{
   81230:	f90013f5 	str	x21, [sp, #32]

  // determine direction based on whether steps_to_mode is + or -:
  if (steps_to_move > 0) { Stepper->direction = 1; }
   81234:	540004cd 	b.le	812cc <step+0xb4>
   81238:	52800020 	mov	w0, #0x1                   	// #1
   8123c:	b9000020 	str	w0, [x1]
	  }
	  // decrement the steps left:
	  steps_left--;
	  // step the motor to step number 0, 1, ..., {3 or 10}
	  if (Stepper->pin_count == 5)
		stepStepperMotor(Stepper->step_number % 10, Stepper);
   81240:	528cccf5 	mov	w21, #0x6667                	// #26215
   81244:	72acccd5 	movk	w21, #0x6666, lsl #16
  while (steps_left > 0)
   81248:	34000374 	cbz	w20, 812b4 <step+0x9c>
   8124c:	d503201f 	nop
	unsigned long now = micros();
   81250:	94000708 	bl	82e70 <micros>
	if (now - Stepper->last_step_time >= Stepper->step_delay)
   81254:	f9401a61 	ldr	x1, [x19, #48]
   81258:	f9400662 	ldr	x2, [x19, #8]
   8125c:	cb010001 	sub	x1, x0, x1
   81260:	eb02003f 	cmp	x1, x2
   81264:	54ffff63 	b.cc	81250 <step+0x38>  // b.lo, b.ul, b.last
	  if (Stepper->direction == 1)
   81268:	b9400261 	ldr	w1, [x19]
	  Stepper->last_step_time = now;
   8126c:	f9001a60 	str	x0, [x19, #48]
	  if (Stepper->direction == 1)
   81270:	7100043f 	cmp	w1, #0x1
   81274:	b9401a60 	ldr	w0, [x19, #24]
   81278:	54000400 	b.eq	812f8 <step+0xe0>  // b.none
		if (Stepper->step_number == 0) {
   8127c:	34000240 	cbz	w0, 812c4 <step+0xac>
		Stepper->step_number--;
   81280:	51000400 	sub	w0, w0, #0x1
   81284:	b9001a60 	str	w0, [x19, #24]
	  if (Stepper->pin_count == 5)
   81288:	b9401661 	ldr	w1, [x19, #20]
	  steps_left--;
   8128c:	51000694 	sub	w20, w20, #0x1
	  if (Stepper->pin_count == 5)
   81290:	7100143f 	cmp	w1, #0x5
   81294:	54000220 	b.eq	812d8 <step+0xc0>  // b.none
	  else
		stepStepperMotor(Stepper->step_number % 4, Stepper);
   81298:	6b0003e2 	negs	w2, w0
   8129c:	12000400 	and	w0, w0, #0x3
   812a0:	12000442 	and	w2, w2, #0x3
   812a4:	aa1303e1 	mov	x1, x19
   812a8:	5a824400 	csneg	w0, w0, w2, mi  // mi = first
   812ac:	97fffecf 	bl	80de8 <stepStepperMotor>
  while (steps_left > 0)
   812b0:	35fffd14 	cbnz	w20, 81250 <step+0x38>
	}
  }
}
   812b4:	a94153f3 	ldp	x19, x20, [sp, #16]
   812b8:	f94013f5 	ldr	x21, [sp, #32]
   812bc:	a8c37bfd 	ldp	x29, x30, [sp], #48
   812c0:	d65f03c0 	ret
		  Stepper->step_number = Stepper->number_of_steps;
   812c4:	b9401260 	ldr	w0, [x19, #16]
   812c8:	17ffffee 	b	81280 <step+0x68>
  if (steps_to_move < 0) { Stepper->direction = 0; }
   812cc:	54fffba0 	b.eq	81240 <step+0x28>  // b.none
   812d0:	b900003f 	str	wzr, [x1]
   812d4:	17ffffdb 	b	81240 <step+0x28>
		stepStepperMotor(Stepper->step_number % 10, Stepper);
   812d8:	9b357c02 	smull	x2, w0, w21
   812dc:	aa1303e1 	mov	x1, x19
   812e0:	9362fc42 	asr	x2, x2, #34
   812e4:	4b807c42 	sub	w2, w2, w0, asr #31
   812e8:	0b020842 	add	w2, w2, w2, lsl #2
   812ec:	4b020400 	sub	w0, w0, w2, lsl #1
   812f0:	97fffebe 	bl	80de8 <stepStepperMotor>
   812f4:	17ffffd5 	b	81248 <step+0x30>
		Stepper->step_number++;
   812f8:	11000400 	add	w0, w0, #0x1
		if (Stepper->step_number == Stepper->number_of_steps) {
   812fc:	b9401261 	ldr	w1, [x19, #16]
		Stepper->step_number++;
   81300:	b9001a60 	str	w0, [x19, #24]
		if (Stepper->step_number == Stepper->number_of_steps) {
   81304:	6b01001f 	cmp	w0, w1
   81308:	54fffc01 	b.ne	81288 <step+0x70>  // b.any
		  Stepper->step_number = 0;
   8130c:	52800000 	mov	w0, #0x0                   	// #0
   81310:	b9001a7f 	str	wzr, [x19, #24]
   81314:	17ffffdd 	b	81288 <step+0x70>

0000000000081318 <lfb_init>:

/**
 * Set screen resolution to 1024x768
 */
void lfb_init()
{
   81318:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
	mailbox[0] = 35*4;
   8131c:	9000aaa0 	adrp	x0, 15d5000 <allocated+0xfb940>
   81320:	52801181 	mov	w1, #0x8c                  	// #140
{
   81324:	910003fd 	mov	x29, sp
   81328:	f9000bf3 	str	x19, [sp, #16]
	mailbox[0] = 35*4;
   8132c:	9123c013 	add	x19, x0, #0x8f0
   81330:	b908f001 	str	w1, [x0, #2288]
	mailbox[1] = MBOX_REQUEST;

	mailbox[2] = 0x48003;  //set phy wh
   81334:	52900062 	mov	w2, #0x8003                	// #32771
   81338:	72a00082 	movk	w2, #0x4, lsl #16
	mailbox[3] = 8;
   8133c:	52800101 	mov	w1, #0x8                   	// #8
	mailbox[1] = MBOX_REQUEST;
   81340:	b900067f 	str	wzr, [x19, #4]
	mailbox[4] = 8;
	mailbox[5] = 1024;         //FrameBufferInfo.width
   81344:	52808003 	mov	w3, #0x400                 	// #1024
	mailbox[2] = 0x48003;  //set phy wh
   81348:	b9000a62 	str	w2, [x19, #8]
	mailbox[6] = 768;          //FrameBufferInfo.height
   8134c:	52806000 	mov	w0, #0x300                 	// #768
	mailbox[3] = 8;
   81350:	b9000e61 	str	w1, [x19, #12]

	mailbox[7] = 0x48004;  //set virt wh
   81354:	52900084 	mov	w4, #0x8004                	// #32772
	mailbox[4] = 8;
   81358:	b9001261 	str	w1, [x19, #16]
	mailbox[7] = 0x48004;  //set virt wh
   8135c:	72a00084 	movk	w4, #0x4, lsl #16
	mailbox[5] = 1024;         //FrameBufferInfo.width
   81360:	b9001663 	str	w3, [x19, #20]
	mailbox[8] = 8;
	mailbox[9] = 8;
	mailbox[10] = 1024;        //FrameBufferInfo.virtual_width
	mailbox[11] = 768;         //FrameBufferInfo.virtual_height
	
	mailbox[12] = 0x48009; //set virt offset
   81364:	5290012a 	mov	w10, #0x8009                	// #32777
	mailbox[6] = 768;          //FrameBufferInfo.height
   81368:	b9001a60 	str	w0, [x19, #24]
	mailbox[12] = 0x48009; //set virt offset
   8136c:	72a0008a 	movk	w10, #0x4, lsl #16
	mailbox[7] = 0x48004;  //set virt wh
   81370:	b9001e64 	str	w4, [x19, #28]
	mailbox[13] = 8;
	mailbox[14] = 8;
	mailbox[15] = 0;           //FrameBufferInfo.x_offset
	mailbox[16] = 0;           //FrameBufferInfo.y.offset
	
	mailbox[17] = 0x48005; //set depth
   81374:	529000a9 	mov	w9, #0x8005                	// #32773
	mailbox[8] = 8;
   81378:	b9002261 	str	w1, [x19, #32]
	mailbox[17] = 0x48005; //set depth
   8137c:	72a00089 	movk	w9, #0x4, lsl #16
	mailbox[9] = 8;
   81380:	b9002661 	str	w1, [x19, #36]
	mailbox[18] = 4;
   81384:	52800082 	mov	w2, #0x4                   	// #4
	mailbox[10] = 1024;        //FrameBufferInfo.virtual_width
   81388:	b9002a63 	str	w3, [x19, #40]
	mailbox[19] = 4;
	mailbox[20] = 32;          //FrameBufferInfo.depth
   8138c:	52800408 	mov	w8, #0x20                  	// #32
	mailbox[11] = 768;         //FrameBufferInfo.virtual_height
   81390:	b9002e60 	str	w0, [x19, #44]

	mailbox[21] = 0x48006; //set pixel order
   81394:	529000c7 	mov	w7, #0x8006                	// #32774
	mailbox[12] = 0x48009; //set virt offset
   81398:	b900326a 	str	w10, [x19, #48]
	mailbox[21] = 0x48006; //set pixel order
   8139c:	72a00087 	movk	w7, #0x4, lsl #16
	mailbox[13] = 8;
   813a0:	b9003661 	str	w1, [x19, #52]
	mailbox[22] = 4;
	mailbox[23] = 4;
	mailbox[24] = 1;           //RGB, not BGR preferably
   813a4:	52800026 	mov	w6, #0x1                   	// #1
	mailbox[14] = 8;
   813a8:	b9003a61 	str	w1, [x19, #56]

	mailbox[25] = 0x40001; //get framebuffer, gets alignment on request
   813ac:	52800025 	mov	w5, #0x1                   	// #1
	mailbox[15] = 0;           //FrameBufferInfo.x_offset
   813b0:	b9003e7f 	str	wzr, [x19, #60]
	mailbox[25] = 0x40001; //get framebuffer, gets alignment on request
   813b4:	72a00085 	movk	w5, #0x4, lsl #16
	mailbox[16] = 0;           //FrameBufferInfo.y.offset
   813b8:	b900427f 	str	wzr, [x19, #64]
	mailbox[26] = 8;
	mailbox[27] = 8;
	mailbox[28] = 4096;        //FrameBufferInfo.pointer
   813bc:	52820004 	mov	w4, #0x1000                	// #4096
	mailbox[17] = 0x48005; //set depth
   813c0:	b9004669 	str	w9, [x19, #68]
	mailbox[29] = 0;           //FrameBufferInfo.size

	mailbox[30] = 0x40008; //get pitch
   813c4:	52800103 	mov	w3, #0x8                   	// #8
	mailbox[18] = 4;
   813c8:	b9004a62 	str	w2, [x19, #72]
	mailbox[30] = 0x40008; //get pitch
   813cc:	72a00083 	movk	w3, #0x4, lsl #16
	mailbox[19] = 4;
   813d0:	b9004e62 	str	w2, [x19, #76]
	mailbox[32] = 4;
	mailbox[33] = 0;           //FrameBufferInfo.pitch

	mailbox[34] = MBOX_TAG_LAST;

	if(mailbox_call(MBOX_CH_PROP) && mailbox[20]==32 && mailbox[28]!=0) {
   813d4:	2a0103e0 	mov	w0, w1
	mailbox[20] = 32;          //FrameBufferInfo.depth
   813d8:	b9005268 	str	w8, [x19, #80]
	mailbox[21] = 0x48006; //set pixel order
   813dc:	b9005667 	str	w7, [x19, #84]
	mailbox[22] = 4;
   813e0:	b9005a62 	str	w2, [x19, #88]
	mailbox[23] = 4;
   813e4:	b9005e62 	str	w2, [x19, #92]
	mailbox[24] = 1;           //RGB, not BGR preferably
   813e8:	b9006266 	str	w6, [x19, #96]
	mailbox[25] = 0x40001; //get framebuffer, gets alignment on request
   813ec:	b9006665 	str	w5, [x19, #100]
	mailbox[26] = 8;
   813f0:	b9006a61 	str	w1, [x19, #104]
	mailbox[27] = 8;
   813f4:	b9006e61 	str	w1, [x19, #108]
	mailbox[28] = 4096;        //FrameBufferInfo.pointer
   813f8:	b9007264 	str	w4, [x19, #112]
	mailbox[29] = 0;           //FrameBufferInfo.size
   813fc:	b900767f 	str	wzr, [x19, #116]
	mailbox[30] = 0x40008; //get pitch
   81400:	b9007a63 	str	w3, [x19, #120]
	mailbox[31] = 4;
   81404:	b9007e62 	str	w2, [x19, #124]
	mailbox[32] = 4;
   81408:	b9008262 	str	w2, [x19, #128]
	mailbox[33] = 0;           //FrameBufferInfo.pitch
   8140c:	b900867f 	str	wzr, [x19, #132]
	mailbox[34] = MBOX_TAG_LAST;
   81410:	b9008a7f 	str	wzr, [x19, #136]
	if(mailbox_call(MBOX_CH_PROP) && mailbox[20]==32 && mailbox[28]!=0) {
   81414:	94003f77 	bl	911f0 <mailbox_call>
   81418:	34000080 	cbz	w0, 81428 <lfb_init+0x110>
   8141c:	b9405260 	ldr	w0, [x19, #80]
   81420:	7100801f 	cmp	w0, #0x20
   81424:	540000c0 	b.eq	8143c <lfb_init+0x124>  // b.none
		pitch=mailbox[33];
		lfb=(void*)((unsigned long)mailbox[28]);
	} else {
		uart_puts("Unable to set screen resolution to 1024x768x32\n");
	}
}
   81428:	f9400bf3 	ldr	x19, [sp, #16]
		uart_puts("Unable to set screen resolution to 1024x768x32\n");
   8142c:	b0000080 	adrp	x0, 92000 <sd_init+0x470>
}
   81430:	a8c27bfd 	ldp	x29, x30, [sp], #32
		uart_puts("Unable to set screen resolution to 1024x768x32\n");
   81434:	91032000 	add	x0, x0, #0xc8
   81438:	140002ec 	b	81fe8 <uart_puts>
	if(mailbox_call(MBOX_CH_PROP) && mailbox[20]==32 && mailbox[28]!=0) {
   8143c:	b9407260 	ldr	w0, [x19, #112]
   81440:	34ffff40 	cbz	w0, 81428 <lfb_init+0x110>
		mailbox[28]&=0x3FFFFFFF;
   81444:	b9407260 	ldr	w0, [x19, #112]
		lfb_width=mailbox[5];
   81448:	90009ae6 	adrp	x6, 13dd000 <_binary_src_audio_The_Amazons_bin_size+0x96300>
		lfb_height=mailbox[6];
   8144c:	90009ae4 	adrp	x4, 13dd000 <_binary_src_audio_The_Amazons_bin_size+0x96300>
		lfb=(void*)((unsigned long)mailbox[28]);
   81450:	9000aaa1 	adrp	x1, 15d5000 <allocated+0xfb940>
		mailbox[28]&=0x3FFFFFFF;
   81454:	12007400 	and	w0, w0, #0x3fffffff
   81458:	b9007260 	str	w0, [x19, #112]
		pitch=mailbox[33];
   8145c:	9000aaa2 	adrp	x2, 15d5000 <allocated+0xfb940>
		lfb_width=mailbox[5];
   81460:	b9401667 	ldr	w7, [x19, #20]
		lfb_height=mailbox[6];
   81464:	b9401a65 	ldr	w5, [x19, #24]
		pitch=mailbox[33];
   81468:	b9408663 	ldr	w3, [x19, #132]
		lfb=(void*)((unsigned long)mailbox[28]);
   8146c:	b9407260 	ldr	w0, [x19, #112]
		lfb_width=mailbox[5];
   81470:	b906b4c7 	str	w7, [x6, #1716]
		lfb_height=mailbox[6];
   81474:	b906b085 	str	w5, [x4, #1712]
		lfb=(void*)((unsigned long)mailbox[28]);
   81478:	2a0003e0 	mov	w0, w0
		pitch=mailbox[33];
   8147c:	b906a843 	str	w3, [x2, #1704]
		lfb=(void*)((unsigned long)mailbox[28]);
   81480:	f9035020 	str	x0, [x1, #1696]
}
   81484:	f9400bf3 	ldr	x19, [sp, #16]
   81488:	a8c27bfd 	ldp	x29, x30, [sp], #32
   8148c:	d65f03c0 	ret

0000000000081490 <lfb_draw_pixel>:
void lfb_draw_pixel(unsigned int x, unsigned int y, char r, char g, char b)
{
	unsigned char *ptr = lfb;
	uint32_t pixel;
	
	ptr += pitch * y;
   81490:	9000aaa6 	adrp	x6, 15d5000 <allocated+0xfb940>
	unsigned char *ptr = lfb;
   81494:	9000aaa5 	adrp	x5, 15d5000 <allocated+0xfb940>
	ptr += (x<<2);
   81498:	531e7400 	lsl	w0, w0, #2
	
	pixel = (b<<16)|(g<<8)|r;
   8149c:	53181c63 	ubfiz	w3, w3, #8, #8
	ptr += pitch * y;
   814a0:	b946a8c6 	ldr	w6, [x6, #1704]
{
   814a4:	12001c42 	and	w2, w2, #0xff
	unsigned char *ptr = lfb;
   814a8:	f94350a5 	ldr	x5, [x5, #1696]
	pixel = (b<<16)|(g<<8)|r;
   814ac:	2a020062 	orr	w2, w3, w2
   814b0:	53101c84 	ubfiz	w4, w4, #16, #8
	ptr += pitch * y;
   814b4:	1b067c21 	mul	w1, w1, w6
	pixel = (b<<16)|(g<<8)|r;
   814b8:	2a040042 	orr	w2, w2, w4

	*((unsigned int *)ptr)=*((unsigned int *)&pixel);	
   814bc:	8b0100a5 	add	x5, x5, x1
   814c0:	b82048a2 	str	w2, [x5, w0, uxtw]
}
   814c4:	d65f03c0 	ret

00000000000814c8 <lfb_print>:
void lfb_print(int x, int y, char *s)
{
	// get our font
	psf_t *font = (psf_t*)&_binary_src_font_font_psf_start;
	// draw next character if it's not zero
	while(*s) {
   814c8:	39400043 	ldrb	w3, [x2]
   814cc:	34000983 	cbz	w3, 815fc <lfb_print+0x134>
{
   814d0:	a9bd7bfd 	stp	x29, x30, [sp, #-48]!
				line=offs;
				mask=1<<(font->width-1);
				for(i=0;i<font->width;i++)
				{
					// if bit set, we use white color, otherwise black
					*((unsigned int*)(lfb + line))=((int)*glyph) & mask ? 0xFFFFFF : 0;
   814d4:	9000aaa4 	adrp	x4, 15d5000 <allocated+0xfb940>
				mask=1<<(font->width-1);
   814d8:	5280002e 	mov	w14, #0x1                   	// #1
{
   814dc:	910003fd 	mov	x29, sp
   814e0:	a90153f3 	stp	x19, x20, [sp, #16]
		 font->headersize + (*((unsigned char*)s)<font->numglyph?*s:0)*font->bytesperglyph;
   814e4:	900000b3 	adrp	x19, 95000 <sd_init+0x3470>
   814e8:	913de273 	add	x19, x19, #0xf78
					*((unsigned int*)(lfb + line))=((int)*glyph) & mask ? 0xFFFFFF : 0;
   814ec:	f9435090 	ldr	x16, [x4, #1696]
		int offs = (y * font->height * pitch) + (x * (font->width) * 4); //There was a +1 on font->width
   814f0:	9000aaab 	adrp	x11, 15d5000 <allocated+0xfb940>
		 font->headersize + (*((unsigned char*)s)<font->numglyph?*s:0)*font->bytesperglyph;
   814f4:	b9400a69 	ldr	w9, [x19, #8]
		int offs = (y * font->height * pitch) + (x * (font->width) * 4); //There was a +1 on font->width
   814f8:	911aa16b 	add	x11, x11, #0x6a8
		 font->headersize + (*((unsigned char*)s)<font->numglyph?*s:0)*font->bytesperglyph;
   814fc:	b940127e 	ldr	w30, [x19, #16]
					*((unsigned int*)(lfb + line))=((int)*glyph) & mask ? 0xFFFFFF : 0;
   81500:	12bfe008 	mov	w8, #0xffffff              	// #16777215
		 font->headersize + (*((unsigned char*)s)<font->numglyph?*s:0)*font->bytesperglyph;
   81504:	b9401672 	ldr	w18, [x19, #20]
   81508:	91001211 	add	x17, x16, #0x4
		int offs = (y * font->height * pitch) + (x * (font->width) * 4); //There was a +1 on font->width
   8150c:	b9401a6c 	ldr	w12, [x19, #24]
		 font->headersize + (*((unsigned char*)s)<font->numglyph?*s:0)*font->bytesperglyph;
   81510:	2a0903e9 	mov	w9, w9
		int offs = (y * font->height * pitch) + (x * (font->width) * 4); //There was a +1 on font->width
   81514:	b9401e6a 	ldr	w10, [x19, #28]
{
   81518:	f90013f5 	str	x21, [sp, #32]
		int i,j, line, mask, bytesperline=(font->width+7)/8;
   8151c:	11001d4d 	add	w13, w10, #0x7
				mask=1<<(font->width-1);
   81520:	5100054f 	sub	w15, w10, #0x1
   81524:	53037dad 	lsr	w13, w13, #3
   81528:	1acf21ce 	lsl	w14, w14, w15
   8152c:	14000007 	b	81548 <lfb_print+0x80>
		else if(*s=='\n') 
   81530:	7100287f 	cmp	w3, #0xa
   81534:	54000240 	b.eq	8157c <lfb_print+0xb4>  // b.none
		else if(*s != 255)
   81538:	7103fc7f 	cmp	w3, #0xff
   8153c:	54000261 	b.ne	81588 <lfb_print+0xc0>  // b.any
	while(*s) {
   81540:	38401c43 	ldrb	w3, [x2, #1]!
   81544:	34000143 	cbz	w3, 8156c <lfb_print+0xa4>
		unsigned char *glyph = (unsigned char*)&_binary_src_font_font_psf_start +
   81548:	1b127c66 	mul	w6, w3, w18
   8154c:	6b1e007f 	cmp	w3, w30
   81550:	8b0900c6 	add	x6, x6, x9
   81554:	9a8930c6 	csel	x6, x6, x9, cc  // cc = lo, ul, last
		if(*s=='\r') {
   81558:	7100347f 	cmp	w3, #0xd
   8155c:	54fffea1 	b.ne	81530 <lfb_print+0x68>  // b.any
	while(*s) {
   81560:	38401c43 	ldrb	w3, [x2, #1]!
			x=0;
   81564:	52800000 	mov	w0, #0x0                   	// #0
	while(*s) {
   81568:	35ffff03 	cbnz	w3, 81548 <lfb_print+0x80>
			x++;
		}
		// next character
		s++;
	}
}
   8156c:	a94153f3 	ldp	x19, x20, [sp, #16]
   81570:	f94013f5 	ldr	x21, [sp, #32]
   81574:	a8c37bfd 	ldp	x29, x30, [sp], #48
   81578:	d65f03c0 	ret
			x=0; y++;
   8157c:	11000421 	add	w1, w1, #0x1
   81580:	52800000 	mov	w0, #0x0                   	// #0
   81584:	17ffffef 	b	81540 <lfb_print+0x78>
			for(j=0;j<font->height;j++)
   81588:	3400036c 	cbz	w12, 815f4 <lfb_print+0x12c>
		int offs = (y * font->height * pitch) + (x * (font->width) * 4); //There was a +1 on font->width
   8158c:	b9400174 	ldr	w20, [x11]
   81590:	1b0a7c03 	mul	w3, w0, w10
		unsigned char *glyph = (unsigned char*)&_binary_src_font_font_psf_start +
   81594:	8b060266 	add	x6, x19, x6
			for(j=0;j<font->height;j++)
   81598:	52800015 	mov	w21, #0x0                   	// #0
		int offs = (y * font->height * pitch) + (x * (font->width) * 4); //There was a +1 on font->width
   8159c:	531e7463 	lsl	w3, w3, #2
   815a0:	1b147d94 	mul	w20, w12, w20
   815a4:	1b010e94 	madd	w20, w20, w1, w3
				for(i=0;i<font->width;i++)
   815a8:	340001aa 	cbz	w10, 815dc <lfb_print+0x114>
   815ac:	93407e83 	sxtw	x3, w20
				mask=1<<(font->width-1);
   815b0:	2a0e03e4 	mov	w4, w14
   815b4:	8b2f4867 	add	x7, x3, w15, uxtw #2
   815b8:	8b030203 	add	x3, x16, x3
   815bc:	8b070227 	add	x7, x17, x7
					*((unsigned int*)(lfb + line))=((int)*glyph) & mask ? 0xFFFFFF : 0;
   815c0:	394000c5 	ldrb	w5, [x6]
   815c4:	6a0400bf 	tst	w5, w4
					mask>>=1;
   815c8:	13017c84 	asr	w4, w4, #1
					*((unsigned int*)(lfb + line))=((int)*glyph) & mask ? 0xFFFFFF : 0;
   815cc:	1a9f1105 	csel	w5, w8, wzr, ne  // ne = any
   815d0:	b8004465 	str	w5, [x3], #4
				for(i=0;i<font->width;i++)
   815d4:	eb07007f 	cmp	x3, x7
   815d8:	54ffff41 	b.ne	815c0 <lfb_print+0xf8>  // b.any
				offs+=pitch;
   815dc:	b9400163 	ldr	w3, [x11]
			for(j=0;j<font->height;j++)
   815e0:	110006b5 	add	w21, w21, #0x1
   815e4:	6b0c02bf 	cmp	w21, w12
				glyph+=bytesperline;
   815e8:	8b0d00c6 	add	x6, x6, x13
				offs+=pitch;
   815ec:	0b030294 	add	w20, w20, w3
			for(j=0;j<font->height;j++)
   815f0:	54fffdc1 	b.ne	815a8 <lfb_print+0xe0>  // b.any
			x++;
   815f4:	11000400 	add	w0, w0, #0x1
   815f8:	17ffffd2 	b	81540 <lfb_print+0x78>
   815fc:	d65f03c0 	ret

0000000000081600 <lfb_special_print>:


void lfb_special_print(int x, int y, char *s, bool set_background_color, char main_r, char main_g, char main_b, char back_r, char back_g, char back_b)
{
   81600:	a9b67bfd 	stp	x29, x30, [sp, #-160]!
   81604:	910003fd 	mov	x29, sp
   81608:	a9025bf5 	stp	x21, x22, [sp, #32]
   8160c:	3942a3f6 	ldrb	w22, [sp, #168]
   81610:	a90363f7 	stp	x23, x24, [sp, #48]
   81614:	394283f7 	ldrb	w23, [sp, #160]
   81618:	291307e0 	stp	w0, w1, [sp, #152]
   8161c:	12001c80 	and	w0, w4, #0xff
   81620:	b90067e0 	str	w0, [sp, #100]
   81624:	12001ca0 	and	w0, w5, #0xff
   81628:	b9006be0 	str	w0, [sp, #104]
   8162c:	12001cc1 	and	w1, w6, #0xff
	// get our font
	psf_t *font = (psf_t*)&_binary_src_font_font_psf_start;
	// draw next character if it's not zero
	while(*s) {
   81630:	39400040 	ldrb	w0, [x2]
{
   81634:	b9006fe1 	str	w1, [sp, #108]
		// get the offset of the glyph. Need to adjust this to support unicode table
		unsigned char *glyph = (unsigned char*)&_binary_src_font_font_psf_start +
		 font->headersize + (*((unsigned char*)s)<font->numglyph?*s:0)*font->bytesperglyph;
		// calculate the offset on screen
		int offs = (y * font->height * pitch) + (x * (font->width) * 4); //There was a +1 on font->width
   81638:	9000aaa1 	adrp	x1, 15d5000 <allocated+0xfb940>
   8163c:	911aa021 	add	x1, x1, #0x6a8
   81640:	f90043e1 	str	x1, [sp, #128]
{
   81644:	f9004be2 	str	x2, [sp, #144]
	while(*s) {
   81648:	34000400 	cbz	w0, 816c8 <lfb_special_print+0xc8>
   8164c:	12001cf8 	and	w24, w7, #0xff
   81650:	9000aab5 	adrp	x21, 15d5000 <allocated+0xfb940>
   81654:	900000a7 	adrp	x7, 95000 <sd_init+0x3470>
   81658:	a90153f3 	stp	x19, x20, [sp, #16]
   8165c:	12001c74 	and	w20, w3, #0xff
   81660:	a9046bf9 	stp	x25, x26, [sp, #64]
   81664:	a90573fb 	stp	x27, x28, [sp, #80]
   81668:	913de0fc 	add	x28, x7, #0xf78
   8166c:	1400000a 	b	81694 <lfb_special_print+0x94>
		// handle carrige return
		if(*s=='\r') {
			x=0;
		} else
		// new line
		if(*s=='\n') {
   81670:	7100281f 	cmp	w0, #0xa
   81674:	54000321 	b.ne	816d8 <lfb_special_print+0xd8>  // b.any
			x=0; y++;
   81678:	b9409fe0 	ldr	w0, [sp, #156]
   8167c:	11000400 	add	w0, w0, #0x1
   81680:	291303ff 	stp	wzr, w0, [sp, #152]
	while(*s) {
   81684:	f9404be1 	ldr	x1, [sp, #144]
   81688:	38401c20 	ldrb	w0, [x1, #1]!
   8168c:	f9004be1 	str	x1, [sp, #144]
   81690:	34000160 	cbz	w0, 816bc <lfb_special_print+0xbc>
		 font->headersize + (*((unsigned char*)s)<font->numglyph?*s:0)*font->bytesperglyph;
   81694:	b9401381 	ldr	w1, [x28, #16]
   81698:	6b01001f 	cmp	w0, w1
   8169c:	1a9f3001 	csel	w1, w0, wzr, cc  // cc = lo, ul, last
		if(*s=='\r') {
   816a0:	7100341f 	cmp	w0, #0xd
   816a4:	54fffe61 	b.ne	81670 <lfb_special_print+0x70>  // b.any
	while(*s) {
   816a8:	f9404be1 	ldr	x1, [sp, #144]
			x=0;
   816ac:	b9009bff 	str	wzr, [sp, #152]
	while(*s) {
   816b0:	38401c20 	ldrb	w0, [x1, #1]!
   816b4:	f9004be1 	str	x1, [sp, #144]
   816b8:	35fffee0 	cbnz	w0, 81694 <lfb_special_print+0x94>
   816bc:	a94153f3 	ldp	x19, x20, [sp, #16]
   816c0:	a9446bf9 	ldp	x25, x26, [sp, #64]
   816c4:	a94573fb 	ldp	x27, x28, [sp, #80]
			x++;
		}
		// next character
		s++;
	}
}
   816c8:	a9425bf5 	ldp	x21, x22, [sp, #32]
   816cc:	a94363f7 	ldp	x23, x24, [sp, #48]
   816d0:	a8ca7bfd 	ldp	x29, x30, [sp], #160
   816d4:	d65f03c0 	ret
		int offs = (y * font->height * pitch) + (x * (font->width) * 4); //There was a +1 on font->width
   816d8:	b9401b82 	ldr	w2, [x28, #24]
			for(j=0;j<font->height;j++){
   816dc:	34000942 	cbz	w2, 81804 <lfb_special_print+0x204>
		 font->headersize + (*((unsigned char*)s)<font->numglyph?*s:0)*font->bytesperglyph;
   816e0:	b9401783 	ldr	w3, [x28, #20]
		int offs = (y * font->height * pitch) + (x * (font->width) * 4); //There was a +1 on font->width
   816e4:	f94043e4 	ldr	x4, [sp, #128]
		 font->headersize + (*((unsigned char*)s)<font->numglyph?*s:0)*font->bytesperglyph;
   816e8:	b9400b93 	ldr	w19, [x28, #8]
   816ec:	1b037c21 	mul	w1, w1, w3
		int offs = (y * font->height * pitch) + (x * (font->width) * 4); //There was a +1 on font->width
   816f0:	b9401f80 	ldr	w0, [x28, #28]
   816f4:	b9409be3 	ldr	w3, [sp, #152]
   816f8:	b9400084 	ldr	w4, [x4]
		int i,j, line, mask, bytesperline=(font->width+7)/8;
   816fc:	11001c05 	add	w5, w0, #0x7
		 font->headersize + (*((unsigned char*)s)<font->numglyph?*s:0)*font->bytesperglyph;
   81700:	8b334021 	add	x1, x1, w19, uxtw
		unsigned char *glyph = (unsigned char*)&_binary_src_font_font_psf_start +
   81704:	8b010393 	add	x19, x28, x1
   81708:	53037ca5 	lsr	w5, w5, #3
		int offs = (y * font->height * pitch) + (x * (font->width) * 4); //There was a +1 on font->width
   8170c:	1b007c63 	mul	w3, w3, w0
   81710:	f90047e5 	str	x5, [sp, #136]
   81714:	1b047c42 	mul	w2, w2, w4
   81718:	531e7461 	lsl	w1, w3, #2
   8171c:	b9409fe3 	ldr	w3, [sp, #156]
   81720:	1b030441 	madd	w1, w2, w3, w1
			for(j=0;j<font->height;j++){
   81724:	290f7fe1 	stp	w1, wzr, [sp, #120]
				mask=1<<(font->width-1);
   81728:	51000404 	sub	w4, w0, #0x1
   8172c:	52800021 	mov	w1, #0x1                   	// #1
				for(i=0;i<font->width;i++){
   81730:	5280001a 	mov	w26, #0x0                   	// #0
   81734:	b9807bfb 	ldrsw	x27, [sp, #120]
				mask=1<<(font->width-1);
   81738:	1ac42039 	lsl	w25, w1, w4
				for(i=0;i<font->width;i++){
   8173c:	35000220 	cbnz	w0, 81780 <lfb_special_print+0x180>
   81740:	14000022 	b	817c8 <lfb_special_print+0x1c8>
				*((unsigned int*)(lfb + line))=((int)*glyph) & mask ? rgb_to_hex(main_r, main_g, main_b) : rgb_to_hex(back_r, back_g, back_b);
   81744:	2a1603e2 	mov	w2, w22
   81748:	2a1703e1 	mov	w1, w23
   8174c:	2a1803e0 	mov	w0, w24
   81750:	34000563 	cbz	w3, 817fc <lfb_special_print+0x1fc>
   81754:	3941b3e2 	ldrb	w2, [sp, #108]
   81758:	3941a3e1 	ldrb	w1, [sp, #104]
   8175c:	394193e0 	ldrb	w0, [sp, #100]
   81760:	94003e9e 	bl	911d8 <rgb_to_hex>
   81764:	f94352a1 	ldr	x1, [x21, #1696]
   81768:	b83b6820 	str	w0, [x1, x27]
				for(i=0;i<font->width;i++){
   8176c:	b9401f80 	ldr	w0, [x28, #28]
   81770:	1100075a 	add	w26, w26, #0x1
   81774:	9100137b 	add	x27, x27, #0x4
   81778:	6b1a001f 	cmp	w0, w26
   8177c:	54000269 	b.ls	817c8 <lfb_special_print+0x1c8>  // b.plast
				if(((int)*glyph) & mask)
   81780:	39400263 	ldrb	w3, [x19]
   81784:	0a190063 	and	w3, w3, w25
   81788:	13017f39 	asr	w25, w25, #1
			if(set_background_color == true)
   8178c:	35fffdd4 	cbnz	w20, 81744 <lfb_special_print+0x144>
				if(((int)*glyph) & mask)
   81790:	34fffee3 	cbz	w3, 8176c <lfb_special_print+0x16c>
					*((unsigned int*)(lfb + line))= rgb_to_hex(main_r, main_g, main_b);
   81794:	f94352a3 	ldr	x3, [x21, #1696]
   81798:	f9003be3 	str	x3, [sp, #112]
   8179c:	3941b3e2 	ldrb	w2, [sp, #108]
				for(i=0;i<font->width;i++){
   817a0:	1100075a 	add	w26, w26, #0x1
					*((unsigned int*)(lfb + line))= rgb_to_hex(main_r, main_g, main_b);
   817a4:	3941a3e1 	ldrb	w1, [sp, #104]
   817a8:	394193e0 	ldrb	w0, [sp, #100]
   817ac:	94003e8b 	bl	911d8 <rgb_to_hex>
   817b0:	f9403be3 	ldr	x3, [sp, #112]
   817b4:	b83b6860 	str	w0, [x3, x27]
									line+=4;	    
   817b8:	9100137b 	add	x27, x27, #0x4
				for(i=0;i<font->width;i++){
   817bc:	b9401f80 	ldr	w0, [x28, #28]
   817c0:	6b1a001f 	cmp	w0, w26
   817c4:	54fffde8 	b.hi	81780 <lfb_special_print+0x180>  // b.pmore
			for(j=0;j<font->height;j++){
   817c8:	b9407fe0 	ldr	w0, [sp, #124]
   817cc:	b9401b81 	ldr	w1, [x28, #24]
   817d0:	11000402 	add	w2, w0, #0x1
				glyph+=bytesperline;
   817d4:	a9480fe0 	ldp	x0, x3, [sp, #128]
			for(j=0;j<font->height;j++){
   817d8:	6b02003f 	cmp	w1, w2
				offs+=pitch;
   817dc:	b9407be1 	ldr	w1, [sp, #120]
   817e0:	b9400000 	ldr	w0, [x0]
				glyph+=bytesperline;
   817e4:	8b030273 	add	x19, x19, x3
				offs+=pitch;
   817e8:	0b000020 	add	w0, w1, w0
			for(j=0;j<font->height;j++){
   817ec:	290f0be0 	stp	w0, w2, [sp, #120]
   817f0:	540000a9 	b.ls	81804 <lfb_special_print+0x204>  // b.plast
   817f4:	b9401f80 	ldr	w0, [x28, #28]
   817f8:	17ffffcc 	b	81728 <lfb_special_print+0x128>
				*((unsigned int*)(lfb + line))=((int)*glyph) & mask ? rgb_to_hex(main_r, main_g, main_b) : rgb_to_hex(back_r, back_g, back_b);
   817fc:	94003e77 	bl	911d8 <rgb_to_hex>
   81800:	17ffffd9 	b	81764 <lfb_special_print+0x164>
			x++;
   81804:	b9409be0 	ldr	w0, [sp, #152]
   81808:	11000400 	add	w0, w0, #0x1
   8180c:	b9009be0 	str	w0, [sp, #152]
   81810:	17ffff9d 	b	81684 <lfb_special_print+0x84>
   81814:	d503201f 	nop

0000000000081818 <lfb_hex>:

void lfb_hex(unsigned int *x, unsigned int *y, unsigned int d)
{
   81818:	a9bb7bfd 	stp	x29, x30, [sp, #-80]!
   8181c:	910003fd 	mov	x29, sp
   81820:	a90363f7 	stp	x23, x24, [sp, #48]
   81824:	aa0003f8 	mov	x24, x0
   81828:	b9400000 	ldr	w0, [x0]
   8182c:	aa0103f7 	mov	x23, x1
   81830:	a9025bf5 	stp	x21, x22, [sp, #32]
   81834:	2a0203f6 	mov	w22, w2
	unsigned int n;
	int c;
	for(c=28;c>=0;c-=4)
	{
		n=(d>>c)&0xF;
		n+=n>9?0x37:0x30;
   81838:	528006f5 	mov	w21, #0x37                  	// #55
{
   8183c:	a90153f3 	stp	x19, x20, [sp, #16]
	for(c=28;c>=0;c-=4)
   81840:	52800393 	mov	w19, #0x1c                  	// #28
		n+=n>9?0x37:0x30;
   81844:	52800614 	mov	w20, #0x30                  	// #48
		n=(d>>c)&0xF;
   81848:	1ad326c2 	lsr	w2, w22, w19
   8184c:	12000c42 	and	w2, w2, #0xf
		n+=n>9?0x37:0x30;
   81850:	7100245f 	cmp	w2, #0x9
		lfb_print(*x, *y, (char *)&n);
   81854:	b94002e1 	ldr	w1, [x23]
		n+=n>9?0x37:0x30;
   81858:	1a9482a3 	csel	w3, w21, w20, hi  // hi = pmore
	for(c=28;c>=0;c-=4)
   8185c:	51001273 	sub	w19, w19, #0x4
		n+=n>9?0x37:0x30;
   81860:	0b030043 	add	w3, w2, w3
		lfb_print(*x, *y, (char *)&n);
   81864:	910133e2 	add	x2, sp, #0x4c
		n+=n>9?0x37:0x30;
   81868:	b9004fe3 	str	w3, [sp, #76]
		lfb_print(*x, *y, (char *)&n);
   8186c:	97ffff17 	bl	814c8 <lfb_print>
		*x += 1;
   81870:	b9400300 	ldr	w0, [x24]
	for(c=28;c>=0;c-=4)
   81874:	3100127f 	cmn	w19, #0x4
		*x += 1;
   81878:	11000400 	add	w0, w0, #0x1
   8187c:	b9000300 	str	w0, [x24]
	for(c=28;c>=0;c-=4)
   81880:	54fffe41 	b.ne	81848 <lfb_hex+0x30>  // b.any
	}
}
   81884:	a94153f3 	ldp	x19, x20, [sp, #16]
   81888:	a9425bf5 	ldp	x21, x22, [sp, #32]
   8188c:	a94363f7 	ldp	x23, x24, [sp, #48]
   81890:	a8c57bfd 	ldp	x29, x30, [sp], #80
   81894:	d65f03c0 	ret

0000000000081898 <lfb_dump>:

void lfb_dump(void *ptr)
{
   81898:	a9b87bfd 	stp	x29, x30, [sp, #-128]!
   8189c:	910003fd 	mov	x29, sp
   818a0:	a9025bf5 	stp	x21, x22, [sp, #32]
	unsigned long a,b,d, temp;
	unsigned int x = 0, y = 0;
	unsigned char c;
	for(a=(unsigned long)ptr;a<(unsigned long)ptr+512;a+=16) {
   818a4:	aa0003f5 	mov	x21, x0
   818a8:	91080000 	add	x0, x0, #0x200
	unsigned int x = 0, y = 0;
   818ac:	290d7fff 	stp	wzr, wzr, [sp, #104]
	for(a=(unsigned long)ptr;a<(unsigned long)ptr+512;a+=16) {
   818b0:	eb15001f 	cmp	x0, x21
   818b4:	54000c69 	b.ls	81a40 <lfb_dump+0x1a8>  // b.plast
   818b8:	a90363f7 	stp	x23, x24, [sp, #48]
   818bc:	910042b7 	add	x23, x21, #0x10
   818c0:	eb17001f 	cmp	x0, x23
   818c4:	a9046bf9 	stp	x25, x26, [sp, #64]
   818c8:	d2800419 	mov	x25, #0x20                  	// #32
   818cc:	9a9f2739 	csinc	x25, x25, xzr, cs  // cs = hs, nlast
   818d0:	b000009a 	adrp	x26, 92000 <sd_init+0x470>
   818d4:	b0000096 	adrp	x22, 92000 <sd_init+0x470>
   818d8:	910a435a 	add	x26, x26, #0x290
   818dc:	8b1912b9 	add	x25, x21, x25, lsl #4
   818e0:	9108e2d6 	add	x22, x22, #0x238
			x++;
		}
		}
		for(b=0;b<16;b++) {
			c=*((unsigned char*)(a+b));
		temp = (c<32 || c >= 127? '.' : c);
   818e4:	528005d8 	mov	w24, #0x2e                  	// #46
   818e8:	a90153f3 	stp	x19, x20, [sp, #16]
			d=(unsigned int)c;d>>=4;d&=0xF;d+=d>9?0x37:0x30;
   818ec:	d28006f4 	mov	x20, #0x37                  	// #55
   818f0:	d2800613 	mov	x19, #0x30                  	// #48
   818f4:	a90573fb 	stp	x27, x28, [sp, #80]
		lfb_hex(&x, &y, a); 
   818f8:	2a1503e2 	mov	w2, w21
   818fc:	9101b3e1 	add	x1, sp, #0x6c
   81900:	9101a3e0 	add	x0, sp, #0x68
   81904:	97ffffc5 	bl	81818 <lfb_hex>
		for(b=0;b<16;b++) {
   81908:	d280001c 	mov	x28, #0x0                   	// #0
	lfb_print(x, y, ": ");
   8190c:	294d07e0 	ldp	w0, w1, [sp, #104]
   81910:	aa1a03e2 	mov	x2, x26
   81914:	97fffeed 	bl	814c8 <lfb_print>
	x++;
   81918:	b9406be0 	ldr	w0, [sp, #104]
   8191c:	11000800 	add	w0, w0, #0x2
   81920:	b9006be0 	str	w0, [sp, #104]
		for(b=0;b<16;b++) {
   81924:	14000003 	b	81930 <lfb_dump+0x98>
   81928:	f100439f 	cmp	x28, #0x10
   8192c:	54000540 	b.eq	819d4 <lfb_dump+0x13c>  // b.none
			c=*((unsigned char*)(a+b));
   81930:	387c6abb 	ldrb	w27, [x21, x28]
		lfb_print(x, y, (char *)&d);
   81934:	9101c3e2 	add	x2, sp, #0x70
   81938:	b9406fe1 	ldr	w1, [sp, #108]
			d=(unsigned int)c;d>>=4;d&=0xF;d+=d>9?0x37:0x30;
   8193c:	d3441f63 	ubfx	x3, x27, #4, #4
   81940:	12000f7b 	and	w27, w27, #0xf
   81944:	f100247f 	cmp	x3, #0x9
   81948:	9a938284 	csel	x4, x20, x19, hi  // hi = pmore
   8194c:	8b040063 	add	x3, x3, x4
   81950:	f9003be3 	str	x3, [sp, #112]
		lfb_print(x, y, (char *)&d);
   81954:	97fffedd 	bl	814c8 <lfb_print>
		lfb_print(x, y, (char *)&d);
   81958:	294d07e3 	ldp	w3, w1, [sp, #104]
			d=(unsigned int)c;d&=0xF;d+=d>9?0x37:0x30;
   8195c:	71002b7f 	cmp	w27, #0xa
   81960:	9a943260 	csel	x0, x19, x20, cc  // cc = lo, ul, last
   81964:	92401f7b 	and	x27, x27, #0xff
		x++;
   81968:	11000463 	add	w3, w3, #0x1
		lfb_print(x, y, (char *)&d);
   8196c:	9101c3e2 	add	x2, sp, #0x70
			d=(unsigned int)c;d&=0xF;d+=d>9?0x37:0x30;
   81970:	8b00037b 	add	x27, x27, x0
		lfb_print(x, y, (char *)&d);
   81974:	2a0303e0 	mov	w0, w3
		x++;
   81978:	b9006be3 	str	w3, [sp, #104]
			d=(unsigned int)c;d&=0xF;d+=d>9?0x37:0x30;
   8197c:	f9003bfb 	str	x27, [sp, #112]
		lfb_print(x, y, (char *)&d);
   81980:	97fffed2 	bl	814c8 <lfb_print>
			lfb_print(x, y, " ");
   81984:	294d07e0 	ldp	w0, w1, [sp, #104]
   81988:	aa1603e2 	mov	x2, x22
		x++;
   8198c:	11000400 	add	w0, w0, #0x1
   81990:	b9006be0 	str	w0, [sp, #104]
			lfb_print(x, y, " ");
   81994:	97fffecd 	bl	814c8 <lfb_print>
		x++;
   81998:	b9406be0 	ldr	w0, [sp, #104]
			if(b%4==3)
   8199c:	92400781 	and	x1, x28, #0x3
   819a0:	f1000c3f 	cmp	x1, #0x3
   819a4:	9100079c 	add	x28, x28, #0x1
		x++;
   819a8:	11000400 	add	w0, w0, #0x1
   819ac:	b9006be0 	str	w0, [sp, #104]
			if(b%4==3)
   819b0:	54fffbc1 	b.ne	81928 <lfb_dump+0x90>  // b.any
				lfb_print(x, y, " ");
   819b4:	b9406fe1 	ldr	w1, [sp, #108]
   819b8:	aa1603e2 	mov	x2, x22
   819bc:	97fffec3 	bl	814c8 <lfb_print>
			x++;
   819c0:	b9406be0 	ldr	w0, [sp, #104]
		for(b=0;b<16;b++) {
   819c4:	f100439f 	cmp	x28, #0x10
			x++;
   819c8:	11000400 	add	w0, w0, #0x1
   819cc:	b9006be0 	str	w0, [sp, #104]
		for(b=0;b<16;b++) {
   819d0:	54fffb01 	b.ne	81930 <lfb_dump+0x98>  // b.any
   819d4:	aa1503fb 	mov	x27, x21
			c=*((unsigned char*)(a+b));
   819d8:	38401763 	ldrb	w3, [x27], #1
			lfb_print(x, y, (char *)&temp);
   819dc:	9101e3e2 	add	x2, sp, #0x78
   819e0:	b9406fe1 	ldr	w1, [sp, #108]
		temp = (c<32 || c >= 127? '.' : c);
   819e4:	51008064 	sub	w4, w3, #0x20
   819e8:	12001c84 	and	w4, w4, #0xff
   819ec:	71017c9f 	cmp	w4, #0x5f
   819f0:	1a983063 	csel	w3, w3, w24, cc  // cc = lo, ul, last
   819f4:	92401c63 	and	x3, x3, #0xff
   819f8:	f9003fe3 	str	x3, [sp, #120]
			lfb_print(x, y, (char *)&temp);
   819fc:	97fffeb3 	bl	814c8 <lfb_print>
		x++;
   81a00:	b9406be0 	ldr	w0, [sp, #104]
		for(b=0;b<16;b++) {
   81a04:	eb1b02ff 	cmp	x23, x27
		x++;
   81a08:	11000400 	add	w0, w0, #0x1
   81a0c:	b9006be0 	str	w0, [sp, #104]
		for(b=0;b<16;b++) {
   81a10:	54fffe41 	b.ne	819d8 <lfb_dump+0x140>  // b.any
		}
		x = 0;
		y++;
   81a14:	b9406fe0 	ldr	w0, [sp, #108]
	for(a=(unsigned long)ptr;a<(unsigned long)ptr+512;a+=16) {
   81a18:	910042b5 	add	x21, x21, #0x10
   81a1c:	eb1902bf 	cmp	x21, x25
   81a20:	910042f7 	add	x23, x23, #0x10
		y++;
   81a24:	11000400 	add	w0, w0, #0x1
   81a28:	290d03ff 	stp	wzr, w0, [sp, #104]
	for(a=(unsigned long)ptr;a<(unsigned long)ptr+512;a+=16) {
   81a2c:	54fff661 	b.ne	818f8 <lfb_dump+0x60>  // b.any
   81a30:	a94153f3 	ldp	x19, x20, [sp, #16]
   81a34:	a94363f7 	ldp	x23, x24, [sp, #48]
   81a38:	a9446bf9 	ldp	x25, x26, [sp, #64]
   81a3c:	a94573fb 	ldp	x27, x28, [sp, #80]
	}
}
   81a40:	a9425bf5 	ldp	x21, x22, [sp, #32]
   81a44:	a8c87bfd 	ldp	x29, x30, [sp], #128
   81a48:	d65f03c0 	ret
   81a4c:	00000000 	.inst	0x00000000 ; undefined

0000000000081a50 <vsprintf>:
    long int arg;
    int len, sign, i;
    char *p, *orig=dst, tmpstr[19];

    // failsafes
    if(dst==(void*)0 || fmt==(void*)0) {
   81a50:	f100001f 	cmp	x0, #0x0
   81a54:	fa401824 	ccmp	x1, #0x0, #0x4, ne  // ne = any
   81a58:	540009c0 	b.eq	81b90 <vsprintf+0x140>  // b.none
{
   81a5c:	a9bb7bfd 	stp	x29, x30, [sp, #-80]!
                i=16;
                tmpstr[i]=0;
                do {
                    char n=arg & 0xf;
                    // 0-9 => '0'-'9', 10-15 => 'A'-'F'
                    tmpstr[--i]=n+(n>9?0x37:0x30);
   81a60:	52800608 	mov	w8, #0x30                  	// #48
                    tmpstr[--i]='0'+(arg%10);
   81a64:	b203e7eb 	mov	x11, #0x6666666666666666    	// #7378697629483820646
{
   81a68:	910003fd 	mov	x29, sp
                p=&tmpstr[i];
                goto copystring;
            } else
            // string
            if(*fmt=='s') {
                p = __builtin_va_arg(args, char*);
   81a6c:	a9404049 	ldp	x9, x16, [x2]
   81a70:	aa0003e7 	mov	x7, x0
   81a74:	b940184a 	ldr	w10, [x2, #24]
                        tmpstr[--i]='0';
   81a78:	2a0803ee 	mov	w14, w8
copystring:     if(p==(void*)0) {
                    p="(null)";
   81a7c:	b000008f 	adrp	x15, 92000 <sd_init+0x470>
                    tmpstr[--i]=n+(n>9?0x37:0x30);
   81a80:	528006ec 	mov	w12, #0x37                  	// #55
                    while(i>16-len) {
   81a84:	5280021e 	mov	w30, #0x10                  	// #16
                i=18;
   81a88:	52800252 	mov	w18, #0x12                  	// #18
                    tmpstr[--i]='0'+(arg%10);
   81a8c:	f28ccceb 	movk	x11, #0x6667
                        tmpstr[--i]=' ';
   81a90:	5280040d 	mov	w13, #0x20                  	// #32
                    tmpstr[--i]='-';
   81a94:	528005b1 	mov	w17, #0x2d                  	// #45
    while(*fmt) {
   81a98:	39400022 	ldrb	w2, [x1]
   81a9c:	34000142 	cbz	w2, 81ac4 <vsprintf+0x74>
        if(*fmt=='%') {
   81aa0:	7100945f 	cmp	w2, #0x25
   81aa4:	91000424 	add	x4, x1, #0x1
   81aa8:	54000160 	b.eq	81ad4 <vsprintf+0x84>  // b.none
                while(*p) {
                    *dst++ = *p++;
                }
            }
        } else {
put:        *dst++ = *fmt;
   81aac:	aa0703e3 	mov	x3, x7
   81ab0:	aa0403e1 	mov	x1, x4
   81ab4:	38001462 	strb	w2, [x3], #1
    while(*fmt) {
   81ab8:	39400022 	ldrb	w2, [x1]
put:        *dst++ = *fmt;
   81abc:	aa0303e7 	mov	x7, x3
    while(*fmt) {
   81ac0:	35ffff02 	cbnz	w2, 81aa0 <vsprintf+0x50>
        }
        fmt++;
    }
    *dst=0;
   81ac4:	390000ff 	strb	wzr, [x7]
    __builtin_va_end(args);
    // number of bytes written
    return dst-orig;
   81ac8:	4b0000e0 	sub	w0, w7, w0
}
   81acc:	a8c57bfd 	ldp	x29, x30, [sp], #80
   81ad0:	d65f03c0 	ret
            if(*fmt=='%') {
   81ad4:	39400422 	ldrb	w2, [x1, #1]
   81ad8:	91000821 	add	x1, x1, #0x2
   81adc:	7100945f 	cmp	w2, #0x25
   81ae0:	54000540 	b.eq	81b88 <vsprintf+0x138>  // b.none
            while(*fmt>='0' && *fmt<='9') {
   81ae4:	5100c045 	sub	w5, w2, #0x30
   81ae8:	12001ca3 	and	w3, w5, #0xff
   81aec:	7100247f 	cmp	w3, #0x9
   81af0:	54000d88 	b.hi	81ca0 <vsprintf+0x250>  // b.pmore
            len=0;
   81af4:	52800003 	mov	w3, #0x0                   	// #0
   81af8:	14000002 	b	81b00 <vsprintf+0xb0>
   81afc:	aa0603e4 	mov	x4, x6
                len *= 10;
   81b00:	0b030861 	add	w1, w3, w3, lsl #2
            while(*fmt>='0' && *fmt<='9') {
   81b04:	39400482 	ldrb	w2, [x4, #1]
                fmt++;
   81b08:	91000486 	add	x6, x4, #0x1
                len += *fmt-'0';
   81b0c:	0b0104a3 	add	w3, w5, w1, lsl #1
            while(*fmt>='0' && *fmt<='9') {
   81b10:	5100c045 	sub	w5, w2, #0x30
   81b14:	12001ca1 	and	w1, w5, #0xff
   81b18:	7100243f 	cmp	w1, #0x9
   81b1c:	54ffff09 	b.ls	81afc <vsprintf+0xac>  // b.plast
   81b20:	91000881 	add	x1, x4, #0x2
            if(*fmt=='l') {
   81b24:	7101b05f 	cmp	w2, #0x6c
   81b28:	54000061 	b.ne	81b34 <vsprintf+0xe4>  // b.any
                fmt++;
   81b2c:	aa0103e6 	mov	x6, x1
            if(*fmt=='l') {
   81b30:	91000421 	add	x1, x1, #0x1
            if(*fmt=='c') {
   81b34:	394000c2 	ldrb	w2, [x6]
   81b38:	71018c5f 	cmp	w2, #0x63
   81b3c:	540002e0 	b.eq	81b98 <vsprintf+0x148>  // b.none
            if(*fmt=='d') {
   81b40:	7101905f 	cmp	w2, #0x64
   81b44:	540004c0 	b.eq	81bdc <vsprintf+0x18c>  // b.none
            if(*fmt=='x') {
   81b48:	7101e05f 	cmp	w2, #0x78
   81b4c:	54000b00 	b.eq	81cac <vsprintf+0x25c>  // b.none
            if(*fmt=='s') {
   81b50:	7101cc5f 	cmp	w2, #0x73
   81b54:	54fffa21 	b.ne	81a98 <vsprintf+0x48>  // b.any
                p = __builtin_va_arg(args, char*);
   81b58:	37f8100a 	tbnz	w10, #31, 81d58 <vsprintf+0x308>
   81b5c:	91003d23 	add	x3, x9, #0xf
   81b60:	aa0903e2 	mov	x2, x9
   81b64:	927df069 	and	x9, x3, #0xfffffffffffffff8
   81b68:	f9400042 	ldr	x2, [x2]
copystring:     if(p==(void*)0) {
   81b6c:	b5000942 	cbnz	x2, 81c94 <vsprintf+0x244>
                    p="(null)";
   81b70:	9103e1e2 	add	x2, x15, #0xf8
                while(*p) {
   81b74:	52800503 	mov	w3, #0x28                  	// #40
                    *dst++ = *p++;
   81b78:	380014e3 	strb	w3, [x7], #1
                while(*p) {
   81b7c:	38401c43 	ldrb	w3, [x2, #1]!
   81b80:	35ffffc3 	cbnz	w3, 81b78 <vsprintf+0x128>
   81b84:	17ffffc5 	b	81a98 <vsprintf+0x48>
   81b88:	aa0103e4 	mov	x4, x1
   81b8c:	17ffffc8 	b	81aac <vsprintf+0x5c>
        return 0;
   81b90:	52800000 	mov	w0, #0x0                   	// #0
}
   81b94:	d65f03c0 	ret
                arg = __builtin_va_arg(args, int);
   81b98:	37f8012a 	tbnz	w10, #31, 81bbc <vsprintf+0x16c>
   81b9c:	91002d23 	add	x3, x9, #0xb
   81ba0:	aa0903e2 	mov	x2, x9
   81ba4:	927df069 	and	x9, x3, #0xfffffffffffffff8
                *dst++ = (char)arg;
   81ba8:	aa0703e3 	mov	x3, x7
   81bac:	b9400042 	ldr	w2, [x2]
   81bb0:	38001462 	strb	w2, [x3], #1
   81bb4:	aa0303e7 	mov	x7, x3
                continue;
   81bb8:	17ffffb8 	b	81a98 <vsprintf+0x48>
                arg = __builtin_va_arg(args, int);
   81bbc:	11002143 	add	w3, w10, #0x8
   81bc0:	7100007f 	cmp	w3, #0x0
   81bc4:	54000dad 	b.le	81d78 <vsprintf+0x328>
   81bc8:	91002d24 	add	x4, x9, #0xb
   81bcc:	aa0903e2 	mov	x2, x9
   81bd0:	2a0303ea 	mov	w10, w3
   81bd4:	927df089 	and	x9, x4, #0xfffffffffffffff8
   81bd8:	17fffff4 	b	81ba8 <vsprintf+0x158>
                arg = __builtin_va_arg(args, int);
   81bdc:	a90153f3 	stp	x19, x20, [sp, #16]
   81be0:	f90013f5 	str	x21, [sp, #32]
   81be4:	37f809aa 	tbnz	w10, #31, 81d18 <vsprintf+0x2c8>
   81be8:	91002d24 	add	x4, x9, #0xb
   81bec:	aa0903e2 	mov	x2, x9
   81bf0:	927df089 	and	x9, x4, #0xfffffffffffffff8
   81bf4:	b9400042 	ldr	w2, [x2]
                sign=0;
   81bf8:	52800015 	mov	w21, #0x0                   	// #0
                arg = __builtin_va_arg(args, int);
   81bfc:	93407c45 	sxtw	x5, w2
                if((int)arg<0) {
   81c00:	36f80062 	tbz	w2, #31, 81c0c <vsprintf+0x1bc>
                    arg*=-1;
   81c04:	cb0503e5 	neg	x5, x5
                    sign++;
   81c08:	52800035 	mov	w21, #0x1                   	// #1
                tmpstr[i]=0;
   81c0c:	9100e3f3 	add	x19, sp, #0x38
                i=18;
   81c10:	52800254 	mov	w20, #0x12                  	// #18
                tmpstr[i]=0;
   81c14:	39012bff 	strb	wzr, [sp, #74]
   81c18:	14000002 	b	81c20 <vsprintf+0x1d0>
   81c1c:	2a0603f4 	mov	w20, w6
                    tmpstr[--i]='0'+(arg%10);
   81c20:	9b4b7ca2 	smulh	x2, x5, x11
   81c24:	51000686 	sub	w6, w20, #0x1
   81c28:	d1000673 	sub	x19, x19, #0x1
   81c2c:	9342fc42 	asr	x2, x2, #2
   81c30:	cb85fc42 	sub	x2, x2, x5, asr #63
                } while(arg!=0 && i>0);
   81c34:	f100005f 	cmp	x2, #0x0
                    tmpstr[--i]='0'+(arg%10);
   81c38:	8b020844 	add	x4, x2, x2, lsl #2
   81c3c:	cb0404a4 	sub	x4, x5, x4, lsl #1
                    arg/=10;
   81c40:	aa0203e5 	mov	x5, x2
                    tmpstr[--i]='0'+(arg%10);
   81c44:	1100c082 	add	w2, w4, #0x30
                } while(arg!=0 && i>0);
   81c48:	1a9f07e4 	cset	w4, ne  // ne = any
   81c4c:	710000df 	cmp	w6, #0x0
                    tmpstr[--i]='0'+(arg%10);
   81c50:	39004a62 	strb	w2, [x19, #18]
                } while(arg!=0 && i>0);
   81c54:	1a9fd7e2 	cset	w2, gt
   81c58:	6a02009f 	tst	w4, w2
   81c5c:	54fffe01 	b.ne	81c1c <vsprintf+0x1cc>  // b.any
                if(sign) {
   81c60:	93407cc2 	sxtw	x2, w6
   81c64:	340000b5 	cbz	w21, 81c78 <vsprintf+0x228>
                    tmpstr[--i]='-';
   81c68:	51000a86 	sub	w6, w20, #0x2
   81c6c:	9100e3e4 	add	x4, sp, #0x38
   81c70:	93407cc2 	sxtw	x2, w6
   81c74:	3826c891 	strb	w17, [x4, w6, sxtw]
                if(len>0 && len<18) {
   81c78:	51000464 	sub	w4, w3, #0x1
   81c7c:	7100409f 	cmp	w4, #0x10
   81c80:	54000829 	b.ls	81d84 <vsprintf+0x334>  // b.plast
                goto copystring;
   81c84:	a94153f3 	ldp	x19, x20, [sp, #16]
                p=&tmpstr[i];
   81c88:	9100e3e3 	add	x3, sp, #0x38
                goto copystring;
   81c8c:	f94013f5 	ldr	x21, [sp, #32]
                p=&tmpstr[i];
   81c90:	8b020062 	add	x2, x3, x2
                while(*p) {
   81c94:	39400043 	ldrb	w3, [x2]
   81c98:	35fff703 	cbnz	w3, 81b78 <vsprintf+0x128>
   81c9c:	17ffff7f 	b	81a98 <vsprintf+0x48>
            fmt++;
   81ca0:	aa0403e6 	mov	x6, x4
            len=0;
   81ca4:	52800003 	mov	w3, #0x0                   	// #0
   81ca8:	17ffff9f 	b	81b24 <vsprintf+0xd4>
                arg = __builtin_va_arg(args, long int);
   81cac:	a90153f3 	stp	x19, x20, [sp, #16]
   81cb0:	37f8044a 	tbnz	w10, #31, 81d38 <vsprintf+0x2e8>
   81cb4:	91003d24 	add	x4, x9, #0xf
   81cb8:	aa0903e2 	mov	x2, x9
   81cbc:	927df089 	and	x9, x4, #0xfffffffffffffff8
   81cc0:	9100e3e6 	add	x6, sp, #0x38
                tmpstr[i]=0;
   81cc4:	390123ff 	strb	wzr, [sp, #72]
                arg = __builtin_va_arg(args, long int);
   81cc8:	f9400044 	ldr	x4, [x2]
                i=16;
   81ccc:	52800202 	mov	w2, #0x10                  	// #16
                    char n=arg & 0xf;
   81cd0:	12000c93 	and	w19, w4, #0xf
                    arg>>=4;
   81cd4:	9344fc84 	asr	x4, x4, #4
                    tmpstr[--i]=n+(n>9?0x37:0x30);
   81cd8:	7100267f 	cmp	w19, #0x9
   81cdc:	51000442 	sub	w2, w2, #0x1
   81ce0:	1a888185 	csel	w5, w12, w8, hi  // hi = pmore
                } while(arg!=0 && i>0);
   81ce4:	f100009f 	cmp	x4, #0x0
                    tmpstr[--i]=n+(n>9?0x37:0x30);
   81ce8:	0b1300a5 	add	w5, w5, w19
   81cec:	39003cc5 	strb	w5, [x6, #15]
                } while(arg!=0 && i>0);
   81cf0:	7a401844 	ccmp	w2, #0x0, #0x4, ne  // ne = any
   81cf4:	d10004c6 	sub	x6, x6, #0x1
   81cf8:	54fffecc 	b.gt	81cd0 <vsprintf+0x280>
                if(len>0 && len<=16) {
   81cfc:	51000464 	sub	w4, w3, #0x1
   81d00:	71003c9f 	cmp	w4, #0xf
   81d04:	540005c9 	b.ls	81dbc <vsprintf+0x36c>  // b.plast
                p=&tmpstr[i];
   81d08:	9100e3e3 	add	x3, sp, #0x38
   81d0c:	8b22c062 	add	x2, x3, w2, sxtw
   81d10:	a94153f3 	ldp	x19, x20, [sp, #16]
                goto copystring;
   81d14:	17ffffe0 	b	81c94 <vsprintf+0x244>
                arg = __builtin_va_arg(args, int);
   81d18:	11002144 	add	w4, w10, #0x8
   81d1c:	7100009f 	cmp	w4, #0x0
   81d20:	5400068d 	b.le	81df0 <vsprintf+0x3a0>
   81d24:	91002d25 	add	x5, x9, #0xb
   81d28:	aa0903e2 	mov	x2, x9
   81d2c:	2a0403ea 	mov	w10, w4
   81d30:	927df0a9 	and	x9, x5, #0xfffffffffffffff8
   81d34:	17ffffb0 	b	81bf4 <vsprintf+0x1a4>
                arg = __builtin_va_arg(args, long int);
   81d38:	11002144 	add	w4, w10, #0x8
   81d3c:	7100009f 	cmp	w4, #0x0
   81d40:	540005ed 	b.le	81dfc <vsprintf+0x3ac>
   81d44:	91003d25 	add	x5, x9, #0xf
   81d48:	aa0903e2 	mov	x2, x9
   81d4c:	2a0403ea 	mov	w10, w4
   81d50:	927df0a9 	and	x9, x5, #0xfffffffffffffff8
   81d54:	17ffffdb 	b	81cc0 <vsprintf+0x270>
                p = __builtin_va_arg(args, char*);
   81d58:	11002143 	add	w3, w10, #0x8
   81d5c:	7100007f 	cmp	w3, #0x0
   81d60:	5400028d 	b.le	81db0 <vsprintf+0x360>
   81d64:	91003d24 	add	x4, x9, #0xf
   81d68:	aa0903e2 	mov	x2, x9
   81d6c:	2a0303ea 	mov	w10, w3
   81d70:	927df089 	and	x9, x4, #0xfffffffffffffff8
   81d74:	17ffff7d 	b	81b68 <vsprintf+0x118>
                arg = __builtin_va_arg(args, int);
   81d78:	8b2ac202 	add	x2, x16, w10, sxtw
   81d7c:	2a0303ea 	mov	w10, w3
   81d80:	17ffff8a 	b	81ba8 <vsprintf+0x158>
                    while(i>18-len) {
   81d84:	4b030243 	sub	w3, w18, w3
   81d88:	6b0300df 	cmp	w6, w3
   81d8c:	54fff7cd 	b.le	81c84 <vsprintf+0x234>
                        tmpstr[--i]=' ';
   81d90:	9100e3e4 	add	x4, sp, #0x38
   81d94:	8b020084 	add	x4, x4, x2
   81d98:	d1000442 	sub	x2, x2, #0x1
                    while(i>18-len) {
   81d9c:	6b02007f 	cmp	w3, w2
                        tmpstr[--i]=' ';
   81da0:	381ff08d 	sturb	w13, [x4, #-1]
                    while(i>18-len) {
   81da4:	54ffff6b 	b.lt	81d90 <vsprintf+0x340>  // b.tstop
   81da8:	93407c62 	sxtw	x2, w3
   81dac:	17ffffb6 	b	81c84 <vsprintf+0x234>
                p = __builtin_va_arg(args, char*);
   81db0:	8b2ac202 	add	x2, x16, w10, sxtw
   81db4:	2a0303ea 	mov	w10, w3
   81db8:	17ffff6c 	b	81b68 <vsprintf+0x118>
                    while(i>16-len) {
   81dbc:	4b0303c3 	sub	w3, w30, w3
   81dc0:	6b03005f 	cmp	w2, w3
   81dc4:	54fffa2d 	b.le	81d08 <vsprintf+0x2b8>
   81dc8:	93407c42 	sxtw	x2, w2
   81dcc:	d503201f 	nop
                        tmpstr[--i]='0';
   81dd0:	9100e3e4 	add	x4, sp, #0x38
   81dd4:	8b020084 	add	x4, x4, x2
   81dd8:	d1000442 	sub	x2, x2, #0x1
                    while(i>16-len) {
   81ddc:	6b02007f 	cmp	w3, w2
                        tmpstr[--i]='0';
   81de0:	381ff08e 	sturb	w14, [x4, #-1]
                    while(i>16-len) {
   81de4:	54ffff6b 	b.lt	81dd0 <vsprintf+0x380>  // b.tstop
                        tmpstr[--i]='0';
   81de8:	2a0303e2 	mov	w2, w3
   81dec:	17ffffc7 	b	81d08 <vsprintf+0x2b8>
                arg = __builtin_va_arg(args, int);
   81df0:	8b2ac202 	add	x2, x16, w10, sxtw
   81df4:	2a0403ea 	mov	w10, w4
   81df8:	17ffff7f 	b	81bf4 <vsprintf+0x1a4>
                arg = __builtin_va_arg(args, long int);
   81dfc:	8b2ac202 	add	x2, x16, w10, sxtw
   81e00:	2a0403ea 	mov	w10, w4
   81e04:	17ffffaf 	b	81cc0 <vsprintf+0x270>

0000000000081e08 <sprintf>:

/**
 * Variable length arguments
 */
unsigned int sprintf(char *dst, char* fmt, ...)
{
   81e08:	a9b07bfd 	stp	x29, x30, [sp, #-256]!
    __builtin_va_list args;
    __builtin_va_start(args, fmt);
   81e0c:	128005e9 	mov	w9, #0xffffffd0            	// #-48
   81e10:	12800fe8 	mov	w8, #0xffffff80            	// #-128
{
   81e14:	910003fd 	mov	x29, sp
    __builtin_va_start(args, fmt);
   81e18:	910343ea 	add	x10, sp, #0xd0
   81e1c:	910403eb 	add	x11, sp, #0x100
   81e20:	a9032feb 	stp	x11, x11, [sp, #48]
   81e24:	f90023ea 	str	x10, [sp, #64]
   81e28:	290923e9 	stp	w9, w8, [sp, #72]
    return vsprintf(dst,fmt,args);
   81e2c:	a9432fea 	ldp	x10, x11, [sp, #48]
   81e30:	a9012fea 	stp	x10, x11, [sp, #16]
   81e34:	a94427e8 	ldp	x8, x9, [sp, #64]
   81e38:	a90227e8 	stp	x8, x9, [sp, #32]
{
   81e3c:	3d8017e0 	str	q0, [sp, #80]
   81e40:	3d801be1 	str	q1, [sp, #96]
   81e44:	3d801fe2 	str	q2, [sp, #112]
   81e48:	3d8023e3 	str	q3, [sp, #128]
   81e4c:	3d8027e4 	str	q4, [sp, #144]
   81e50:	3d802be5 	str	q5, [sp, #160]
   81e54:	3d802fe6 	str	q6, [sp, #176]
   81e58:	3d8033e7 	str	q7, [sp, #192]
   81e5c:	a90d0fe2 	stp	x2, x3, [sp, #208]
    return vsprintf(dst,fmt,args);
   81e60:	910043e2 	add	x2, sp, #0x10
{
   81e64:	a90e17e4 	stp	x4, x5, [sp, #224]
   81e68:	a90f1fe6 	stp	x6, x7, [sp, #240]
    return vsprintf(dst,fmt,args);
   81e6c:	97fffef9 	bl	81a50 <vsprintf>
}
   81e70:	a8d07bfd 	ldp	x29, x30, [sp], #256
   81e74:	d65f03c0 	ret

0000000000081e78 <uart_init>:

/**
 * Set baud rate and characteristics (115200 8N1) and map to GPIO
 */
void uart_init()
{
   81e78:	a9bd7bfd 	stp	x29, x30, [sp, #-48]!
	
	/* initialize UART */
	*UART0_CR = 0;         // turn off UART0

	/* set up clock for consistent divisor values */
	mailbox[0] = 8*4;
   81e7c:	9000aaa0 	adrp	x0, 15d5000 <allocated+0xfb940>
   81e80:	9123c001 	add	x1, x0, #0x8f0
{
   81e84:	910003fd 	mov	x29, sp
   81e88:	a90153f3 	stp	x19, x20, [sp, #16]
	*UART0_CR = 0;         // turn off UART0
   81e8c:	d2820613 	mov	x19, #0x1030                	// #4144
   81e90:	f2a7e413 	movk	x19, #0x3f20, lsl #16
{
   81e94:	f90013f5 	str	x21, [sp, #32]
	mailbox[0] = 8*4;
   81e98:	52800402 	mov	w2, #0x20                  	// #32
	*UART0_CR = 0;         // turn off UART0
   81e9c:	b900027f 	str	wzr, [x19]
	mailbox[1] = MBOX_REQUEST;
	mailbox[2] = MBOX_TAG_SETCLKRATE; // set clock rate
   81ea0:	52900043 	mov	w3, #0x8002                	// #32770
	mailbox[0] = 8*4;
   81ea4:	b908f002 	str	w2, [x0, #2288]
	mailbox[2] = MBOX_TAG_SETCLKRATE; // set clock rate
   81ea8:	72a00063 	movk	w3, #0x3, lsl #16
	mailbox[1] = MBOX_REQUEST;
   81eac:	b900043f 	str	wzr, [x1, #4]
	mailbox[3] = 12;
   81eb0:	52800182 	mov	w2, #0xc                   	// #12
	mailbox[2] = MBOX_TAG_SETCLKRATE; // set clock rate
   81eb4:	b9000823 	str	w3, [x1, #8]
	mailbox[4] = 8;
   81eb8:	52800100 	mov	w0, #0x8                   	// #8
	mailbox[3] = 12;
   81ebc:	b9000c22 	str	w2, [x1, #12]
	mailbox[5] = 2;           // UART clock
	mailbox[6] = 4000000;     // 4Mhz
   81ec0:	52812002 	mov	w2, #0x900                 	// #2304
	mailbox[4] = 8;
   81ec4:	b9001020 	str	w0, [x1, #16]
	mailbox[5] = 2;           // UART clock
   81ec8:	52800054 	mov	w20, #0x2                   	// #2
	mailbox[6] = 4000000;     // 4Mhz
   81ecc:	72a007a2 	movk	w2, #0x3d, lsl #16
	mailbox[5] = 2;           // UART clock
   81ed0:	b9001434 	str	w20, [x1, #20]
	mailbox[6] = 4000000;     // 4Mhz
   81ed4:	b9001822 	str	w2, [x1, #24]
	r&=~((7<<12)|(7<<15)); // gpio14, gpio15
	r|=(4<<12)|(4<<15);    // alt0
	*GPFSEL1 = r;
	*GPPUD = 0;            // enable pins 14 and 15
	wait_cycles(150);
	*GPPUDCLK0 = (1<<14)|(1<<15);
   81ed8:	d2801315 	mov	x21, #0x98                  	// #152
	mailbox[7] = MBOX_TAG_LAST;
   81edc:	b9001c3f 	str	wzr, [x1, #28]
	mailbox_call(MBOX_CH_PROP);
   81ee0:	94003cc4 	bl	911f0 <mailbox_call>
	r=*GPFSEL1;
   81ee4:	d2800082 	mov	x2, #0x4                   	// #4
	*GPPUD = 0;            // enable pins 14 and 15
   81ee8:	d2801283 	mov	x3, #0x94                  	// #148
	r=*GPFSEL1;
   81eec:	f2a7e402 	movk	x2, #0x3f20, lsl #16
	*GPPUD = 0;            // enable pins 14 and 15
   81ef0:	f2a7e403 	movk	x3, #0x3f20, lsl #16
	r|=(4<<12)|(4<<15);    // alt0
   81ef4:	52880004 	mov	w4, #0x4000                	// #16384
	*GPPUDCLK0 = (1<<14)|(1<<15);
   81ef8:	f2a7e415 	movk	x21, #0x3f20, lsl #16
	r=*GPFSEL1;
   81efc:	b9400041 	ldr	w1, [x2]
	r|=(4<<12)|(4<<15);    // alt0
   81f00:	72a00044 	movk	w4, #0x2, lsl #16
	wait_cycles(150);
   81f04:	528012c0 	mov	w0, #0x96                  	// #150
	r&=~((7<<12)|(7<<15)); // gpio14, gpio15
   81f08:	120e6421 	and	w1, w1, #0xfffc0fff
	r|=(4<<12)|(4<<15);    // alt0
   81f0c:	2a040021 	orr	w1, w1, w4
	*GPFSEL1 = r;
   81f10:	b9000041 	str	w1, [x2]
	*GPPUD = 0;            // enable pins 14 and 15
   81f14:	b900007f 	str	wzr, [x3]
	wait_cycles(150);
   81f18:	9400038e 	bl	82d50 <wait_cycles>
	*GPPUDCLK0 = (1<<14)|(1<<15);
   81f1c:	52980000 	mov	w0, #0xc000                	// #49152
   81f20:	b90002a0 	str	w0, [x21]
	wait_cycles(150);
   81f24:	528012c0 	mov	w0, #0x96                  	// #150
   81f28:	9400038a 	bl	82d50 <wait_cycles>
	*GPPUDCLK0 = 0;        // flush GPIO setup
   81f2c:	b90002bf 	str	wzr, [x21]

	*UART0_ICR = 0x7FF;    // clear interrupts
   81f30:	d2820880 	mov	x0, #0x1044                	// #4164
	*UART0_IBRD = 2;       // 115200 baud
   81f34:	d2820482 	mov	x2, #0x1024                	// #4132
	*UART0_ICR = 0x7FF;    // clear interrupts
   81f38:	f2a7e400 	movk	x0, #0x3f20, lsl #16
	*UART0_IBRD = 2;       // 115200 baud
   81f3c:	f2a7e402 	movk	x2, #0x3f20, lsl #16
	*UART0_FBRD = 0xB;
   81f40:	d2820501 	mov	x1, #0x1028                	// #4136
	*UART0_ICR = 0x7FF;    // clear interrupts
   81f44:	5280ffe3 	mov	w3, #0x7ff                 	// #2047
	*UART0_FBRD = 0xB;
   81f48:	f2a7e401 	movk	x1, #0x3f20, lsl #16
	*UART0_LCRH = 0b11<<5; // 8n1
	*UART0_CR = 0x301;     // enable Tx, Rx, FIFO
}
   81f4c:	f94013f5 	ldr	x21, [sp, #32]
	*UART0_ICR = 0x7FF;    // clear interrupts
   81f50:	b9000003 	str	w3, [x0]
	*UART0_LCRH = 0b11<<5; // 8n1
   81f54:	d2820580 	mov	x0, #0x102c                	// #4140
	*UART0_IBRD = 2;       // 115200 baud
   81f58:	b9000054 	str	w20, [x2]
	*UART0_LCRH = 0b11<<5; // 8n1
   81f5c:	f2a7e400 	movk	x0, #0x3f20, lsl #16
	*UART0_FBRD = 0xB;
   81f60:	52800162 	mov	w2, #0xb                   	// #11
   81f64:	b9000022 	str	w2, [x1]
	*UART0_LCRH = 0b11<<5; // 8n1
   81f68:	52800c01 	mov	w1, #0x60                  	// #96
   81f6c:	b9000001 	str	w1, [x0]
	*UART0_CR = 0x301;     // enable Tx, Rx, FIFO
   81f70:	52806020 	mov	w0, #0x301                 	// #769
   81f74:	b9000260 	str	w0, [x19]
}
   81f78:	a94153f3 	ldp	x19, x20, [sp, #16]
   81f7c:	a8c37bfd 	ldp	x29, x30, [sp], #48
   81f80:	d65f03c0 	ret
   81f84:	d503201f 	nop

0000000000081f88 <uart_send>:
/**
 * Send a character
 */
void uart_send(unsigned int c) {
	/* wait until we can send */
	do{asm volatile("nop");}while(*UART0_FR&0x20);
   81f88:	d2820302 	mov	x2, #0x1018                	// #4120
   81f8c:	f2a7e402 	movk	x2, #0x3f20, lsl #16
   81f90:	d503201f 	nop
   81f94:	b9400041 	ldr	w1, [x2]
   81f98:	372fffc1 	tbnz	w1, #5, 81f90 <uart_send+0x8>
	/* write the character to the buffer */
	*UART0_DR=c;
   81f9c:	d2820001 	mov	x1, #0x1000                	// #4096
   81fa0:	f2a7e401 	movk	x1, #0x3f20, lsl #16
   81fa4:	b9000020 	str	w0, [x1]
}
   81fa8:	d65f03c0 	ret
   81fac:	d503201f 	nop

0000000000081fb0 <uart_getc>:
 * Receive a character
 */
char uart_getc() {
	char r;
	/* wait until something is in the buffer */
	do{asm volatile("nop");}while(*UART0_FR&0x10);
   81fb0:	d2820301 	mov	x1, #0x1018                	// #4120
   81fb4:	f2a7e401 	movk	x1, #0x3f20, lsl #16
   81fb8:	d503201f 	nop
   81fbc:	b9400020 	ldr	w0, [x1]
   81fc0:	3727ffc0 	tbnz	w0, #4, 81fb8 <uart_getc+0x8>
	/* read it and return */
	r=(char)(*UART0_DR);
   81fc4:	d2820000 	mov	x0, #0x1000                	// #4096
	/* convert carrige return to newline */
	return r=='\r'?'\n':r;
   81fc8:	52800141 	mov	w1, #0xa                   	// #10
	r=(char)(*UART0_DR);
   81fcc:	f2a7e400 	movk	x0, #0x3f20, lsl #16
   81fd0:	b9400000 	ldr	w0, [x0]
   81fd4:	12001c00 	and	w0, w0, #0xff
	return r=='\r'?'\n':r;
   81fd8:	7100341f 	cmp	w0, #0xd
}
   81fdc:	1a811000 	csel	w0, w0, w1, ne  // ne = any
   81fe0:	d65f03c0 	ret
   81fe4:	d503201f 	nop

0000000000081fe8 <uart_puts>:

/**
 * Display a string
 */
void uart_puts(char *s) {
	while(*s) {
   81fe8:	39400001 	ldrb	w1, [x0]
   81fec:	34000221 	cbz	w1, 82030 <uart_puts+0x48>
	do{asm volatile("nop");}while(*UART0_FR&0x20);
   81ff0:	d2820302 	mov	x2, #0x1018                	// #4120
	*UART0_DR=c;
   81ff4:	d2820004 	mov	x4, #0x1000                	// #4096
	do{asm volatile("nop");}while(*UART0_FR&0x20);
   81ff8:	f2a7e402 	movk	x2, #0x3f20, lsl #16
	*UART0_DR=c;
   81ffc:	f2a7e404 	movk	x4, #0x3f20, lsl #16
   82000:	528001a5 	mov	w5, #0xd                   	// #13
   82004:	d503201f 	nop
		/* convert newline to carrige return + newline */
		if(*s=='\n')
   82008:	7100283f 	cmp	w1, #0xa
   8200c:	54000140 	b.eq	82034 <uart_puts+0x4c>  // b.none
			uart_send('\r');
		uart_send(*s++);
   82010:	38401403 	ldrb	w3, [x0], #1
void uart_send(unsigned int c) {
   82014:	d503201f 	nop
	do{asm volatile("nop");}while(*UART0_FR&0x20);
   82018:	d503201f 	nop
   8201c:	b9400041 	ldr	w1, [x2]
   82020:	372fffc1 	tbnz	w1, #5, 82018 <uart_puts+0x30>
	*UART0_DR=c;
   82024:	b9000083 	str	w3, [x4]
	while(*s) {
   82028:	39400001 	ldrb	w1, [x0]
   8202c:	35fffee1 	cbnz	w1, 82008 <uart_puts+0x20>
	}
}
   82030:	d65f03c0 	ret
	do{asm volatile("nop");}while(*UART0_FR&0x20);
   82034:	d503201f 	nop
   82038:	b9400041 	ldr	w1, [x2]
   8203c:	372fffc1 	tbnz	w1, #5, 82034 <uart_puts+0x4c>
	*UART0_DR=c;
   82040:	b9000085 	str	w5, [x4]
   82044:	17fffff3 	b	82010 <uart_puts+0x28>

0000000000082048 <uart_hex>:
	do{asm volatile("nop");}while(*UART0_FR&0x20);
   82048:	d2820302 	mov	x2, #0x1018                	// #4120
	*UART0_DR=c;
   8204c:	d2820005 	mov	x5, #0x1000                	// #4096
 * Display a binary value in hexadecimal
 */
void uart_hex(unsigned int d) {
	unsigned int n;
	int c;
	for(c=28;c>=0;c-=4) {
   82050:	52800383 	mov	w3, #0x1c                  	// #28
		// get highest tetrad
		n=(d>>c)&0xF;
		// 0-9 => '0'-'9', 10-15 => 'A'-'F'
		n+=n>9?0x37:0x30;
   82054:	528006e7 	mov	w7, #0x37                  	// #55
   82058:	52800606 	mov	w6, #0x30                  	// #48
	do{asm volatile("nop");}while(*UART0_FR&0x20);
   8205c:	f2a7e402 	movk	x2, #0x3f20, lsl #16
	*UART0_DR=c;
   82060:	f2a7e405 	movk	x5, #0x3f20, lsl #16
   82064:	d503201f 	nop
		n=(d>>c)&0xF;
   82068:	1ac32401 	lsr	w1, w0, w3
   8206c:	12000c21 	and	w1, w1, #0xf
		n+=n>9?0x37:0x30;
   82070:	7100243f 	cmp	w1, #0x9
   82074:	1a8680e4 	csel	w4, w7, w6, hi  // hi = pmore
   82078:	0b010084 	add	w4, w4, w1
void uart_send(unsigned int c) {
   8207c:	d503201f 	nop
	do{asm volatile("nop");}while(*UART0_FR&0x20);
   82080:	d503201f 	nop
   82084:	b9400041 	ldr	w1, [x2]
   82088:	372fffc1 	tbnz	w1, #5, 82080 <uart_hex+0x38>
	*UART0_DR=c;
   8208c:	b90000a4 	str	w4, [x5]
	for(c=28;c>=0;c-=4) {
   82090:	51001063 	sub	w3, w3, #0x4
   82094:	3100107f 	cmn	w3, #0x4
   82098:	54fffe81 	b.ne	82068 <uart_hex+0x20>  // b.any
		uart_send(n);
	}
}
   8209c:	d65f03c0 	ret

00000000000820a0 <uart_dump>:

/**
 * Dump memory
 */
void uart_dump(void *ptr)
{
   820a0:	aa0003e7 	mov	x7, x0
	unsigned long a,b,d;
	unsigned char c;
	for(a=(unsigned long)ptr;a<(unsigned long)ptr+512;a+=16) {
   820a4:	91080000 	add	x0, x0, #0x200
   820a8:	eb07001f 	cmp	x0, x7
   820ac:	54000da9 	b.ls	82260 <uart_dump+0x1c0>  // b.plast
   820b0:	910040ed 	add	x13, x7, #0x10
   820b4:	d2800409 	mov	x9, #0x20                  	// #32
   820b8:	eb0d001f 	cmp	x0, x13
   820bc:	9000008a 	adrp	x10, 92000 <sd_init+0x470>
   820c0:	9a9f2529 	csinc	x9, x9, xzr, cs  // cs = hs, nlast
	do{asm volatile("nop");}while(*UART0_FR&0x20);
   820c4:	d2820306 	mov	x6, #0x1018                	// #4120
	*UART0_DR=c;
   820c8:	d2820008 	mov	x8, #0x1000                	// #4096
   820cc:	aa0d03eb 	mov	x11, x13
   820d0:	910a414a 	add	x10, x10, #0x290
   820d4:	8b0910e9 	add	x9, x7, x9, lsl #4
{
   820d8:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
		n+=n>9?0x37:0x30;
   820dc:	528006ec 	mov	w12, #0x37                  	// #55
	do{asm volatile("nop");}while(*UART0_FR&0x20);
   820e0:	f2a7e406 	movk	x6, #0x3f20, lsl #16
	*UART0_DR=c;
   820e4:	f2a7e408 	movk	x8, #0x3f20, lsl #16
{
   820e8:	910003fd 	mov	x29, sp
		uart_hex(a); uart_puts(": ");
   820ec:	2a0703e4 	mov	w4, w7
	for(c=28;c>=0;c-=4) {
   820f0:	52800382 	mov	w2, #0x1c                  	// #28
		n+=n>9?0x37:0x30;
   820f4:	52800603 	mov	w3, #0x30                  	// #48
		n=(d>>c)&0xF;
   820f8:	1ac22480 	lsr	w0, w4, w2
   820fc:	12000c00 	and	w0, w0, #0xf
		n+=n>9?0x37:0x30;
   82100:	7100241f 	cmp	w0, #0x9
   82104:	1a838181 	csel	w1, w12, w3, hi  // hi = pmore
   82108:	0b010001 	add	w1, w0, w1
void uart_send(unsigned int c) {
   8210c:	d503201f 	nop
	do{asm volatile("nop");}while(*UART0_FR&0x20);
   82110:	d503201f 	nop
   82114:	b94000c0 	ldr	w0, [x6]
   82118:	372fffc0 	tbnz	w0, #5, 82110 <uart_dump+0x70>
	*UART0_DR=c;
   8211c:	b9000101 	str	w1, [x8]
	for(c=28;c>=0;c-=4) {
   82120:	51001042 	sub	w2, w2, #0x4
   82124:	3100105f 	cmn	w2, #0x4
   82128:	54fffe81 	b.ne	820f8 <uart_dump+0x58>  // b.any
		uart_hex(a); uart_puts(": ");
   8212c:	aa0a03e0 	mov	x0, x10
   82130:	97ffffae 	bl	81fe8 <uart_puts>
		for(b=0;b<16;b++) {
   82134:	d2800002 	mov	x2, #0x0                   	// #0
			c=*((unsigned char*)(a+b));
			d=(unsigned int)c;d>>=4;d&=0xF;d+=d>9?0x37:0x30;uart_send(d);
   82138:	d28006e5 	mov	x5, #0x37                  	// #55
   8213c:	d2800604 	mov	x4, #0x30                  	// #48
	*UART0_DR=c;
   82140:	5280040e 	mov	w14, #0x20                  	// #32
   82144:	d503201f 	nop
			c=*((unsigned char*)(a+b));
   82148:	386268e1 	ldrb	w1, [x7, x2]
			d=(unsigned int)c;d>>=4;d&=0xF;d+=d>9?0x37:0x30;uart_send(d);
   8214c:	d3441c20 	ubfx	x0, x1, #4, #4
   82150:	f100241f 	cmp	x0, #0x9
   82154:	9a8480a3 	csel	x3, x5, x4, hi  // hi = pmore
   82158:	8b000063 	add	x3, x3, x0
void uart_send(unsigned int c) {
   8215c:	d503201f 	nop
	do{asm volatile("nop");}while(*UART0_FR&0x20);
   82160:	d503201f 	nop
   82164:	b94000c0 	ldr	w0, [x6]
   82168:	372fffc0 	tbnz	w0, #5, 82160 <uart_dump+0xc0>
	*UART0_DR=c;
   8216c:	12000c20 	and	w0, w1, #0xf
   82170:	b9000103 	str	w3, [x8]
			d=(unsigned int)c;d&=0xF;d+=d>9?0x37:0x30;uart_send(d);
   82174:	7100281f 	cmp	w0, #0xa
   82178:	92401c00 	and	x0, x0, #0xff
   8217c:	9a853081 	csel	x1, x4, x5, cc  // cc = lo, ul, last
   82180:	8b000021 	add	x1, x1, x0
void uart_send(unsigned int c) {
   82184:	d503201f 	nop
	do{asm volatile("nop");}while(*UART0_FR&0x20);
   82188:	d503201f 	nop
   8218c:	b94000c0 	ldr	w0, [x6]
   82190:	372fffc0 	tbnz	w0, #5, 82188 <uart_dump+0xe8>
	*UART0_DR=c;
   82194:	b9000101 	str	w1, [x8]
	do{asm volatile("nop");}while(*UART0_FR&0x20);
   82198:	d503201f 	nop
   8219c:	b94000c0 	ldr	w0, [x6]
   821a0:	372fffc0 	tbnz	w0, #5, 82198 <uart_dump+0xf8>
	*UART0_DR=c;
   821a4:	b900010e 	str	w14, [x8]
			uart_send(' ');
			if(b%4==3)
   821a8:	92400440 	and	x0, x2, #0x3
   821ac:	f1000c1f 	cmp	x0, #0x3
   821b0:	540004a0 	b.eq	82244 <uart_dump+0x1a4>  // b.none
		for(b=0;b<16;b++) {
   821b4:	91000442 	add	x2, x2, #0x1
   821b8:	f100405f 	cmp	x2, #0x10
   821bc:	54fffc61 	b.ne	82148 <uart_dump+0xa8>  // b.any
   821c0:	aa0703e2 	mov	x2, x7
				uart_send(' ');
		}
		for(b=0;b<16;b++) {
			c=*((unsigned char*)(a+b));
			uart_send(c<32||c>=127?'.':c);
   821c4:	528005c3 	mov	w3, #0x2e                  	// #46
			c=*((unsigned char*)(a+b));
   821c8:	39400041 	ldrb	w1, [x2]
			uart_send(c<32||c>=127?'.':c);
   821cc:	51008020 	sub	w0, w1, #0x20
   821d0:	12001c00 	and	w0, w0, #0xff
   821d4:	71017c1f 	cmp	w0, #0x5f
   821d8:	1a833021 	csel	w1, w1, w3, cc  // cc = lo, ul, last
void uart_send(unsigned int c) {
   821dc:	d503201f 	nop
	do{asm volatile("nop");}while(*UART0_FR&0x20);
   821e0:	d503201f 	nop
   821e4:	b94000c0 	ldr	w0, [x6]
   821e8:	372fffc0 	tbnz	w0, #5, 821e0 <uart_dump+0x140>
	*UART0_DR=c;
   821ec:	b9000101 	str	w1, [x8]
   821f0:	91000442 	add	x2, x2, #0x1
		for(b=0;b<16;b++) {
   821f4:	eb02017f 	cmp	x11, x2
   821f8:	54fffe81 	b.ne	821c8 <uart_dump+0x128>  // b.any
   821fc:	d503201f 	nop
	do{asm volatile("nop");}while(*UART0_FR&0x20);
   82200:	d503201f 	nop
   82204:	b94000c0 	ldr	w0, [x6]
   82208:	372fffc0 	tbnz	w0, #5, 82200 <uart_dump+0x160>
	*UART0_DR=c;
   8220c:	528001a0 	mov	w0, #0xd                   	// #13
   82210:	b9000100 	str	w0, [x8]
   82214:	d503201f 	nop
	do{asm volatile("nop");}while(*UART0_FR&0x20);
   82218:	d503201f 	nop
   8221c:	b94000c0 	ldr	w0, [x6]
   82220:	372fffc0 	tbnz	w0, #5, 82218 <uart_dump+0x178>
	*UART0_DR=c;
   82224:	52800140 	mov	w0, #0xa                   	// #10
   82228:	b9000100 	str	w0, [x8]
   8222c:	9100416b 	add	x11, x11, #0x10
	for(a=(unsigned long)ptr;a<(unsigned long)ptr+512;a+=16) {
   82230:	eb0d013f 	cmp	x9, x13
   82234:	aa0d03e7 	mov	x7, x13
   82238:	54000100 	b.eq	82258 <uart_dump+0x1b8>  // b.none
   8223c:	910041ad 	add	x13, x13, #0x10
   82240:	17ffffab 	b	820ec <uart_dump+0x4c>
	do{asm volatile("nop");}while(*UART0_FR&0x20);
   82244:	d503201f 	nop
   82248:	b94000c0 	ldr	w0, [x6]
   8224c:	372fffc0 	tbnz	w0, #5, 82244 <uart_dump+0x1a4>
	*UART0_DR=c;
   82250:	b900010e 	str	w14, [x8]
   82254:	17ffffd8 	b	821b4 <uart_dump+0x114>
		}
		uart_send('\r');
		uart_send('\n');
	}
}
   82258:	a8c17bfd 	ldp	x29, x30, [sp], #16
   8225c:	d65f03c0 	ret
   82260:	d65f03c0 	ret
   82264:	00000000 	.inst	0x00000000 ; undefined

0000000000082268 <strlen>:
#include "headers/project.h"

int strlen(char *s)
{
	int i;
	for(i = 0; s[i] != '\0'; i++)
   82268:	39400001 	ldrb	w1, [x0]
   8226c:	34000101 	cbz	w1, 8228c <strlen+0x24>
   82270:	d1000403 	sub	x3, x0, #0x1
   82274:	d2800021 	mov	x1, #0x1                   	// #1
   82278:	2a0103e0 	mov	w0, w1
   8227c:	91000421 	add	x1, x1, #0x1
   82280:	38616862 	ldrb	w2, [x3, x1]
   82284:	35ffffa2 	cbnz	w2, 82278 <strlen+0x10>
	{
		;
	}
	return i;
}
   82288:	d65f03c0 	ret
	for(i = 0; s[i] != '\0'; i++)
   8228c:	52800000 	mov	w0, #0x0                   	// #0
}
   82290:	d65f03c0 	ret
   82294:	d503201f 	nop

0000000000082298 <reverse>:
	for(i = 0; s[i] != '\0'; i++)
   82298:	39400003 	ldrb	w3, [x0]
   8229c:	34000243 	cbz	w3, 822e4 <reverse+0x4c>
   822a0:	d2800002 	mov	x2, #0x0                   	// #0
   822a4:	d503201f 	nop
   822a8:	93407c41 	sxtw	x1, w2
		;
   822ac:	91000442 	add	x2, x2, #0x1
	for(i = 0; s[i] != '\0'; i++)
   822b0:	38626804 	ldrb	w4, [x0, x2]
   822b4:	35ffffa4 	cbnz	w4, 822a8 <reverse+0x10>

void reverse(char s[]) 
{ 
	int c, i, j; 
	for (i = 0, j = strlen(s)-1; i < j; i++, j--)
   822b8:	34000161 	cbz	w1, 822e4 <reverse+0x4c>
   822bc:	d2800002 	mov	x2, #0x0                   	// #0
   822c0:	14000002 	b	822c8 <reverse+0x30>
   822c4:	38626803 	ldrb	w3, [x0, x2]
	{ 
		c = s[i]; 
		s[i] = s[j]; 
   822c8:	38616804 	ldrb	w4, [x0, x1]
   822cc:	38226804 	strb	w4, [x0, x2]
		s[j] = c; 
   822d0:	91000442 	add	x2, x2, #0x1
   822d4:	38216803 	strb	w3, [x0, x1]
   822d8:	d1000421 	sub	x1, x1, #0x1
	for (i = 0, j = strlen(s)-1; i < j; i++, j--)
   822dc:	6b02003f 	cmp	w1, w2
   822e0:	54ffff2c 	b.gt	822c4 <reverse+0x2c>
	} 
} 
   822e4:	d65f03c0 	ret

00000000000822e8 <itoa>:

void itoa(int n, char s[]) 
{ 
	int i, sign; 
	if ((sign = n) < 0)  /* record sign */
   822e8:	7100001f 	cmp	w0, #0x0
		n = -n;          /* make n positive */
	} 
	i = 0; 
	do
	{      /* generate digits in reverse order */ 
		s[i++] = n % 10 + '0';  /* get next digit */ 
   822ec:	529999a8 	mov	w8, #0xcccd                	// #52429
   822f0:	5a80a405 	cneg	w5, w0, lt  // lt = tstop
   822f4:	d2800004 	mov	x4, #0x0                   	// #0
   822f8:	72b99988 	movk	w8, #0xcccc, lsl #16
   822fc:	d503201f 	nop
   82300:	9ba87ca3 	umull	x3, w5, w8
	}
	while ((n /= 10) > 0);    /* delete it */ 
   82304:	710024bf 	cmp	w5, #0x9
   82308:	2a0403e7 	mov	w7, w4
		s[i++] = n % 10 + '0';  /* get next digit */ 
   8230c:	11000486 	add	w6, w4, #0x1
   82310:	d363fc63 	lsr	x3, x3, #35
   82314:	0b030862 	add	w2, w3, w3, lsl #2
   82318:	4b0204a2 	sub	w2, w5, w2, lsl #1
	while ((n /= 10) > 0);    /* delete it */ 
   8231c:	2a0303e5 	mov	w5, w3
		s[i++] = n % 10 + '0';  /* get next digit */ 
   82320:	1100c042 	add	w2, w2, #0x30
   82324:	38246822 	strb	w2, [x1, x4]
   82328:	91000484 	add	x4, x4, #0x1
	while ((n /= 10) > 0);    /* delete it */ 
   8232c:	54fffeac 	b.gt	82300 <itoa+0x18>
   82330:	8b26c022 	add	x2, x1, w6, sxtw
	if (sign < 0)
   82334:	36f800a0 	tbz	w0, #31, 82348 <itoa+0x60>
	{ 
		s[i++] = '-';
   82338:	110008e7 	add	w7, w7, #0x2
   8233c:	528005a0 	mov	w0, #0x2d                  	// #45
   82340:	3826c820 	strb	w0, [x1, w6, sxtw]
   82344:	8b27c022 	add	x2, x1, w7, sxtw
	} 
	s[i] = '\0'; 
   82348:	3900005f 	strb	wzr, [x2]
	for(i = 0; s[i] != '\0'; i++)
   8234c:	39400023 	ldrb	w3, [x1]
   82350:	34000223 	cbz	w3, 82394 <itoa+0xac>
   82354:	d2800002 	mov	x2, #0x0                   	// #0
   82358:	93407c40 	sxtw	x0, w2
		;
   8235c:	91000442 	add	x2, x2, #0x1
	for(i = 0; s[i] != '\0'; i++)
   82360:	38626824 	ldrb	w4, [x1, x2]
   82364:	35ffffa4 	cbnz	w4, 82358 <itoa+0x70>
	for (i = 0, j = strlen(s)-1; i < j; i++, j--)
   82368:	34000160 	cbz	w0, 82394 <itoa+0xac>
   8236c:	d2800002 	mov	x2, #0x0                   	// #0
   82370:	14000002 	b	82378 <itoa+0x90>
   82374:	38626823 	ldrb	w3, [x1, x2]
		s[i] = s[j]; 
   82378:	38606824 	ldrb	w4, [x1, x0]
   8237c:	38226824 	strb	w4, [x1, x2]
		s[j] = c; 
   82380:	91000442 	add	x2, x2, #0x1
   82384:	38206823 	strb	w3, [x1, x0]
   82388:	d1000400 	sub	x0, x0, #0x1
	for (i = 0, j = strlen(s)-1; i < j; i++, j--)
   8238c:	6b02001f 	cmp	w0, w2
   82390:	54ffff2c 	b.gt	82374 <itoa+0x8c>
	reverse(s); 
}
   82394:	d65f03c0 	ret

0000000000082398 <strtok_r>:

char *strtok_r(char *input, char *delim, char **save_ptr)
{
	char no = 0;
        if(input == NULL || delim == NULL || input[0] == '\0' || delim[0] == '\0') return NULL;
   82398:	f100001f 	cmp	x0, #0x0
   8239c:	fa401824 	ccmp	x1, #0x0, #0x4, ne  // ne = any
   823a0:	54000440 	b.eq	82428 <strtok_r+0x90>  // b.none
   823a4:	39400003 	ldrb	w3, [x0]
   823a8:	34000403 	cbz	w3, 82428 <strtok_r+0x90>
   823ac:	39400029 	ldrb	w9, [x1]
   823b0:	340003c9 	cbz	w9, 82428 <strtok_r+0x90>
   823b4:	aa0003ea 	mov	x10, x0
			no = 0;
                        //I found the delimiter now if multi character delim figure out if this is the one
                        for(int j = 0; delim[j] != '\0'; j++)
                        {
                                i++;
                                if(input[i] != delim[j]) 
   823b8:	d1000408 	sub	x8, x0, #0x1
        for(int i = 0; input[i] != '\0'; i++)
   823bc:	52800004 	mov	w4, #0x0                   	// #0
   823c0:	14000005 	b	823d4 <strtok_r+0x3c>
   823c4:	11000484 	add	w4, w4, #0x1
   823c8:	8b24c00a 	add	x10, x0, w4, sxtw
   823cc:	3864c803 	ldrb	w3, [x0, w4, sxtw]
   823d0:	340002c3 	cbz	w3, 82428 <strtok_r+0x90>
                if(input[i] == delim[0])
   823d4:	6b03013f 	cmp	w9, w3
   823d8:	54ffff61 	b.ne	823c4 <strtok_r+0x2c>  // b.any
                                if(input[i] != delim[j]) 
   823dc:	3864c803 	ldrb	w3, [x0, w4, sxtw]
   823e0:	93407c87 	sxtw	x7, w4
   823e4:	6b09007f 	cmp	w3, w9
   823e8:	54fffee1 	b.ne	823c4 <strtok_r+0x2c>  // b.any
   823ec:	11000483 	add	w3, w4, #0x1
   823f0:	cb070027 	sub	x7, x1, x7
   823f4:	93407c63 	sxtw	x3, w3
   823f8:	14000004 	b	82408 <strtok_r+0x70>
   823fc:	38636906 	ldrb	w6, [x8, x3]
   82400:	6b0500df 	cmp	w6, w5
   82404:	54fffe01 	b.ne	823c4 <strtok_r+0x2c>  // b.any
                        for(int j = 0; delim[j] != '\0'; j++)
   82408:	386368e5 	ldrb	w5, [x7, x3]
   8240c:	2a0303e4 	mov	w4, w3
   82410:	8b030006 	add	x6, x0, x3
   82414:	91000463 	add	x3, x3, #0x1
   82418:	35ffff25 	cbnz	w5, 823fc <strtok_r+0x64>
				}
                        }
			if(no == 0)
			{
				//If I get here it has succseeded
                        	input[save_point] = '\0';
   8241c:	3900015f 	strb	wzr, [x10]
                        	i++;
                        	*save_ptr = &(input[i++]);
   82420:	f9000046 	str	x6, [x2]
                        	return &(input[0]);
			}
                }
        }
        return NULL;
}
   82424:	d65f03c0 	ret
        if(input == NULL || delim == NULL || input[0] == '\0' || delim[0] == '\0') return NULL;
   82428:	d2800000 	mov	x0, #0x0                   	// #0
}
   8242c:	d65f03c0 	ret

0000000000082430 <set_clocks>:
#include "headers/project.h"

void set_clocks()
{
	
}
   82430:	d65f03c0 	ret
   82434:	00000000 	.inst	0x00000000 ; undefined

0000000000082438 <set_cpu_clock>:
#include "headers/project.h"

void set_cpu_clock(unsigned int clock_rate)
{
	mailbox[0] = 8*4;
   82438:	f000aa82 	adrp	x2, 15d5000 <allocated+0xfb940>
   8243c:	9123c041 	add	x1, x2, #0x8f0
   82440:	52800403 	mov	w3, #0x20                  	// #32
	mailbox[7] = 0;
	mailbox[1] = 0;
	mailbox[2] = 0x00038002;
   82444:	52900045 	mov	w5, #0x8002                	// #32770
	mailbox[0] = 8*4;
   82448:	b908f043 	str	w3, [x2, #2288]
	mailbox[2] = 0x00038002;
   8244c:	72a00065 	movk	w5, #0x3, lsl #16
	mailbox[7] = 0;
   82450:	b9001c3f 	str	wzr, [x1, #28]
	mailbox[3] = 8;
   82454:	52800102 	mov	w2, #0x8                   	// #8
	mailbox[1] = 0;
   82458:	b900043f 	str	wzr, [x1, #4]
	mailbox[4] = 8;
	mailbox[5] = 3;
   8245c:	52800064 	mov	w4, #0x3                   	// #3
	mailbox[2] = 0x00038002;
   82460:	b9000825 	str	w5, [x1, #8]
{
   82464:	2a0003e3 	mov	w3, w0
	mailbox[3] = 8;
   82468:	b9000c22 	str	w2, [x1, #12]
	mailbox[6] = clock_rate;
	mailbox_tag_write((unsigned int)((uintptr_t)&(mailbox[0])));
   8246c:	2a0103e0 	mov	w0, w1
	mailbox[4] = 8;
   82470:	b9001022 	str	w2, [x1, #16]
	mailbox[5] = 3;
   82474:	b9001424 	str	w4, [x1, #20]
	mailbox[6] = clock_rate;
   82478:	b9001823 	str	w3, [x1, #24]
	mailbox_tag_write((unsigned int)((uintptr_t)&(mailbox[0])));
   8247c:	14003b81 	b	91280 <mailbox_tag_write>

0000000000082480 <get_cpu_clock>:
}

void get_cpu_clock()
{
	;
}
   82480:	d65f03c0 	ret
   82484:	d503201f 	nop

0000000000082488 <get_cpu_max_clock>:

unsigned int get_cpu_max_clock()
{
   82488:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
	mailbox[0] = 8 * 4; //TAG is 0x00030004
   8248c:	f000aa80 	adrp	x0, 15d5000 <allocated+0xfb940>
   82490:	52800401 	mov	w1, #0x20                  	// #32
{
   82494:	910003fd 	mov	x29, sp
   82498:	a90153f3 	stp	x19, x20, [sp, #16]
	mailbox[0] = 8 * 4; //TAG is 0x00030004
   8249c:	9123c013 	add	x19, x0, #0x8f0
	mailbox[7] = 0;
	mailbox[1] = 0;
	mailbox[2] = 0x00038004;
   824a0:	52900082 	mov	w2, #0x8004                	// #32772
	mailbox[0] = 8 * 4; //TAG is 0x00030004
   824a4:	b908f001 	str	w1, [x0, #2288]
	mailbox[2] = 0x00038004;
   824a8:	72a00062 	movk	w2, #0x3, lsl #16
	mailbox[7] = 0;
   824ac:	b9001e7f 	str	wzr, [x19, #28]
        mailbox[3] = 8;
   824b0:	52800114 	mov	w20, #0x8                   	// #8
	mailbox[1] = 0;
   824b4:	b900067f 	str	wzr, [x19, #4]
        mailbox[4] = 8;
        mailbox[5] = 3;
   824b8:	52800061 	mov	w1, #0x3                   	// #3
	mailbox[2] = 0x00038004;
   824bc:	b9000a62 	str	w2, [x19, #8]
        mailbox[6] = 0;
	mailbox_tag_write((unsigned int)((uintptr_t)&(mailbox[0])));
   824c0:	2a1303e0 	mov	w0, w19
        mailbox[3] = 8;
   824c4:	b9000e74 	str	w20, [x19, #12]
        mailbox[4] = 8;
   824c8:	b9001274 	str	w20, [x19, #16]
        mailbox[5] = 3;
   824cc:	b9001661 	str	w1, [x19, #20]
        mailbox[6] = 0;
   824d0:	b9001a7f 	str	wzr, [x19, #24]
	mailbox_tag_write((unsigned int)((uintptr_t)&(mailbox[0])));
   824d4:	94003b6b 	bl	91280 <mailbox_tag_write>
	mailbox_tag_read(0x8);
   824d8:	2a1403e0 	mov	w0, w20
   824dc:	94003b73 	bl	912a8 <mailbox_tag_read>

	if(mailbox[1] == 0x80000000)
   824e0:	b9400662 	ldr	w2, [x19, #4]
   824e4:	52b00001 	mov	w1, #0x80000000            	// #-2147483648
   824e8:	52800000 	mov	w0, #0x0                   	// #0
   824ec:	6b01005f 	cmp	w2, w1
   824f0:	54000080 	b.eq	82500 <get_cpu_max_clock+0x78>  // b.none
	{
		return mailbox[6];
	}

	return 0; //Return 0 on error because returning non-zero is a clock rate!
}
   824f4:	a94153f3 	ldp	x19, x20, [sp, #16]
   824f8:	a8c27bfd 	ldp	x29, x30, [sp], #32
   824fc:	d65f03c0 	ret
		return mailbox[6];
   82500:	b9401a60 	ldr	w0, [x19, #24]
}
   82504:	a94153f3 	ldp	x19, x20, [sp, #16]
   82508:	a8c27bfd 	ldp	x29, x30, [sp], #32
   8250c:	d65f03c0 	ret

0000000000082510 <clocks_init>:

void clocks_init()
{
   82510:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   82514:	910003fd 	mov	x29, sp
	unsigned int max_clock = get_cpu_max_clock();
   82518:	97ffffdc 	bl	82488 <get_cpu_max_clock>
	set_cpu_clock(max_clock);
}
   8251c:	a8c17bfd 	ldp	x29, x30, [sp], #16
	set_cpu_clock(max_clock);
   82520:	17ffffc6 	b	82438 <set_cpu_clock>
   82524:	00000000 	.inst	0x00000000 ; undefined

0000000000082528 <console_init>:

char *console_rollback_buffer;
psf_t *font;

void console_init()
{
   82528:	a9bd7bfd 	stp	x29, x30, [sp, #-48]!
	//Need to allocate memory
	//lfb_init needs to be called before this will work properly
	font = (psf_t*)&_binary_src_font_font_psf_start;
   8252c:	f0000081 	adrp	x1, 95000 <sd_init+0x3470>
   82530:	913de021 	add	x1, x1, #0xf78
{
   82534:	910003fd 	mov	x29, sp
   82538:	a90153f3 	stp	x19, x20, [sp, #16]
	console_rollback_buffer = malloc((lfb_width / font->width) * (lfb_height / font->height) + 1);
   8253c:	f0009ad4 	adrp	x20, 13dd000 <_binary_src_audio_The_Amazons_bin_size+0x96300>
   82540:	f0009ad3 	adrp	x19, 13dd000 <_binary_src_audio_The_Amazons_bin_size+0x96300>
   82544:	b9401c24 	ldr	w4, [x1, #28]
   82548:	b946b262 	ldr	w2, [x19, #1712]
   8254c:	b9401823 	ldr	w3, [x1, #24]
   82550:	b946b680 	ldr	w0, [x20, #1716]
{
   82554:	f90013f5 	str	x21, [sp, #32]
	font = (psf_t*)&_binary_src_font_font_psf_start;
   82558:	f000aa95 	adrp	x21, 15d5000 <allocated+0xfb940>
   8255c:	f9035ea1 	str	x1, [x21, #1720]
	console_rollback_buffer = malloc((lfb_width / font->width) * (lfb_height / font->height) + 1);
   82560:	1ac40800 	udiv	w0, w0, w4
   82564:	1ac30841 	udiv	w1, w2, w3
   82568:	1b017c00 	mul	w0, w0, w1
   8256c:	11000400 	add	w0, w0, #0x1
   82570:	9400397a 	bl	90b58 <malloc>
	{
		;//Eventually raise error
	}
	//Yay we now have the allocated memory
	//Now we have that memory we can initialise the array to 255 because lfb_print ignores it
	for(uint64_t i = 0; i < (lfb_width / font->width) * (lfb_height / font->height); i++)
   82574:	f9435ea3 	ldr	x3, [x21, #1720]
	console_rollback_buffer = malloc((lfb_width / font->width) * (lfb_height / font->height) + 1);
   82578:	f000aa88 	adrp	x8, 15d5000 <allocated+0xfb940>
	for(uint64_t i = 0; i < (lfb_width / font->width) * (lfb_height / font->height); i++)
   8257c:	b946b681 	ldr	w1, [x20, #1716]
   82580:	b946b262 	ldr	w2, [x19, #1712]
   82584:	29430c64 	ldp	w4, w3, [x3, #24]
	console_rollback_buffer = malloc((lfb_width / font->width) * (lfb_height / font->height) + 1);
   82588:	f9035900 	str	x0, [x8, #1712]
	for(uint64_t i = 0; i < (lfb_width / font->width) * (lfb_height / font->height); i++)
   8258c:	1ac40842 	udiv	w2, w2, w4
   82590:	1ac30821 	udiv	w1, w1, w3
   82594:	1b027c21 	mul	w1, w1, w2
   82598:	34000301 	cbz	w1, 825f8 <console_init+0xd0>
   8259c:	911ae2a7 	add	x7, x21, #0x6b8
   825a0:	911ad286 	add	x6, x20, #0x6b4
   825a4:	911ac265 	add	x5, x19, #0x6b0
   825a8:	d2800002 	mov	x2, #0x0                   	// #0
	{
		console_rollback_buffer[i] = 255;
   825ac:	12800009 	mov	w9, #0xffffffff            	// #-1
   825b0:	38226809 	strb	w9, [x0, x2]
	for(uint64_t i = 0; i < (lfb_width / font->width) * (lfb_height / font->height); i++)
   825b4:	91000442 	add	x2, x2, #0x1
   825b8:	f94000e3 	ldr	x3, [x7]
   825bc:	b94000a0 	ldr	w0, [x5]
   825c0:	b94000c1 	ldr	w1, [x6]
   825c4:	29430c64 	ldp	w4, w3, [x3, #24]
   825c8:	1ac40800 	udiv	w0, w0, w4
   825cc:	1ac30821 	udiv	w1, w1, w3
   825d0:	1b007c21 	mul	w1, w1, w0
   825d4:	f9435900 	ldr	x0, [x8, #1712]
   825d8:	eb21405f 	cmp	x2, w1, uxtw
   825dc:	54fffea3 	b.cc	825b0 <console_init+0x88>  // b.lo, b.ul, b.last
   825e0:	11000421 	add	w1, w1, #0x1
	}
	console_rollback_buffer[(lfb_width / font->width) * (lfb_height / font->height) + 1] = '\0';
   825e4:	3821681f 	strb	wzr, [x0, x1]
	//We are done here!
}
   825e8:	a94153f3 	ldp	x19, x20, [sp, #16]
   825ec:	f94013f5 	ldr	x21, [sp, #32]
   825f0:	a8c37bfd 	ldp	x29, x30, [sp], #48
   825f4:	d65f03c0 	ret
	for(uint64_t i = 0; i < (lfb_width / font->width) * (lfb_height / font->height); i++)
   825f8:	d2800021 	mov	x1, #0x1                   	// #1
	console_rollback_buffer[(lfb_width / font->width) * (lfb_height / font->height) + 1] = '\0';
   825fc:	3821681f 	strb	wzr, [x0, x1]
}
   82600:	a94153f3 	ldp	x19, x20, [sp, #16]
   82604:	f94013f5 	ldr	x21, [sp, #32]
   82608:	a8c37bfd 	ldp	x29, x30, [sp], #48
   8260c:	d65f03c0 	ret

0000000000082610 <console_print>:

void console_print(char *input)
{
   82610:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   82614:	910003fd 	mov	x29, sp
   82618:	f9000bf3 	str	x19, [sp, #16]
   8261c:	aa0003f3 	mov	x19, x0
	uint64_t input_length = strlen(input);
   82620:	97ffff12 	bl	82268 <strlen>
   82624:	93407c00 	sxtw	x0, w0
	//be shifted left to right by the input length
	//
	//I also need to take into account once the number of newline characters already in the array
	//lfb_print ignores anything that is a 255 so anything that should't be taken into consideration
	//by lfb_print shall be set to a 255
	uint16_t number_of_lines = (lfb_height / font->height);	
   82628:	f000aa8d 	adrp	x13, 15d5000 <allocated+0xfb940>
   8262c:	f0009ac7 	adrp	x7, 13dd000 <_binary_src_audio_The_Amazons_bin_size+0x96300>
   82630:	f9435da1 	ldr	x1, [x13, #1720]
   82634:	b946b0e3 	ldr	w3, [x7, #1712]
   82638:	b9401825 	ldr	w5, [x1, #24]
   8263c:	1ac5086a 	udiv	w10, w3, w5
	//If there are more well they need to be removed along with all previous characters so they 
	//need to be set to the value 255
	//
	//There always needs to be checking that I am not allocating to a negative array index
	
	for(int64_t i = 1; i <= input_length; i++) //I need to shift everything by the input_length
   82640:	b40019a0 	cbz	x0, 82974 <console_print+0x364>
   82644:	f0009ace 	adrp	x14, 13dd000 <_binary_src_audio_The_Amazons_bin_size+0x96300>
   82648:	b9401c24 	ldr	w4, [x1, #28]
   8264c:	f000aa8b 	adrp	x11, 15d5000 <allocated+0xfb940>
   82650:	2a0a03e3 	mov	w3, w10
   82654:	b946b5c1 	ldr	w1, [x14, #1716]
   82658:	911ac0e7 	add	x7, x7, #0x6b0
   8265c:	911ad1c9 	add	x9, x14, #0x6b4
   82660:	91000410 	add	x16, x0, #0x1
   82664:	aa0b03ef 	mov	x15, x11
   82668:	911ae1a8 	add	x8, x13, #0x6b8
   8266c:	d280002c 	mov	x12, #0x1                   	// #1
   82670:	1ac40821 	udiv	w1, w1, w4
   82674:	d503201f 	nop
	{
		for(int64_t j = 1; j < (lfb_width / font->width) * (lfb_height / font->height); j++)
   82678:	1b017c64 	mul	w4, w3, w1
   8267c:	2a0103e5 	mov	w5, w1
   82680:	d2800022 	mov	x2, #0x1                   	// #1
   82684:	911ac1e6 	add	x6, x15, #0x6b0
   82688:	7100049f 	cmp	w4, #0x1
   8268c:	54000209 	b.ls	826cc <console_print+0xbc>  // b.plast
		{
			console_rollback_buffer[j-1] = console_rollback_buffer[j];
   82690:	f94000c1 	ldr	x1, [x6]
   82694:	8b020023 	add	x3, x1, x2
   82698:	38626821 	ldrb	w1, [x1, x2]
		for(int64_t j = 1; j < (lfb_width / font->width) * (lfb_height / font->height); j++)
   8269c:	91000442 	add	x2, x2, #0x1
			console_rollback_buffer[j-1] = console_rollback_buffer[j];
   826a0:	381ff061 	sturb	w1, [x3, #-1]
		for(int64_t j = 1; j < (lfb_width / font->width) * (lfb_height / font->height); j++)
   826a4:	f9400104 	ldr	x4, [x8]
   826a8:	b94000e3 	ldr	w3, [x7]
   826ac:	b9400121 	ldr	w1, [x9]
   826b0:	29431085 	ldp	w5, w4, [x4, #24]
   826b4:	1ac50863 	udiv	w3, w3, w5
   826b8:	1ac40821 	udiv	w1, w1, w4
   826bc:	1b017c64 	mul	w4, w3, w1
   826c0:	2a0103e5 	mov	w5, w1
   826c4:	eb02009f 	cmp	x4, x2
   826c8:	54fffe4c 	b.gt	82690 <console_print+0x80>
	for(int64_t i = 1; i <= input_length; i++) //I need to shift everything by the input_length
   826cc:	9100058c 	add	x12, x12, #0x1
   826d0:	eb10019f 	cmp	x12, x16
   826d4:	54fffd21 	b.ne	82678 <console_print+0x68>  // b.any
		}
	}
	
	int64_t j = input_length;
	for(int64_t i = (lfb_width / font->width) * (lfb_height / font->height); (i > 0 || i == 0) && (j > 0 || j == 0); i--)
   826d8:	b7f80220 	tbnz	x0, #63, 8271c <console_print+0x10c>
   826dc:	cb040000 	sub	x0, x0, x4
   826e0:	f000aa86 	adrp	x6, 15d5000 <allocated+0xfb940>
	{
		console_rollback_buffer[i] = input[j];
   826e4:	8b000273 	add	x19, x19, x0
   826e8:	911ac0c6 	add	x6, x6, #0x6b0
   826ec:	d503201f 	nop
   826f0:	f94000c1 	ldr	x1, [x6]
   826f4:	38646a62 	ldrb	w2, [x19, x4]
   826f8:	38246822 	strb	w2, [x1, x4]
	for(int64_t i = (lfb_width / font->width) * (lfb_height / font->height); (i > 0 || i == 0) && (j > 0 || j == 0); i--)
   826fc:	d1000484 	sub	x4, x4, #0x1
   82700:	ab00009f 	cmn	x4, x0
   82704:	fa405881 	ccmp	x4, #0x0, #0x1, pl  // pl = nfrst
   82708:	54ffff4a 	b.ge	826f0 <console_print+0xe0>  // b.tcont
   8270c:	f9435da0 	ldr	x0, [x13, #1720]
   82710:	b946b5c5 	ldr	w5, [x14, #1716]
   82714:	b9401c00 	ldr	w0, [x0, #28]
   82718:	1ac008a5 	udiv	w5, w5, w0
   8271c:	f9435962 	ldr	x2, [x11, #1712]
		j--;
	}
	
	uint16_t characters_since_newline = 0;
	for(uint64_t i = 0; i <= (lfb_width / font->width) * (lfb_height / font->height); i++)
   82720:	d2800001 	mov	x1, #0x0                   	// #0
	uint16_t characters_since_newline = 0;
   82724:	5280000f 	mov	w15, #0x0                   	// #0
   82728:	f000aa8d 	adrp	x13, 15d5000 <allocated+0xfb940>
					{
						if(console_rollback_buffer[k] == '\n')
						{
							while(k)
							{
								console_rollback_buffer[k] = 255;
   8272c:	1280000c 	mov	w12, #0xffffffff            	// #-1
					//Now do the same as the above
					for(uint64_t k = 1; k <= i; k++)
					{
						console_rollback_buffer[k-1] = console_rollback_buffer[k];
					}
					console_rollback_buffer[i] = '\n';
   82730:	5280014e 	mov	w14, #0xa                   	// #10
   82734:	39400044 	ldrb	w4, [x2]
	int64_t j = input_length;
   82738:	2a0403e0 	mov	w0, w4
   8273c:	14000013 	b	82788 <console_print+0x178>
		else if(console_rollback_buffer[i] != 255)
   82740:	7103fc1f 	cmp	w0, #0xff
   82744:	540000c0 	b.eq	8275c <console_print+0x14c>  // b.none
			if(characters_since_newline == (lfb_width / font->width) - 1)
   82748:	510004a5 	sub	w5, w5, #0x1
   8274c:	6b0501ff 	cmp	w15, w5
   82750:	54000240 	b.eq	82798 <console_print+0x188>  // b.none
   82754:	110005ef 	add	w15, w15, #0x1
   82758:	12003def 	and	w15, w15, #0xffff
	for(uint64_t i = 0; i <= (lfb_width / font->width) * (lfb_height / font->height); i++)
   8275c:	f9400103 	ldr	x3, [x8]
   82760:	91000421 	add	x1, x1, #0x1
   82764:	b94000e0 	ldr	w0, [x7]
   82768:	b9400125 	ldr	w5, [x9]
   8276c:	29430c66 	ldp	w6, w3, [x3, #24]
   82770:	1ac60800 	udiv	w0, w0, w6
   82774:	1ac308a5 	udiv	w5, w5, w3
   82778:	1b057c00 	mul	w0, w0, w5
   8277c:	eb01001f 	cmp	x0, x1
   82780:	54000423 	b.cc	82804 <console_print+0x1f4>  // b.lo, b.ul, b.last
   82784:	38616840 	ldrb	w0, [x2, x1]
		if(console_rollback_buffer[i] == '\n')
   82788:	7100281f 	cmp	w0, #0xa
   8278c:	54fffda1 	b.ne	82740 <console_print+0x130>  // b.any
			characters_since_newline = 0;
   82790:	5280000f 	mov	w15, #0x0                   	// #0
   82794:	17fffff2 	b	8275c <console_print+0x14c>
				if(console_rollback_buffer[0] == 255) //Enough just to copy
   82798:	7103fc9f 	cmp	w4, #0xff
					for(uint64_t k = 0; k <= (lfb_width / font->width) * (lfb_height / font->height); k++)
   8279c:	d2800000 	mov	x0, #0x0                   	// #0
   827a0:	911ac1a6 	add	x6, x13, #0x6b0
				if(console_rollback_buffer[0] == 255) //Enough just to copy
   827a4:	540001a1 	b.ne	827d8 <console_print+0x1c8>  // b.any
   827a8:	14000061 	b	8292c <console_print+0x31c>
   827ac:	91000400 	add	x0, x0, #0x1
					for(uint64_t k = 0; k <= (lfb_width / font->width) * (lfb_height / font->height); k++)
   827b0:	f9400105 	ldr	x5, [x8]
   827b4:	b94000e4 	ldr	w4, [x7]
   827b8:	b9400123 	ldr	w3, [x9]
   827bc:	294314af 	ldp	w15, w5, [x5, #24]
   827c0:	1acf0884 	udiv	w4, w4, w15
   827c4:	1ac50863 	udiv	w3, w3, w5
   827c8:	1b047c63 	mul	w3, w3, w4
   827cc:	eb00007f 	cmp	x3, x0
   827d0:	54000463 	b.cc	8285c <console_print+0x24c>  // b.lo, b.ul, b.last
   827d4:	38606844 	ldrb	w4, [x2, x0]
						if(console_rollback_buffer[k] == '\n')
   827d8:	7100289f 	cmp	w4, #0xa
   827dc:	54fffe81 	b.ne	827ac <console_print+0x19c>  // b.any
							while(k)
   827e0:	b5000060 	cbnz	x0, 827ec <console_print+0x1dc>
   827e4:	1400006f 	b	829a0 <console_print+0x390>
   827e8:	f94000c2 	ldr	x2, [x6]
								console_rollback_buffer[k] = 255;
   827ec:	3820684c 	strb	w12, [x2, x0]
							while(k)
   827f0:	f1000400 	subs	x0, x0, #0x1
   827f4:	54ffffa1 	b.ne	827e8 <console_print+0x1d8>  // b.any
   827f8:	d2800020 	mov	x0, #0x1                   	// #1
   827fc:	f94000c2 	ldr	x2, [x6]
   82800:	17ffffec 	b	827b0 <console_print+0x1a0>
   82804:	91000406 	add	x6, x0, #0x1
   82808:	91000441 	add	x1, x2, #0x1
   8280c:	8b060046 	add	x6, x2, x6
	for(uint64_t i = 0; i <= (lfb_width / font->width) * (lfb_height / font->height); i++)
   82810:	2a0403e5 	mov	w5, w4
			}
		characters_since_newline++;
		}
	}

	uint64_t number_of_newlines = 0;
   82814:	d2800003 	mov	x3, #0x0                   	// #0
   82818:	14000002 	b	82820 <console_print+0x210>
   8281c:	38401425 	ldrb	w5, [x1], #1
	for(uint64_t i = 0; i <= (lfb_width / font->width) * (lfb_height / font->height); i++)
	{
		if(console_rollback_buffer[i] == '\n')
		{
			number_of_newlines++;
   82820:	710028bf 	cmp	w5, #0xa
   82824:	9a831463 	cinc	x3, x3, eq  // eq = none
	for(uint64_t i = 0; i <= (lfb_width / font->width) * (lfb_height / font->height); i++)
   82828:	eb06003f 	cmp	x1, x6
   8282c:	54ffff81 	b.ne	8281c <console_print+0x20c>  // b.any
		}
	}

	int64_t number_of_newlines_req_diff = (number_of_lines - 1) - number_of_newlines;
   82830:	12003d41 	and	w1, w10, #0xffff
   82834:	51000421 	sub	w1, w1, #0x1
   82838:	93407c21 	sxtw	x1, w1
   8283c:	eb030021 	subs	x1, x1, x3

	if(number_of_newlines_req_diff < 0) //Have too many newlines!
   82840:	54000384 	b.mi	828b0 <console_print+0x2a0>  // b.first
				}
			}
		}
	}

	else if(number_of_newlines_req_diff > 0) //Don't have enough!
   82844:	540002c1 	b.ne	8289c <console_print+0x28c>  // b.any
	//printf("%d", number_of_newlines_req_diff);
	if(number_of_newlines_req_diff == 0)
	{
		lfb_print(0, 0, console_rollback_buffer);
	}
}	
   82848:	f9400bf3 	ldr	x19, [sp, #16]
		lfb_print(0, 0, console_rollback_buffer);
   8284c:	52800001 	mov	w1, #0x0                   	// #0
}	
   82850:	a8c27bfd 	ldp	x29, x30, [sp], #32
		lfb_print(0, 0, console_rollback_buffer);
   82854:	52800000 	mov	w0, #0x0                   	// #0
   82858:	17fffb1c 	b	814c8 <lfb_print>
					for(uint64_t k = 1; k <= i; k++)
   8285c:	b4000161 	cbz	x1, 82888 <console_print+0x278>
   82860:	d2800020 	mov	x0, #0x1                   	// #1
   82864:	14000002 	b	8286c <console_print+0x25c>
   82868:	f94000c2 	ldr	x2, [x6]
						console_rollback_buffer[k-1] = console_rollback_buffer[k];
   8286c:	8b000043 	add	x3, x2, x0
   82870:	38606842 	ldrb	w2, [x2, x0]
					for(uint64_t k = 1; k <= i; k++)
   82874:	eb00003f 	cmp	x1, x0
   82878:	91000400 	add	x0, x0, #0x1
						console_rollback_buffer[k-1] = console_rollback_buffer[k];
   8287c:	381ff062 	sturb	w2, [x3, #-1]
					for(uint64_t k = 1; k <= i; k++)
   82880:	54ffff41 	b.ne	82868 <console_print+0x258>  // b.any
   82884:	f94359a2 	ldr	x2, [x13, #1712]
					console_rollback_buffer[i] = '\n';
   82888:	3821684e 	strb	w14, [x2, x1]
   8288c:	5280002f 	mov	w15, #0x1                   	// #1
		characters_since_newline++;
   82890:	f94359a2 	ldr	x2, [x13, #1712]
   82894:	39400044 	ldrb	w4, [x2]
   82898:	17ffffb1 	b	8275c <console_print+0x14c>
}	
   8289c:	f9400bf3 	ldr	x19, [sp, #16]
		lfb_print(0, number_of_newlines_req_diff - 3, console_rollback_buffer);
   828a0:	51000c21 	sub	w1, w1, #0x3
}	
   828a4:	a8c27bfd 	ldp	x29, x30, [sp], #32
		lfb_print(0, number_of_newlines_req_diff - 3, console_rollback_buffer);
   828a8:	52800000 	mov	w0, #0x0                   	// #0
   828ac:	17fffb07 	b	814c8 <lfb_print>
		for(uint64_t i = 0; i < (lfb_width / font->width) * (lfb_height / font->height); i++)
   828b0:	b4000380 	cbz	x0, 82920 <console_print+0x310>
   828b4:	d2800000 	mov	x0, #0x0                   	// #0
					console_rollback_buffer[i] = 255;
   828b8:	12800005 	mov	w5, #0xffffffff            	// #-1
   828bc:	1400000d 	b	828f0 <console_print+0x2e0>
   828c0:	91000400 	add	x0, x0, #0x1
		for(uint64_t i = 0; i < (lfb_width / font->width) * (lfb_height / font->height); i++)
   828c4:	f9400104 	ldr	x4, [x8]
   828c8:	b94000e3 	ldr	w3, [x7]
   828cc:	b9400122 	ldr	w2, [x9]
   828d0:	29431086 	ldp	w6, w4, [x4, #24]
   828d4:	1ac60863 	udiv	w3, w3, w6
   828d8:	1ac40842 	udiv	w2, w2, w4
   828dc:	1b037c42 	mul	w2, w2, w3
   828e0:	eb00005f 	cmp	x2, x0
   828e4:	540001c9 	b.ls	8291c <console_print+0x30c>  // b.plast
   828e8:	f9435962 	ldr	x2, [x11, #1712]
   828ec:	38606844 	ldrb	w4, [x2, x0]
				number_of_newlines_req_diff++;
   828f0:	7100289f 	cmp	w4, #0xa
   828f4:	9a811421 	cinc	x1, x1, eq  // eq = none
			if(number_of_newlines_req_diff == 0)
   828f8:	b5fffe41 	cbnz	x1, 828c0 <console_print+0x2b0>
				while(i)
   828fc:	b5000060 	cbnz	x0, 82908 <console_print+0x2f8>
   82900:	14000005 	b	82914 <console_print+0x304>
   82904:	f9435962 	ldr	x2, [x11, #1712]
					console_rollback_buffer[i] = 255;
   82908:	38206845 	strb	w5, [x2, x0]
				while(i)
   8290c:	f1000400 	subs	x0, x0, #0x1
   82910:	54ffffa1 	b.ne	82904 <console_print+0x2f4>  // b.any
		for(uint64_t i = 0; i < (lfb_width / font->width) * (lfb_height / font->height); i++)
   82914:	d2800020 	mov	x0, #0x1                   	// #1
   82918:	17ffffeb 	b	828c4 <console_print+0x2b4>
	if(number_of_newlines_req_diff == 0)
   8291c:	b4000461 	cbz	x1, 829a8 <console_print+0x398>
}	
   82920:	f9400bf3 	ldr	x19, [sp, #16]
   82924:	a8c27bfd 	ldp	x29, x30, [sp], #32
   82928:	d65f03c0 	ret
					for(uint64_t k = 1; k <= i; k++)
   8292c:	b40001a1 	cbz	x1, 82960 <console_print+0x350>
   82930:	911ac1a6 	add	x6, x13, #0x6b0
   82934:	d2800020 	mov	x0, #0x1                   	// #1
   82938:	14000002 	b	82940 <console_print+0x330>
   8293c:	f94000c2 	ldr	x2, [x6]
                                                console_rollback_buffer[k-1] = console_rollback_buffer[k];
   82940:	8b000043 	add	x3, x2, x0
   82944:	38606842 	ldrb	w2, [x2, x0]
					for(uint64_t k = 1; k <= i; k++)
   82948:	eb00003f 	cmp	x1, x0
   8294c:	91000400 	add	x0, x0, #0x1
                                                console_rollback_buffer[k-1] = console_rollback_buffer[k];
   82950:	381ff062 	sturb	w2, [x3, #-1]
					for(uint64_t k = 1; k <= i; k++)
   82954:	54ffff41 	b.ne	8293c <console_print+0x32c>  // b.any
   82958:	f94359a2 	ldr	x2, [x13, #1712]
   8295c:	8b010042 	add	x2, x2, x1
                                        console_rollback_buffer[i] = '\n';
   82960:	3900004e 	strb	w14, [x2]
   82964:	5280002f 	mov	w15, #0x1                   	// #1
   82968:	f94000c2 	ldr	x2, [x6]
   8296c:	39400044 	ldrb	w4, [x2]
   82970:	17ffff7b 	b	8275c <console_print+0x14c>
	for(int64_t i = (lfb_width / font->width) * (lfb_height / font->height); (i > 0 || i == 0) && (j > 0 || j == 0); i--)
   82974:	f0009ace 	adrp	x14, 13dd000 <_binary_src_audio_The_Amazons_bin_size+0x96300>
   82978:	b9401c21 	ldr	w1, [x1, #28]
   8297c:	911ac0e7 	add	x7, x7, #0x6b0
   82980:	911ad1c9 	add	x9, x14, #0x6b4
   82984:	b946b5c4 	ldr	w4, [x14, #1716]
	int64_t j = input_length;
   82988:	d2800000 	mov	x0, #0x0                   	// #0
   8298c:	f000aa8b 	adrp	x11, 15d5000 <allocated+0xfb940>
   82990:	911ae1a8 	add	x8, x13, #0x6b8
	for(int64_t i = (lfb_width / font->width) * (lfb_height / font->height); (i > 0 || i == 0) && (j > 0 || j == 0); i--)
   82994:	1ac10884 	udiv	w4, w4, w1
   82998:	1b0a7c84 	mul	w4, w4, w10
   8299c:	17ffff50 	b	826dc <console_print+0xcc>
							while(k)
   829a0:	d2800020 	mov	x0, #0x1                   	// #1
   829a4:	17ffff83 	b	827b0 <console_print+0x1a0>
   829a8:	f9435962 	ldr	x2, [x11, #1712]
   829ac:	17ffffa7 	b	82848 <console_print+0x238>

00000000000829b0 <text_file_dump>:
#include "headers/project.h"

unsigned int text_file_dump(char *fn)
{
   829b0:	d10943ff 	sub	sp, sp, #0x250
	bpb_t *bpb=(bpb_t*)(&(master_boot_record_array[0]));
	unsigned char fatdir_buffer[512];
	fatdir_t *dir=(fatdir_t*)(&(fatdir_buffer[0]));
	unsigned int root_sec, s;
	// find the root directory's LBA
	root_sec=((bpb->spf16?bpb->spf16:bpb->spf32)*bpb->nf)+bpb->rsc;
   829b4:	f0009ac1 	adrp	x1, 13dd000 <_binary_src_audio_The_Amazons_bin_size+0x96300>
   829b8:	9112a021 	add	x1, x1, #0x4a8
{
   829bc:	a9007bfd 	stp	x29, x30, [sp]
   829c0:	910003fd 	mov	x29, sp
   829c4:	b9401022 	ldr	w2, [x1, #16]
	root_sec=((bpb->spf16?bpb->spf16:bpb->spf32)*bpb->nf)+bpb->rsc;
   829c8:	79402c24 	ldrh	w4, [x1, #22]
{
   829cc:	a90153f3 	stp	x19, x20, [sp, #16]
   829d0:	aa0003f4 	mov	x20, x0
   829d4:	53087c42 	lsr	w2, w2, #8
   829d8:	39404023 	ldrb	w3, [x1, #16]
   829dc:	79401c20 	ldrh	w0, [x1, #14]
   829e0:	531b6842 	lsl	w2, w2, #5
	root_sec=((bpb->spf16?bpb->spf16:bpb->spf32)*bpb->nf)+bpb->rsc;
   829e4:	34000ac4 	cbz	w4, 82b3c <text_file_dump+0x18c>
	if(bpb->spf16==0) {
		// adjust for FAT32
		root_sec+=(bpb->rc-2)*bpb->spc;
	}
	// add partition LBA
	root_sec+=partitionlba;
   829e8:	f0009ac1 	adrp	x1, 13dd000 <_binary_src_audio_The_Amazons_bin_size+0x96300>
	root_sec=((bpb->spf16?bpb->spf16:bpb->spf32)*bpb->nf)+bpb->rsc;
   829ec:	1b030080 	madd	w0, w4, w3, w0
	// load the root directory
	if(sd_readblock(root_sec,(unsigned char*)dir,s/512+1)) {
   829f0:	d3495042 	ubfx	x2, x2, #9, #12
	root_sec+=partitionlba;
   829f4:	b946c023 	ldr	w3, [x1, #1728]
	if(sd_readblock(root_sec,(unsigned char*)dir,s/512+1)) {
   829f8:	11000442 	add	w2, w2, #0x1
   829fc:	910143e1 	add	x1, sp, #0x50
   82a00:	0b030000 	add	w0, w0, w3
   82a04:	94003b3d 	bl	916f8 <sd_readblock>
   82a08:	34000b80 	cbz	w0, 82b78 <text_file_dump+0x1c8>
		// iterate on each entry and check if it's the one we're looking for
		for(;dir->name[0]!=0;dir++) {
   82a0c:	394143e0 	ldrb	w0, [sp, #80]
   82a10:	34000c40 	cbz	w0, 82b98 <text_file_dump+0x1e8>
	fatdir_t *dir=(fatdir_t*)(&(fatdir_buffer[0]));
   82a14:	910143f3 	add	x19, sp, #0x50
   82a18:	14000003 	b	82a24 <text_file_dump+0x74>
		for(;dir->name[0]!=0;dir++) {
   82a1c:	38420e60 	ldrb	w0, [x19, #32]!
   82a20:	34000bc0 	cbz	w0, 82b98 <text_file_dump+0x1e8>
			// is it a valid entry?
			if(dir->name[0]==0xE5 || dir->attr[0]==0xF) continue;
   82a24:	7103941f 	cmp	w0, #0xe5
   82a28:	54ffffa0 	b.eq	82a1c <text_file_dump+0x6c>  // b.none
   82a2c:	39402e60 	ldrb	w0, [x19, #11]
   82a30:	71003c1f 	cmp	w0, #0xf
   82a34:	54ffff40 	b.eq	82a1c <text_file_dump+0x6c>  // b.none
			// filename match?
			if(!__builtin_memcmp(dir->name,fn,11)) {
   82a38:	f9400261 	ldr	x1, [x19]
   82a3c:	f9400280 	ldr	x0, [x20]
   82a40:	eb00003f 	cmp	x1, x0
   82a44:	54fffec1 	b.ne	82a1c <text_file_dump+0x6c>  // b.any
   82a48:	79401261 	ldrh	w1, [x19, #8]
   82a4c:	79401280 	ldrh	w0, [x20, #8]
   82a50:	6b00003f 	cmp	w1, w0
   82a54:	54fffe41 	b.ne	82a1c <text_file_dump+0x6c>  // b.any
   82a58:	39402a61 	ldrb	w1, [x19, #10]
   82a5c:	39402a80 	ldrb	w0, [x20, #10]
   82a60:	6b00003f 	cmp	w1, w0
   82a64:	54fffdc1 	b.ne	82a1c <text_file_dump+0x6c>  // b.any
				uart_puts("FAT File ");
   82a68:	90000080 	adrp	x0, 92000 <sd_init+0x470>
   82a6c:	91040000 	add	x0, x0, #0x100
   82a70:	97fffd5e 	bl	81fe8 <uart_puts>
				uart_puts(fn);
   82a74:	aa1403e0 	mov	x0, x20
   82a78:	97fffd5c 	bl	81fe8 <uart_puts>
				uart_puts(" starts at cluster: ");
   82a7c:	90000080 	adrp	x0, 92000 <sd_init+0x470>
   82a80:	91044000 	add	x0, x0, #0x110
   82a84:	97fffd59 	bl	81fe8 <uart_puts>
				uart_hex(((unsigned int)dir->ch)<<16|dir->cl);
   82a88:	79402a61 	ldrh	w1, [x19, #20]
   82a8c:	79403660 	ldrh	w0, [x19, #26]
   82a90:	2a014000 	orr	w0, w0, w1, lsl #16
   82a94:	97fffd6d 	bl	82048 <uart_hex>
				uart_puts("\n");
   82a98:	f0000080 	adrp	x0, 95000 <sd_init+0x3470>
   82a9c:	912ae000 	add	x0, x0, #0xab8
   82aa0:	97fffd52 	bl	81fe8 <uart_puts>
				// if so, return starting cluster
				if(((unsigned int) dir->ch)<<16|dir->cl)
   82aa4:	79402a60 	ldrh	w0, [x19, #20]
   82aa8:	79403661 	ldrh	w1, [x19, #26]
   82aac:	2a004020 	orr	w0, w1, w0, lsl #16
   82ab0:	340007a0 	cbz	w0, 82ba4 <text_file_dump+0x1f4>
				{
					unsigned int size = dir->size;
   82ab4:	b9401e74 	ldr	w20, [x19, #28]
					void *ptr = fat_readfile(((unsigned int)dir->ch)<<16|dir->cl); 
   82ab8:	9400022e 	bl	83370 <fat_readfile>
   82abc:	aa0003f3 	mov	x19, x0
					unsigned long a, temp;
					unsigned int x = 0, y = 0;
					unsigned char c;
					a = (unsigned long)ptr;
					for(unsigned int bytes_copied = 0; bytes_copied < size; bytes_copied++)
   82ac0:	34000734 	cbz	w20, 82ba4 <text_file_dump+0x1f4>
   82ac4:	51000694 	sub	w20, w20, #0x1
   82ac8:	a9025bf5 	stp	x21, x22, [sp, #32]
   82acc:	91000694 	add	x20, x20, #0x1
					unsigned int x = 0, y = 0;
   82ad0:	52800016 	mov	w22, #0x0                   	// #0
   82ad4:	8b000294 	add	x20, x20, x0
   82ad8:	52800015 	mov	w21, #0x0                   	// #0
   82adc:	f9001bf7 	str	x23, [sp, #48]
					{
						c=*((unsigned char *)(a));
						temp = (c<32||c>127?'.':c);
   82ae0:	d28005d7 	mov	x23, #0x2e                  	// #46
   82ae4:	1400000a 	b	82b0c <text_file_dump+0x15c>
   82ae8:	f90027e2 	str	x2, [sp, #72]
							y++;
							x = 0;
						}
						else if(c != '\r')
						{
							lfb_print(x, y, (char *)&temp);
   82aec:	2a1503e0 	mov	w0, w21
   82af0:	910123e2 	add	x2, sp, #0x48
   82af4:	2a1603e1 	mov	w1, w22
							x++;
   82af8:	110006b5 	add	w21, w21, #0x1
							lfb_print(x, y, (char *)&temp);
   82afc:	97fffa73 	bl	814c8 <lfb_print>
						}
						else
						{
							x = 0;
						}
						a++;
   82b00:	91000673 	add	x19, x19, #0x1
					for(unsigned int bytes_copied = 0; bytes_copied < size; bytes_copied++)
   82b04:	eb13029f 	cmp	x20, x19
   82b08:	54000600 	b.eq	82bc8 <text_file_dump+0x218>  // b.none
						c=*((unsigned char *)(a));
   82b0c:	39400261 	ldrb	w1, [x19]
						temp = (c<32||c>127?'.':c);
   82b10:	51008020 	sub	w0, w1, #0x20
   82b14:	92401c22 	and	x2, x1, #0xff
   82b18:	12001c00 	and	w0, w0, #0xff
   82b1c:	71017c1f 	cmp	w0, #0x5f
   82b20:	54fffe49 	b.ls	82ae8 <text_file_dump+0x138>  // b.plast
   82b24:	f90027f7 	str	x23, [sp, #72]
						if(c == '\n')
   82b28:	7100283f 	cmp	w1, #0xa
   82b2c:	54000461 	b.ne	82bb8 <text_file_dump+0x208>  // b.any
							y++;
   82b30:	110006d6 	add	w22, w22, #0x1
							x = 0;
   82b34:	52800015 	mov	w21, #0x0                   	// #0
   82b38:	17fffff2 	b	82b00 <text_file_dump+0x150>
	root_sec=((bpb->spf16?bpb->spf16:bpb->spf32)*bpb->nf)+bpb->rsc;
   82b3c:	b9402426 	ldr	w6, [x1, #36]
	if(sd_readblock(root_sec,(unsigned char*)dir,s/512+1)) {
   82b40:	d3495042 	ubfx	x2, x2, #9, #12
		root_sec+=(bpb->rc-2)*bpb->spc;
   82b44:	b9402c24 	ldr	w4, [x1, #44]
	if(sd_readblock(root_sec,(unsigned char*)dir,s/512+1)) {
   82b48:	11000442 	add	w2, w2, #0x1
		root_sec+=(bpb->rc-2)*bpb->spc;
   82b4c:	39403425 	ldrb	w5, [x1, #13]
   82b50:	51000881 	sub	w1, w4, #0x2
	root_sec=((bpb->spf16?bpb->spf16:bpb->spf32)*bpb->nf)+bpb->rsc;
   82b54:	1b067c63 	mul	w3, w3, w6
		root_sec+=(bpb->rc-2)*bpb->spc;
   82b58:	1b050c23 	madd	w3, w1, w5, w3
	root_sec+=partitionlba;
   82b5c:	f0009ac1 	adrp	x1, 13dd000 <_binary_src_audio_The_Amazons_bin_size+0x96300>
		root_sec+=(bpb->rc-2)*bpb->spc;
   82b60:	0b000060 	add	w0, w3, w0
	root_sec+=partitionlba;
   82b64:	b946c023 	ldr	w3, [x1, #1728]
	if(sd_readblock(root_sec,(unsigned char*)dir,s/512+1)) {
   82b68:	910143e1 	add	x1, sp, #0x50
   82b6c:	0b030000 	add	w0, w0, w3
   82b70:	94003ae2 	bl	916f8 <sd_readblock>
   82b74:	35fff4c0 	cbnz	w0, 82a0c <text_file_dump+0x5c>
		}
		uart_puts("ERROR: file not found\n");
	} 
	else 
	{
		uart_puts("ERROR: Unable to load root directory\n");
   82b78:	90000080 	adrp	x0, 92000 <sd_init+0x470>
   82b7c:	91050000 	add	x0, x0, #0x140
   82b80:	97fffd1a 	bl	81fe8 <uart_puts>
	}
	return 0;
}
   82b84:	52800000 	mov	w0, #0x0                   	// #0
   82b88:	a9407bfd 	ldp	x29, x30, [sp]
   82b8c:	a94153f3 	ldp	x19, x20, [sp, #16]
   82b90:	910943ff 	add	sp, sp, #0x250
   82b94:	d65f03c0 	ret
		uart_puts("ERROR: file not found\n");
   82b98:	90000080 	adrp	x0, 92000 <sd_init+0x470>
   82b9c:	9104a000 	add	x0, x0, #0x128
   82ba0:	97fffd12 	bl	81fe8 <uart_puts>
}
   82ba4:	52800000 	mov	w0, #0x0                   	// #0
   82ba8:	a9407bfd 	ldp	x29, x30, [sp]
   82bac:	a94153f3 	ldp	x19, x20, [sp, #16]
   82bb0:	910943ff 	add	sp, sp, #0x250
   82bb4:	d65f03c0 	ret
						else if(c != '\r')
   82bb8:	7100343f 	cmp	w1, #0xd
   82bbc:	54fff981 	b.ne	82aec <text_file_dump+0x13c>  // b.any
							x = 0;
   82bc0:	52800015 	mov	w21, #0x0                   	// #0
   82bc4:	17ffffcf 	b	82b00 <text_file_dump+0x150>
   82bc8:	a9425bf5 	ldp	x21, x22, [sp, #32]
   82bcc:	f9401bf7 	ldr	x23, [sp, #48]
   82bd0:	17fffff5 	b	82ba4 <text_file_dump+0x1f4>
   82bd4:	00000000 	.inst	0x00000000 ; undefined

0000000000082bd8 <gpio_setup.part.0>:
 * 5. Clear GPIO mode bits for the pin we want to set
 * 6. Use a logical or to write to the read of the register
 * 7. Write the value from the previous instruction or the register
 * 8. Return true
 */
bool gpio_setup(unsigned int gpio_pin, GPIOMODE mode)
   82bd8:	2a0003e6 	mov	w6, w0
{
	unsigned int *GPFSEL = (unsigned int *)(MMIO_BASE + 0x200000 + 0x0); //Get register address
	if(gpio_pin > 54 || mode < 0 || mode > GPIO_ALTFUNC3) return false; //Check inputs
	unsigned int bit_mask = ((gpio_pin % 10) * 3); //Create bit mask
   82bdc:	529999a3 	mov	w3, #0xcccd                	// #52429
   82be0:	72b99983 	movk	w3, #0xcccc, lsl #16
	unsigned int register_read = GPFSEL[gpio_pin / 10]; //Read the correct register
   82be4:	d2a7e405 	mov	x5, #0x3f200000            	// #1059061760
	register_read &= ~(7 << bit_mask); //Clear the mode bits of the pin we want to set
   82be8:	528000e4 	mov	w4, #0x7                   	// #7
	register_read |= (mode << bit_mask); //Set the gpio mode
	GPFSEL[gpio_pin / 10] = register_read; // Write to the register
	return true;
}
   82bec:	52800020 	mov	w0, #0x1                   	// #1
	unsigned int bit_mask = ((gpio_pin % 10) * 3); //Create bit mask
   82bf0:	9ba37cc3 	umull	x3, w6, w3
   82bf4:	d363fc63 	lsr	x3, x3, #35
   82bf8:	0b030862 	add	w2, w3, w3, lsl #2
	unsigned int register_read = GPFSEL[gpio_pin / 10]; //Read the correct register
   82bfc:	2a0303e3 	mov	w3, w3
	unsigned int bit_mask = ((gpio_pin % 10) * 3); //Create bit mask
   82c00:	4b0204c2 	sub	w2, w6, w2, lsl #1
	unsigned int register_read = GPFSEL[gpio_pin / 10]; //Read the correct register
   82c04:	b86378a6 	ldr	w6, [x5, x3, lsl #2]
	unsigned int bit_mask = ((gpio_pin % 10) * 3); //Create bit mask
   82c08:	0b020442 	add	w2, w2, w2, lsl #1
	register_read &= ~(7 << bit_mask); //Clear the mode bits of the pin we want to set
   82c0c:	1ac22084 	lsl	w4, w4, w2
   82c10:	0a2400c4 	bic	w4, w6, w4
	register_read |= (mode << bit_mask); //Set the gpio mode
   82c14:	1ac22021 	lsl	w1, w1, w2
   82c18:	2a040021 	orr	w1, w1, w4
	GPFSEL[gpio_pin / 10] = register_read; // Write to the register
   82c1c:	b82378a1 	str	w1, [x5, x3, lsl #2]
}
   82c20:	d65f03c0 	ret
   82c24:	d503201f 	nop

0000000000082c28 <gpio_setup>:
	if(gpio_pin > 54 || mode < 0 || mode > GPIO_ALTFUNC3) return false; //Check inputs
   82c28:	7100d81f 	cmp	w0, #0x36
   82c2c:	7a479822 	ccmp	w1, #0x7, #0x2, ls  // ls = plast
   82c30:	54000048 	b.hi	82c38 <gpio_setup+0x10>  // b.pmore
   82c34:	17ffffe9 	b	82bd8 <gpio_setup.part.0>
}
   82c38:	52800000 	mov	w0, #0x0                   	// #0
   82c3c:	d65f03c0 	ret

0000000000082c40 <gpio_input>:
	 //////////////////////////////TODO/////////////////////////

bool gpio_input(unsigned int gpio_pin)
{
	unsigned int *GPIO_LEVEL = (unsigned int *)(MMIO_BASE + 0x200000 + 0x34);
	if(gpio_pin < 54) //The gpio_pin cannot be negative it is unsigned
   82c40:	7100d41f 	cmp	w0, #0x35
   82c44:	54000148 	b.hi	82c6c <gpio_input+0x2c>  // b.pmore
	{
		unsigned int bit_to_write = 1 << (gpio_pin % 32);
		unsigned int register_read = GPIO_LEVEL[gpio_pin / 32];
   82c48:	53057c02 	lsr	w2, w0, #5
   82c4c:	d2a7e403 	mov	x3, #0x3f200000            	// #1059061760
		unsigned int bit_to_write = 1 << (gpio_pin % 32);
   82c50:	52800021 	mov	w1, #0x1                   	// #1
		unsigned int register_read = GPIO_LEVEL[gpio_pin / 32];
   82c54:	8b020862 	add	x2, x3, x2, lsl #2
		unsigned int bit_to_write = 1 << (gpio_pin % 32);
   82c58:	1ac02020 	lsl	w0, w1, w0
		if(register_read & bit_to_write) return true; //If the bit isn't set this evaluates to 0
   82c5c:	b9403441 	ldr	w1, [x2, #52]
   82c60:	6a01001f 	tst	w0, w1
   82c64:	1a9f07e0 	cset	w0, ne  // ne = any
	}
	return false;
}
   82c68:	d65f03c0 	ret
	return false;
   82c6c:	52800000 	mov	w0, #0x0                   	// #0
}
   82c70:	d65f03c0 	ret
   82c74:	d503201f 	nop

0000000000082c78 <gpio_output>:
 * 7. Output the bitmask to the selected register
 * 8. Return true on sucsess
 * 9. Return false if the GPIO set failed
 */
bool gpio_output(unsigned int gpio_pin, bool on)
{
   82c78:	12001c21 	and	w1, w1, #0xff
	if(gpio_pin < 54)
   82c7c:	7100d41f 	cmp	w0, #0x35
   82c80:	54000069 	b.ls	82c8c <gpio_output+0x14>  // b.plast
			clear_or_set_register_pointer = (unsigned int *)(GPCLR0);
		}
		clear_or_set_register_pointer[register_number] = bit_to_write;
		return true;
	}
	return false;
   82c84:	52800000 	mov	w0, #0x0                   	// #0
}
   82c88:	d65f03c0 	ret
			clear_or_set_register_pointer = (unsigned int *)(GPCLR0);
   82c8c:	7100003f 	cmp	w1, #0x0
   82c90:	d2800383 	mov	x3, #0x1c                  	// #28
   82c94:	d2800501 	mov	x1, #0x28                  	// #40
		clear_or_set_register_pointer[register_number] = bit_to_write;
   82c98:	53057c04 	lsr	w4, w0, #5
			clear_or_set_register_pointer = (unsigned int *)(GPCLR0);
   82c9c:	f2a7e401 	movk	x1, #0x3f20, lsl #16
   82ca0:	f2a7e403 	movk	x3, #0x3f20, lsl #16
   82ca4:	9a811063 	csel	x3, x3, x1, ne  // ne = any
		unsigned int bit_to_write = 1 << (gpio_pin % 32);
   82ca8:	52800022 	mov	w2, #0x1                   	// #1
   82cac:	1ac02041 	lsl	w1, w2, w0
		clear_or_set_register_pointer[register_number] = bit_to_write;
   82cb0:	2a0203e0 	mov	w0, w2
   82cb4:	b8247861 	str	w1, [x3, x4, lsl #2]
}
   82cb8:	d65f03c0 	ret
   82cbc:	d503201f 	nop

0000000000082cc0 <pinMode>:
	if(gpio_pin > 54 || mode < 0 || mode > GPIO_ALTFUNC3) return false; //Check inputs
   82cc0:	7100d81f 	cmp	w0, #0x36
   82cc4:	7a479822 	ccmp	w1, #0x7, #0x2, ls  // ls = plast
   82cc8:	54000048 	b.hi	82cd0 <pinMode+0x10>  // b.pmore
   82ccc:	17ffffc3 	b	82bd8 <gpio_setup.part.0>
 */

void pinMode(unsigned int gpio_pin, GPIOMODE mode)
{
	gpio_setup(gpio_pin, mode);
}
   82cd0:	d65f03c0 	ret
   82cd4:	d503201f 	nop

0000000000082cd8 <digitalWrite>:

void digitalWrite(unsigned int gpio_pin, bool value)
{
   82cd8:	12001c21 	and	w1, w1, #0xff
	if(gpio_pin < 54)
   82cdc:	7100d41f 	cmp	w0, #0x35
   82ce0:	54000049 	b.ls	82ce8 <digitalWrite+0x10>  // b.plast
	gpio_output(gpio_pin, value);
}
   82ce4:	d65f03c0 	ret
			clear_or_set_register_pointer = (unsigned int *)(GPCLR0);
   82ce8:	7100003f 	cmp	w1, #0x0
   82cec:	d2800502 	mov	x2, #0x28                  	// #40
   82cf0:	d2800381 	mov	x1, #0x1c                  	// #28
		clear_or_set_register_pointer[register_number] = bit_to_write;
   82cf4:	53057c03 	lsr	w3, w0, #5
			clear_or_set_register_pointer = (unsigned int *)(GPCLR0);
   82cf8:	f2a7e402 	movk	x2, #0x3f20, lsl #16
   82cfc:	f2a7e401 	movk	x1, #0x3f20, lsl #16
   82d00:	9a821021 	csel	x1, x1, x2, ne  // ne = any
		unsigned int bit_to_write = 1 << (gpio_pin % 32);
   82d04:	52800022 	mov	w2, #0x1                   	// #1
   82d08:	1ac02040 	lsl	w0, w2, w0
		clear_or_set_register_pointer[register_number] = bit_to_write;
   82d0c:	b8237820 	str	w0, [x1, x3, lsl #2]
}
   82d10:	d65f03c0 	ret
   82d14:	d503201f 	nop

0000000000082d18 <digitalRead>:
	if(gpio_pin < 54) //The gpio_pin cannot be negative it is unsigned
   82d18:	7100d41f 	cmp	w0, #0x35
   82d1c:	54000148 	b.hi	82d44 <digitalRead+0x2c>  // b.pmore
		unsigned int register_read = GPIO_LEVEL[gpio_pin / 32];
   82d20:	53057c02 	lsr	w2, w0, #5
   82d24:	d2a7e403 	mov	x3, #0x3f200000            	// #1059061760
		unsigned int bit_to_write = 1 << (gpio_pin % 32);
   82d28:	52800021 	mov	w1, #0x1                   	// #1
		unsigned int register_read = GPIO_LEVEL[gpio_pin / 32];
   82d2c:	8b020862 	add	x2, x3, x2, lsl #2
		unsigned int bit_to_write = 1 << (gpio_pin % 32);
   82d30:	1ac02020 	lsl	w0, w1, w0
		if(register_read & bit_to_write) return true; //If the bit isn't set this evaluates to 0
   82d34:	b9403441 	ldr	w1, [x2, #52]
   82d38:	6a01001f 	tst	w0, w1
   82d3c:	1a9f07e0 	cset	w0, ne  // ne = any

bool digitalRead(unsigned int gpio_pin)
{
	return gpio_input(gpio_pin);
}
   82d40:	d65f03c0 	ret
	return false;
   82d44:	52800000 	mov	w0, #0x0                   	// #0
}
   82d48:	d65f03c0 	ret
   82d4c:	00000000 	.inst	0x00000000 ; undefined

0000000000082d50 <wait_cycles>:
 * Wait a certain number of cycles using the CPU with multiple nop commands
 * Works with QEMU
 */
void wait_cycles(unsigned int number_of_cycles_to_wait)
{
	if(number_of_cycles_to_wait) // If zero wasn't passed to the function
   82d50:	340000c0 	cbz	w0, 82d68 <wait_cycles+0x18>
	{
		while(number_of_cycles_to_wait--) // If the number of cycles isn't zero decrement the
   82d54:	51000400 	sub	w0, w0, #0x1
		{ 				  // number and run the loop if it is zero don't
			asm volatile ("nop");     // execute it
   82d58:	d503201f 	nop
		while(number_of_cycles_to_wait--) // If the number of cycles isn't zero decrement the
   82d5c:	51000400 	sub	w0, w0, #0x1
   82d60:	3100041f 	cmn	w0, #0x1
   82d64:	54ffffa1 	b.ne	82d58 <wait_cycles+0x8>  // b.any
		}
	}
}
   82d68:	d65f03c0 	ret
   82d6c:	d503201f 	nop

0000000000082d70 <wait_usec>:
 * Finaly in a do while loop continue reading the counter until it reaches the expire value
 */
void wait_usec(unsigned int usec)
{
	register unsigned long frequency, current_count, expire_value;	
	asm volatile ("mrs %0, cntfrq_el0" : "=r"(frequency)); // Get the frequency
   82d70:	d53be001 	mrs	x1, cntfrq_el0
	asm volatile ("mrs %0, cntpct_el0" : "=r"(expire_value)); //Get current value of counter
   82d74:	d53be024 	mrs	x4, cntpct_el0
	expire_value += ((frequency/1000)*usec)/1000; //Calculate expire value for counter
   82d78:	d29ef9e3 	mov	x3, #0xf7cf                	// #63439
   82d7c:	d343fc21 	lsr	x1, x1, #3
   82d80:	f2bc6a63 	movk	x3, #0xe353, lsl #16
   82d84:	2a0003e2 	mov	w2, w0
   82d88:	f2d374a3 	movk	x3, #0x9ba5, lsl #32
   82d8c:	f2e41883 	movk	x3, #0x20c4, lsl #48
   82d90:	9bc37c20 	umulh	x0, x1, x3
   82d94:	d344fc00 	lsr	x0, x0, #4
   82d98:	9b027c00 	mul	x0, x0, x2
   82d9c:	d343fc00 	lsr	x0, x0, #3
   82da0:	9bc37c00 	umulh	x0, x0, x3
   82da4:	8b401080 	add	x0, x4, x0, lsr #4
	do
	{
		asm volatile ("mrs %0, cntpct_el0" : "=r"(current_count));
   82da8:	d53be021 	mrs	x1, cntpct_el0
	}
	while(current_count < expire_value);
   82dac:	eb01001f 	cmp	x0, x1
   82db0:	54ffffc8 	b.hi	82da8 <wait_usec+0x38>  // b.pmore
}
   82db4:	d65f03c0 	ret

0000000000082db8 <get_system_timer>:
unsigned long get_system_timer()
{
	unsigned int high_part, low_part;
	high_part = -1; //Only set this because it has the posibility of 
			//having 0 in the SYSTEM_TIMER_HIGH
	high_part = *SYSTEM_TIMER_HIGH;
   82db8:	d2860102 	mov	x2, #0x3008                	// #12296
	low_part  = *SYSTEM_TIMER_LOW;
   82dbc:	d2860083 	mov	x3, #0x3004                	// #12292
	high_part = *SYSTEM_TIMER_HIGH;
   82dc0:	f2a7e002 	movk	x2, #0x3f00, lsl #16
	low_part  = *SYSTEM_TIMER_LOW;
   82dc4:	f2a7e003 	movk	x3, #0x3f00, lsl #16
	high_part = *SYSTEM_TIMER_HIGH;
   82dc8:	b9400040 	ldr	w0, [x2]
	low_part  = *SYSTEM_TIMER_LOW;
   82dcc:	b9400061 	ldr	w1, [x3]
	if(high_part != *SYSTEM_TIMER_HIGH)
   82dd0:	b9400044 	ldr	w4, [x2]
   82dd4:	6b00009f 	cmp	w4, w0
   82dd8:	54000060 	b.eq	82de4 <get_system_timer+0x2c>  // b.none
	{
		high_part = *SYSTEM_TIMER_HIGH;
   82ddc:	b9400040 	ldr	w0, [x2]
		low_part  = *SYSTEM_TIMER_LOW;
   82de0:	b9400061 	ldr	w1, [x3]
	}
	return ((unsigned long)high_part << 32) | low_part; // Put the value of the high_part in the 
   82de4:	2a0103e1 	mov	w1, w1
							    // 32 most significant bits and the
							    // low_part in the 32 least significant bits
}
   82de8:	aa008020 	orr	x0, x1, x0, lsl #32
   82dec:	d65f03c0 	ret

0000000000082df0 <wait_usec_system_timer>:
	high_part = *SYSTEM_TIMER_HIGH;
   82df0:	d2860103 	mov	x3, #0x3008                	// #12296
	low_part  = *SYSTEM_TIMER_LOW;
   82df4:	d2860084 	mov	x4, #0x3004                	// #12292
	high_part = *SYSTEM_TIMER_HIGH;
   82df8:	f2a7e003 	movk	x3, #0x3f00, lsl #16
	low_part  = *SYSTEM_TIMER_LOW;
   82dfc:	f2a7e004 	movk	x4, #0x3f00, lsl #16
	high_part = *SYSTEM_TIMER_HIGH;
   82e00:	b9400065 	ldr	w5, [x3]
	low_part  = *SYSTEM_TIMER_LOW;
   82e04:	b9400082 	ldr	w2, [x4]
	if(high_part != *SYSTEM_TIMER_HIGH)
   82e08:	b9400061 	ldr	w1, [x3]
   82e0c:	6b0100bf 	cmp	w5, w1
   82e10:	54000060 	b.eq	82e1c <wait_usec_system_timer+0x2c>  // b.none
		high_part = *SYSTEM_TIMER_HIGH;
   82e14:	b9400061 	ldr	w1, [x3]
		low_part  = *SYSTEM_TIMER_LOW;
   82e18:	b9400082 	ldr	w2, [x4]
	return ((unsigned long)high_part << 32) | low_part; // Put the value of the high_part in the 
   82e1c:	2a0203e2 	mov	w2, w2
   82e20:	aa018041 	orr	x1, x2, x1, lsl #32
 */
void wait_usec_system_timer(unsigned int number_of_micros_to_wait)
{
	unsigned long current_time;
	current_time = get_system_timer();
	if(current_time)
   82e24:	b4000241 	cbz	x1, 82e6c <wait_usec_system_timer+0x7c>
	high_part = *SYSTEM_TIMER_HIGH;
   82e28:	d2860103 	mov	x3, #0x3008                	// #12296
	low_part  = *SYSTEM_TIMER_LOW;
   82e2c:	d2860085 	mov	x5, #0x3004                	// #12292
   82e30:	8b204020 	add	x0, x1, w0, uxtw
	high_part = *SYSTEM_TIMER_HIGH;
   82e34:	f2a7e003 	movk	x3, #0x3f00, lsl #16
	low_part  = *SYSTEM_TIMER_LOW;
   82e38:	f2a7e005 	movk	x5, #0x3f00, lsl #16
   82e3c:	d503201f 	nop
	high_part = *SYSTEM_TIMER_HIGH;
   82e40:	b9400064 	ldr	w4, [x3]
	low_part  = *SYSTEM_TIMER_LOW;
   82e44:	b94000a2 	ldr	w2, [x5]
	if(high_part != *SYSTEM_TIMER_HIGH)
   82e48:	b9400061 	ldr	w1, [x3]
   82e4c:	6b01009f 	cmp	w4, w1
   82e50:	54000060 	b.eq	82e5c <wait_usec_system_timer+0x6c>  // b.none
		high_part = *SYSTEM_TIMER_HIGH;
   82e54:	b9400061 	ldr	w1, [x3]
		low_part  = *SYSTEM_TIMER_LOW;
   82e58:	b94000a2 	ldr	w2, [x5]
	return ((unsigned long)high_part << 32) | low_part; // Put the value of the high_part in the 
   82e5c:	2a0203e2 	mov	w2, w2
   82e60:	aa018041 	orr	x1, x2, x1, lsl #32
	{
		while(get_system_timer() < number_of_micros_to_wait + current_time);
   82e64:	eb00003f 	cmp	x1, x0
   82e68:	54fffec3 	b.cc	82e40 <wait_usec_system_timer+0x50>  // b.lo, b.ul, b.last
	}
}
   82e6c:	d65f03c0 	ret

0000000000082e70 <micros>:
	high_part = *SYSTEM_TIMER_HIGH;
   82e70:	d2860102 	mov	x2, #0x3008                	// #12296
	low_part  = *SYSTEM_TIMER_LOW;
   82e74:	d2860083 	mov	x3, #0x3004                	// #12292
	high_part = *SYSTEM_TIMER_HIGH;
   82e78:	f2a7e002 	movk	x2, #0x3f00, lsl #16
	low_part  = *SYSTEM_TIMER_LOW;
   82e7c:	f2a7e003 	movk	x3, #0x3f00, lsl #16
	high_part = *SYSTEM_TIMER_HIGH;
   82e80:	b9400044 	ldr	w4, [x2]
	low_part  = *SYSTEM_TIMER_LOW;
   82e84:	b9400061 	ldr	w1, [x3]
	if(high_part != *SYSTEM_TIMER_HIGH)
   82e88:	b9400040 	ldr	w0, [x2]
   82e8c:	6b00009f 	cmp	w4, w0
   82e90:	54000060 	b.eq	82e9c <micros+0x2c>  // b.none
		high_part = *SYSTEM_TIMER_HIGH;
   82e94:	b9400040 	ldr	w0, [x2]
		low_part  = *SYSTEM_TIMER_LOW;
   82e98:	b9400061 	ldr	w1, [x3]
	return ((unsigned long)high_part << 32) | low_part; // Put the value of the high_part in the 
   82e9c:	2a0103e1 	mov	w1, w1
   82ea0:	aa008020 	orr	x0, x1, x0, lsl #32
 * and round the value to the closest multiple of four
 */
unsigned long micros()
{
	unsigned long current_time = get_system_timer();
	if(current_time)
   82ea4:	b40000c0 	cbz	x0, 82ebc <micros+0x4c>
	{
		unsigned long current_time_modulo = current_time % 4;
		if(!current_time_modulo)
   82ea8:	f2400401 	ands	x1, x0, #0x3
   82eac:	54000080 	b.eq	82ebc <micros+0x4c>  // b.none
		{
			return current_time;
		}
		else if(current_time_modulo <= 2)
		{
			return (current_time - current_time_modulo);
   82eb0:	f1000c3f 	cmp	x1, #0x3
   82eb4:	cb010001 	sub	x1, x0, x1
   82eb8:	9a801420 	csinc	x0, x1, x0, ne  // ne = any
		{
			return (current_time + 1);
		}
	}
	return 0;
}
   82ebc:	d65f03c0 	ret

0000000000082ec0 <fat_getpartition>:
 * Get the starting LBA address of the first partition
 * so that we know where our FAT file system starts, and
 * read that volume's BIOS Parameter Block
 */
int fat_getpartition()
{
   82ec0:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
	unsigned char *master_boot_record=(unsigned char *)&master_boot_record_array;
	bpb_t *bpb=(bpb_t*)&master_boot_record_array;
	// read the partitioning table
	if(sd_readblock(0, master_boot_record, 1)) {
   82ec4:	52800022 	mov	w2, #0x1                   	// #1
   82ec8:	52800000 	mov	w0, #0x0                   	// #0
{
   82ecc:	910003fd 	mov	x29, sp
   82ed0:	a90153f3 	stp	x19, x20, [sp, #16]
	if(sd_readblock(0, master_boot_record, 1)) {
   82ed4:	f0009ad3 	adrp	x19, 13dd000 <_binary_src_audio_The_Amazons_bin_size+0x96300>
   82ed8:	9112a273 	add	x19, x19, #0x4a8
   82edc:	aa1303e1 	mov	x1, x19
   82ee0:	94003a06 	bl	916f8 <sd_readblock>
   82ee4:	2a0003f4 	mov	w20, w0
   82ee8:	34000460 	cbz	w0, 82f74 <fat_getpartition+0xb4>
		// check magic
		if(master_boot_record[510]!=0x55 || master_boot_record[511]!=0xAA) {
   82eec:	3947fa60 	ldrb	w0, [x19, #510]
   82ef0:	7101541f 	cmp	w0, #0x55
   82ef4:	54000481 	b.ne	82f84 <fat_getpartition+0xc4>  // b.any
   82ef8:	3947fe60 	ldrb	w0, [x19, #511]
   82efc:	7102a81f 	cmp	w0, #0xaa
   82f00:	54000421 	b.ne	82f84 <fat_getpartition+0xc4>  // b.any
			uart_puts("ERROR: Bad magic in MBR\n");
			return 0;
		}
		// check partition type
		if(master_boot_record[0x1C2]!=0xE/*FAT16 LBA*/ && master_boot_record[0x1C2]!=0xC/*FAT32 LBA*/) {
   82f04:	39470a60 	ldrb	w0, [x19, #450]
   82f08:	121e7800 	and	w0, w0, #0xfffffffd
   82f0c:	12001c00 	and	w0, w0, #0xff
   82f10:	7100301f 	cmp	w0, #0xc
   82f14:	54000481 	b.ne	82fa4 <fat_getpartition+0xe4>  // b.any
			uart_puts("ERROR: Wrong partition type\n");
			return 0;
		}

		uint64_t temp_low = (*(uint64_t *)(master_boot_record+0x1C0)) >> 48;
   82f18:	79438e64 	ldrh	w4, [x19, #454]
		uint64_t temp_high = (*(uint64_t *)(master_boot_record+0x1C8) & 0xFFFF);
		partitionlba = (temp_high << 16) | temp_low;
   82f1c:	f0009ac3 	adrp	x3, 13dd000 <_binary_src_audio_The_Amazons_bin_size+0x96300>
		uint64_t temp_high = (*(uint64_t *)(master_boot_record+0x1C8) & 0xFFFF);
   82f20:	79439260 	ldrh	w0, [x19, #456]

		// read the boot record
		if(!sd_readblock(partitionlba, master_boot_record, 1)) {
   82f24:	52800022 	mov	w2, #0x1                   	// #1
   82f28:	aa1303e1 	mov	x1, x19
		partitionlba = (temp_high << 16) | temp_low;
   82f2c:	2a004080 	orr	w0, w4, w0, lsl #16
   82f30:	b906c060 	str	w0, [x3, #1728]
		if(!sd_readblock(partitionlba, master_boot_record, 1)) {
   82f34:	940039f1 	bl	916f8 <sd_readblock>
   82f38:	2a0003f4 	mov	w20, w0
   82f3c:	34000580 	cbz	w0, 82fec <fat_getpartition+0x12c>
			uart_puts("ERROR: Unable to read boot record\n");
			return 0;
		}
		// check file system type. We don't use cluster numbers for that, but magic bytes
		if( !(bpb->fst[0]=='F' && bpb->fst[1]=='A' && bpb->fst[2]=='T') &&
   82f40:	3940da60 	ldrb	w0, [x19, #54]
   82f44:	7101181f 	cmp	w0, #0x46
   82f48:	54000420 	b.eq	82fcc <fat_getpartition+0x10c>  // b.none
   82f4c:	39414a60 	ldrb	w0, [x19, #82]
   82f50:	7101181f 	cmp	w0, #0x46
   82f54:	54000081 	b.ne	82f64 <fat_getpartition+0xa4>  // b.any
			!(bpb->fst2[0]=='F' && bpb->fst2[1]=='A' && bpb->fst2[2]=='T')) {
   82f58:	39414e60 	ldrb	w0, [x19, #83]
   82f5c:	7101041f 	cmp	w0, #0x41
   82f60:	540002c0 	b.eq	82fb8 <fat_getpartition+0xf8>  // b.none
			uart_puts("ERROR: Unknown file system type\n");
   82f64:	90000080 	adrp	x0, 92000 <sd_init+0x470>
			return 0;
   82f68:	52800014 	mov	w20, #0x0                   	// #0
			uart_puts("ERROR: Unknown file system type\n");
   82f6c:	91074000 	add	x0, x0, #0x1d0
   82f70:	97fffc1e 	bl	81fe8 <uart_puts>
		}
		return 1;
	}
	return 0;
}
   82f74:	2a1403e0 	mov	w0, w20
   82f78:	a94153f3 	ldp	x19, x20, [sp, #16]
   82f7c:	a8c27bfd 	ldp	x29, x30, [sp], #32
   82f80:	d65f03c0 	ret
			return 0;
   82f84:	52800014 	mov	w20, #0x0                   	// #0
			uart_puts("ERROR: Bad magic in MBR\n");
   82f88:	90000080 	adrp	x0, 92000 <sd_init+0x470>
   82f8c:	9105a000 	add	x0, x0, #0x168
   82f90:	97fffc16 	bl	81fe8 <uart_puts>
}
   82f94:	2a1403e0 	mov	w0, w20
   82f98:	a94153f3 	ldp	x19, x20, [sp, #16]
   82f9c:	a8c27bfd 	ldp	x29, x30, [sp], #32
   82fa0:	d65f03c0 	ret
			uart_puts("ERROR: Wrong partition type\n");
   82fa4:	90000080 	adrp	x0, 92000 <sd_init+0x470>
			return 0;
   82fa8:	52800014 	mov	w20, #0x0                   	// #0
			uart_puts("ERROR: Wrong partition type\n");
   82fac:	91062000 	add	x0, x0, #0x188
   82fb0:	97fffc0e 	bl	81fe8 <uart_puts>
			return 0;
   82fb4:	17fffff0 	b	82f74 <fat_getpartition+0xb4>
			!(bpb->fst2[0]=='F' && bpb->fst2[1]=='A' && bpb->fst2[2]=='T')) {
   82fb8:	39415260 	ldrb	w0, [x19, #84]
		return 1;
   82fbc:	52800034 	mov	w20, #0x1                   	// #1
			!(bpb->fst2[0]=='F' && bpb->fst2[1]=='A' && bpb->fst2[2]=='T')) {
   82fc0:	7101501f 	cmp	w0, #0x54
   82fc4:	54fffd01 	b.ne	82f64 <fat_getpartition+0xa4>  // b.any
   82fc8:	17ffffeb 	b	82f74 <fat_getpartition+0xb4>
		if( !(bpb->fst[0]=='F' && bpb->fst[1]=='A' && bpb->fst[2]=='T') &&
   82fcc:	3940de60 	ldrb	w0, [x19, #55]
   82fd0:	7101041f 	cmp	w0, #0x41
   82fd4:	54fffbc1 	b.ne	82f4c <fat_getpartition+0x8c>  // b.any
   82fd8:	3940e260 	ldrb	w0, [x19, #56]
		return 1;
   82fdc:	52800034 	mov	w20, #0x1                   	// #1
		if( !(bpb->fst[0]=='F' && bpb->fst[1]=='A' && bpb->fst[2]=='T') &&
   82fe0:	7101501f 	cmp	w0, #0x54
   82fe4:	54fffb41 	b.ne	82f4c <fat_getpartition+0x8c>  // b.any
   82fe8:	17ffffe3 	b	82f74 <fat_getpartition+0xb4>
			uart_puts("ERROR: Unable to read boot record\n");
   82fec:	90000080 	adrp	x0, 92000 <sd_init+0x470>
   82ff0:	9106a000 	add	x0, x0, #0x1a8
   82ff4:	97fffbfd 	bl	81fe8 <uart_puts>
			return 0;
   82ff8:	17ffffdf 	b	82f74 <fat_getpartition+0xb4>
   82ffc:	d503201f 	nop

0000000000083000 <fat_getcluster>:

/**
 * Find a file in root directory entries
 */
unsigned int fat_getcluster(char *fn)
{
   83000:	d10883ff 	sub	sp, sp, #0x220
	bpb_t *bpb=(bpb_t*)&(master_boot_record_array[0]);
	unsigned char fatdir_buffer[512];
	fatdir_t *dir=(fatdir_t*)(&(fatdir_buffer[0]));
	unsigned int root_sec, s;
	// find the root directory's LBA
	root_sec=((bpb->spf16?bpb->spf16:bpb->spf32)*bpb->nf)+bpb->rsc;
   83004:	d0009ac1 	adrp	x1, 13dd000 <_binary_src_audio_The_Amazons_bin_size+0x96300>
   83008:	9112a021 	add	x1, x1, #0x4a8
{
   8300c:	a9007bfd 	stp	x29, x30, [sp]
   83010:	910003fd 	mov	x29, sp
   83014:	b9401022 	ldr	w2, [x1, #16]
	root_sec=((bpb->spf16?bpb->spf16:bpb->spf32)*bpb->nf)+bpb->rsc;
   83018:	79402c24 	ldrh	w4, [x1, #22]
{
   8301c:	a90153f3 	stp	x19, x20, [sp, #16]
   83020:	aa0003f4 	mov	x20, x0
   83024:	53087c42 	lsr	w2, w2, #8
   83028:	39404023 	ldrb	w3, [x1, #16]
   8302c:	79401c20 	ldrh	w0, [x1, #14]
   83030:	531b6842 	lsl	w2, w2, #5
	root_sec=((bpb->spf16?bpb->spf16:bpb->spf32)*bpb->nf)+bpb->rsc;
   83034:	340006e4 	cbz	w4, 83110 <fat_getcluster+0x110>
	if(bpb->spf16==0) {
		// adjust for FAT32
		root_sec+=(bpb->rc-2)*bpb->spc;
	}
	// add partition LBA
	root_sec+=partitionlba;
   83038:	d0009ac1 	adrp	x1, 13dd000 <_binary_src_audio_The_Amazons_bin_size+0x96300>
	root_sec=((bpb->spf16?bpb->spf16:bpb->spf32)*bpb->nf)+bpb->rsc;
   8303c:	1b030080 	madd	w0, w4, w3, w0
	// load the root directory
	if(sd_readblock(root_sec,(unsigned char*)dir,s/512+1)) {
   83040:	d3495042 	ubfx	x2, x2, #9, #12
	root_sec+=partitionlba;
   83044:	b946c023 	ldr	w3, [x1, #1728]
	if(sd_readblock(root_sec,(unsigned char*)dir,s/512+1)) {
   83048:	11000442 	add	w2, w2, #0x1
   8304c:	910083e1 	add	x1, sp, #0x20
   83050:	0b030000 	add	w0, w0, w3
   83054:	940039a9 	bl	916f8 <sd_readblock>
   83058:	340007a0 	cbz	w0, 8314c <fat_getcluster+0x14c>
		// iterate on each entry and check if it's the one we're looking for
		for(;dir->name[0]!=0;dir++) {
   8305c:	394083e0 	ldrb	w0, [sp, #32]
   83060:	34000860 	cbz	w0, 8316c <fat_getcluster+0x16c>
	fatdir_t *dir=(fatdir_t*)(&(fatdir_buffer[0]));
   83064:	910083f3 	add	x19, sp, #0x20
   83068:	14000003 	b	83074 <fat_getcluster+0x74>
		for(;dir->name[0]!=0;dir++) {
   8306c:	38420e60 	ldrb	w0, [x19, #32]!
   83070:	340007e0 	cbz	w0, 8316c <fat_getcluster+0x16c>
			// is it a valid entry?
			if(dir->name[0]==0xE5 || dir->attr[0]==0xF) continue;
   83074:	7103941f 	cmp	w0, #0xe5
   83078:	54ffffa0 	b.eq	8306c <fat_getcluster+0x6c>  // b.none
   8307c:	39402e60 	ldrb	w0, [x19, #11]
   83080:	71003c1f 	cmp	w0, #0xf
   83084:	54ffff40 	b.eq	8306c <fat_getcluster+0x6c>  // b.none
			// filename match?
			if(!__builtin_memcmp(dir->name,fn,11)) {
   83088:	f9400261 	ldr	x1, [x19]
   8308c:	f9400280 	ldr	x0, [x20]
   83090:	eb00003f 	cmp	x1, x0
   83094:	54fffec1 	b.ne	8306c <fat_getcluster+0x6c>  // b.any
   83098:	79401261 	ldrh	w1, [x19, #8]
   8309c:	79401280 	ldrh	w0, [x20, #8]
   830a0:	6b00003f 	cmp	w1, w0
   830a4:	54fffe41 	b.ne	8306c <fat_getcluster+0x6c>  // b.any
   830a8:	39402a61 	ldrb	w1, [x19, #10]
   830ac:	39402a80 	ldrb	w0, [x20, #10]
   830b0:	6b00003f 	cmp	w1, w0
   830b4:	54fffdc1 	b.ne	8306c <fat_getcluster+0x6c>  // b.any
				uart_puts("FAT File ");
   830b8:	f0000060 	adrp	x0, 92000 <sd_init+0x470>
   830bc:	91040000 	add	x0, x0, #0x100
   830c0:	97fffbca 	bl	81fe8 <uart_puts>
				uart_puts(fn);
   830c4:	aa1403e0 	mov	x0, x20
   830c8:	97fffbc8 	bl	81fe8 <uart_puts>
				uart_puts(" starts at cluster: ");
   830cc:	f0000060 	adrp	x0, 92000 <sd_init+0x470>
   830d0:	91044000 	add	x0, x0, #0x110
   830d4:	97fffbc5 	bl	81fe8 <uart_puts>
				uart_hex(((unsigned int)dir->ch)<<16|dir->cl);
   830d8:	79402a61 	ldrh	w1, [x19, #20]
   830dc:	79403660 	ldrh	w0, [x19, #26]
   830e0:	2a014000 	orr	w0, w0, w1, lsl #16
   830e4:	97fffbd9 	bl	82048 <uart_hex>
				uart_puts("\n");
   830e8:	d0000080 	adrp	x0, 95000 <sd_init+0x3470>
   830ec:	912ae000 	add	x0, x0, #0xab8
   830f0:	97fffbbe 	bl	81fe8 <uart_puts>
				// if so, return starting cluster
				return ((unsigned int)dir->ch)<<16|dir->cl;
   830f4:	79402a60 	ldrh	w0, [x19, #20]
   830f8:	79403661 	ldrh	w1, [x19, #26]
		uart_puts("ERROR: file not found\n");
	} else {
		uart_puts("ERROR: Unable to load root directory\n");
	}
	return 0;
}
   830fc:	a9407bfd 	ldp	x29, x30, [sp]
				return ((unsigned int)dir->ch)<<16|dir->cl;
   83100:	2a004020 	orr	w0, w1, w0, lsl #16
}
   83104:	a94153f3 	ldp	x19, x20, [sp, #16]
   83108:	910883ff 	add	sp, sp, #0x220
   8310c:	d65f03c0 	ret
	root_sec=((bpb->spf16?bpb->spf16:bpb->spf32)*bpb->nf)+bpb->rsc;
   83110:	b9402426 	ldr	w6, [x1, #36]
	if(sd_readblock(root_sec,(unsigned char*)dir,s/512+1)) {
   83114:	d3495042 	ubfx	x2, x2, #9, #12
		root_sec+=(bpb->rc-2)*bpb->spc;
   83118:	b9402c24 	ldr	w4, [x1, #44]
	if(sd_readblock(root_sec,(unsigned char*)dir,s/512+1)) {
   8311c:	11000442 	add	w2, w2, #0x1
		root_sec+=(bpb->rc-2)*bpb->spc;
   83120:	39403425 	ldrb	w5, [x1, #13]
   83124:	51000881 	sub	w1, w4, #0x2
	root_sec=((bpb->spf16?bpb->spf16:bpb->spf32)*bpb->nf)+bpb->rsc;
   83128:	1b067c63 	mul	w3, w3, w6
		root_sec+=(bpb->rc-2)*bpb->spc;
   8312c:	1b050c23 	madd	w3, w1, w5, w3
	root_sec+=partitionlba;
   83130:	d0009ac1 	adrp	x1, 13dd000 <_binary_src_audio_The_Amazons_bin_size+0x96300>
		root_sec+=(bpb->rc-2)*bpb->spc;
   83134:	0b000060 	add	w0, w3, w0
	root_sec+=partitionlba;
   83138:	b946c023 	ldr	w3, [x1, #1728]
	if(sd_readblock(root_sec,(unsigned char*)dir,s/512+1)) {
   8313c:	910083e1 	add	x1, sp, #0x20
   83140:	0b030000 	add	w0, w0, w3
   83144:	9400396d 	bl	916f8 <sd_readblock>
   83148:	35fff8a0 	cbnz	w0, 8305c <fat_getcluster+0x5c>
		uart_puts("ERROR: Unable to load root directory\n");
   8314c:	f0000060 	adrp	x0, 92000 <sd_init+0x470>
   83150:	91050000 	add	x0, x0, #0x140
   83154:	97fffba5 	bl	81fe8 <uart_puts>
	return 0;
   83158:	52800000 	mov	w0, #0x0                   	// #0
}
   8315c:	a9407bfd 	ldp	x29, x30, [sp]
   83160:	a94153f3 	ldp	x19, x20, [sp, #16]
   83164:	910883ff 	add	sp, sp, #0x220
   83168:	d65f03c0 	ret
		uart_puts("ERROR: file not found\n");
   8316c:	f0000060 	adrp	x0, 92000 <sd_init+0x470>
   83170:	9104a000 	add	x0, x0, #0x128
   83174:	97fffb9d 	bl	81fe8 <uart_puts>
	return 0;
   83178:	52800000 	mov	w0, #0x0                   	// #0
}
   8317c:	a9407bfd 	ldp	x29, x30, [sp]
   83180:	a94153f3 	ldp	x19, x20, [sp, #16]
   83184:	910883ff 	add	sp, sp, #0x220
   83188:	d65f03c0 	ret
   8318c:	d503201f 	nop

0000000000083190 <fat_listdirectory>:

void fat_listdirectory()
{
   83190:	a9bb7bfd 	stp	x29, x30, [sp, #-80]!
   83194:	910003fd 	mov	x29, sp
   83198:	a90153f3 	stp	x19, x20, [sp, #16]
   8319c:	a90363f7 	stp	x23, x24, [sp, #48]
	unsigned char *master_boot_record=(unsigned char *)&master_boot_record_array;
	bpb_t *bpb=(bpb_t*)(master_boot_record);
	fatdir_t *dir=(fatdir_t*)(master_boot_record);
	unsigned int root_sec, s;
	// find the root directory's LBA
	root_sec=((bpb->spf16?bpb->spf16:bpb->spf32)*bpb->nf)+bpb->rsc;
   831a0:	d0009ad7 	adrp	x23, 13dd000 <_binary_src_audio_The_Amazons_bin_size+0x96300>
   831a4:	9112a2f3 	add	x19, x23, #0x4a8
{
   831a8:	a9025bf5 	stp	x21, x22, [sp, #32]
	root_sec=((bpb->spf16?bpb->spf16:bpb->spf32)*bpb->nf)+bpb->rsc;
   831ac:	79402e74 	ldrh	w20, [x19, #22]
   831b0:	2a1403e1 	mov	w1, w20
   831b4:	35000054 	cbnz	w20, 831bc <fat_listdirectory+0x2c>
   831b8:	b9402661 	ldr	w1, [x19, #36]
   831bc:	79401e62 	ldrh	w2, [x19, #14]
	//WARNING gcc generates bad code for bpb->nr, causing unaligned exception
	s=*((unsigned int*)&bpb->nf);
	s>>=8;
	s&=0xFFFF;
	uart_puts("FAT number of root diretory entries: ");
   831c0:	f0000060 	adrp	x0, 92000 <sd_init+0x470>
	root_sec=((bpb->spf16?bpb->spf16:bpb->spf32)*bpb->nf)+bpb->rsc;
   831c4:	39404274 	ldrb	w20, [x19, #16]
	uart_puts("FAT number of root diretory entries: ");
   831c8:	9107e000 	add	x0, x0, #0x1f8
	s&=0xFFFF;
   831cc:	78411275 	ldurh	w21, [x19, #17]
	root_sec=((bpb->spf16?bpb->spf16:bpb->spf32)*bpb->nf)+bpb->rsc;
   831d0:	1b010a94 	madd	w20, w20, w1, w2
	uart_puts("FAT number of root diretory entries: ");
   831d4:	97fffb85 	bl	81fe8 <uart_puts>
	uart_hex(s);
   831d8:	2a1503e0 	mov	w0, w21
   831dc:	97fffb9b 	bl	82048 <uart_hex>
	s<<=5;
	// now s=bpb->nr*sizeof(fatdir_t));
	if(bpb->spf16==0)
   831e0:	79402e60 	ldrh	w0, [x19, #22]
	s<<=5;
   831e4:	531b6ab6 	lsl	w22, w21, #5
	if(bpb->spf16==0)
   831e8:	350000a0 	cbnz	w0, 831fc <fat_listdirectory+0x6c>
	{
		// adjust for FAT32
		root_sec+=(bpb->rc-2)*bpb->spc;
   831ec:	b9402e60 	ldr	w0, [x19, #44]
   831f0:	39403661 	ldrb	w1, [x19, #13]
   831f4:	51000800 	sub	w0, w0, #0x2
   831f8:	1b015014 	madd	w20, w0, w1, w20
	}
	// add partition LBA
	root_sec+=partitionlba;
   831fc:	d0009ac1 	adrp	x1, 13dd000 <_binary_src_audio_The_Amazons_bin_size+0x96300>
	uart_puts("\nFAT root directory LBA: ");
   83200:	f0000060 	adrp	x0, 92000 <sd_init+0x470>
   83204:	91088000 	add	x0, x0, #0x220
	uart_hex(root_sec);
	uart_puts("\n");
   83208:	d0000095 	adrp	x21, 95000 <sd_init+0x3470>
	root_sec+=partitionlba;
   8320c:	b946c021 	ldr	w1, [x1, #1728]
	uart_puts("\n");
   83210:	912ae2b5 	add	x21, x21, #0xab8
	root_sec+=partitionlba;
   83214:	0b010294 	add	w20, w20, w1
	uart_puts("\nFAT root directory LBA: ");
   83218:	97fffb74 	bl	81fe8 <uart_puts>
	uart_hex(root_sec);
   8321c:	2a1403e0 	mov	w0, w20
   83220:	97fffb8a 	bl	82048 <uart_hex>
	uart_puts("\n");
   83224:	aa1503e0 	mov	x0, x21
   83228:	97fffb70 	bl	81fe8 <uart_puts>
	// load the root directory
	if(sd_readblock(root_sec,(unsigned char*)master_boot_record,s/512+1)) 
   8322c:	53097ec2 	lsr	w2, w22, #9
   83230:	2a1403e0 	mov	w0, w20
   83234:	11000442 	add	w2, w2, #0x1
   83238:	aa1303e1 	mov	x1, x19
   8323c:	9400392f 	bl	916f8 <sd_readblock>
   83240:	340008a0 	cbz	w0, 83354 <fat_listdirectory+0x1c4>
	{
		uart_puts("\nAttrib Cluster  Size     Name\n");
   83244:	f0000060 	adrp	x0, 92000 <sd_init+0x470>
   83248:	91090000 	add	x0, x0, #0x240
   8324c:	97fffb67 	bl	81fe8 <uart_puts>
		// iterate on each entry and print out
		int lfn_entries = 0;
		for(;dir->name[0]!=0;dir++) 
   83250:	3952a2e1 	ldrb	w1, [x23, #1192]
   83254:	34000761 	cbz	w1, 83340 <fat_listdirectory+0x1b0>
				lfn_entries++;
			}
			// is it a valid entry?
			if((dir->name[0]==0xE5 || dir->attr[0]==0xF) && !(dir->attr[0]&1 && dir->attr[0]&2 && dir->attr[0]&4 && dir->attr[0]&8)) continue;
			// decode attributes
			uart_send(dir->attr[0]& 1?'R':'.');  // read-only
   83258:	528005d4 	mov	w20, #0x2e                  	// #46
			uart_send(dir->attr[0]& 2?'H':'.');  // hidden
   8325c:	52800918 	mov	w24, #0x48                  	// #72
			uart_send(dir->attr[0]& 4?'S':'.');  // system
   83260:	52800a77 	mov	w23, #0x53                  	// #83
			uart_send(dir->attr[0]& 8?'L':'.');  // volume label
   83264:	52800996 	mov	w22, #0x4c                  	// #76
   83268:	f90023f9 	str	x25, [sp, #64]
			uart_send(dir->attr[0]& 1?'R':'.');  // read-only
   8326c:	52800a59 	mov	w25, #0x52                  	// #82
			if(dir->attr[0]&1 && dir->attr[0]&2 && dir->attr[0]&4 && dir->attr[0]&8) {
   83270:	39402e60 	ldrb	w0, [x19, #11]
			if((dir->name[0]==0xE5 || dir->attr[0]==0xF) && !(dir->attr[0]&1 && dir->attr[0]&2 && dir->attr[0]&4 && dir->attr[0]&8)) continue;
   83274:	7103943f 	cmp	w1, #0xe5
   83278:	7a4f1804 	ccmp	w0, #0xf, #0x4, ne  // ne = any
   8327c:	12000c01 	and	w1, w0, #0xf
   83280:	54000061 	b.ne	8328c <fat_listdirectory+0xfc>  // b.any
   83284:	71003c3f 	cmp	w1, #0xf
   83288:	54000561 	b.ne	83334 <fat_listdirectory+0x1a4>  // b.any
			uart_send(dir->attr[0]& 1?'R':'.');  // read-only
   8328c:	f240001f 	tst	x0, #0x1
   83290:	1a941320 	csel	w0, w25, w20, ne  // ne = any
   83294:	97fffb3d 	bl	81f88 <uart_send>
			uart_send(dir->attr[0]& 2?'H':'.');  // hidden
   83298:	39402e60 	ldrb	w0, [x19, #11]
   8329c:	f27f001f 	tst	x0, #0x2
   832a0:	1a941300 	csel	w0, w24, w20, ne  // ne = any
   832a4:	97fffb39 	bl	81f88 <uart_send>
			uart_send(dir->attr[0]& 4?'S':'.');  // system
   832a8:	39402e60 	ldrb	w0, [x19, #11]
   832ac:	f27e001f 	tst	x0, #0x4
   832b0:	1a9412e0 	csel	w0, w23, w20, ne  // ne = any
   832b4:	97fffb35 	bl	81f88 <uart_send>
			uart_send(dir->attr[0]& 8?'L':'.');  // volume label
   832b8:	39402e60 	ldrb	w0, [x19, #11]
   832bc:	f27d001f 	tst	x0, #0x8
   832c0:	1a9412c0 	csel	w0, w22, w20, ne  // ne = any
   832c4:	97fffb31 	bl	81f88 <uart_send>
			uart_send(dir->attr[0]&16?'D':'.');  // directory
   832c8:	39402e61 	ldrb	w1, [x19, #11]
   832cc:	52800880 	mov	w0, #0x44                  	// #68
   832d0:	f27c003f 	tst	x1, #0x10
   832d4:	1a941000 	csel	w0, w0, w20, ne  // ne = any
   832d8:	97fffb2c 	bl	81f88 <uart_send>
			uart_send(dir->attr[0]&32?'A':'.');  // archive
   832dc:	39402e61 	ldrb	w1, [x19, #11]
   832e0:	52800820 	mov	w0, #0x41                  	// #65
   832e4:	f27b003f 	tst	x1, #0x20
   832e8:	1a941000 	csel	w0, w0, w20, ne  // ne = any
   832ec:	97fffb27 	bl	81f88 <uart_send>
			uart_send(' ');
   832f0:	52800400 	mov	w0, #0x20                  	// #32
   832f4:	97fffb25 	bl	81f88 <uart_send>
			// staring cluster
			uart_hex(((unsigned int)dir->ch)<<16|dir->cl);
   832f8:	79402a61 	ldrh	w1, [x19, #20]
   832fc:	79403660 	ldrh	w0, [x19, #26]
   83300:	2a014000 	orr	w0, w0, w1, lsl #16
   83304:	97fffb51 	bl	82048 <uart_hex>
			uart_send(' ');
   83308:	52800400 	mov	w0, #0x20                  	// #32
   8330c:	97fffb1f 	bl	81f88 <uart_send>
			// size
			uart_hex(dir->size);
   83310:	b9401e60 	ldr	w0, [x19, #28]
   83314:	97fffb4d 	bl	82048 <uart_hex>
			uart_send(' ');
   83318:	52800400 	mov	w0, #0x20                  	// #32
   8331c:	97fffb1b 	bl	81f88 <uart_send>
			// filename
			dir->attr[0]=0;
			uart_puts(dir->name);
   83320:	aa1303e0 	mov	x0, x19
			dir->attr[0]=0;
   83324:	39002e7f 	strb	wzr, [x19, #11]
			uart_puts(dir->name);
   83328:	97fffb30 	bl	81fe8 <uart_puts>
			uart_puts("\n");
   8332c:	aa1503e0 	mov	x0, x21
   83330:	97fffb2e 	bl	81fe8 <uart_puts>
		for(;dir->name[0]!=0;dir++) 
   83334:	38420e61 	ldrb	w1, [x19, #32]!
   83338:	35fff9c1 	cbnz	w1, 83270 <fat_listdirectory+0xe0>
   8333c:	f94023f9 	ldr	x25, [sp, #64]
	} 
	else 
	{
		uart_puts("ERROR: Unable to load root directory\n");
	}
}
   83340:	a94153f3 	ldp	x19, x20, [sp, #16]
   83344:	a9425bf5 	ldp	x21, x22, [sp, #32]
   83348:	a94363f7 	ldp	x23, x24, [sp, #48]
   8334c:	a8c57bfd 	ldp	x29, x30, [sp], #80
   83350:	d65f03c0 	ret
   83354:	a94153f3 	ldp	x19, x20, [sp, #16]
		uart_puts("ERROR: Unable to load root directory\n");
   83358:	f0000060 	adrp	x0, 92000 <sd_init+0x470>
}
   8335c:	a9425bf5 	ldp	x21, x22, [sp, #32]
		uart_puts("ERROR: Unable to load root directory\n");
   83360:	91050000 	add	x0, x0, #0x140
}
   83364:	a94363f7 	ldp	x23, x24, [sp, #48]
   83368:	a8c57bfd 	ldp	x29, x30, [sp], #80
		uart_puts("ERROR: Unable to load root directory\n");
   8336c:	17fffb1f 	b	81fe8 <uart_puts>

0000000000083370 <fat_readfile>:

/**
 * Read a file into memory
 */
char *fat_readfile(unsigned int cluster)
{
   83370:	a9bb7bfd 	stp	x29, x30, [sp, #-80]!
   83374:	910003fd 	mov	x29, sp
   83378:	a90153f3 	stp	x19, x20, [sp, #16]
	// BIOS Parameter Block
	bpb_t *bpb=(bpb_t*)(&(master_boot_record_array[0]));
	char *vbr = (char *)&master_boot_record_array;
	// File allocation tables. We choose between FAT16 and FAT32 dynamically
	unsigned int *fat32=(unsigned int*)(&_end+bpb->rsc*512);
   8337c:	d0009ad3 	adrp	x19, 13dd000 <_binary_src_audio_The_Amazons_bin_size+0x96300>
   83380:	9112a273 	add	x19, x19, #0x4a8
{
   83384:	a9025bf5 	stp	x21, x22, [sp, #32]
   83388:	2a0003f5 	mov	w21, w0
	unsigned int *fat32=(unsigned int*)(&_end+bpb->rsc*512);
   8338c:	79401e62 	ldrh	w2, [x19, #14]
	unsigned short *fat16=(unsigned short*)fat32;
	// Data pointers
	unsigned int data_sec, s;
	unsigned char *data, *ptr;
	// find the LBA of the first data sector
	data_sec=((bpb->spf16?bpb->spf16:bpb->spf32)*bpb->nf)+bpb->rsc;
   83390:	79402e61 	ldrh	w1, [x19, #22]
{
   83394:	a90363f7 	stp	x23, x24, [sp, #48]
	unsigned int *fat32=(unsigned int*)(&_end+bpb->rsc*512);
   83398:	d3773c57 	ubfiz	x23, x2, #9, #16
{
   8339c:	f90023f9 	str	x25, [sp, #64]
	unsigned int *fat32=(unsigned int*)(&_end+bpb->rsc*512);
   833a0:	d000aa99 	adrp	x25, 15d5000 <allocated+0xfb940>
   833a4:	9126c339 	add	x25, x25, #0x9b0
   833a8:	39404276 	ldrb	w22, [x19, #16]
   833ac:	8b170337 	add	x23, x25, x23
	data_sec=((bpb->spf16?bpb->spf16:bpb->spf32)*bpb->nf)+bpb->rsc;
   833b0:	34000b61 	cbz	w1, 8351c <fat_readfile+0x1ac>
	//WARNING gcc generates bad code for bpb->nr, causing unaligned exception
	s=*((unsigned int*)&bpb->nf);
   833b4:	b9401260 	ldr	w0, [x19, #16]
	data_sec=((bpb->spf16?bpb->spf16:bpb->spf32)*bpb->nf)+bpb->rsc;
   833b8:	1b160821 	madd	w1, w1, w22, w2
	s>>=8;
   833bc:	53087c16 	lsr	w22, w0, #8
	s&=0xFFFF;
	s<<=5;
   833c0:	531b3ed6 	ubfiz	w22, w22, #5, #16
	if(bpb->spf16>0)
	{
		// adjust for FAT16
		data_sec+=(s+511)>>9;
   833c4:	1107fed6 	add	w22, w22, #0x1ff
   833c8:	0b562436 	add	w22, w1, w22, lsr #9
	}
	// add partition LBA
	data_sec+=partitionlba;
   833cc:	d0009ad4 	adrp	x20, 13dd000 <_binary_src_audio_The_Amazons_bin_size+0x96300>
	// dump important properties
	uart_puts("FAT Bytes per Sector: ");
   833d0:	f0000060 	adrp	x0, 92000 <sd_init+0x470>
   833d4:	91098000 	add	x0, x0, #0x260
	data_sec+=partitionlba;
   833d8:	b946c281 	ldr	w1, [x20, #1728]
   833dc:	0b0102d6 	add	w22, w22, w1
	uart_puts("FAT Bytes per Sector: ");
   833e0:	97fffb02 	bl	81fe8 <uart_puts>
	//uart_hex(bpb->bps);
	uart_hex(vbr[11] + (vbr[12]<<8));
   833e4:	39403261 	ldrb	w1, [x19, #12]
   833e8:	39402e60 	ldrb	w0, [x19, #11]
   833ec:	0b012000 	add	w0, w0, w1, lsl #8
   833f0:	97fffb16 	bl	82048 <uart_hex>
	uart_puts("\nFAT Sectors per Cluster: ");
   833f4:	f0000060 	adrp	x0, 92000 <sd_init+0x470>
   833f8:	9109e000 	add	x0, x0, #0x278
   833fc:	97fffafb 	bl	81fe8 <uart_puts>
	uart_hex(bpb->spc);
   83400:	39403660 	ldrb	w0, [x19, #13]
   83404:	97fffb11 	bl	82048 <uart_hex>
	uart_puts("\nFAT Number of FAT: ");
   83408:	f0000060 	adrp	x0, 92000 <sd_init+0x470>
   8340c:	910a6000 	add	x0, x0, #0x298
   83410:	97fffaf6 	bl	81fe8 <uart_puts>
	uart_hex(bpb->nf);
   83414:	39404260 	ldrb	w0, [x19, #16]
   83418:	97fffb0c 	bl	82048 <uart_hex>
	uart_puts("\nFAT Sectors per FAT: ");
   8341c:	f0000060 	adrp	x0, 92000 <sd_init+0x470>
   83420:	910ac000 	add	x0, x0, #0x2b0
   83424:	97fffaf1 	bl	81fe8 <uart_puts>
	uart_hex((bpb->spf16?bpb->spf16:bpb->spf32));
   83428:	79402e60 	ldrh	w0, [x19, #22]
   8342c:	35000040 	cbnz	w0, 83434 <fat_readfile+0xc4>
   83430:	b9402660 	ldr	w0, [x19, #36]
   83434:	97fffb05 	bl	82048 <uart_hex>
	uart_puts("\nFAT Reserved Sectors Count: ");
   83438:	f0000060 	adrp	x0, 92000 <sd_init+0x470>
   8343c:	910b2000 	add	x0, x0, #0x2c8
   83440:	97fffaea 	bl	81fe8 <uart_puts>
	uart_hex(bpb->rsc);
   83444:	79401e60 	ldrh	w0, [x19, #14]
   83448:	97fffb00 	bl	82048 <uart_hex>
	uart_puts("\nFAT First data sector: ");
   8344c:	f0000060 	adrp	x0, 92000 <sd_init+0x470>
   83450:	910ba000 	add	x0, x0, #0x2e8
   83454:	97fffae5 	bl	81fe8 <uart_puts>
	uart_hex(data_sec);
   83458:	2a1603e0 	mov	w0, w22
   8345c:	97fffafb 	bl	82048 <uart_hex>
	uart_puts("\n");
   83460:	d0000080 	adrp	x0, 95000 <sd_init+0x3470>
   83464:	912ae000 	add	x0, x0, #0xab8
   83468:	97fffae0 	bl	81fe8 <uart_puts>
	// load FAT table
	s=sd_readblock(partitionlba+1,(unsigned char*)&_end+512,(bpb->spf16?bpb->spf16:bpb->spf32)+bpb->rsc);
   8346c:	79402e62 	ldrh	w2, [x19, #22]
   83470:	b946c280 	ldr	w0, [x20, #1728]
   83474:	11000400 	add	w0, w0, #0x1
   83478:	35000042 	cbnz	w2, 83480 <fat_readfile+0x110>
   8347c:	b9402662 	ldr	w2, [x19, #36]
   83480:	79401e63 	ldrh	w3, [x19, #14]
   83484:	d000aa81 	adrp	x1, 15d5000 <allocated+0xfb940>
   83488:	912ec021 	add	x1, x1, #0xbb0
	// end of FAT in memory
	data=ptr=&_end+512+s;
	// iterate on cluster chain
	while(cluster>1 && cluster<0xFFF8) {
   8348c:	529ffeb8 	mov	w24, #0xfff5                	// #65525
	s=sd_readblock(partitionlba+1,(unsigned char*)&_end+512,(bpb->spf16?bpb->spf16:bpb->spf32)+bpb->rsc);
   83490:	0b020062 	add	w2, w3, w2
   83494:	94003899 	bl	916f8 <sd_readblock>
	data=ptr=&_end+512+s;
   83498:	2a0003e0 	mov	w0, w0
   8349c:	91080000 	add	x0, x0, #0x200
   834a0:	8b000339 	add	x25, x25, x0
   834a4:	aa1903f4 	mov	x20, x25
	while(cluster>1 && cluster<0xFFF8) {
   834a8:	51000aa0 	sub	w0, w21, #0x2
		// load all sectors in a cluster
		sd_readblock((cluster-2)*bpb->spc+data_sec,ptr,bpb->spc);
   834ac:	aa1403e1 	mov	x1, x20
	while(cluster>1 && cluster<0xFFF8) {
   834b0:	6b18001f 	cmp	w0, w24
   834b4:	54000228 	b.hi	834f8 <fat_readfile+0x188>  // b.pmore
		sd_readblock((cluster-2)*bpb->spc+data_sec,ptr,bpb->spc);
   834b8:	39403662 	ldrb	w2, [x19, #13]
   834bc:	1b005840 	madd	w0, w2, w0, w22
   834c0:	9400388e 	bl	916f8 <sd_readblock>
		// move pointer, sector per cluster * bytes per sector
		ptr+=bpb->spc*(vbr[11] + (vbr[12]<<8));
   834c4:	39403260 	ldrb	w0, [x19, #12]
   834c8:	39402e63 	ldrb	w3, [x19, #11]
   834cc:	39403662 	ldrb	w2, [x19, #13]
		// get the next cluster in chain
		cluster=bpb->spf16>0?fat16[cluster]:fat32[cluster];
   834d0:	79402e61 	ldrh	w1, [x19, #22]
		ptr+=bpb->spc*(vbr[11] + (vbr[12]<<8));
   834d4:	0b002060 	add	w0, w3, w0, lsl #8
   834d8:	1b027c00 	mul	w0, w0, w2
   834dc:	8b20c294 	add	x20, x20, w0, sxtw
		cluster=bpb->spf16>0?fat16[cluster]:fat32[cluster];
   834e0:	340001a1 	cbz	w1, 83514 <fat_readfile+0x1a4>
   834e4:	78755af5 	ldrh	w21, [x23, w21, uxtw #1]
		sd_readblock((cluster-2)*bpb->spc+data_sec,ptr,bpb->spc);
   834e8:	aa1403e1 	mov	x1, x20
	while(cluster>1 && cluster<0xFFF8) {
   834ec:	51000aa0 	sub	w0, w21, #0x2
   834f0:	6b18001f 	cmp	w0, w24
   834f4:	54fffe29 	b.ls	834b8 <fat_readfile+0x148>  // b.plast
	}
	return (char*)data;
}
   834f8:	aa1903e0 	mov	x0, x25
   834fc:	a94153f3 	ldp	x19, x20, [sp, #16]
   83500:	a9425bf5 	ldp	x21, x22, [sp, #32]
   83504:	a94363f7 	ldp	x23, x24, [sp, #48]
   83508:	f94023f9 	ldr	x25, [sp, #64]
   8350c:	a8c57bfd 	ldp	x29, x30, [sp], #80
   83510:	d65f03c0 	ret
		cluster=bpb->spf16>0?fat16[cluster]:fat32[cluster];
   83514:	b8755af5 	ldr	w21, [x23, w21, uxtw #2]
   83518:	17ffffe4 	b	834a8 <fat_readfile+0x138>
	data_sec=((bpb->spf16?bpb->spf16:bpb->spf32)*bpb->nf)+bpb->rsc;
   8351c:	b9402660 	ldr	w0, [x19, #36]
   83520:	1b000ad6 	madd	w22, w22, w0, w2
	if(bpb->spf16>0)
   83524:	17ffffaa 	b	833cc <fat_readfile+0x5c>

0000000000083528 <main>:
#include "headers/project.h"

void main()
{
   83528:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   8352c:	910003fd 	mov	x29, sp
	// set up serial console
	//uart_init();
	lfb_init();
   83530:	97fff77a 	bl	81318 <lfb_init>
	dynamic_memory_alloc_init();
   83534:	94003567 	bl	90ad0 <dynamic_memory_alloc_init>
	console_init();
   83538:	97fffbfc 	bl	82528 <console_init>
	breakpoint;	
   8353c:	d4200000 	brk	#0x0


	// echo everything back
	while(1) 
	{
		uart_send(uart_getc());
   83540:	97fffa9c 	bl	81fb0 <uart_getc>
   83544:	12001c00 	and	w0, w0, #0xff
   83548:	97fffa90 	bl	81f88 <uart_send>
   8354c:	17fffffd 	b	83540 <main+0x18>

0000000000083550 <disasm_str.part.0>:

#define disasm_arch "aarch64"
enum { disasm_arg_NONE,disasm_arg_ofs,disasm_arg_ofe, disasm_arg_Xt, disasm_arg_labelij1, disasm_arg_RtS, disasm_arg_RnS, disasm_arg_i, disasm_arg_j12_opt, disasm_arg_Rn, disasm_arg_ib, disasm_arg_Rt, disasm_arg_j16_opt, disasm_arg_j, disasm_arg_Rm, disasm_arg_c, disasm_arg_labeli4, disasm_arg_i_opt, disasm_arg_pstate, disasm_arg_sh, disasm_arg_a0, disasm_arg_a1, disasm_arg_a2, disasm_arg_dc0, disasm_arg_dc1, disasm_arg_ZVA, disasm_arg_dc2, disasm_arg_ic, disasm_arg_Xt_opt, disasm_arg_tl0, disasm_arg_tl1, disasm_arg_tl2, disasm_arg_sysreg, disasm_arg_Cn, disasm_arg_Cm, disasm_arg_Xn, disasm_arg_b, disasm_arg_VtT, disasm_arg_Vt2T, disasm_arg_Vt3T, disasm_arg_Vt4T, disasm_arg_offs, disasm_arg_XnS, disasm_arg_offe, disasm_arg_Qi, disasm_arg_Xm, disasm_arg_Qi3, disasm_arg_Qi2, disasm_arg_Qi1, disasm_arg_VtB, disasm_arg_VtH, disasm_arg_VtS, disasm_arg_VtD, disasm_arg_i1, disasm_arg_i2, disasm_arg_i4, disasm_arg_i8, disasm_arg_Vt3B, disasm_arg_Vt3H, disasm_arg_Vt3S, disasm_arg_Vt3D, disasm_arg_i3, disasm_arg_i6, disasm_arg_i12, disasm_arg_i24, disasm_arg_Vt2B, disasm_arg_Vt2H, disasm_arg_Vt2S, disasm_arg_Vt2D, disasm_arg_i16, disasm_arg_Vt4B, disasm_arg_Vt4H, disasm_arg_Vt4S, disasm_arg_Vt4D, disasm_arg_i32, disasm_arg_z, disasm_arg_z3, disasm_arg_z2, disasm_arg_z4, disasm_arg_Rd, disasm_arg_Rd1, disasm_arg_Rt1, disasm_arg_Wd, disasm_arg_Wt, disasm_arg_FPt, disasm_arg_prf_op, disasm_arg_is4_opt, disasm_arg_FPm, disasm_arg_iz4_opt, disasm_arg_im4_opt, disasm_arg_nRt, disasm_arg_FPst, disasm_arg_j_opt, disasm_arg_Rom, disasm_arg_amountj, disasm_arg_amountz, disasm_arg_amountjs, disasm_arg_amountj2, disasm_arg_amountj3, disasm_arg_shiftj_opt, disasm_arg_Rsom, disasm_arg_exts, disasm_arg_Wn, disasm_arg_Wm, disasm_arg_Xd, disasm_arg_Vt16b, disasm_arg_Vn16b, disasm_arg_Qt, disasm_arg_Sn, disasm_arg_Vm4s, disasm_arg_Vt4s, disasm_arg_Vn4s, disasm_arg_Qn, disasm_arg_St, disasm_arg_FPjt, disasm_arg_Vnj, disasm_arg_FPidx, disasm_arg_Vtjq, disasm_arg_Ht, disasm_arg_Hn, disasm_arg_Hm, disasm_arg_FPn, disasm_arg_VtH1, disasm_arg_VnH1, disasm_arg_VmH1, disasm_arg_Vtzq, disasm_arg_Vnzq, disasm_arg_Vmzq, disasm_arg_simd0, disasm_arg_FPz2t, disasm_arg_FPz2n, disasm_arg_FPz2m, disasm_arg_VnT, disasm_arg_VmT, disasm_arg_FPz3t, disasm_arg_FPz3n, disasm_arg_FPz4n, disasm_arg_VnT3, disasm_arg_Vn2d, disasm_arg_Vn2h, disasm_arg_Vnz, disasm_arg_FPz4t, disasm_arg_Vtz, disasm_arg_FPz3m, disasm_arg_Dt, disasm_arg_Dn, disasm_arg_shrshift, disasm_arg_Vtj2, disasm_arg_Vnj2, disasm_arg_shlshift, disasm_arg_FPnj, disasm_arg_VnTa, disasm_arg_FPjt2, disasm_arg_FPjn2, disasm_arg_Vtz3, disasm_arg_VmTs, disasm_arg_VmHs, disasm_arg_VmTs2, disasm_arg_Vn116b, disasm_arg_Vn216b, disasm_arg_Vn316b, disasm_arg_Vn416b, disasm_arg_Vtj, disasm_arg_R2n, disasm_arg_FPidxk, disasm_arg_Vtzq2, disasm_arg_VnT2, disasm_arg_Vnz3, disasm_arg_Vnzq2, disasm_arg_shift8, disasm_arg_VtT3, disasm_arg_VmT3, disasm_arg_VtT4, disasm_arg_imm8, disasm_arg_amountk_opt, disasm_arg_amountk2_opt, disasm_arg_imm64, disasm_arg_Vt2d, disasm_arg_F16, disasm_arg_F32, disasm_arg_F64, disasm_arg_VmTs4b, disasm_arg_Vm2d, disasm_arg_Vm16b, disasm_arg_Vd16b, disasm_arg_Vd4s, disasm_arg_FPz5t, disasm_arg_fbits, disasm_arg_FPz5n, disasm_arg_Vn1d, disasm_arg_Vt1d, disasm_arg_FPk5t, disasm_arg_FPz5m, disasm_arg_jz, disasm_arg_FPz5d };

/*** private functions ***/
char *disasm_str(char*s,int n) {if(!s)return "?";while(n){s++;if(!*s){s++;n--;}}return *s?s:"?";};
   83550:	34000181 	cbz	w1, 83580 <disasm_str.part.0+0x30>
   83554:	39400403 	ldrb	w3, [x0, #1]
   83558:	91000402 	add	x2, x0, #0x1
   8355c:	35000063 	cbnz	w3, 83568 <disasm_str.part.0+0x18>
   83560:	1400000e 	b	83598 <disasm_str.part.0+0x48>
   83564:	aa0303e2 	mov	x2, x3
   83568:	39400440 	ldrb	w0, [x2, #1]
   8356c:	91000443 	add	x3, x2, #0x1
   83570:	35ffffa0 	cbnz	w0, 83564 <disasm_str.part.0+0x14>
   83574:	91000840 	add	x0, x2, #0x2
   83578:	51000421 	sub	w1, w1, #0x1
   8357c:	35fffec1 	cbnz	w1, 83554 <disasm_str.part.0+0x4>
   83580:	39400002 	ldrb	w2, [x0]
   83584:	d0000081 	adrp	x1, 95000 <sd_init+0x3470>
   83588:	91108021 	add	x1, x1, #0x420
   8358c:	7100005f 	cmp	w2, #0x0
   83590:	9a800020 	csel	x0, x1, x0, eq  // eq = none
   83594:	d65f03c0 	ret
   83598:	aa0003e2 	mov	x2, x0
   8359c:	51000421 	sub	w1, w1, #0x1
   835a0:	91000840 	add	x0, x2, #0x2
   835a4:	17fffff6 	b	8357c <disasm_str.part.0+0x2c>

00000000000835a8 <disasm_str>:
   835a8:	b4000040 	cbz	x0, 835b0 <disasm_str+0x8>
   835ac:	17ffffe9 	b	83550 <disasm_str.part.0>
   835b0:	d0000080 	adrp	x0, 95000 <sd_init+0x3470>
   835b4:	91108000 	add	x0, x0, #0x420
   835b8:	d65f03c0 	ret
   835bc:	d503201f 	nop

00000000000835c0 <disasm_sysreg>:
char *disasm_sysreg(uint8_t p,uint8_t k,uint8_t n,uint8_t m,uint8_t j) {char *t=NULL;switch(p){case 2: switch(k) {case 0: switch(n) {case 0: switch(m) {case 0: t="?\0?\0OSDTRRX_EL1\0"; break;case 2: t="MDCCINT_EL1\0?\0MDSCR_EL1\0"; break;case 3: t="?\0?\0OSDTRTX_EL1\0"; break;case 6: t="?\0?\0OSECCR_EL1\0"; break;default: { n=j; j=m; switch(n) {case 4: t="DBGBVR0_EL1\0DBGBVR1_EL1\0DBGBVR2_EL1\0DBGBVR3_EL1\0DBGBVR4_EL1\0DBGBVR5_EL1\0DBGBVR6_EL1\0DBGBVR7_EL1\0"; break;case 5: t="DBGBCR0_EL1\0DBGBCR1_EL1\0DBGBCR2_EL1\0DBGBCR3_EL1\0DBGBCR4_EL1\0DBGBCR5_EL1\0DBGBCR6_EL1\0DBGBCR7_EL1\0"; break;case 6: t="DBGWVR0_EL1\0DBGWVR1_EL1\0DBGWVR2_EL1\0DBGWVR3_EL1\0DBGWVR4_EL1\0DBGWVR5_EL1\0DBGWVR6_EL1\0DBGWVR7_EL1\0"; break;case 7: t="DBGWCR0_EL1\0DBGWCR1_EL1\0DBGWCR2_EL1\0DBGWCR3_EL1\0DBGWCR4_EL1\0DBGWCR5_EL1\0DBGWCR6_EL1\0DBGWCR7_EL1\0"; break;} break; }} break;case 1: if(m==0) t="MDRAR_EL1\0?\0?\0?\0OSLAR_EL1\0"; else if(j==4) { j=m; t="OSLSR_EL1\0?\0OSDLR_EL1\0DBGPRCR_EL1\0"; }break;case 7: if(j==6) { j=m; t="?\0?\0?\0?\0?\0?\0?\0?\0DBGCLAIMSET_EL1\0DBGCLAIMCLR_EL1\0?\0?\0?\0?\0DBGAUTHSTATUS_EL1\0"; }break;} break;case 3: if(n==0&&j==0) { j=m; t="?\0MDCCSR_EL0\0?\0?\0DBGDTR_EL0\0DBGDTRRX_EL0\0"; } break;case 4: if(n==0&&m==7) t="DBGVCR32_EL2\0"; break;} break;case 3: switch(k) {case 0: switch(n) {case 0: if(m==0) t="MIDR_EL1\0?\0?\0?\0?\0MPIDR_EL1\0REVIDR_EL1\0?\0ID_PFR0_EL1\0ID_PFR1_EL1\0ID_DFR0_EL1\0ID_AFR0_EL1\0ID_MMFR0_EL1\0ID_MMFR1_EL1\0ID_MMFR2_EL1\0ID_MMFR3_EL1\0ID_ISAR0_EL1\0ID_ISAR1_EL1\0ID_ISAR2_EL1\0ID_ISAR2_EL1\0ID_ISAR3_EL1\0ID_ISAR4_EL1\0ID_ISAR5_EL1\0ID_MMFR4_EL1\0?\0MVFR0_EL1\0MVFR1_EL1\0MVFR2_EL1\0?\0?\0?\0?\0?\0ID_AA64PFR0_EL1\0ID_AA64PFR1_EL1\0?\0?\0ID_AA64ZFR0_EL1\0?\0?\0?\0ID_AA64DFR0_EL1\0ID_AA64DFR1_EL1\0?\0?\0ID_AA64AFR0_EL1\0ID_AA64AFR1_EL1\0?\0?\0ID_AA64ISAR0_EL1\0ID_AA64ISAR1_EL1\0?\0?\0?\0?\0?\0?\0ID_AA64MMFR0_EL1\0ID_AA64MMFR1_EL1\0ID_AA64MMFR2_EL1\0"; break;case 1: switch(m) {case 0: t="SCTLR_EL1\0ACTLR_EL1\0CPACR_EL1\0"; break;case 2: t="ZCR_EL1\0"; break;} break;case 2: if(m==0) t="TTBR0_EL1\0TTBR1_EL1\0TCR_EL1\0"; break;case 4: switch(m) {case 0: t="SPSR_EL1\0ELR_EL1\0"; break;case 1: t="SP_EL0\0"; break;case 2: t="SPSel\0?\0CurrentEL\0PAN\0UAO\0"; break;case 6: t="ICC_PMR_EL1\0"; break;} break;case 5: switch(m) {case 1: t="AFSR0_EL1\0AFSR1_EL1\0"; break;case 2: t="ESR_EL1"; break;case 3: t="ERRIDR_EL1\0ERRSELR_EL1\0"; break;case 4: t="ERXFR_EL1\0ERXCTLR_EL1\0ERXSTATUS_EL1\0ERXADDR_EL1\0"; break;case 5: t="ERXMISC0_EL1\0ERXMISC1_EL1\0"; break;} break;case 6: if(m==0) t="FAR_EL1\0"; break;case 7: if(m==4) t="PAR_EL1\0"; break;case 9: switch(m) {case 9: t="PMSCR_EL1\0?\0PMSICR_EL1\0PMSIRR_EL1\0PMSFCR_EL1\0PMSEVFR_EL1\0PMSLATFR_EL1\0PMSIDR_EL1\0PMSIDR_EL1\0"; break;case 10: t="PMBLIMITR_EL1\0PMBPTR_EL1\0?\0PMBSR_EL1\0?\0?\0?\0PMBIDR_EL1\0"; break;case 14: t="?\0PMINTENSET_EL1\0PMINTENCLR_EL1\0"; break;} break;case 10: if(m==4) t="LORSA_EL1\0LOREA_EL1\0LORN_EL1\0LORC_EL1\0?\0?\0?\0LORID_EL1\0"; else if(m!=4&&j==0) { j=m; t="?\0?\0MAIR_EL1\0AMAIR_EL1\0"; }break;case 12: switch(m) {case 0: t="VBAR_EL1\0RVBAR_EL1\0RMR_EL1\0"; break;case 1: t="ISR_EL1\0DISR_EL1\0"; break;case 8: t="ICC_IAR0_EL1\0ICC_EOIR0_EL1\0ICC_HPPIR0_EL1\0ICC_BPR0_EL1\0ICC_AP0R0_EL1\0ICC_AP0R1_EL1\0ICC_AP0R2_EL1\0ICC_AP0R3_EL1\0"; break;case 9: t="ICC_AP1R0_EL1\0ICC_AP1R1_EL1\0ICC_AP1R2_EL1\0ICC_AP1R3_EL1\0"; break;case 11: t="?\0ICC_DIR_EL1\0?\0ICC_RPR_EL1\0?\0ICC_SGI1R_EL1\0ICC_ASGI1R_EL1\0ICC_SGI0R_EL1\0"; break;case 12: t="ICC_IAR1_EL1\0ICC_EOIR1_EL1\0ICC_HPPIR1_EL1\0ICC_BPR1_EL1\0ICC_CTLR_EL1\0ICC_SRE_EL1\0ICC_IGRPEN0_EL1\0ICC_IGRPEN1_EL1\0"; break;} break;case 13: if(m==0) t="?\0CONTEXTIDR_EL1\0?\0?\0TPIDR_EL1\0"; break;case 14: if(m==1) t="CNTKCTL_EL1\0"; break;} break;case 1: if(n==0&&m==0) t="CCSIDR_EL1\0CLIDR_EL1\0?\0?\0?\0?\0?\0AIDR_EL1\0"; break;case 2: if(n==0&&m==0) t="CSSELR_EL1\0"; break;case 3: switch(n) {case 0: if(m==0) t="?\0CTR_EL0\0?\0?\0?\0?\0?\0DCZID_EL0\0"; break;case 4: switch(m) {case 2: t="NZCV\0DAIF\0"; break;case 4: t="FPCR\0FPSR\0"; break;case 5: t="DSPSR_EL0\0DLR_EL0\0"; break;} break;case 9: switch(m) {case 12: t="PMCR_EL0\0PMCNTENSET_EL0\0PMCNTENCLR_EL0\0PMOVSCLR_EL0\0PMSWINC_EL0\0PMSELR_EL0\0PMCEID0_EL0\0PMCEID1_EL0\0"; break;case 13: t="PMCCNTR_EL0\0PMXEVTYPER_EL0\0PMXEVCNTR_EL0\0"; break;case 14: t="PMUSERENR_EL0\0?\0?\0PMOVSSET_EL0\0"; break;} break;
   835c0:	12001c00 	and	w0, w0, #0xff
   835c4:	12001c25 	and	w5, w1, #0xff
   835c8:	7100081f 	cmp	w0, #0x2
   835cc:	12001c42 	and	w2, w2, #0xff
   835d0:	12001c63 	and	w3, w3, #0xff
   835d4:	12001c81 	and	w1, w4, #0xff
   835d8:	540000a0 	b.eq	835ec <disasm_sysreg+0x2c>  // b.none
   835dc:	71000c1f 	cmp	w0, #0x3
   835e0:	54000280 	b.eq	83630 <disasm_sysreg+0x70>  // b.none
case 13: if(m==0) t="?\0?\0TPIDR_EL0\0TPIDRRO_EL0\0"; break;case 14: switch(m) {case 0: t="CNTFRQ_EL0\0CNTPCT_EL0\0CNTVCT_EL0\0"; break;case 2: t="CNTP_TVAL_EL0\0CNTP_CTL_EL0\0CNTP_CVAL_EL0\0"; break;case 3: t="CNTV_TVAL_EL0\0CNTV_CTL_EL0\0CNTV_CVAL_EL0\0"; break;} break;} break;case 4: switch(n) {case 0: if(m==0) t="VPIDR_EL2\0?\0?\0?\0?\0VMPIDR_EL2\0"; break;case 1: switch(m) {case 0: t="SCTLR_EL2\0ACTLR_EL2\0"; break;case 1: t="HCR_EL2\0MDCR_EL2\0CPTR_EL2\0HSTR_EL2\0?\0?\0?\0HACR_EL2\0"; break;case 2: t="ZCR_EL2\0"; break;} break;case 2: switch(m) {case 0: t="TTBR0_EL2\0?\0TCR_EL2\0"; break;case 1: t="VTTBR0_EL2\0?\0VTCR_EL2\0"; break;} break;case 3: if(m==0) t="DACR32_EL2\0"; break;case 4: switch(m) {case 0: t="SPSR_EL2\0ELR_EL2\0"; break;case 1: t="SP_EL1\0"; break;case 3: t="SPSR_irq\0SPSR_abt\0SPSR_und\0SPSR_fiq\0"; break;} break;case 5: switch(m) {case 0: t="?\0IFSR32_EL2\0"; break;case 1: t="AFSR0_EL2\0AFSR1_EL2\0"; break;case 2: t="ESR_EL2\0?\0?\0VSESR_EL2\0"; break;case 3: t="FPEXC32_EL2\0"; break;} break;case 6: if(m==0) t="FAR_EL2\0?\0?\0?\0HPFAR_EL2\0"; break;case 9: if(m==9) t="PMSCR_EL2\0"; break;case 10: switch(m) {case 2: t="MAIR_EL2\0"; break;case 3: t="AMAIR_EL2\0"; break;} break;case 12: switch(m) {case 0: t="VBAR_EL2\0RVBAR_EL2\0RMR_EL2\0"; break;case 1: t="?\0VDISR_EL2\0"; break;case 8: t="ICH_AP0R0_EL2\0ICH_AP0R1_EL2\0ICH_AP0R2_EL2\0ICH_AP0R3_EL2\0"; break;case 9: t="ICH_AP1R0_EL2\0ICH_AP1R1_EL2\0ICH_AP1R2_EL2\0ICH_AP1R3_EL2\0ICC_SRE_EL2\0"; break;case 11: t="ICH_HCR_EL2\0ICH_VTR_EL2\0ICH_MISR_EL2\0ICH_EISR_EL2\0?\0ICH_ELRSR_EL2\0?\0ICH_VMCR_EL2\0"; break;case 12: t="ICH_LR0_EL2\0ICH_LR1_EL2\0ICH_LR2_EL2\0ICH_LR3_EL2\0ICH_LR4_EL2\0ICH_LR5_EL2\0ICH_LR6_EL2\0ICH_LR7_EL2\0"; break;case 13: t="ICH_LR8_EL2\0ICH_LR9_EL2\0ICH_LR10_EL2\0ICH_LR11_EL2\0ICH_LR12_EL2\0ICH_LR13_EL2\0ICH_LR14_EL2\0ICH_LR15_EL2\0"; break;} break;case 13: if(m==0) t="?\0CONTEXTIDR_EL2\0TPIDR_EL2\0"; break;case 14: switch(m) {case 0: t="?\0?\0?\0CNTVOFF_EL2\0"; break;case 1: t="CNTHCTL_EL2\0"; break;case 2: t="CNTHP_TVAL_EL2\0CNTHP_CTL_EL2\0CNTHP_CVAL_EL2\0"; break;case 3: t="CNTHV_TVAL_EL2\0CNTHV_CTL_EL2\0CNTHV_CVAL_EL2\0"; break;} break;} break;case 5: if(n==4&&m==0) t="SPSR_EL12\0ELR_EL12\0"; break;case 6: if(n==4&&m==1) t="SP_EL2\0"; break;case 7: if(n==14&&m==2) t="CNTPS_TVAL_EL1\0CNTPS_CTL_EL1\0CNTPS_CVAL_EL1\0"; break;} break;}return t?disasm_str(t,j):NULL;}
   835e4:	d2800000 	mov	x0, #0x0                   	// #0
   835e8:	d65f03c0 	ret
char *disasm_sysreg(uint8_t p,uint8_t k,uint8_t n,uint8_t m,uint8_t j) {char *t=NULL;switch(p){case 2: switch(k) {case 0: switch(n) {case 0: switch(m) {case 0: t="?\0?\0OSDTRRX_EL1\0"; break;case 2: t="MDCCINT_EL1\0?\0MDSCR_EL1\0"; break;case 3: t="?\0?\0OSDTRTX_EL1\0"; break;case 6: t="?\0?\0OSECCR_EL1\0"; break;default: { n=j; j=m; switch(n) {case 4: t="DBGBVR0_EL1\0DBGBVR1_EL1\0DBGBVR2_EL1\0DBGBVR3_EL1\0DBGBVR4_EL1\0DBGBVR5_EL1\0DBGBVR6_EL1\0DBGBVR7_EL1\0"; break;case 5: t="DBGBCR0_EL1\0DBGBCR1_EL1\0DBGBCR2_EL1\0DBGBCR3_EL1\0DBGBCR4_EL1\0DBGBCR5_EL1\0DBGBCR6_EL1\0DBGBCR7_EL1\0"; break;case 6: t="DBGWVR0_EL1\0DBGWVR1_EL1\0DBGWVR2_EL1\0DBGWVR3_EL1\0DBGWVR4_EL1\0DBGWVR5_EL1\0DBGWVR6_EL1\0DBGWVR7_EL1\0"; break;case 7: t="DBGWCR0_EL1\0DBGWCR1_EL1\0DBGWCR2_EL1\0DBGWCR3_EL1\0DBGWCR4_EL1\0DBGWCR5_EL1\0DBGWCR6_EL1\0DBGWCR7_EL1\0"; break;} break; }} break;case 1: if(m==0) t="MDRAR_EL1\0?\0?\0?\0OSLAR_EL1\0"; else if(j==4) { j=m; t="OSLSR_EL1\0?\0OSDLR_EL1\0DBGPRCR_EL1\0"; }break;case 7: if(j==6) { j=m; t="?\0?\0?\0?\0?\0?\0?\0?\0DBGCLAIMSET_EL1\0DBGCLAIMCLR_EL1\0?\0?\0?\0?\0DBGAUTHSTATUS_EL1\0"; }break;} break;case 3: if(n==0&&j==0) { j=m; t="?\0MDCCSR_EL0\0?\0?\0DBGDTR_EL0\0DBGDTRRX_EL0\0"; } break;case 4: if(n==0&&m==7) t="DBGVCR32_EL2\0"; break;} break;case 3: switch(k) {case 0: switch(n) {case 0: if(m==0) t="MIDR_EL1\0?\0?\0?\0?\0MPIDR_EL1\0REVIDR_EL1\0?\0ID_PFR0_EL1\0ID_PFR1_EL1\0ID_DFR0_EL1\0ID_AFR0_EL1\0ID_MMFR0_EL1\0ID_MMFR1_EL1\0ID_MMFR2_EL1\0ID_MMFR3_EL1\0ID_ISAR0_EL1\0ID_ISAR1_EL1\0ID_ISAR2_EL1\0ID_ISAR2_EL1\0ID_ISAR3_EL1\0ID_ISAR4_EL1\0ID_ISAR5_EL1\0ID_MMFR4_EL1\0?\0MVFR0_EL1\0MVFR1_EL1\0MVFR2_EL1\0?\0?\0?\0?\0?\0ID_AA64PFR0_EL1\0ID_AA64PFR1_EL1\0?\0?\0ID_AA64ZFR0_EL1\0?\0?\0?\0ID_AA64DFR0_EL1\0ID_AA64DFR1_EL1\0?\0?\0ID_AA64AFR0_EL1\0ID_AA64AFR1_EL1\0?\0?\0ID_AA64ISAR0_EL1\0ID_AA64ISAR1_EL1\0?\0?\0?\0?\0?\0?\0ID_AA64MMFR0_EL1\0ID_AA64MMFR1_EL1\0ID_AA64MMFR2_EL1\0"; break;case 1: switch(m) {case 0: t="SCTLR_EL1\0ACTLR_EL1\0CPACR_EL1\0"; break;case 2: t="ZCR_EL1\0"; break;} break;case 2: if(m==0) t="TTBR0_EL1\0TTBR1_EL1\0TCR_EL1\0"; break;case 4: switch(m) {case 0: t="SPSR_EL1\0ELR_EL1\0"; break;case 1: t="SP_EL0\0"; break;case 2: t="SPSel\0?\0CurrentEL\0PAN\0UAO\0"; break;case 6: t="ICC_PMR_EL1\0"; break;} break;case 5: switch(m) {case 1: t="AFSR0_EL1\0AFSR1_EL1\0"; break;case 2: t="ESR_EL1"; break;case 3: t="ERRIDR_EL1\0ERRSELR_EL1\0"; break;case 4: t="ERXFR_EL1\0ERXCTLR_EL1\0ERXSTATUS_EL1\0ERXADDR_EL1\0"; break;case 5: t="ERXMISC0_EL1\0ERXMISC1_EL1\0"; break;} break;case 6: if(m==0) t="FAR_EL1\0"; break;case 7: if(m==4) t="PAR_EL1\0"; break;case 9: switch(m) {case 9: t="PMSCR_EL1\0?\0PMSICR_EL1\0PMSIRR_EL1\0PMSFCR_EL1\0PMSEVFR_EL1\0PMSLATFR_EL1\0PMSIDR_EL1\0PMSIDR_EL1\0"; break;case 10: t="PMBLIMITR_EL1\0PMBPTR_EL1\0?\0PMBSR_EL1\0?\0?\0?\0PMBIDR_EL1\0"; break;case 14: t="?\0PMINTENSET_EL1\0PMINTENCLR_EL1\0"; break;} break;case 10: if(m==4) t="LORSA_EL1\0LOREA_EL1\0LORN_EL1\0LORC_EL1\0?\0?\0?\0LORID_EL1\0"; else if(m!=4&&j==0) { j=m; t="?\0?\0MAIR_EL1\0AMAIR_EL1\0"; }break;case 12: switch(m) {case 0: t="VBAR_EL1\0RVBAR_EL1\0RMR_EL1\0"; break;case 1: t="ISR_EL1\0DISR_EL1\0"; break;case 8: t="ICC_IAR0_EL1\0ICC_EOIR0_EL1\0ICC_HPPIR0_EL1\0ICC_BPR0_EL1\0ICC_AP0R0_EL1\0ICC_AP0R1_EL1\0ICC_AP0R2_EL1\0ICC_AP0R3_EL1\0"; break;case 9: t="ICC_AP1R0_EL1\0ICC_AP1R1_EL1\0ICC_AP1R2_EL1\0ICC_AP1R3_EL1\0"; break;case 11: t="?\0ICC_DIR_EL1\0?\0ICC_RPR_EL1\0?\0ICC_SGI1R_EL1\0ICC_ASGI1R_EL1\0ICC_SGI0R_EL1\0"; break;case 12: t="ICC_IAR1_EL1\0ICC_EOIR1_EL1\0ICC_HPPIR1_EL1\0ICC_BPR1_EL1\0ICC_CTLR_EL1\0ICC_SRE_EL1\0ICC_IGRPEN0_EL1\0ICC_IGRPEN1_EL1\0"; break;} break;case 13: if(m==0) t="?\0CONTEXTIDR_EL1\0?\0?\0TPIDR_EL1\0"; break;case 14: if(m==1) t="CNTKCTL_EL1\0"; break;} break;case 1: if(n==0&&m==0) t="CCSIDR_EL1\0CLIDR_EL1\0?\0?\0?\0?\0?\0AIDR_EL1\0"; break;case 2: if(n==0&&m==0) t="CSSELR_EL1\0"; break;case 3: switch(n) {case 0: if(m==0) t="?\0CTR_EL0\0?\0?\0?\0?\0?\0DCZID_EL0\0"; break;case 4: switch(m) {case 2: t="NZCV\0DAIF\0"; break;case 4: t="FPCR\0FPSR\0"; break;case 5: t="DSPSR_EL0\0DLR_EL0\0"; break;} break;case 9: switch(m) {case 12: t="PMCR_EL0\0PMCNTENSET_EL0\0PMCNTENCLR_EL0\0PMOVSCLR_EL0\0PMSWINC_EL0\0PMSELR_EL0\0PMCEID0_EL0\0PMCEID1_EL0\0"; break;case 13: t="PMCCNTR_EL0\0PMXEVTYPER_EL0\0PMXEVCNTR_EL0\0"; break;case 14: t="PMUSERENR_EL0\0?\0?\0PMOVSSET_EL0\0"; break;} break;
   835ec:	71000cbf 	cmp	w5, #0x3
   835f0:	540007a0 	b.eq	836e4 <disasm_sysreg+0x124>  // b.none
   835f4:	710010bf 	cmp	w5, #0x4
   835f8:	54000840 	b.eq	83700 <disasm_sysreg+0x140>  // b.none
   835fc:	35ffff45 	cbnz	w5, 835e4 <disasm_sysreg+0x24>
   83600:	7100045f 	cmp	w2, #0x1
   83604:	54001de0 	b.eq	839c0 <disasm_sysreg+0x400>  // b.none
   83608:	34001c62 	cbz	w2, 83994 <disasm_sysreg+0x3d4>
   8360c:	71001c5f 	cmp	w2, #0x7
   83610:	54fffea1 	b.ne	835e4 <disasm_sysreg+0x24>  // b.any
   83614:	7100183f 	cmp	w1, #0x6
   83618:	54fffe61 	b.ne	835e4 <disasm_sysreg+0x24>  // b.any
   8361c:	f0000060 	adrp	x0, 92000 <sd_init+0x470>
   83620:	91122000 	add	x0, x0, #0x488
   83624:	2a0303e1 	mov	w1, w3
   83628:	913c4000 	add	x0, x0, #0xf10
char *disasm_str(char*s,int n) {if(!s)return "?";while(n){s++;if(!*s){s++;n--;}}return *s?s:"?";};
   8362c:	17ffffc9 	b	83550 <disasm_str.part.0>
char *disasm_sysreg(uint8_t p,uint8_t k,uint8_t n,uint8_t m,uint8_t j) {char *t=NULL;switch(p){case 2: switch(k) {case 0: switch(n) {case 0: switch(m) {case 0: t="?\0?\0OSDTRRX_EL1\0"; break;case 2: t="MDCCINT_EL1\0?\0MDSCR_EL1\0"; break;case 3: t="?\0?\0OSDTRTX_EL1\0"; break;case 6: t="?\0?\0OSECCR_EL1\0"; break;default: { n=j; j=m; switch(n) {case 4: t="DBGBVR0_EL1\0DBGBVR1_EL1\0DBGBVR2_EL1\0DBGBVR3_EL1\0DBGBVR4_EL1\0DBGBVR5_EL1\0DBGBVR6_EL1\0DBGBVR7_EL1\0"; break;case 5: t="DBGBCR0_EL1\0DBGBCR1_EL1\0DBGBCR2_EL1\0DBGBCR3_EL1\0DBGBCR4_EL1\0DBGBCR5_EL1\0DBGBCR6_EL1\0DBGBCR7_EL1\0"; break;case 6: t="DBGWVR0_EL1\0DBGWVR1_EL1\0DBGWVR2_EL1\0DBGWVR3_EL1\0DBGWVR4_EL1\0DBGWVR5_EL1\0DBGWVR6_EL1\0DBGWVR7_EL1\0"; break;case 7: t="DBGWCR0_EL1\0DBGWCR1_EL1\0DBGWCR2_EL1\0DBGWCR3_EL1\0DBGWCR4_EL1\0DBGWCR5_EL1\0DBGWCR6_EL1\0DBGWCR7_EL1\0"; break;} break; }} break;case 1: if(m==0) t="MDRAR_EL1\0?\0?\0?\0OSLAR_EL1\0"; else if(j==4) { j=m; t="OSLSR_EL1\0?\0OSDLR_EL1\0DBGPRCR_EL1\0"; }break;case 7: if(j==6) { j=m; t="?\0?\0?\0?\0?\0?\0?\0?\0DBGCLAIMSET_EL1\0DBGCLAIMCLR_EL1\0?\0?\0?\0?\0DBGAUTHSTATUS_EL1\0"; }break;} break;case 3: if(n==0&&j==0) { j=m; t="?\0MDCCSR_EL0\0?\0?\0DBGDTR_EL0\0DBGDTRRX_EL0\0"; } break;case 4: if(n==0&&m==7) t="DBGVCR32_EL2\0"; break;} break;case 3: switch(k) {case 0: switch(n) {case 0: if(m==0) t="MIDR_EL1\0?\0?\0?\0?\0MPIDR_EL1\0REVIDR_EL1\0?\0ID_PFR0_EL1\0ID_PFR1_EL1\0ID_DFR0_EL1\0ID_AFR0_EL1\0ID_MMFR0_EL1\0ID_MMFR1_EL1\0ID_MMFR2_EL1\0ID_MMFR3_EL1\0ID_ISAR0_EL1\0ID_ISAR1_EL1\0ID_ISAR2_EL1\0ID_ISAR2_EL1\0ID_ISAR3_EL1\0ID_ISAR4_EL1\0ID_ISAR5_EL1\0ID_MMFR4_EL1\0?\0MVFR0_EL1\0MVFR1_EL1\0MVFR2_EL1\0?\0?\0?\0?\0?\0ID_AA64PFR0_EL1\0ID_AA64PFR1_EL1\0?\0?\0ID_AA64ZFR0_EL1\0?\0?\0?\0ID_AA64DFR0_EL1\0ID_AA64DFR1_EL1\0?\0?\0ID_AA64AFR0_EL1\0ID_AA64AFR1_EL1\0?\0?\0ID_AA64ISAR0_EL1\0ID_AA64ISAR1_EL1\0?\0?\0?\0?\0?\0?\0ID_AA64MMFR0_EL1\0ID_AA64MMFR1_EL1\0ID_AA64MMFR2_EL1\0"; break;case 1: switch(m) {case 0: t="SCTLR_EL1\0ACTLR_EL1\0CPACR_EL1\0"; break;case 2: t="ZCR_EL1\0"; break;} break;case 2: if(m==0) t="TTBR0_EL1\0TTBR1_EL1\0TCR_EL1\0"; break;case 4: switch(m) {case 0: t="SPSR_EL1\0ELR_EL1\0"; break;case 1: t="SP_EL0\0"; break;case 2: t="SPSel\0?\0CurrentEL\0PAN\0UAO\0"; break;case 6: t="ICC_PMR_EL1\0"; break;} break;case 5: switch(m) {case 1: t="AFSR0_EL1\0AFSR1_EL1\0"; break;case 2: t="ESR_EL1"; break;case 3: t="ERRIDR_EL1\0ERRSELR_EL1\0"; break;case 4: t="ERXFR_EL1\0ERXCTLR_EL1\0ERXSTATUS_EL1\0ERXADDR_EL1\0"; break;case 5: t="ERXMISC0_EL1\0ERXMISC1_EL1\0"; break;} break;case 6: if(m==0) t="FAR_EL1\0"; break;case 7: if(m==4) t="PAR_EL1\0"; break;case 9: switch(m) {case 9: t="PMSCR_EL1\0?\0PMSICR_EL1\0PMSIRR_EL1\0PMSFCR_EL1\0PMSEVFR_EL1\0PMSLATFR_EL1\0PMSIDR_EL1\0PMSIDR_EL1\0"; break;case 10: t="PMBLIMITR_EL1\0PMBPTR_EL1\0?\0PMBSR_EL1\0?\0?\0?\0PMBIDR_EL1\0"; break;case 14: t="?\0PMINTENSET_EL1\0PMINTENCLR_EL1\0"; break;} break;case 10: if(m==4) t="LORSA_EL1\0LOREA_EL1\0LORN_EL1\0LORC_EL1\0?\0?\0?\0LORID_EL1\0"; else if(m!=4&&j==0) { j=m; t="?\0?\0MAIR_EL1\0AMAIR_EL1\0"; }break;case 12: switch(m) {case 0: t="VBAR_EL1\0RVBAR_EL1\0RMR_EL1\0"; break;case 1: t="ISR_EL1\0DISR_EL1\0"; break;case 8: t="ICC_IAR0_EL1\0ICC_EOIR0_EL1\0ICC_HPPIR0_EL1\0ICC_BPR0_EL1\0ICC_AP0R0_EL1\0ICC_AP0R1_EL1\0ICC_AP0R2_EL1\0ICC_AP0R3_EL1\0"; break;case 9: t="ICC_AP1R0_EL1\0ICC_AP1R1_EL1\0ICC_AP1R2_EL1\0ICC_AP1R3_EL1\0"; break;case 11: t="?\0ICC_DIR_EL1\0?\0ICC_RPR_EL1\0?\0ICC_SGI1R_EL1\0ICC_ASGI1R_EL1\0ICC_SGI0R_EL1\0"; break;case 12: t="ICC_IAR1_EL1\0ICC_EOIR1_EL1\0ICC_HPPIR1_EL1\0ICC_BPR1_EL1\0ICC_CTLR_EL1\0ICC_SRE_EL1\0ICC_IGRPEN0_EL1\0ICC_IGRPEN1_EL1\0"; break;} break;case 13: if(m==0) t="?\0CONTEXTIDR_EL1\0?\0?\0TPIDR_EL1\0"; break;case 14: if(m==1) t="CNTKCTL_EL1\0"; break;} break;case 1: if(n==0&&m==0) t="CCSIDR_EL1\0CLIDR_EL1\0?\0?\0?\0?\0?\0AIDR_EL1\0"; break;case 2: if(n==0&&m==0) t="CSSELR_EL1\0"; break;case 3: switch(n) {case 0: if(m==0) t="?\0CTR_EL0\0?\0?\0?\0?\0?\0DCZID_EL0\0"; break;case 4: switch(m) {case 2: t="NZCV\0DAIF\0"; break;case 4: t="FPCR\0FPSR\0"; break;case 5: t="DSPSR_EL0\0DLR_EL0\0"; break;} break;case 9: switch(m) {case 12: t="PMCR_EL0\0PMCNTENSET_EL0\0PMCNTENCLR_EL0\0PMOVSCLR_EL0\0PMSWINC_EL0\0PMSELR_EL0\0PMCEID0_EL0\0PMCEID1_EL0\0"; break;case 13: t="PMCCNTR_EL0\0PMXEVTYPER_EL0\0PMXEVCNTR_EL0\0"; break;case 14: t="PMUSERENR_EL0\0?\0?\0PMOVSSET_EL0\0"; break;} break;
   83630:	71000cbf 	cmp	w5, #0x3
   83634:	540008e0 	b.eq	83750 <disasm_sysreg+0x190>  // b.none
   83638:	540001e9 	b.ls	83674 <disasm_sysreg+0xb4>  // b.plast
   8363c:	710014bf 	cmp	w5, #0x5
   83640:	54000a80 	b.eq	83790 <disasm_sysreg+0x1d0>  // b.none
   83644:	54001103 	b.cc	83864 <disasm_sysreg+0x2a4>  // b.lo, b.ul, b.last
   83648:	710018bf 	cmp	w5, #0x6
   8364c:	54000740 	b.eq	83734 <disasm_sysreg+0x174>  // b.none
   83650:	71001cbf 	cmp	w5, #0x7
   83654:	54fffc81 	b.ne	835e4 <disasm_sysreg+0x24>  // b.any
case 13: if(m==0) t="?\0?\0TPIDR_EL0\0TPIDRRO_EL0\0"; break;case 14: switch(m) {case 0: t="CNTFRQ_EL0\0CNTPCT_EL0\0CNTVCT_EL0\0"; break;case 2: t="CNTP_TVAL_EL0\0CNTP_CTL_EL0\0CNTP_CVAL_EL0\0"; break;case 3: t="CNTV_TVAL_EL0\0CNTV_CTL_EL0\0CNTV_CVAL_EL0\0"; break;} break;} break;case 4: switch(n) {case 0: if(m==0) t="VPIDR_EL2\0?\0?\0?\0?\0VMPIDR_EL2\0"; break;case 1: switch(m) {case 0: t="SCTLR_EL2\0ACTLR_EL2\0"; break;case 1: t="HCR_EL2\0MDCR_EL2\0CPTR_EL2\0HSTR_EL2\0?\0?\0?\0HACR_EL2\0"; break;case 2: t="ZCR_EL2\0"; break;} break;case 2: switch(m) {case 0: t="TTBR0_EL2\0?\0TCR_EL2\0"; break;case 1: t="VTTBR0_EL2\0?\0VTCR_EL2\0"; break;} break;case 3: if(m==0) t="DACR32_EL2\0"; break;case 4: switch(m) {case 0: t="SPSR_EL2\0ELR_EL2\0"; break;case 1: t="SP_EL1\0"; break;case 3: t="SPSR_irq\0SPSR_abt\0SPSR_und\0SPSR_fiq\0"; break;} break;case 5: switch(m) {case 0: t="?\0IFSR32_EL2\0"; break;case 1: t="AFSR0_EL2\0AFSR1_EL2\0"; break;case 2: t="ESR_EL2\0?\0?\0VSESR_EL2\0"; break;case 3: t="FPEXC32_EL2\0"; break;} break;case 6: if(m==0) t="FAR_EL2\0?\0?\0?\0HPFAR_EL2\0"; break;case 9: if(m==9) t="PMSCR_EL2\0"; break;case 10: switch(m) {case 2: t="MAIR_EL2\0"; break;case 3: t="AMAIR_EL2\0"; break;} break;case 12: switch(m) {case 0: t="VBAR_EL2\0RVBAR_EL2\0RMR_EL2\0"; break;case 1: t="?\0VDISR_EL2\0"; break;case 8: t="ICH_AP0R0_EL2\0ICH_AP0R1_EL2\0ICH_AP0R2_EL2\0ICH_AP0R3_EL2\0"; break;case 9: t="ICH_AP1R0_EL2\0ICH_AP1R1_EL2\0ICH_AP1R2_EL2\0ICH_AP1R3_EL2\0ICC_SRE_EL2\0"; break;case 11: t="ICH_HCR_EL2\0ICH_VTR_EL2\0ICH_MISR_EL2\0ICH_EISR_EL2\0?\0ICH_ELRSR_EL2\0?\0ICH_VMCR_EL2\0"; break;case 12: t="ICH_LR0_EL2\0ICH_LR1_EL2\0ICH_LR2_EL2\0ICH_LR3_EL2\0ICH_LR4_EL2\0ICH_LR5_EL2\0ICH_LR6_EL2\0ICH_LR7_EL2\0"; break;case 13: t="ICH_LR8_EL2\0ICH_LR9_EL2\0ICH_LR10_EL2\0ICH_LR11_EL2\0ICH_LR12_EL2\0ICH_LR13_EL2\0ICH_LR14_EL2\0ICH_LR15_EL2\0"; break;} break;case 13: if(m==0) t="?\0CONTEXTIDR_EL2\0TPIDR_EL2\0"; break;case 14: switch(m) {case 0: t="?\0?\0?\0CNTVOFF_EL2\0"; break;case 1: t="CNTHCTL_EL2\0"; break;case 2: t="CNTHP_TVAL_EL2\0CNTHP_CTL_EL2\0CNTHP_CVAL_EL2\0"; break;case 3: t="CNTHV_TVAL_EL2\0CNTHV_CTL_EL2\0CNTHV_CVAL_EL2\0"; break;} break;} break;case 5: if(n==4&&m==0) t="SPSR_EL12\0ELR_EL12\0"; break;case 6: if(n==4&&m==1) t="SP_EL2\0"; break;case 7: if(n==14&&m==2) t="CNTPS_TVAL_EL1\0CNTPS_CTL_EL1\0CNTPS_CVAL_EL1\0"; break;} break;}return t?disasm_str(t,j):NULL;}
   83658:	7100385f 	cmp	w2, #0xe
   8365c:	7a420860 	ccmp	w3, #0x2, #0x0, eq  // eq = none
   83660:	54fffc21 	b.ne	835e4 <disasm_sysreg+0x24>  // b.any
   83664:	f0000060 	adrp	x0, 92000 <sd_init+0x470>
   83668:	91122000 	add	x0, x0, #0x488
   8366c:	913d8000 	add	x0, x0, #0xf60
char *disasm_str(char*s,int n) {if(!s)return "?";while(n){s++;if(!*s){s++;n--;}}return *s?s:"?";};
   83670:	17ffffb8 	b	83550 <disasm_str.part.0>
   83674:	710004bf 	cmp	w5, #0x1
   83678:	54000b40 	b.eq	837e0 <disasm_sysreg+0x220>  // b.none
   8367c:	54000508 	b.hi	8371c <disasm_sysreg+0x15c>  // b.pmore
char *disasm_sysreg(uint8_t p,uint8_t k,uint8_t n,uint8_t m,uint8_t j) {char *t=NULL;switch(p){case 2: switch(k) {case 0: switch(n) {case 0: switch(m) {case 0: t="?\0?\0OSDTRRX_EL1\0"; break;case 2: t="MDCCINT_EL1\0?\0MDSCR_EL1\0"; break;case 3: t="?\0?\0OSDTRTX_EL1\0"; break;case 6: t="?\0?\0OSECCR_EL1\0"; break;default: { n=j; j=m; switch(n) {case 4: t="DBGBVR0_EL1\0DBGBVR1_EL1\0DBGBVR2_EL1\0DBGBVR3_EL1\0DBGBVR4_EL1\0DBGBVR5_EL1\0DBGBVR6_EL1\0DBGBVR7_EL1\0"; break;case 5: t="DBGBCR0_EL1\0DBGBCR1_EL1\0DBGBCR2_EL1\0DBGBCR3_EL1\0DBGBCR4_EL1\0DBGBCR5_EL1\0DBGBCR6_EL1\0DBGBCR7_EL1\0"; break;case 6: t="DBGWVR0_EL1\0DBGWVR1_EL1\0DBGWVR2_EL1\0DBGWVR3_EL1\0DBGWVR4_EL1\0DBGWVR5_EL1\0DBGWVR6_EL1\0DBGWVR7_EL1\0"; break;case 7: t="DBGWCR0_EL1\0DBGWCR1_EL1\0DBGWCR2_EL1\0DBGWCR3_EL1\0DBGWCR4_EL1\0DBGWCR5_EL1\0DBGWCR6_EL1\0DBGWCR7_EL1\0"; break;} break; }} break;case 1: if(m==0) t="MDRAR_EL1\0?\0?\0?\0OSLAR_EL1\0"; else if(j==4) { j=m; t="OSLSR_EL1\0?\0OSDLR_EL1\0DBGPRCR_EL1\0"; }break;case 7: if(j==6) { j=m; t="?\0?\0?\0?\0?\0?\0?\0?\0DBGCLAIMSET_EL1\0DBGCLAIMCLR_EL1\0?\0?\0?\0?\0DBGAUTHSTATUS_EL1\0"; }break;} break;case 3: if(n==0&&j==0) { j=m; t="?\0MDCCSR_EL0\0?\0?\0DBGDTR_EL0\0DBGDTRRX_EL0\0"; } break;case 4: if(n==0&&m==7) t="DBGVCR32_EL2\0"; break;} break;case 3: switch(k) {case 0: switch(n) {case 0: if(m==0) t="MIDR_EL1\0?\0?\0?\0?\0MPIDR_EL1\0REVIDR_EL1\0?\0ID_PFR0_EL1\0ID_PFR1_EL1\0ID_DFR0_EL1\0ID_AFR0_EL1\0ID_MMFR0_EL1\0ID_MMFR1_EL1\0ID_MMFR2_EL1\0ID_MMFR3_EL1\0ID_ISAR0_EL1\0ID_ISAR1_EL1\0ID_ISAR2_EL1\0ID_ISAR2_EL1\0ID_ISAR3_EL1\0ID_ISAR4_EL1\0ID_ISAR5_EL1\0ID_MMFR4_EL1\0?\0MVFR0_EL1\0MVFR1_EL1\0MVFR2_EL1\0?\0?\0?\0?\0?\0ID_AA64PFR0_EL1\0ID_AA64PFR1_EL1\0?\0?\0ID_AA64ZFR0_EL1\0?\0?\0?\0ID_AA64DFR0_EL1\0ID_AA64DFR1_EL1\0?\0?\0ID_AA64AFR0_EL1\0ID_AA64AFR1_EL1\0?\0?\0ID_AA64ISAR0_EL1\0ID_AA64ISAR1_EL1\0?\0?\0?\0?\0?\0?\0ID_AA64MMFR0_EL1\0ID_AA64MMFR1_EL1\0ID_AA64MMFR2_EL1\0"; break;case 1: switch(m) {case 0: t="SCTLR_EL1\0ACTLR_EL1\0CPACR_EL1\0"; break;case 2: t="ZCR_EL1\0"; break;} break;case 2: if(m==0) t="TTBR0_EL1\0TTBR1_EL1\0TCR_EL1\0"; break;case 4: switch(m) {case 0: t="SPSR_EL1\0ELR_EL1\0"; break;case 1: t="SP_EL0\0"; break;case 2: t="SPSel\0?\0CurrentEL\0PAN\0UAO\0"; break;case 6: t="ICC_PMR_EL1\0"; break;} break;case 5: switch(m) {case 1: t="AFSR0_EL1\0AFSR1_EL1\0"; break;case 2: t="ESR_EL1"; break;case 3: t="ERRIDR_EL1\0ERRSELR_EL1\0"; break;case 4: t="ERXFR_EL1\0ERXCTLR_EL1\0ERXSTATUS_EL1\0ERXADDR_EL1\0"; break;case 5: t="ERXMISC0_EL1\0ERXMISC1_EL1\0"; break;} break;case 6: if(m==0) t="FAR_EL1\0"; break;case 7: if(m==4) t="PAR_EL1\0"; break;case 9: switch(m) {case 9: t="PMSCR_EL1\0?\0PMSICR_EL1\0PMSIRR_EL1\0PMSFCR_EL1\0PMSEVFR_EL1\0PMSLATFR_EL1\0PMSIDR_EL1\0PMSIDR_EL1\0"; break;case 10: t="PMBLIMITR_EL1\0PMBPTR_EL1\0?\0PMBSR_EL1\0?\0?\0?\0PMBIDR_EL1\0"; break;case 14: t="?\0PMINTENSET_EL1\0PMINTENCLR_EL1\0"; break;} break;case 10: if(m==4) t="LORSA_EL1\0LOREA_EL1\0LORN_EL1\0LORC_EL1\0?\0?\0?\0LORID_EL1\0"; else if(m!=4&&j==0) { j=m; t="?\0?\0MAIR_EL1\0AMAIR_EL1\0"; }break;case 12: switch(m) {case 0: t="VBAR_EL1\0RVBAR_EL1\0RMR_EL1\0"; break;case 1: t="ISR_EL1\0DISR_EL1\0"; break;case 8: t="ICC_IAR0_EL1\0ICC_EOIR0_EL1\0ICC_HPPIR0_EL1\0ICC_BPR0_EL1\0ICC_AP0R0_EL1\0ICC_AP0R1_EL1\0ICC_AP0R2_EL1\0ICC_AP0R3_EL1\0"; break;case 9: t="ICC_AP1R0_EL1\0ICC_AP1R1_EL1\0ICC_AP1R2_EL1\0ICC_AP1R3_EL1\0"; break;case 11: t="?\0ICC_DIR_EL1\0?\0ICC_RPR_EL1\0?\0ICC_SGI1R_EL1\0ICC_ASGI1R_EL1\0ICC_SGI0R_EL1\0"; break;case 12: t="ICC_IAR1_EL1\0ICC_EOIR1_EL1\0ICC_HPPIR1_EL1\0ICC_BPR1_EL1\0ICC_CTLR_EL1\0ICC_SRE_EL1\0ICC_IGRPEN0_EL1\0ICC_IGRPEN1_EL1\0"; break;} break;case 13: if(m==0) t="?\0CONTEXTIDR_EL1\0?\0?\0TPIDR_EL1\0"; break;case 14: if(m==1) t="CNTKCTL_EL1\0"; break;} break;case 1: if(n==0&&m==0) t="CCSIDR_EL1\0CLIDR_EL1\0?\0?\0?\0?\0?\0AIDR_EL1\0"; break;case 2: if(n==0&&m==0) t="CSSELR_EL1\0"; break;case 3: switch(n) {case 0: if(m==0) t="?\0CTR_EL0\0?\0?\0?\0?\0?\0DCZID_EL0\0"; break;case 4: switch(m) {case 2: t="NZCV\0DAIF\0"; break;case 4: t="FPCR\0FPSR\0"; break;case 5: t="DSPSR_EL0\0DLR_EL0\0"; break;} break;case 9: switch(m) {case 12: t="PMCR_EL0\0PMCNTENSET_EL0\0PMCNTENCLR_EL0\0PMOVSCLR_EL0\0PMSWINC_EL0\0PMSELR_EL0\0PMCEID0_EL0\0PMCEID1_EL0\0"; break;case 13: t="PMCCNTR_EL0\0PMXEVTYPER_EL0\0PMXEVCNTR_EL0\0"; break;case 14: t="PMUSERENR_EL0\0?\0?\0PMOVSSET_EL0\0"; break;} break;
   83680:	7100185f 	cmp	w2, #0x6
   83684:	54002800 	b.eq	83b84 <disasm_sysreg+0x5c4>  // b.none
   83688:	54000d49 	b.ls	83830 <disasm_sysreg+0x270>  // b.plast
   8368c:	7100285f 	cmp	w2, #0xa
   83690:	540026a0 	b.eq	83b64 <disasm_sysreg+0x5a4>  // b.none
   83694:	54000b29 	b.ls	837f8 <disasm_sysreg+0x238>  // b.plast
   83698:	7100345f 	cmp	w2, #0xd
   8369c:	54002e00 	b.eq	83c5c <disasm_sysreg+0x69c>  // b.none
   836a0:	7100385f 	cmp	w2, #0xe
   836a4:	54002d00 	b.eq	83c44 <disasm_sysreg+0x684>  // b.none
   836a8:	7100305f 	cmp	w2, #0xc
   836ac:	54fff9c1 	b.ne	835e4 <disasm_sysreg+0x24>  // b.any
   836b0:	7100207f 	cmp	w3, #0x8
   836b4:	540043a0 	b.eq	83f28 <disasm_sysreg+0x968>  // b.none
   836b8:	54002b89 	b.ls	83c28 <disasm_sysreg+0x668>  // b.plast
   836bc:	71002c7f 	cmp	w3, #0xb
   836c0:	54003d40 	b.eq	83e68 <disasm_sysreg+0x8a8>  // b.none
   836c4:	7100307f 	cmp	w3, #0xc
   836c8:	540034e0 	b.eq	83d64 <disasm_sysreg+0x7a4>  // b.none
   836cc:	7100247f 	cmp	w3, #0x9
   836d0:	54fff8a1 	b.ne	835e4 <disasm_sysreg+0x24>  // b.any
   836d4:	f0000060 	adrp	x0, 92000 <sd_init+0x470>
   836d8:	91122000 	add	x0, x0, #0x488
   836dc:	91050000 	add	x0, x0, #0x140
char *disasm_str(char*s,int n) {if(!s)return "?";while(n){s++;if(!*s){s++;n--;}}return *s?s:"?";};
   836e0:	17ffff9c 	b	83550 <disasm_str.part.0>
char *disasm_sysreg(uint8_t p,uint8_t k,uint8_t n,uint8_t m,uint8_t j) {char *t=NULL;switch(p){case 2: switch(k) {case 0: switch(n) {case 0: switch(m) {case 0: t="?\0?\0OSDTRRX_EL1\0"; break;case 2: t="MDCCINT_EL1\0?\0MDSCR_EL1\0"; break;case 3: t="?\0?\0OSDTRTX_EL1\0"; break;case 6: t="?\0?\0OSECCR_EL1\0"; break;default: { n=j; j=m; switch(n) {case 4: t="DBGBVR0_EL1\0DBGBVR1_EL1\0DBGBVR2_EL1\0DBGBVR3_EL1\0DBGBVR4_EL1\0DBGBVR5_EL1\0DBGBVR6_EL1\0DBGBVR7_EL1\0"; break;case 5: t="DBGBCR0_EL1\0DBGBCR1_EL1\0DBGBCR2_EL1\0DBGBCR3_EL1\0DBGBCR4_EL1\0DBGBCR5_EL1\0DBGBCR6_EL1\0DBGBCR7_EL1\0"; break;case 6: t="DBGWVR0_EL1\0DBGWVR1_EL1\0DBGWVR2_EL1\0DBGWVR3_EL1\0DBGWVR4_EL1\0DBGWVR5_EL1\0DBGWVR6_EL1\0DBGWVR7_EL1\0"; break;case 7: t="DBGWCR0_EL1\0DBGWCR1_EL1\0DBGWCR2_EL1\0DBGWCR3_EL1\0DBGWCR4_EL1\0DBGWCR5_EL1\0DBGWCR6_EL1\0DBGWCR7_EL1\0"; break;} break; }} break;case 1: if(m==0) t="MDRAR_EL1\0?\0?\0?\0OSLAR_EL1\0"; else if(j==4) { j=m; t="OSLSR_EL1\0?\0OSDLR_EL1\0DBGPRCR_EL1\0"; }break;case 7: if(j==6) { j=m; t="?\0?\0?\0?\0?\0?\0?\0?\0DBGCLAIMSET_EL1\0DBGCLAIMCLR_EL1\0?\0?\0?\0?\0DBGAUTHSTATUS_EL1\0"; }break;} break;case 3: if(n==0&&j==0) { j=m; t="?\0MDCCSR_EL0\0?\0?\0DBGDTR_EL0\0DBGDTRRX_EL0\0"; } break;case 4: if(n==0&&m==7) t="DBGVCR32_EL2\0"; break;} break;case 3: switch(k) {case 0: switch(n) {case 0: if(m==0) t="MIDR_EL1\0?\0?\0?\0?\0MPIDR_EL1\0REVIDR_EL1\0?\0ID_PFR0_EL1\0ID_PFR1_EL1\0ID_DFR0_EL1\0ID_AFR0_EL1\0ID_MMFR0_EL1\0ID_MMFR1_EL1\0ID_MMFR2_EL1\0ID_MMFR3_EL1\0ID_ISAR0_EL1\0ID_ISAR1_EL1\0ID_ISAR2_EL1\0ID_ISAR2_EL1\0ID_ISAR3_EL1\0ID_ISAR4_EL1\0ID_ISAR5_EL1\0ID_MMFR4_EL1\0?\0MVFR0_EL1\0MVFR1_EL1\0MVFR2_EL1\0?\0?\0?\0?\0?\0ID_AA64PFR0_EL1\0ID_AA64PFR1_EL1\0?\0?\0ID_AA64ZFR0_EL1\0?\0?\0?\0ID_AA64DFR0_EL1\0ID_AA64DFR1_EL1\0?\0?\0ID_AA64AFR0_EL1\0ID_AA64AFR1_EL1\0?\0?\0ID_AA64ISAR0_EL1\0ID_AA64ISAR1_EL1\0?\0?\0?\0?\0?\0?\0ID_AA64MMFR0_EL1\0ID_AA64MMFR1_EL1\0ID_AA64MMFR2_EL1\0"; break;case 1: switch(m) {case 0: t="SCTLR_EL1\0ACTLR_EL1\0CPACR_EL1\0"; break;case 2: t="ZCR_EL1\0"; break;} break;case 2: if(m==0) t="TTBR0_EL1\0TTBR1_EL1\0TCR_EL1\0"; break;case 4: switch(m) {case 0: t="SPSR_EL1\0ELR_EL1\0"; break;case 1: t="SP_EL0\0"; break;case 2: t="SPSel\0?\0CurrentEL\0PAN\0UAO\0"; break;case 6: t="ICC_PMR_EL1\0"; break;} break;case 5: switch(m) {case 1: t="AFSR0_EL1\0AFSR1_EL1\0"; break;case 2: t="ESR_EL1"; break;case 3: t="ERRIDR_EL1\0ERRSELR_EL1\0"; break;case 4: t="ERXFR_EL1\0ERXCTLR_EL1\0ERXSTATUS_EL1\0ERXADDR_EL1\0"; break;case 5: t="ERXMISC0_EL1\0ERXMISC1_EL1\0"; break;} break;case 6: if(m==0) t="FAR_EL1\0"; break;case 7: if(m==4) t="PAR_EL1\0"; break;case 9: switch(m) {case 9: t="PMSCR_EL1\0?\0PMSICR_EL1\0PMSIRR_EL1\0PMSFCR_EL1\0PMSEVFR_EL1\0PMSLATFR_EL1\0PMSIDR_EL1\0PMSIDR_EL1\0"; break;case 10: t="PMBLIMITR_EL1\0PMBPTR_EL1\0?\0PMBSR_EL1\0?\0?\0?\0PMBIDR_EL1\0"; break;case 14: t="?\0PMINTENSET_EL1\0PMINTENCLR_EL1\0"; break;} break;case 10: if(m==4) t="LORSA_EL1\0LOREA_EL1\0LORN_EL1\0LORC_EL1\0?\0?\0?\0LORID_EL1\0"; else if(m!=4&&j==0) { j=m; t="?\0?\0MAIR_EL1\0AMAIR_EL1\0"; }break;case 12: switch(m) {case 0: t="VBAR_EL1\0RVBAR_EL1\0RMR_EL1\0"; break;case 1: t="ISR_EL1\0DISR_EL1\0"; break;case 8: t="ICC_IAR0_EL1\0ICC_EOIR0_EL1\0ICC_HPPIR0_EL1\0ICC_BPR0_EL1\0ICC_AP0R0_EL1\0ICC_AP0R1_EL1\0ICC_AP0R2_EL1\0ICC_AP0R3_EL1\0"; break;case 9: t="ICC_AP1R0_EL1\0ICC_AP1R1_EL1\0ICC_AP1R2_EL1\0ICC_AP1R3_EL1\0"; break;case 11: t="?\0ICC_DIR_EL1\0?\0ICC_RPR_EL1\0?\0ICC_SGI1R_EL1\0ICC_ASGI1R_EL1\0ICC_SGI0R_EL1\0"; break;case 12: t="ICC_IAR1_EL1\0ICC_EOIR1_EL1\0ICC_HPPIR1_EL1\0ICC_BPR1_EL1\0ICC_CTLR_EL1\0ICC_SRE_EL1\0ICC_IGRPEN0_EL1\0ICC_IGRPEN1_EL1\0"; break;} break;case 13: if(m==0) t="?\0CONTEXTIDR_EL1\0?\0?\0TPIDR_EL1\0"; break;case 14: if(m==1) t="CNTKCTL_EL1\0"; break;} break;case 1: if(n==0&&m==0) t="CCSIDR_EL1\0CLIDR_EL1\0?\0?\0?\0?\0?\0AIDR_EL1\0"; break;case 2: if(n==0&&m==0) t="CSSELR_EL1\0"; break;case 3: switch(n) {case 0: if(m==0) t="?\0CTR_EL0\0?\0?\0?\0?\0?\0DCZID_EL0\0"; break;case 4: switch(m) {case 2: t="NZCV\0DAIF\0"; break;case 4: t="FPCR\0FPSR\0"; break;case 5: t="DSPSR_EL0\0DLR_EL0\0"; break;} break;case 9: switch(m) {case 12: t="PMCR_EL0\0PMCNTENSET_EL0\0PMCNTENCLR_EL0\0PMOVSCLR_EL0\0PMSWINC_EL0\0PMSELR_EL0\0PMCEID0_EL0\0PMCEID1_EL0\0"; break;case 13: t="PMCCNTR_EL0\0PMXEVTYPER_EL0\0PMXEVCNTR_EL0\0"; break;case 14: t="PMUSERENR_EL0\0?\0?\0PMOVSSET_EL0\0"; break;} break;
   836e4:	2a020022 	orr	w2, w1, w2
   836e8:	35fff7e2 	cbnz	w2, 835e4 <disasm_sysreg+0x24>
   836ec:	f0000060 	adrp	x0, 92000 <sd_init+0x470>
   836f0:	91122000 	add	x0, x0, #0x488
   836f4:	2a0303e1 	mov	w1, w3
   836f8:	911a6000 	add	x0, x0, #0x698
char *disasm_str(char*s,int n) {if(!s)return "?";while(n){s++;if(!*s){s++;n--;}}return *s?s:"?";};
   836fc:	17ffff95 	b	83550 <disasm_str.part.0>
char *disasm_sysreg(uint8_t p,uint8_t k,uint8_t n,uint8_t m,uint8_t j) {char *t=NULL;switch(p){case 2: switch(k) {case 0: switch(n) {case 0: switch(m) {case 0: t="?\0?\0OSDTRRX_EL1\0"; break;case 2: t="MDCCINT_EL1\0?\0MDSCR_EL1\0"; break;case 3: t="?\0?\0OSDTRTX_EL1\0"; break;case 6: t="?\0?\0OSECCR_EL1\0"; break;default: { n=j; j=m; switch(n) {case 4: t="DBGBVR0_EL1\0DBGBVR1_EL1\0DBGBVR2_EL1\0DBGBVR3_EL1\0DBGBVR4_EL1\0DBGBVR5_EL1\0DBGBVR6_EL1\0DBGBVR7_EL1\0"; break;case 5: t="DBGBCR0_EL1\0DBGBCR1_EL1\0DBGBCR2_EL1\0DBGBCR3_EL1\0DBGBCR4_EL1\0DBGBCR5_EL1\0DBGBCR6_EL1\0DBGBCR7_EL1\0"; break;case 6: t="DBGWVR0_EL1\0DBGWVR1_EL1\0DBGWVR2_EL1\0DBGWVR3_EL1\0DBGWVR4_EL1\0DBGWVR5_EL1\0DBGWVR6_EL1\0DBGWVR7_EL1\0"; break;case 7: t="DBGWCR0_EL1\0DBGWCR1_EL1\0DBGWCR2_EL1\0DBGWCR3_EL1\0DBGWCR4_EL1\0DBGWCR5_EL1\0DBGWCR6_EL1\0DBGWCR7_EL1\0"; break;} break; }} break;case 1: if(m==0) t="MDRAR_EL1\0?\0?\0?\0OSLAR_EL1\0"; else if(j==4) { j=m; t="OSLSR_EL1\0?\0OSDLR_EL1\0DBGPRCR_EL1\0"; }break;case 7: if(j==6) { j=m; t="?\0?\0?\0?\0?\0?\0?\0?\0DBGCLAIMSET_EL1\0DBGCLAIMCLR_EL1\0?\0?\0?\0?\0DBGAUTHSTATUS_EL1\0"; }break;} break;case 3: if(n==0&&j==0) { j=m; t="?\0MDCCSR_EL0\0?\0?\0DBGDTR_EL0\0DBGDTRRX_EL0\0"; } break;case 4: if(n==0&&m==7) t="DBGVCR32_EL2\0"; break;} break;case 3: switch(k) {case 0: switch(n) {case 0: if(m==0) t="MIDR_EL1\0?\0?\0?\0?\0MPIDR_EL1\0REVIDR_EL1\0?\0ID_PFR0_EL1\0ID_PFR1_EL1\0ID_DFR0_EL1\0ID_AFR0_EL1\0ID_MMFR0_EL1\0ID_MMFR1_EL1\0ID_MMFR2_EL1\0ID_MMFR3_EL1\0ID_ISAR0_EL1\0ID_ISAR1_EL1\0ID_ISAR2_EL1\0ID_ISAR2_EL1\0ID_ISAR3_EL1\0ID_ISAR4_EL1\0ID_ISAR5_EL1\0ID_MMFR4_EL1\0?\0MVFR0_EL1\0MVFR1_EL1\0MVFR2_EL1\0?\0?\0?\0?\0?\0ID_AA64PFR0_EL1\0ID_AA64PFR1_EL1\0?\0?\0ID_AA64ZFR0_EL1\0?\0?\0?\0ID_AA64DFR0_EL1\0ID_AA64DFR1_EL1\0?\0?\0ID_AA64AFR0_EL1\0ID_AA64AFR1_EL1\0?\0?\0ID_AA64ISAR0_EL1\0ID_AA64ISAR1_EL1\0?\0?\0?\0?\0?\0?\0ID_AA64MMFR0_EL1\0ID_AA64MMFR1_EL1\0ID_AA64MMFR2_EL1\0"; break;case 1: switch(m) {case 0: t="SCTLR_EL1\0ACTLR_EL1\0CPACR_EL1\0"; break;case 2: t="ZCR_EL1\0"; break;} break;case 2: if(m==0) t="TTBR0_EL1\0TTBR1_EL1\0TCR_EL1\0"; break;case 4: switch(m) {case 0: t="SPSR_EL1\0ELR_EL1\0"; break;case 1: t="SP_EL0\0"; break;case 2: t="SPSel\0?\0CurrentEL\0PAN\0UAO\0"; break;case 6: t="ICC_PMR_EL1\0"; break;} break;case 5: switch(m) {case 1: t="AFSR0_EL1\0AFSR1_EL1\0"; break;case 2: t="ESR_EL1"; break;case 3: t="ERRIDR_EL1\0ERRSELR_EL1\0"; break;case 4: t="ERXFR_EL1\0ERXCTLR_EL1\0ERXSTATUS_EL1\0ERXADDR_EL1\0"; break;case 5: t="ERXMISC0_EL1\0ERXMISC1_EL1\0"; break;} break;case 6: if(m==0) t="FAR_EL1\0"; break;case 7: if(m==4) t="PAR_EL1\0"; break;case 9: switch(m) {case 9: t="PMSCR_EL1\0?\0PMSICR_EL1\0PMSIRR_EL1\0PMSFCR_EL1\0PMSEVFR_EL1\0PMSLATFR_EL1\0PMSIDR_EL1\0PMSIDR_EL1\0"; break;case 10: t="PMBLIMITR_EL1\0PMBPTR_EL1\0?\0PMBSR_EL1\0?\0?\0?\0PMBIDR_EL1\0"; break;case 14: t="?\0PMINTENSET_EL1\0PMINTENCLR_EL1\0"; break;} break;case 10: if(m==4) t="LORSA_EL1\0LOREA_EL1\0LORN_EL1\0LORC_EL1\0?\0?\0?\0LORID_EL1\0"; else if(m!=4&&j==0) { j=m; t="?\0?\0MAIR_EL1\0AMAIR_EL1\0"; }break;case 12: switch(m) {case 0: t="VBAR_EL1\0RVBAR_EL1\0RMR_EL1\0"; break;case 1: t="ISR_EL1\0DISR_EL1\0"; break;case 8: t="ICC_IAR0_EL1\0ICC_EOIR0_EL1\0ICC_HPPIR0_EL1\0ICC_BPR0_EL1\0ICC_AP0R0_EL1\0ICC_AP0R1_EL1\0ICC_AP0R2_EL1\0ICC_AP0R3_EL1\0"; break;case 9: t="ICC_AP1R0_EL1\0ICC_AP1R1_EL1\0ICC_AP1R2_EL1\0ICC_AP1R3_EL1\0"; break;case 11: t="?\0ICC_DIR_EL1\0?\0ICC_RPR_EL1\0?\0ICC_SGI1R_EL1\0ICC_ASGI1R_EL1\0ICC_SGI0R_EL1\0"; break;case 12: t="ICC_IAR1_EL1\0ICC_EOIR1_EL1\0ICC_HPPIR1_EL1\0ICC_BPR1_EL1\0ICC_CTLR_EL1\0ICC_SRE_EL1\0ICC_IGRPEN0_EL1\0ICC_IGRPEN1_EL1\0"; break;} break;case 13: if(m==0) t="?\0CONTEXTIDR_EL1\0?\0?\0TPIDR_EL1\0"; break;case 14: if(m==1) t="CNTKCTL_EL1\0"; break;} break;case 1: if(n==0&&m==0) t="CCSIDR_EL1\0CLIDR_EL1\0?\0?\0?\0?\0?\0AIDR_EL1\0"; break;case 2: if(n==0&&m==0) t="CSSELR_EL1\0"; break;case 3: switch(n) {case 0: if(m==0) t="?\0CTR_EL0\0?\0?\0?\0?\0?\0DCZID_EL0\0"; break;case 4: switch(m) {case 2: t="NZCV\0DAIF\0"; break;case 4: t="FPCR\0FPSR\0"; break;case 5: t="DSPSR_EL0\0DLR_EL0\0"; break;} break;case 9: switch(m) {case 12: t="PMCR_EL0\0PMCNTENSET_EL0\0PMCNTENCLR_EL0\0PMOVSCLR_EL0\0PMSWINC_EL0\0PMSELR_EL0\0PMCEID0_EL0\0PMCEID1_EL0\0"; break;case 13: t="PMCCNTR_EL0\0PMXEVTYPER_EL0\0PMXEVCNTR_EL0\0"; break;case 14: t="PMUSERENR_EL0\0?\0?\0PMOVSSET_EL0\0"; break;} break;
   83700:	7100005f 	cmp	w2, #0x0
   83704:	7a470860 	ccmp	w3, #0x7, #0x0, eq  // eq = none
   83708:	54fff6e1 	b.ne	835e4 <disasm_sysreg+0x24>  // b.any
   8370c:	f0000060 	adrp	x0, 92000 <sd_init+0x470>
   83710:	91122000 	add	x0, x0, #0x488
   83714:	910e0000 	add	x0, x0, #0x380
char *disasm_str(char*s,int n) {if(!s)return "?";while(n){s++;if(!*s){s++;n--;}}return *s?s:"?";};
   83718:	17ffff8e 	b	83550 <disasm_str.part.0>
char *disasm_sysreg(uint8_t p,uint8_t k,uint8_t n,uint8_t m,uint8_t j) {char *t=NULL;switch(p){case 2: switch(k) {case 0: switch(n) {case 0: switch(m) {case 0: t="?\0?\0OSDTRRX_EL1\0"; break;case 2: t="MDCCINT_EL1\0?\0MDSCR_EL1\0"; break;case 3: t="?\0?\0OSDTRTX_EL1\0"; break;case 6: t="?\0?\0OSECCR_EL1\0"; break;default: { n=j; j=m; switch(n) {case 4: t="DBGBVR0_EL1\0DBGBVR1_EL1\0DBGBVR2_EL1\0DBGBVR3_EL1\0DBGBVR4_EL1\0DBGBVR5_EL1\0DBGBVR6_EL1\0DBGBVR7_EL1\0"; break;case 5: t="DBGBCR0_EL1\0DBGBCR1_EL1\0DBGBCR2_EL1\0DBGBCR3_EL1\0DBGBCR4_EL1\0DBGBCR5_EL1\0DBGBCR6_EL1\0DBGBCR7_EL1\0"; break;case 6: t="DBGWVR0_EL1\0DBGWVR1_EL1\0DBGWVR2_EL1\0DBGWVR3_EL1\0DBGWVR4_EL1\0DBGWVR5_EL1\0DBGWVR6_EL1\0DBGWVR7_EL1\0"; break;case 7: t="DBGWCR0_EL1\0DBGWCR1_EL1\0DBGWCR2_EL1\0DBGWCR3_EL1\0DBGWCR4_EL1\0DBGWCR5_EL1\0DBGWCR6_EL1\0DBGWCR7_EL1\0"; break;} break; }} break;case 1: if(m==0) t="MDRAR_EL1\0?\0?\0?\0OSLAR_EL1\0"; else if(j==4) { j=m; t="OSLSR_EL1\0?\0OSDLR_EL1\0DBGPRCR_EL1\0"; }break;case 7: if(j==6) { j=m; t="?\0?\0?\0?\0?\0?\0?\0?\0DBGCLAIMSET_EL1\0DBGCLAIMCLR_EL1\0?\0?\0?\0?\0DBGAUTHSTATUS_EL1\0"; }break;} break;case 3: if(n==0&&j==0) { j=m; t="?\0MDCCSR_EL0\0?\0?\0DBGDTR_EL0\0DBGDTRRX_EL0\0"; } break;case 4: if(n==0&&m==7) t="DBGVCR32_EL2\0"; break;} break;case 3: switch(k) {case 0: switch(n) {case 0: if(m==0) t="MIDR_EL1\0?\0?\0?\0?\0MPIDR_EL1\0REVIDR_EL1\0?\0ID_PFR0_EL1\0ID_PFR1_EL1\0ID_DFR0_EL1\0ID_AFR0_EL1\0ID_MMFR0_EL1\0ID_MMFR1_EL1\0ID_MMFR2_EL1\0ID_MMFR3_EL1\0ID_ISAR0_EL1\0ID_ISAR1_EL1\0ID_ISAR2_EL1\0ID_ISAR2_EL1\0ID_ISAR3_EL1\0ID_ISAR4_EL1\0ID_ISAR5_EL1\0ID_MMFR4_EL1\0?\0MVFR0_EL1\0MVFR1_EL1\0MVFR2_EL1\0?\0?\0?\0?\0?\0ID_AA64PFR0_EL1\0ID_AA64PFR1_EL1\0?\0?\0ID_AA64ZFR0_EL1\0?\0?\0?\0ID_AA64DFR0_EL1\0ID_AA64DFR1_EL1\0?\0?\0ID_AA64AFR0_EL1\0ID_AA64AFR1_EL1\0?\0?\0ID_AA64ISAR0_EL1\0ID_AA64ISAR1_EL1\0?\0?\0?\0?\0?\0?\0ID_AA64MMFR0_EL1\0ID_AA64MMFR1_EL1\0ID_AA64MMFR2_EL1\0"; break;case 1: switch(m) {case 0: t="SCTLR_EL1\0ACTLR_EL1\0CPACR_EL1\0"; break;case 2: t="ZCR_EL1\0"; break;} break;case 2: if(m==0) t="TTBR0_EL1\0TTBR1_EL1\0TCR_EL1\0"; break;case 4: switch(m) {case 0: t="SPSR_EL1\0ELR_EL1\0"; break;case 1: t="SP_EL0\0"; break;case 2: t="SPSel\0?\0CurrentEL\0PAN\0UAO\0"; break;case 6: t="ICC_PMR_EL1\0"; break;} break;case 5: switch(m) {case 1: t="AFSR0_EL1\0AFSR1_EL1\0"; break;case 2: t="ESR_EL1"; break;case 3: t="ERRIDR_EL1\0ERRSELR_EL1\0"; break;case 4: t="ERXFR_EL1\0ERXCTLR_EL1\0ERXSTATUS_EL1\0ERXADDR_EL1\0"; break;case 5: t="ERXMISC0_EL1\0ERXMISC1_EL1\0"; break;} break;case 6: if(m==0) t="FAR_EL1\0"; break;case 7: if(m==4) t="PAR_EL1\0"; break;case 9: switch(m) {case 9: t="PMSCR_EL1\0?\0PMSICR_EL1\0PMSIRR_EL1\0PMSFCR_EL1\0PMSEVFR_EL1\0PMSLATFR_EL1\0PMSIDR_EL1\0PMSIDR_EL1\0"; break;case 10: t="PMBLIMITR_EL1\0PMBPTR_EL1\0?\0PMBSR_EL1\0?\0?\0?\0PMBIDR_EL1\0"; break;case 14: t="?\0PMINTENSET_EL1\0PMINTENCLR_EL1\0"; break;} break;case 10: if(m==4) t="LORSA_EL1\0LOREA_EL1\0LORN_EL1\0LORC_EL1\0?\0?\0?\0LORID_EL1\0"; else if(m!=4&&j==0) { j=m; t="?\0?\0MAIR_EL1\0AMAIR_EL1\0"; }break;case 12: switch(m) {case 0: t="VBAR_EL1\0RVBAR_EL1\0RMR_EL1\0"; break;case 1: t="ISR_EL1\0DISR_EL1\0"; break;case 8: t="ICC_IAR0_EL1\0ICC_EOIR0_EL1\0ICC_HPPIR0_EL1\0ICC_BPR0_EL1\0ICC_AP0R0_EL1\0ICC_AP0R1_EL1\0ICC_AP0R2_EL1\0ICC_AP0R3_EL1\0"; break;case 9: t="ICC_AP1R0_EL1\0ICC_AP1R1_EL1\0ICC_AP1R2_EL1\0ICC_AP1R3_EL1\0"; break;case 11: t="?\0ICC_DIR_EL1\0?\0ICC_RPR_EL1\0?\0ICC_SGI1R_EL1\0ICC_ASGI1R_EL1\0ICC_SGI0R_EL1\0"; break;case 12: t="ICC_IAR1_EL1\0ICC_EOIR1_EL1\0ICC_HPPIR1_EL1\0ICC_BPR1_EL1\0ICC_CTLR_EL1\0ICC_SRE_EL1\0ICC_IGRPEN0_EL1\0ICC_IGRPEN1_EL1\0"; break;} break;case 13: if(m==0) t="?\0CONTEXTIDR_EL1\0?\0?\0TPIDR_EL1\0"; break;case 14: if(m==1) t="CNTKCTL_EL1\0"; break;} break;case 1: if(n==0&&m==0) t="CCSIDR_EL1\0CLIDR_EL1\0?\0?\0?\0?\0?\0AIDR_EL1\0"; break;case 2: if(n==0&&m==0) t="CSSELR_EL1\0"; break;case 3: switch(n) {case 0: if(m==0) t="?\0CTR_EL0\0?\0?\0?\0?\0?\0DCZID_EL0\0"; break;case 4: switch(m) {case 2: t="NZCV\0DAIF\0"; break;case 4: t="FPCR\0FPSR\0"; break;case 5: t="DSPSR_EL0\0DLR_EL0\0"; break;} break;case 9: switch(m) {case 12: t="PMCR_EL0\0PMCNTENSET_EL0\0PMCNTENCLR_EL0\0PMOVSCLR_EL0\0PMSWINC_EL0\0PMSELR_EL0\0PMCEID0_EL0\0PMCEID1_EL0\0"; break;case 13: t="PMCCNTR_EL0\0PMXEVTYPER_EL0\0PMXEVCNTR_EL0\0"; break;case 14: t="PMUSERENR_EL0\0?\0?\0PMOVSSET_EL0\0"; break;} break;
   8371c:	2a030042 	orr	w2, w2, w3
   83720:	35fff622 	cbnz	w2, 835e4 <disasm_sysreg+0x24>
   83724:	f0000060 	adrp	x0, 92000 <sd_init+0x470>
   83728:	91122000 	add	x0, x0, #0x488
   8372c:	911e4000 	add	x0, x0, #0x790
char *disasm_str(char*s,int n) {if(!s)return "?";while(n){s++;if(!*s){s++;n--;}}return *s?s:"?";};
   83730:	17ffff88 	b	83550 <disasm_str.part.0>
case 13: if(m==0) t="?\0?\0TPIDR_EL0\0TPIDRRO_EL0\0"; break;case 14: switch(m) {case 0: t="CNTFRQ_EL0\0CNTPCT_EL0\0CNTVCT_EL0\0"; break;case 2: t="CNTP_TVAL_EL0\0CNTP_CTL_EL0\0CNTP_CVAL_EL0\0"; break;case 3: t="CNTV_TVAL_EL0\0CNTV_CTL_EL0\0CNTV_CVAL_EL0\0"; break;} break;} break;case 4: switch(n) {case 0: if(m==0) t="VPIDR_EL2\0?\0?\0?\0?\0VMPIDR_EL2\0"; break;case 1: switch(m) {case 0: t="SCTLR_EL2\0ACTLR_EL2\0"; break;case 1: t="HCR_EL2\0MDCR_EL2\0CPTR_EL2\0HSTR_EL2\0?\0?\0?\0HACR_EL2\0"; break;case 2: t="ZCR_EL2\0"; break;} break;case 2: switch(m) {case 0: t="TTBR0_EL2\0?\0TCR_EL2\0"; break;case 1: t="VTTBR0_EL2\0?\0VTCR_EL2\0"; break;} break;case 3: if(m==0) t="DACR32_EL2\0"; break;case 4: switch(m) {case 0: t="SPSR_EL2\0ELR_EL2\0"; break;case 1: t="SP_EL1\0"; break;case 3: t="SPSR_irq\0SPSR_abt\0SPSR_und\0SPSR_fiq\0"; break;} break;case 5: switch(m) {case 0: t="?\0IFSR32_EL2\0"; break;case 1: t="AFSR0_EL2\0AFSR1_EL2\0"; break;case 2: t="ESR_EL2\0?\0?\0VSESR_EL2\0"; break;case 3: t="FPEXC32_EL2\0"; break;} break;case 6: if(m==0) t="FAR_EL2\0?\0?\0?\0HPFAR_EL2\0"; break;case 9: if(m==9) t="PMSCR_EL2\0"; break;case 10: switch(m) {case 2: t="MAIR_EL2\0"; break;case 3: t="AMAIR_EL2\0"; break;} break;case 12: switch(m) {case 0: t="VBAR_EL2\0RVBAR_EL2\0RMR_EL2\0"; break;case 1: t="?\0VDISR_EL2\0"; break;case 8: t="ICH_AP0R0_EL2\0ICH_AP0R1_EL2\0ICH_AP0R2_EL2\0ICH_AP0R3_EL2\0"; break;case 9: t="ICH_AP1R0_EL2\0ICH_AP1R1_EL2\0ICH_AP1R2_EL2\0ICH_AP1R3_EL2\0ICC_SRE_EL2\0"; break;case 11: t="ICH_HCR_EL2\0ICH_VTR_EL2\0ICH_MISR_EL2\0ICH_EISR_EL2\0?\0ICH_ELRSR_EL2\0?\0ICH_VMCR_EL2\0"; break;case 12: t="ICH_LR0_EL2\0ICH_LR1_EL2\0ICH_LR2_EL2\0ICH_LR3_EL2\0ICH_LR4_EL2\0ICH_LR5_EL2\0ICH_LR6_EL2\0ICH_LR7_EL2\0"; break;case 13: t="ICH_LR8_EL2\0ICH_LR9_EL2\0ICH_LR10_EL2\0ICH_LR11_EL2\0ICH_LR12_EL2\0ICH_LR13_EL2\0ICH_LR14_EL2\0ICH_LR15_EL2\0"; break;} break;case 13: if(m==0) t="?\0CONTEXTIDR_EL2\0TPIDR_EL2\0"; break;case 14: switch(m) {case 0: t="?\0?\0?\0CNTVOFF_EL2\0"; break;case 1: t="CNTHCTL_EL2\0"; break;case 2: t="CNTHP_TVAL_EL2\0CNTHP_CTL_EL2\0CNTHP_CVAL_EL2\0"; break;case 3: t="CNTHV_TVAL_EL2\0CNTHV_CTL_EL2\0CNTHV_CVAL_EL2\0"; break;} break;} break;case 5: if(n==4&&m==0) t="SPSR_EL12\0ELR_EL12\0"; break;case 6: if(n==4&&m==1) t="SP_EL2\0"; break;case 7: if(n==14&&m==2) t="CNTPS_TVAL_EL1\0CNTPS_CTL_EL1\0CNTPS_CVAL_EL1\0"; break;} break;}return t?disasm_str(t,j):NULL;}
   83734:	7100105f 	cmp	w2, #0x4
   83738:	7a410860 	ccmp	w3, #0x1, #0x0, eq  // eq = none
   8373c:	54fff541 	b.ne	835e4 <disasm_sysreg+0x24>  // b.any
   83740:	f0000060 	adrp	x0, 92000 <sd_init+0x470>
   83744:	91122000 	add	x0, x0, #0x488
   83748:	9134e000 	add	x0, x0, #0xd38
char *disasm_str(char*s,int n) {if(!s)return "?";while(n){s++;if(!*s){s++;n--;}}return *s?s:"?";};
   8374c:	17ffff81 	b	83550 <disasm_str.part.0>
char *disasm_sysreg(uint8_t p,uint8_t k,uint8_t n,uint8_t m,uint8_t j) {char *t=NULL;switch(p){case 2: switch(k) {case 0: switch(n) {case 0: switch(m) {case 0: t="?\0?\0OSDTRRX_EL1\0"; break;case 2: t="MDCCINT_EL1\0?\0MDSCR_EL1\0"; break;case 3: t="?\0?\0OSDTRTX_EL1\0"; break;case 6: t="?\0?\0OSECCR_EL1\0"; break;default: { n=j; j=m; switch(n) {case 4: t="DBGBVR0_EL1\0DBGBVR1_EL1\0DBGBVR2_EL1\0DBGBVR3_EL1\0DBGBVR4_EL1\0DBGBVR5_EL1\0DBGBVR6_EL1\0DBGBVR7_EL1\0"; break;case 5: t="DBGBCR0_EL1\0DBGBCR1_EL1\0DBGBCR2_EL1\0DBGBCR3_EL1\0DBGBCR4_EL1\0DBGBCR5_EL1\0DBGBCR6_EL1\0DBGBCR7_EL1\0"; break;case 6: t="DBGWVR0_EL1\0DBGWVR1_EL1\0DBGWVR2_EL1\0DBGWVR3_EL1\0DBGWVR4_EL1\0DBGWVR5_EL1\0DBGWVR6_EL1\0DBGWVR7_EL1\0"; break;case 7: t="DBGWCR0_EL1\0DBGWCR1_EL1\0DBGWCR2_EL1\0DBGWCR3_EL1\0DBGWCR4_EL1\0DBGWCR5_EL1\0DBGWCR6_EL1\0DBGWCR7_EL1\0"; break;} break; }} break;case 1: if(m==0) t="MDRAR_EL1\0?\0?\0?\0OSLAR_EL1\0"; else if(j==4) { j=m; t="OSLSR_EL1\0?\0OSDLR_EL1\0DBGPRCR_EL1\0"; }break;case 7: if(j==6) { j=m; t="?\0?\0?\0?\0?\0?\0?\0?\0DBGCLAIMSET_EL1\0DBGCLAIMCLR_EL1\0?\0?\0?\0?\0DBGAUTHSTATUS_EL1\0"; }break;} break;case 3: if(n==0&&j==0) { j=m; t="?\0MDCCSR_EL0\0?\0?\0DBGDTR_EL0\0DBGDTRRX_EL0\0"; } break;case 4: if(n==0&&m==7) t="DBGVCR32_EL2\0"; break;} break;case 3: switch(k) {case 0: switch(n) {case 0: if(m==0) t="MIDR_EL1\0?\0?\0?\0?\0MPIDR_EL1\0REVIDR_EL1\0?\0ID_PFR0_EL1\0ID_PFR1_EL1\0ID_DFR0_EL1\0ID_AFR0_EL1\0ID_MMFR0_EL1\0ID_MMFR1_EL1\0ID_MMFR2_EL1\0ID_MMFR3_EL1\0ID_ISAR0_EL1\0ID_ISAR1_EL1\0ID_ISAR2_EL1\0ID_ISAR2_EL1\0ID_ISAR3_EL1\0ID_ISAR4_EL1\0ID_ISAR5_EL1\0ID_MMFR4_EL1\0?\0MVFR0_EL1\0MVFR1_EL1\0MVFR2_EL1\0?\0?\0?\0?\0?\0ID_AA64PFR0_EL1\0ID_AA64PFR1_EL1\0?\0?\0ID_AA64ZFR0_EL1\0?\0?\0?\0ID_AA64DFR0_EL1\0ID_AA64DFR1_EL1\0?\0?\0ID_AA64AFR0_EL1\0ID_AA64AFR1_EL1\0?\0?\0ID_AA64ISAR0_EL1\0ID_AA64ISAR1_EL1\0?\0?\0?\0?\0?\0?\0ID_AA64MMFR0_EL1\0ID_AA64MMFR1_EL1\0ID_AA64MMFR2_EL1\0"; break;case 1: switch(m) {case 0: t="SCTLR_EL1\0ACTLR_EL1\0CPACR_EL1\0"; break;case 2: t="ZCR_EL1\0"; break;} break;case 2: if(m==0) t="TTBR0_EL1\0TTBR1_EL1\0TCR_EL1\0"; break;case 4: switch(m) {case 0: t="SPSR_EL1\0ELR_EL1\0"; break;case 1: t="SP_EL0\0"; break;case 2: t="SPSel\0?\0CurrentEL\0PAN\0UAO\0"; break;case 6: t="ICC_PMR_EL1\0"; break;} break;case 5: switch(m) {case 1: t="AFSR0_EL1\0AFSR1_EL1\0"; break;case 2: t="ESR_EL1"; break;case 3: t="ERRIDR_EL1\0ERRSELR_EL1\0"; break;case 4: t="ERXFR_EL1\0ERXCTLR_EL1\0ERXSTATUS_EL1\0ERXADDR_EL1\0"; break;case 5: t="ERXMISC0_EL1\0ERXMISC1_EL1\0"; break;} break;case 6: if(m==0) t="FAR_EL1\0"; break;case 7: if(m==4) t="PAR_EL1\0"; break;case 9: switch(m) {case 9: t="PMSCR_EL1\0?\0PMSICR_EL1\0PMSIRR_EL1\0PMSFCR_EL1\0PMSEVFR_EL1\0PMSLATFR_EL1\0PMSIDR_EL1\0PMSIDR_EL1\0"; break;case 10: t="PMBLIMITR_EL1\0PMBPTR_EL1\0?\0PMBSR_EL1\0?\0?\0?\0PMBIDR_EL1\0"; break;case 14: t="?\0PMINTENSET_EL1\0PMINTENCLR_EL1\0"; break;} break;case 10: if(m==4) t="LORSA_EL1\0LOREA_EL1\0LORN_EL1\0LORC_EL1\0?\0?\0?\0LORID_EL1\0"; else if(m!=4&&j==0) { j=m; t="?\0?\0MAIR_EL1\0AMAIR_EL1\0"; }break;case 12: switch(m) {case 0: t="VBAR_EL1\0RVBAR_EL1\0RMR_EL1\0"; break;case 1: t="ISR_EL1\0DISR_EL1\0"; break;case 8: t="ICC_IAR0_EL1\0ICC_EOIR0_EL1\0ICC_HPPIR0_EL1\0ICC_BPR0_EL1\0ICC_AP0R0_EL1\0ICC_AP0R1_EL1\0ICC_AP0R2_EL1\0ICC_AP0R3_EL1\0"; break;case 9: t="ICC_AP1R0_EL1\0ICC_AP1R1_EL1\0ICC_AP1R2_EL1\0ICC_AP1R3_EL1\0"; break;case 11: t="?\0ICC_DIR_EL1\0?\0ICC_RPR_EL1\0?\0ICC_SGI1R_EL1\0ICC_ASGI1R_EL1\0ICC_SGI0R_EL1\0"; break;case 12: t="ICC_IAR1_EL1\0ICC_EOIR1_EL1\0ICC_HPPIR1_EL1\0ICC_BPR1_EL1\0ICC_CTLR_EL1\0ICC_SRE_EL1\0ICC_IGRPEN0_EL1\0ICC_IGRPEN1_EL1\0"; break;} break;case 13: if(m==0) t="?\0CONTEXTIDR_EL1\0?\0?\0TPIDR_EL1\0"; break;case 14: if(m==1) t="CNTKCTL_EL1\0"; break;} break;case 1: if(n==0&&m==0) t="CCSIDR_EL1\0CLIDR_EL1\0?\0?\0?\0?\0?\0AIDR_EL1\0"; break;case 2: if(n==0&&m==0) t="CSSELR_EL1\0"; break;case 3: switch(n) {case 0: if(m==0) t="?\0CTR_EL0\0?\0?\0?\0?\0?\0DCZID_EL0\0"; break;case 4: switch(m) {case 2: t="NZCV\0DAIF\0"; break;case 4: t="FPCR\0FPSR\0"; break;case 5: t="DSPSR_EL0\0DLR_EL0\0"; break;} break;case 9: switch(m) {case 12: t="PMCR_EL0\0PMCNTENSET_EL0\0PMCNTENCLR_EL0\0PMOVSCLR_EL0\0PMSWINC_EL0\0PMSELR_EL0\0PMCEID0_EL0\0PMCEID1_EL0\0"; break;case 13: t="PMCCNTR_EL0\0PMXEVTYPER_EL0\0PMXEVCNTR_EL0\0"; break;case 14: t="PMUSERENR_EL0\0?\0?\0PMOVSSET_EL0\0"; break;} break;
   83750:	7100245f 	cmp	w2, #0x9
   83754:	54001740 	b.eq	83a3c <disasm_sysreg+0x47c>  // b.none
   83758:	540002a8 	b.hi	837ac <disasm_sysreg+0x1ec>  // b.pmore
   8375c:	34001662 	cbz	w2, 83a28 <disasm_sysreg+0x468>
   83760:	7100105f 	cmp	w2, #0x4
   83764:	54fff401 	b.ne	835e4 <disasm_sysreg+0x24>  // b.any
   83768:	7100107f 	cmp	w3, #0x4
   8376c:	54002d40 	b.eq	83d14 <disasm_sysreg+0x754>  // b.none
   83770:	7100147f 	cmp	w3, #0x5
   83774:	54002ae0 	b.eq	83cd0 <disasm_sysreg+0x710>  // b.none
   83778:	7100087f 	cmp	w3, #0x2
   8377c:	54fff341 	b.ne	835e4 <disasm_sysreg+0x24>  // b.any
   83780:	f0000060 	adrp	x0, 92000 <sd_init+0x470>
   83784:	91122000 	add	x0, x0, #0x488
   83788:	911fa000 	add	x0, x0, #0x7e8
char *disasm_str(char*s,int n) {if(!s)return "?";while(n){s++;if(!*s){s++;n--;}}return *s?s:"?";};
   8378c:	17ffff71 	b	83550 <disasm_str.part.0>
case 13: if(m==0) t="?\0?\0TPIDR_EL0\0TPIDRRO_EL0\0"; break;case 14: switch(m) {case 0: t="CNTFRQ_EL0\0CNTPCT_EL0\0CNTVCT_EL0\0"; break;case 2: t="CNTP_TVAL_EL0\0CNTP_CTL_EL0\0CNTP_CVAL_EL0\0"; break;case 3: t="CNTV_TVAL_EL0\0CNTV_CTL_EL0\0CNTV_CVAL_EL0\0"; break;} break;} break;case 4: switch(n) {case 0: if(m==0) t="VPIDR_EL2\0?\0?\0?\0?\0VMPIDR_EL2\0"; break;case 1: switch(m) {case 0: t="SCTLR_EL2\0ACTLR_EL2\0"; break;case 1: t="HCR_EL2\0MDCR_EL2\0CPTR_EL2\0HSTR_EL2\0?\0?\0?\0HACR_EL2\0"; break;case 2: t="ZCR_EL2\0"; break;} break;case 2: switch(m) {case 0: t="TTBR0_EL2\0?\0TCR_EL2\0"; break;case 1: t="VTTBR0_EL2\0?\0VTCR_EL2\0"; break;} break;case 3: if(m==0) t="DACR32_EL2\0"; break;case 4: switch(m) {case 0: t="SPSR_EL2\0ELR_EL2\0"; break;case 1: t="SP_EL1\0"; break;case 3: t="SPSR_irq\0SPSR_abt\0SPSR_und\0SPSR_fiq\0"; break;} break;case 5: switch(m) {case 0: t="?\0IFSR32_EL2\0"; break;case 1: t="AFSR0_EL2\0AFSR1_EL2\0"; break;case 2: t="ESR_EL2\0?\0?\0VSESR_EL2\0"; break;case 3: t="FPEXC32_EL2\0"; break;} break;case 6: if(m==0) t="FAR_EL2\0?\0?\0?\0HPFAR_EL2\0"; break;case 9: if(m==9) t="PMSCR_EL2\0"; break;case 10: switch(m) {case 2: t="MAIR_EL2\0"; break;case 3: t="AMAIR_EL2\0"; break;} break;case 12: switch(m) {case 0: t="VBAR_EL2\0RVBAR_EL2\0RMR_EL2\0"; break;case 1: t="?\0VDISR_EL2\0"; break;case 8: t="ICH_AP0R0_EL2\0ICH_AP0R1_EL2\0ICH_AP0R2_EL2\0ICH_AP0R3_EL2\0"; break;case 9: t="ICH_AP1R0_EL2\0ICH_AP1R1_EL2\0ICH_AP1R2_EL2\0ICH_AP1R3_EL2\0ICC_SRE_EL2\0"; break;case 11: t="ICH_HCR_EL2\0ICH_VTR_EL2\0ICH_MISR_EL2\0ICH_EISR_EL2\0?\0ICH_ELRSR_EL2\0?\0ICH_VMCR_EL2\0"; break;case 12: t="ICH_LR0_EL2\0ICH_LR1_EL2\0ICH_LR2_EL2\0ICH_LR3_EL2\0ICH_LR4_EL2\0ICH_LR5_EL2\0ICH_LR6_EL2\0ICH_LR7_EL2\0"; break;case 13: t="ICH_LR8_EL2\0ICH_LR9_EL2\0ICH_LR10_EL2\0ICH_LR11_EL2\0ICH_LR12_EL2\0ICH_LR13_EL2\0ICH_LR14_EL2\0ICH_LR15_EL2\0"; break;} break;case 13: if(m==0) t="?\0CONTEXTIDR_EL2\0TPIDR_EL2\0"; break;case 14: switch(m) {case 0: t="?\0?\0?\0CNTVOFF_EL2\0"; break;case 1: t="CNTHCTL_EL2\0"; break;case 2: t="CNTHP_TVAL_EL2\0CNTHP_CTL_EL2\0CNTHP_CVAL_EL2\0"; break;case 3: t="CNTHV_TVAL_EL2\0CNTHV_CTL_EL2\0CNTHV_CVAL_EL2\0"; break;} break;} break;case 5: if(n==4&&m==0) t="SPSR_EL12\0ELR_EL12\0"; break;case 6: if(n==4&&m==1) t="SP_EL2\0"; break;case 7: if(n==14&&m==2) t="CNTPS_TVAL_EL1\0CNTPS_CTL_EL1\0CNTPS_CVAL_EL1\0"; break;} break;}return t?disasm_str(t,j):NULL;}
   83790:	7100007f 	cmp	w3, #0x0
   83794:	7a440840 	ccmp	w2, #0x4, #0x0, eq  // eq = none
   83798:	54fff261 	b.ne	835e4 <disasm_sysreg+0x24>  // b.any
   8379c:	f0000060 	adrp	x0, 92000 <sd_init+0x470>
   837a0:	91122000 	add	x0, x0, #0x488
   837a4:	9135c000 	add	x0, x0, #0xd70
char *disasm_str(char*s,int n) {if(!s)return "?";while(n){s++;if(!*s){s++;n--;}}return *s?s:"?";};
   837a8:	17ffff6a 	b	83550 <disasm_str.part.0>
   837ac:	7100345f 	cmp	w2, #0xd
   837b0:	54001320 	b.eq	83a14 <disasm_sysreg+0x454>  // b.none
   837b4:	7100385f 	cmp	w2, #0xe
   837b8:	54fff161 	b.ne	835e4 <disasm_sysreg+0x24>  // b.any
case 13: if(m==0) t="?\0?\0TPIDR_EL0\0TPIDRRO_EL0\0"; break;case 14: switch(m) {case 0: t="CNTFRQ_EL0\0CNTPCT_EL0\0CNTVCT_EL0\0"; break;case 2: t="CNTP_TVAL_EL0\0CNTP_CTL_EL0\0CNTP_CVAL_EL0\0"; break;case 3: t="CNTV_TVAL_EL0\0CNTV_CTL_EL0\0CNTV_CVAL_EL0\0"; break;} break;} break;case 4: switch(n) {case 0: if(m==0) t="VPIDR_EL2\0?\0?\0?\0?\0VMPIDR_EL2\0"; break;case 1: switch(m) {case 0: t="SCTLR_EL2\0ACTLR_EL2\0"; break;case 1: t="HCR_EL2\0MDCR_EL2\0CPTR_EL2\0HSTR_EL2\0?\0?\0?\0HACR_EL2\0"; break;case 2: t="ZCR_EL2\0"; break;} break;case 2: switch(m) {case 0: t="TTBR0_EL2\0?\0TCR_EL2\0"; break;case 1: t="VTTBR0_EL2\0?\0VTCR_EL2\0"; break;} break;case 3: if(m==0) t="DACR32_EL2\0"; break;case 4: switch(m) {case 0: t="SPSR_EL2\0ELR_EL2\0"; break;case 1: t="SP_EL1\0"; break;case 3: t="SPSR_irq\0SPSR_abt\0SPSR_und\0SPSR_fiq\0"; break;} break;case 5: switch(m) {case 0: t="?\0IFSR32_EL2\0"; break;case 1: t="AFSR0_EL2\0AFSR1_EL2\0"; break;case 2: t="ESR_EL2\0?\0?\0VSESR_EL2\0"; break;case 3: t="FPEXC32_EL2\0"; break;} break;case 6: if(m==0) t="FAR_EL2\0?\0?\0?\0HPFAR_EL2\0"; break;case 9: if(m==9) t="PMSCR_EL2\0"; break;case 10: switch(m) {case 2: t="MAIR_EL2\0"; break;case 3: t="AMAIR_EL2\0"; break;} break;case 12: switch(m) {case 0: t="VBAR_EL2\0RVBAR_EL2\0RMR_EL2\0"; break;case 1: t="?\0VDISR_EL2\0"; break;case 8: t="ICH_AP0R0_EL2\0ICH_AP0R1_EL2\0ICH_AP0R2_EL2\0ICH_AP0R3_EL2\0"; break;case 9: t="ICH_AP1R0_EL2\0ICH_AP1R1_EL2\0ICH_AP1R2_EL2\0ICH_AP1R3_EL2\0ICC_SRE_EL2\0"; break;case 11: t="ICH_HCR_EL2\0ICH_VTR_EL2\0ICH_MISR_EL2\0ICH_EISR_EL2\0?\0ICH_ELRSR_EL2\0?\0ICH_VMCR_EL2\0"; break;case 12: t="ICH_LR0_EL2\0ICH_LR1_EL2\0ICH_LR2_EL2\0ICH_LR3_EL2\0ICH_LR4_EL2\0ICH_LR5_EL2\0ICH_LR6_EL2\0ICH_LR7_EL2\0"; break;case 13: t="ICH_LR8_EL2\0ICH_LR9_EL2\0ICH_LR10_EL2\0ICH_LR11_EL2\0ICH_LR12_EL2\0ICH_LR13_EL2\0ICH_LR14_EL2\0ICH_LR15_EL2\0"; break;} break;case 13: if(m==0) t="?\0CONTEXTIDR_EL2\0TPIDR_EL2\0"; break;case 14: switch(m) {case 0: t="?\0?\0?\0CNTVOFF_EL2\0"; break;case 1: t="CNTHCTL_EL2\0"; break;case 2: t="CNTHP_TVAL_EL2\0CNTHP_CTL_EL2\0CNTHP_CVAL_EL2\0"; break;case 3: t="CNTHV_TVAL_EL2\0CNTHV_CTL_EL2\0CNTHV_CVAL_EL2\0"; break;} break;} break;case 5: if(n==4&&m==0) t="SPSR_EL12\0ELR_EL12\0"; break;case 6: if(n==4&&m==1) t="SP_EL2\0"; break;case 7: if(n==14&&m==2) t="CNTPS_TVAL_EL1\0CNTPS_CTL_EL1\0CNTPS_CVAL_EL1\0"; break;} break;}return t?disasm_str(t,j):NULL;}
   837bc:	7100087f 	cmp	w3, #0x2
   837c0:	54002ba0 	b.eq	83d34 <disasm_sysreg+0x774>  // b.none
   837c4:	71000c7f 	cmp	w3, #0x3
   837c8:	54002940 	b.eq	83cf0 <disasm_sysreg+0x730>  // b.none
   837cc:	35fff0c3 	cbnz	w3, 835e4 <disasm_sysreg+0x24>
   837d0:	f0000060 	adrp	x0, 92000 <sd_init+0x470>
   837d4:	91122000 	add	x0, x0, #0x488
   837d8:	912d4000 	add	x0, x0, #0xb50
char *disasm_str(char*s,int n) {if(!s)return "?";while(n){s++;if(!*s){s++;n--;}}return *s?s:"?";};
   837dc:	17ffff5d 	b	83550 <disasm_str.part.0>
char *disasm_sysreg(uint8_t p,uint8_t k,uint8_t n,uint8_t m,uint8_t j) {char *t=NULL;switch(p){case 2: switch(k) {case 0: switch(n) {case 0: switch(m) {case 0: t="?\0?\0OSDTRRX_EL1\0"; break;case 2: t="MDCCINT_EL1\0?\0MDSCR_EL1\0"; break;case 3: t="?\0?\0OSDTRTX_EL1\0"; break;case 6: t="?\0?\0OSECCR_EL1\0"; break;default: { n=j; j=m; switch(n) {case 4: t="DBGBVR0_EL1\0DBGBVR1_EL1\0DBGBVR2_EL1\0DBGBVR3_EL1\0DBGBVR4_EL1\0DBGBVR5_EL1\0DBGBVR6_EL1\0DBGBVR7_EL1\0"; break;case 5: t="DBGBCR0_EL1\0DBGBCR1_EL1\0DBGBCR2_EL1\0DBGBCR3_EL1\0DBGBCR4_EL1\0DBGBCR5_EL1\0DBGBCR6_EL1\0DBGBCR7_EL1\0"; break;case 6: t="DBGWVR0_EL1\0DBGWVR1_EL1\0DBGWVR2_EL1\0DBGWVR3_EL1\0DBGWVR4_EL1\0DBGWVR5_EL1\0DBGWVR6_EL1\0DBGWVR7_EL1\0"; break;case 7: t="DBGWCR0_EL1\0DBGWCR1_EL1\0DBGWCR2_EL1\0DBGWCR3_EL1\0DBGWCR4_EL1\0DBGWCR5_EL1\0DBGWCR6_EL1\0DBGWCR7_EL1\0"; break;} break; }} break;case 1: if(m==0) t="MDRAR_EL1\0?\0?\0?\0OSLAR_EL1\0"; else if(j==4) { j=m; t="OSLSR_EL1\0?\0OSDLR_EL1\0DBGPRCR_EL1\0"; }break;case 7: if(j==6) { j=m; t="?\0?\0?\0?\0?\0?\0?\0?\0DBGCLAIMSET_EL1\0DBGCLAIMCLR_EL1\0?\0?\0?\0?\0DBGAUTHSTATUS_EL1\0"; }break;} break;case 3: if(n==0&&j==0) { j=m; t="?\0MDCCSR_EL0\0?\0?\0DBGDTR_EL0\0DBGDTRRX_EL0\0"; } break;case 4: if(n==0&&m==7) t="DBGVCR32_EL2\0"; break;} break;case 3: switch(k) {case 0: switch(n) {case 0: if(m==0) t="MIDR_EL1\0?\0?\0?\0?\0MPIDR_EL1\0REVIDR_EL1\0?\0ID_PFR0_EL1\0ID_PFR1_EL1\0ID_DFR0_EL1\0ID_AFR0_EL1\0ID_MMFR0_EL1\0ID_MMFR1_EL1\0ID_MMFR2_EL1\0ID_MMFR3_EL1\0ID_ISAR0_EL1\0ID_ISAR1_EL1\0ID_ISAR2_EL1\0ID_ISAR2_EL1\0ID_ISAR3_EL1\0ID_ISAR4_EL1\0ID_ISAR5_EL1\0ID_MMFR4_EL1\0?\0MVFR0_EL1\0MVFR1_EL1\0MVFR2_EL1\0?\0?\0?\0?\0?\0ID_AA64PFR0_EL1\0ID_AA64PFR1_EL1\0?\0?\0ID_AA64ZFR0_EL1\0?\0?\0?\0ID_AA64DFR0_EL1\0ID_AA64DFR1_EL1\0?\0?\0ID_AA64AFR0_EL1\0ID_AA64AFR1_EL1\0?\0?\0ID_AA64ISAR0_EL1\0ID_AA64ISAR1_EL1\0?\0?\0?\0?\0?\0?\0ID_AA64MMFR0_EL1\0ID_AA64MMFR1_EL1\0ID_AA64MMFR2_EL1\0"; break;case 1: switch(m) {case 0: t="SCTLR_EL1\0ACTLR_EL1\0CPACR_EL1\0"; break;case 2: t="ZCR_EL1\0"; break;} break;case 2: if(m==0) t="TTBR0_EL1\0TTBR1_EL1\0TCR_EL1\0"; break;case 4: switch(m) {case 0: t="SPSR_EL1\0ELR_EL1\0"; break;case 1: t="SP_EL0\0"; break;case 2: t="SPSel\0?\0CurrentEL\0PAN\0UAO\0"; break;case 6: t="ICC_PMR_EL1\0"; break;} break;case 5: switch(m) {case 1: t="AFSR0_EL1\0AFSR1_EL1\0"; break;case 2: t="ESR_EL1"; break;case 3: t="ERRIDR_EL1\0ERRSELR_EL1\0"; break;case 4: t="ERXFR_EL1\0ERXCTLR_EL1\0ERXSTATUS_EL1\0ERXADDR_EL1\0"; break;case 5: t="ERXMISC0_EL1\0ERXMISC1_EL1\0"; break;} break;case 6: if(m==0) t="FAR_EL1\0"; break;case 7: if(m==4) t="PAR_EL1\0"; break;case 9: switch(m) {case 9: t="PMSCR_EL1\0?\0PMSICR_EL1\0PMSIRR_EL1\0PMSFCR_EL1\0PMSEVFR_EL1\0PMSLATFR_EL1\0PMSIDR_EL1\0PMSIDR_EL1\0"; break;case 10: t="PMBLIMITR_EL1\0PMBPTR_EL1\0?\0PMBSR_EL1\0?\0?\0?\0PMBIDR_EL1\0"; break;case 14: t="?\0PMINTENSET_EL1\0PMINTENCLR_EL1\0"; break;} break;case 10: if(m==4) t="LORSA_EL1\0LOREA_EL1\0LORN_EL1\0LORC_EL1\0?\0?\0?\0LORID_EL1\0"; else if(m!=4&&j==0) { j=m; t="?\0?\0MAIR_EL1\0AMAIR_EL1\0"; }break;case 12: switch(m) {case 0: t="VBAR_EL1\0RVBAR_EL1\0RMR_EL1\0"; break;case 1: t="ISR_EL1\0DISR_EL1\0"; break;case 8: t="ICC_IAR0_EL1\0ICC_EOIR0_EL1\0ICC_HPPIR0_EL1\0ICC_BPR0_EL1\0ICC_AP0R0_EL1\0ICC_AP0R1_EL1\0ICC_AP0R2_EL1\0ICC_AP0R3_EL1\0"; break;case 9: t="ICC_AP1R0_EL1\0ICC_AP1R1_EL1\0ICC_AP1R2_EL1\0ICC_AP1R3_EL1\0"; break;case 11: t="?\0ICC_DIR_EL1\0?\0ICC_RPR_EL1\0?\0ICC_SGI1R_EL1\0ICC_ASGI1R_EL1\0ICC_SGI0R_EL1\0"; break;case 12: t="ICC_IAR1_EL1\0ICC_EOIR1_EL1\0ICC_HPPIR1_EL1\0ICC_BPR1_EL1\0ICC_CTLR_EL1\0ICC_SRE_EL1\0ICC_IGRPEN0_EL1\0ICC_IGRPEN1_EL1\0"; break;} break;case 13: if(m==0) t="?\0CONTEXTIDR_EL1\0?\0?\0TPIDR_EL1\0"; break;case 14: if(m==1) t="CNTKCTL_EL1\0"; break;} break;case 1: if(n==0&&m==0) t="CCSIDR_EL1\0CLIDR_EL1\0?\0?\0?\0?\0?\0AIDR_EL1\0"; break;case 2: if(n==0&&m==0) t="CSSELR_EL1\0"; break;case 3: switch(n) {case 0: if(m==0) t="?\0CTR_EL0\0?\0?\0?\0?\0?\0DCZID_EL0\0"; break;case 4: switch(m) {case 2: t="NZCV\0DAIF\0"; break;case 4: t="FPCR\0FPSR\0"; break;case 5: t="DSPSR_EL0\0DLR_EL0\0"; break;} break;case 9: switch(m) {case 12: t="PMCR_EL0\0PMCNTENSET_EL0\0PMCNTENCLR_EL0\0PMOVSCLR_EL0\0PMSWINC_EL0\0PMSELR_EL0\0PMCEID0_EL0\0PMCEID1_EL0\0"; break;case 13: t="PMCCNTR_EL0\0PMXEVTYPER_EL0\0PMXEVCNTR_EL0\0"; break;case 14: t="PMUSERENR_EL0\0?\0?\0PMOVSSET_EL0\0"; break;} break;
   837e0:	2a030042 	orr	w2, w2, w3
   837e4:	35fff002 	cbnz	w2, 835e4 <disasm_sysreg+0x24>
   837e8:	f0000060 	adrp	x0, 92000 <sd_init+0x470>
   837ec:	91122000 	add	x0, x0, #0x488
   837f0:	91206000 	add	x0, x0, #0x818
char *disasm_str(char*s,int n) {if(!s)return "?";while(n){s++;if(!*s){s++;n--;}}return *s?s:"?";};
   837f4:	17ffff57 	b	83550 <disasm_str.part.0>
   837f8:	71001c5f 	cmp	w2, #0x7
   837fc:	54002380 	b.eq	83c6c <disasm_sysreg+0x6ac>  // b.none
   83800:	7100245f 	cmp	w2, #0x9
   83804:	54ffef01 	b.ne	835e4 <disasm_sysreg+0x24>  // b.any
char *disasm_sysreg(uint8_t p,uint8_t k,uint8_t n,uint8_t m,uint8_t j) {char *t=NULL;switch(p){case 2: switch(k) {case 0: switch(n) {case 0: switch(m) {case 0: t="?\0?\0OSDTRRX_EL1\0"; break;case 2: t="MDCCINT_EL1\0?\0MDSCR_EL1\0"; break;case 3: t="?\0?\0OSDTRTX_EL1\0"; break;case 6: t="?\0?\0OSECCR_EL1\0"; break;default: { n=j; j=m; switch(n) {case 4: t="DBGBVR0_EL1\0DBGBVR1_EL1\0DBGBVR2_EL1\0DBGBVR3_EL1\0DBGBVR4_EL1\0DBGBVR5_EL1\0DBGBVR6_EL1\0DBGBVR7_EL1\0"; break;case 5: t="DBGBCR0_EL1\0DBGBCR1_EL1\0DBGBCR2_EL1\0DBGBCR3_EL1\0DBGBCR4_EL1\0DBGBCR5_EL1\0DBGBCR6_EL1\0DBGBCR7_EL1\0"; break;case 6: t="DBGWVR0_EL1\0DBGWVR1_EL1\0DBGWVR2_EL1\0DBGWVR3_EL1\0DBGWVR4_EL1\0DBGWVR5_EL1\0DBGWVR6_EL1\0DBGWVR7_EL1\0"; break;case 7: t="DBGWCR0_EL1\0DBGWCR1_EL1\0DBGWCR2_EL1\0DBGWCR3_EL1\0DBGWCR4_EL1\0DBGWCR5_EL1\0DBGWCR6_EL1\0DBGWCR7_EL1\0"; break;} break; }} break;case 1: if(m==0) t="MDRAR_EL1\0?\0?\0?\0OSLAR_EL1\0"; else if(j==4) { j=m; t="OSLSR_EL1\0?\0OSDLR_EL1\0DBGPRCR_EL1\0"; }break;case 7: if(j==6) { j=m; t="?\0?\0?\0?\0?\0?\0?\0?\0DBGCLAIMSET_EL1\0DBGCLAIMCLR_EL1\0?\0?\0?\0?\0DBGAUTHSTATUS_EL1\0"; }break;} break;case 3: if(n==0&&j==0) { j=m; t="?\0MDCCSR_EL0\0?\0?\0DBGDTR_EL0\0DBGDTRRX_EL0\0"; } break;case 4: if(n==0&&m==7) t="DBGVCR32_EL2\0"; break;} break;case 3: switch(k) {case 0: switch(n) {case 0: if(m==0) t="MIDR_EL1\0?\0?\0?\0?\0MPIDR_EL1\0REVIDR_EL1\0?\0ID_PFR0_EL1\0ID_PFR1_EL1\0ID_DFR0_EL1\0ID_AFR0_EL1\0ID_MMFR0_EL1\0ID_MMFR1_EL1\0ID_MMFR2_EL1\0ID_MMFR3_EL1\0ID_ISAR0_EL1\0ID_ISAR1_EL1\0ID_ISAR2_EL1\0ID_ISAR2_EL1\0ID_ISAR3_EL1\0ID_ISAR4_EL1\0ID_ISAR5_EL1\0ID_MMFR4_EL1\0?\0MVFR0_EL1\0MVFR1_EL1\0MVFR2_EL1\0?\0?\0?\0?\0?\0ID_AA64PFR0_EL1\0ID_AA64PFR1_EL1\0?\0?\0ID_AA64ZFR0_EL1\0?\0?\0?\0ID_AA64DFR0_EL1\0ID_AA64DFR1_EL1\0?\0?\0ID_AA64AFR0_EL1\0ID_AA64AFR1_EL1\0?\0?\0ID_AA64ISAR0_EL1\0ID_AA64ISAR1_EL1\0?\0?\0?\0?\0?\0?\0ID_AA64MMFR0_EL1\0ID_AA64MMFR1_EL1\0ID_AA64MMFR2_EL1\0"; break;case 1: switch(m) {case 0: t="SCTLR_EL1\0ACTLR_EL1\0CPACR_EL1\0"; break;case 2: t="ZCR_EL1\0"; break;} break;case 2: if(m==0) t="TTBR0_EL1\0TTBR1_EL1\0TCR_EL1\0"; break;case 4: switch(m) {case 0: t="SPSR_EL1\0ELR_EL1\0"; break;case 1: t="SP_EL0\0"; break;case 2: t="SPSel\0?\0CurrentEL\0PAN\0UAO\0"; break;case 6: t="ICC_PMR_EL1\0"; break;} break;case 5: switch(m) {case 1: t="AFSR0_EL1\0AFSR1_EL1\0"; break;case 2: t="ESR_EL1"; break;case 3: t="ERRIDR_EL1\0ERRSELR_EL1\0"; break;case 4: t="ERXFR_EL1\0ERXCTLR_EL1\0ERXSTATUS_EL1\0ERXADDR_EL1\0"; break;case 5: t="ERXMISC0_EL1\0ERXMISC1_EL1\0"; break;} break;case 6: if(m==0) t="FAR_EL1\0"; break;case 7: if(m==4) t="PAR_EL1\0"; break;case 9: switch(m) {case 9: t="PMSCR_EL1\0?\0PMSICR_EL1\0PMSIRR_EL1\0PMSFCR_EL1\0PMSEVFR_EL1\0PMSLATFR_EL1\0PMSIDR_EL1\0PMSIDR_EL1\0"; break;case 10: t="PMBLIMITR_EL1\0PMBPTR_EL1\0?\0PMBSR_EL1\0?\0?\0?\0PMBIDR_EL1\0"; break;case 14: t="?\0PMINTENSET_EL1\0PMINTENCLR_EL1\0"; break;} break;case 10: if(m==4) t="LORSA_EL1\0LOREA_EL1\0LORN_EL1\0LORC_EL1\0?\0?\0?\0LORID_EL1\0"; else if(m!=4&&j==0) { j=m; t="?\0?\0MAIR_EL1\0AMAIR_EL1\0"; }break;case 12: switch(m) {case 0: t="VBAR_EL1\0RVBAR_EL1\0RMR_EL1\0"; break;case 1: t="ISR_EL1\0DISR_EL1\0"; break;case 8: t="ICC_IAR0_EL1\0ICC_EOIR0_EL1\0ICC_HPPIR0_EL1\0ICC_BPR0_EL1\0ICC_AP0R0_EL1\0ICC_AP0R1_EL1\0ICC_AP0R2_EL1\0ICC_AP0R3_EL1\0"; break;case 9: t="ICC_AP1R0_EL1\0ICC_AP1R1_EL1\0ICC_AP1R2_EL1\0ICC_AP1R3_EL1\0"; break;case 11: t="?\0ICC_DIR_EL1\0?\0ICC_RPR_EL1\0?\0ICC_SGI1R_EL1\0ICC_ASGI1R_EL1\0ICC_SGI0R_EL1\0"; break;case 12: t="ICC_IAR1_EL1\0ICC_EOIR1_EL1\0ICC_HPPIR1_EL1\0ICC_BPR1_EL1\0ICC_CTLR_EL1\0ICC_SRE_EL1\0ICC_IGRPEN0_EL1\0ICC_IGRPEN1_EL1\0"; break;} break;case 13: if(m==0) t="?\0CONTEXTIDR_EL1\0?\0?\0TPIDR_EL1\0"; break;case 14: if(m==1) t="CNTKCTL_EL1\0"; break;} break;case 1: if(n==0&&m==0) t="CCSIDR_EL1\0CLIDR_EL1\0?\0?\0?\0?\0?\0AIDR_EL1\0"; break;case 2: if(n==0&&m==0) t="CSSELR_EL1\0"; break;case 3: switch(n) {case 0: if(m==0) t="?\0CTR_EL0\0?\0?\0?\0?\0?\0DCZID_EL0\0"; break;case 4: switch(m) {case 2: t="NZCV\0DAIF\0"; break;case 4: t="FPCR\0FPSR\0"; break;case 5: t="DSPSR_EL0\0DLR_EL0\0"; break;} break;case 9: switch(m) {case 12: t="PMCR_EL0\0PMCNTENSET_EL0\0PMCNTENCLR_EL0\0PMOVSCLR_EL0\0PMSWINC_EL0\0PMSELR_EL0\0PMCEID0_EL0\0PMCEID1_EL0\0"; break;case 13: t="PMCCNTR_EL0\0PMXEVTYPER_EL0\0PMXEVCNTR_EL0\0"; break;case 14: t="PMUSERENR_EL0\0?\0?\0PMOVSSET_EL0\0"; break;} break;
   83808:	7100287f 	cmp	w3, #0xa
   8380c:	54003560 	b.eq	83eb8 <disasm_sysreg+0x8f8>  // b.none
   83810:	7100387f 	cmp	w3, #0xe
   83814:	54002d00 	b.eq	83db4 <disasm_sysreg+0x7f4>  // b.none
   83818:	7100247f 	cmp	w3, #0x9
   8381c:	54ffee41 	b.ne	835e4 <disasm_sysreg+0x24>  // b.any
   83820:	f0000060 	adrp	x0, 92000 <sd_init+0x470>
   83824:	91122000 	add	x0, x0, #0x488
   83828:	910f0000 	add	x0, x0, #0x3c0
char *disasm_str(char*s,int n) {if(!s)return "?";while(n){s++;if(!*s){s++;n--;}}return *s?s:"?";};
   8382c:	17ffff49 	b	83550 <disasm_str.part.0>
   83830:	7100085f 	cmp	w2, #0x2
   83834:	540015e0 	b.eq	83af0 <disasm_sysreg+0x530>  // b.none
   83838:	54000468 	b.hi	838c4 <disasm_sysreg+0x304>  // b.pmore
   8383c:	34001b82 	cbz	w2, 83bac <disasm_sysreg+0x5ec>
   83840:	7100045f 	cmp	w2, #0x1
   83844:	54ffed01 	b.ne	835e4 <disasm_sysreg+0x24>  // b.any
char *disasm_sysreg(uint8_t p,uint8_t k,uint8_t n,uint8_t m,uint8_t j) {char *t=NULL;switch(p){case 2: switch(k) {case 0: switch(n) {case 0: switch(m) {case 0: t="?\0?\0OSDTRRX_EL1\0"; break;case 2: t="MDCCINT_EL1\0?\0MDSCR_EL1\0"; break;case 3: t="?\0?\0OSDTRTX_EL1\0"; break;case 6: t="?\0?\0OSECCR_EL1\0"; break;default: { n=j; j=m; switch(n) {case 4: t="DBGBVR0_EL1\0DBGBVR1_EL1\0DBGBVR2_EL1\0DBGBVR3_EL1\0DBGBVR4_EL1\0DBGBVR5_EL1\0DBGBVR6_EL1\0DBGBVR7_EL1\0"; break;case 5: t="DBGBCR0_EL1\0DBGBCR1_EL1\0DBGBCR2_EL1\0DBGBCR3_EL1\0DBGBCR4_EL1\0DBGBCR5_EL1\0DBGBCR6_EL1\0DBGBCR7_EL1\0"; break;case 6: t="DBGWVR0_EL1\0DBGWVR1_EL1\0DBGWVR2_EL1\0DBGWVR3_EL1\0DBGWVR4_EL1\0DBGWVR5_EL1\0DBGWVR6_EL1\0DBGWVR7_EL1\0"; break;case 7: t="DBGWCR0_EL1\0DBGWCR1_EL1\0DBGWCR2_EL1\0DBGWCR3_EL1\0DBGWCR4_EL1\0DBGWCR5_EL1\0DBGWCR6_EL1\0DBGWCR7_EL1\0"; break;} break; }} break;case 1: if(m==0) t="MDRAR_EL1\0?\0?\0?\0OSLAR_EL1\0"; else if(j==4) { j=m; t="OSLSR_EL1\0?\0OSDLR_EL1\0DBGPRCR_EL1\0"; }break;case 7: if(j==6) { j=m; t="?\0?\0?\0?\0?\0?\0?\0?\0DBGCLAIMSET_EL1\0DBGCLAIMCLR_EL1\0?\0?\0?\0?\0DBGAUTHSTATUS_EL1\0"; }break;} break;case 3: if(n==0&&j==0) { j=m; t="?\0MDCCSR_EL0\0?\0?\0DBGDTR_EL0\0DBGDTRRX_EL0\0"; } break;case 4: if(n==0&&m==7) t="DBGVCR32_EL2\0"; break;} break;case 3: switch(k) {case 0: switch(n) {case 0: if(m==0) t="MIDR_EL1\0?\0?\0?\0?\0MPIDR_EL1\0REVIDR_EL1\0?\0ID_PFR0_EL1\0ID_PFR1_EL1\0ID_DFR0_EL1\0ID_AFR0_EL1\0ID_MMFR0_EL1\0ID_MMFR1_EL1\0ID_MMFR2_EL1\0ID_MMFR3_EL1\0ID_ISAR0_EL1\0ID_ISAR1_EL1\0ID_ISAR2_EL1\0ID_ISAR2_EL1\0ID_ISAR3_EL1\0ID_ISAR4_EL1\0ID_ISAR5_EL1\0ID_MMFR4_EL1\0?\0MVFR0_EL1\0MVFR1_EL1\0MVFR2_EL1\0?\0?\0?\0?\0?\0ID_AA64PFR0_EL1\0ID_AA64PFR1_EL1\0?\0?\0ID_AA64ZFR0_EL1\0?\0?\0?\0ID_AA64DFR0_EL1\0ID_AA64DFR1_EL1\0?\0?\0ID_AA64AFR0_EL1\0ID_AA64AFR1_EL1\0?\0?\0ID_AA64ISAR0_EL1\0ID_AA64ISAR1_EL1\0?\0?\0?\0?\0?\0?\0ID_AA64MMFR0_EL1\0ID_AA64MMFR1_EL1\0ID_AA64MMFR2_EL1\0"; break;case 1: switch(m) {case 0: t="SCTLR_EL1\0ACTLR_EL1\0CPACR_EL1\0"; break;case 2: t="ZCR_EL1\0"; break;} break;case 2: if(m==0) t="TTBR0_EL1\0TTBR1_EL1\0TCR_EL1\0"; break;case 4: switch(m) {case 0: t="SPSR_EL1\0ELR_EL1\0"; break;case 1: t="SP_EL0\0"; break;case 2: t="SPSel\0?\0CurrentEL\0PAN\0UAO\0"; break;case 6: t="ICC_PMR_EL1\0"; break;} break;case 5: switch(m) {case 1: t="AFSR0_EL1\0AFSR1_EL1\0"; break;case 2: t="ESR_EL1"; break;case 3: t="ERRIDR_EL1\0ERRSELR_EL1\0"; break;case 4: t="ERXFR_EL1\0ERXCTLR_EL1\0ERXSTATUS_EL1\0ERXADDR_EL1\0"; break;case 5: t="ERXMISC0_EL1\0ERXMISC1_EL1\0"; break;} break;case 6: if(m==0) t="FAR_EL1\0"; break;case 7: if(m==4) t="PAR_EL1\0"; break;case 9: switch(m) {case 9: t="PMSCR_EL1\0?\0PMSICR_EL1\0PMSIRR_EL1\0PMSFCR_EL1\0PMSEVFR_EL1\0PMSLATFR_EL1\0PMSIDR_EL1\0PMSIDR_EL1\0"; break;case 10: t="PMBLIMITR_EL1\0PMBPTR_EL1\0?\0PMBSR_EL1\0?\0?\0?\0PMBIDR_EL1\0"; break;case 14: t="?\0PMINTENSET_EL1\0PMINTENCLR_EL1\0"; break;} break;case 10: if(m==4) t="LORSA_EL1\0LOREA_EL1\0LORN_EL1\0LORC_EL1\0?\0?\0?\0LORID_EL1\0"; else if(m!=4&&j==0) { j=m; t="?\0?\0MAIR_EL1\0AMAIR_EL1\0"; }break;case 12: switch(m) {case 0: t="VBAR_EL1\0RVBAR_EL1\0RMR_EL1\0"; break;case 1: t="ISR_EL1\0DISR_EL1\0"; break;case 8: t="ICC_IAR0_EL1\0ICC_EOIR0_EL1\0ICC_HPPIR0_EL1\0ICC_BPR0_EL1\0ICC_AP0R0_EL1\0ICC_AP0R1_EL1\0ICC_AP0R2_EL1\0ICC_AP0R3_EL1\0"; break;case 9: t="ICC_AP1R0_EL1\0ICC_AP1R1_EL1\0ICC_AP1R2_EL1\0ICC_AP1R3_EL1\0"; break;case 11: t="?\0ICC_DIR_EL1\0?\0ICC_RPR_EL1\0?\0ICC_SGI1R_EL1\0ICC_ASGI1R_EL1\0ICC_SGI0R_EL1\0"; break;case 12: t="ICC_IAR1_EL1\0ICC_EOIR1_EL1\0ICC_HPPIR1_EL1\0ICC_BPR1_EL1\0ICC_CTLR_EL1\0ICC_SRE_EL1\0ICC_IGRPEN0_EL1\0ICC_IGRPEN1_EL1\0"; break;} break;case 13: if(m==0) t="?\0CONTEXTIDR_EL1\0?\0?\0TPIDR_EL1\0"; break;case 14: if(m==1) t="CNTKCTL_EL1\0"; break;} break;case 1: if(n==0&&m==0) t="CCSIDR_EL1\0CLIDR_EL1\0?\0?\0?\0?\0?\0AIDR_EL1\0"; break;case 2: if(n==0&&m==0) t="CSSELR_EL1\0"; break;case 3: switch(n) {case 0: if(m==0) t="?\0CTR_EL0\0?\0?\0?\0?\0?\0DCZID_EL0\0"; break;case 4: switch(m) {case 2: t="NZCV\0DAIF\0"; break;case 4: t="FPCR\0FPSR\0"; break;case 5: t="DSPSR_EL0\0DLR_EL0\0"; break;} break;case 9: switch(m) {case 12: t="PMCR_EL0\0PMCNTENSET_EL0\0PMCNTENCLR_EL0\0PMOVSCLR_EL0\0PMSWINC_EL0\0PMSELR_EL0\0PMCEID0_EL0\0PMCEID1_EL0\0"; break;case 13: t="PMCCNTR_EL0\0PMXEVTYPER_EL0\0PMXEVCNTR_EL0\0"; break;case 14: t="PMUSERENR_EL0\0?\0?\0PMOVSSET_EL0\0"; break;} break;
   83848:	34002be3 	cbz	w3, 83dc4 <disasm_sysreg+0x804>
   8384c:	7100087f 	cmp	w3, #0x2
   83850:	54ffeca1 	b.ne	835e4 <disasm_sysreg+0x24>  // b.any
   83854:	f0000060 	adrp	x0, 92000 <sd_init+0x470>
   83858:	91122000 	add	x0, x0, #0x488
   8385c:	91120000 	add	x0, x0, #0x480
char *disasm_str(char*s,int n) {if(!s)return "?";while(n){s++;if(!*s){s++;n--;}}return *s?s:"?";};
   83860:	17ffff3c 	b	83550 <disasm_str.part.0>
case 13: if(m==0) t="?\0?\0TPIDR_EL0\0TPIDRRO_EL0\0"; break;case 14: switch(m) {case 0: t="CNTFRQ_EL0\0CNTPCT_EL0\0CNTVCT_EL0\0"; break;case 2: t="CNTP_TVAL_EL0\0CNTP_CTL_EL0\0CNTP_CVAL_EL0\0"; break;case 3: t="CNTV_TVAL_EL0\0CNTV_CTL_EL0\0CNTV_CVAL_EL0\0"; break;} break;} break;case 4: switch(n) {case 0: if(m==0) t="VPIDR_EL2\0?\0?\0?\0?\0VMPIDR_EL2\0"; break;case 1: switch(m) {case 0: t="SCTLR_EL2\0ACTLR_EL2\0"; break;case 1: t="HCR_EL2\0MDCR_EL2\0CPTR_EL2\0HSTR_EL2\0?\0?\0?\0HACR_EL2\0"; break;case 2: t="ZCR_EL2\0"; break;} break;case 2: switch(m) {case 0: t="TTBR0_EL2\0?\0TCR_EL2\0"; break;case 1: t="VTTBR0_EL2\0?\0VTCR_EL2\0"; break;} break;case 3: if(m==0) t="DACR32_EL2\0"; break;case 4: switch(m) {case 0: t="SPSR_EL2\0ELR_EL2\0"; break;case 1: t="SP_EL1\0"; break;case 3: t="SPSR_irq\0SPSR_abt\0SPSR_und\0SPSR_fiq\0"; break;} break;case 5: switch(m) {case 0: t="?\0IFSR32_EL2\0"; break;case 1: t="AFSR0_EL2\0AFSR1_EL2\0"; break;case 2: t="ESR_EL2\0?\0?\0VSESR_EL2\0"; break;case 3: t="FPEXC32_EL2\0"; break;} break;case 6: if(m==0) t="FAR_EL2\0?\0?\0?\0HPFAR_EL2\0"; break;case 9: if(m==9) t="PMSCR_EL2\0"; break;case 10: switch(m) {case 2: t="MAIR_EL2\0"; break;case 3: t="AMAIR_EL2\0"; break;} break;case 12: switch(m) {case 0: t="VBAR_EL2\0RVBAR_EL2\0RMR_EL2\0"; break;case 1: t="?\0VDISR_EL2\0"; break;case 8: t="ICH_AP0R0_EL2\0ICH_AP0R1_EL2\0ICH_AP0R2_EL2\0ICH_AP0R3_EL2\0"; break;case 9: t="ICH_AP1R0_EL2\0ICH_AP1R1_EL2\0ICH_AP1R2_EL2\0ICH_AP1R3_EL2\0ICC_SRE_EL2\0"; break;case 11: t="ICH_HCR_EL2\0ICH_VTR_EL2\0ICH_MISR_EL2\0ICH_EISR_EL2\0?\0ICH_ELRSR_EL2\0?\0ICH_VMCR_EL2\0"; break;case 12: t="ICH_LR0_EL2\0ICH_LR1_EL2\0ICH_LR2_EL2\0ICH_LR3_EL2\0ICH_LR4_EL2\0ICH_LR5_EL2\0ICH_LR6_EL2\0ICH_LR7_EL2\0"; break;case 13: t="ICH_LR8_EL2\0ICH_LR9_EL2\0ICH_LR10_EL2\0ICH_LR11_EL2\0ICH_LR12_EL2\0ICH_LR13_EL2\0ICH_LR14_EL2\0ICH_LR15_EL2\0"; break;} break;case 13: if(m==0) t="?\0CONTEXTIDR_EL2\0TPIDR_EL2\0"; break;case 14: switch(m) {case 0: t="?\0?\0?\0CNTVOFF_EL2\0"; break;case 1: t="CNTHCTL_EL2\0"; break;case 2: t="CNTHP_TVAL_EL2\0CNTHP_CTL_EL2\0CNTHP_CVAL_EL2\0"; break;case 3: t="CNTHV_TVAL_EL2\0CNTHV_CTL_EL2\0CNTHV_CVAL_EL2\0"; break;} break;} break;case 5: if(n==4&&m==0) t="SPSR_EL12\0ELR_EL12\0"; break;case 6: if(n==4&&m==1) t="SP_EL2\0"; break;case 7: if(n==14&&m==2) t="CNTPS_TVAL_EL1\0CNTPS_CTL_EL1\0CNTPS_CVAL_EL1\0"; break;} break;}return t?disasm_str(t,j):NULL;}
   83864:	7100145f 	cmp	w2, #0x5
   83868:	540015e0 	b.eq	83b24 <disasm_sysreg+0x564>  // b.none
   8386c:	540005c9 	b.ls	83924 <disasm_sysreg+0x364>  // b.plast
   83870:	7100285f 	cmp	w2, #0xa
   83874:	54001480 	b.eq	83b04 <disasm_sysreg+0x544>  // b.none
   83878:	54000429 	b.ls	838fc <disasm_sysreg+0x33c>  // b.plast
   8387c:	7100345f 	cmp	w2, #0xd
   83880:	54001ca0 	b.eq	83c14 <disasm_sysreg+0x654>  // b.none
   83884:	7100385f 	cmp	w2, #0xe
   83888:	54001b00 	b.eq	83be8 <disasm_sysreg+0x628>  // b.none
   8388c:	7100305f 	cmp	w2, #0xc
   83890:	54ffeaa1 	b.ne	835e4 <disasm_sysreg+0x24>  // b.any
   83894:	7100247f 	cmp	w3, #0x9
   83898:	54003500 	b.eq	83f38 <disasm_sysreg+0x978>  // b.none
   8389c:	54001928 	b.hi	83bc0 <disasm_sysreg+0x600>  // b.pmore
   838a0:	7100047f 	cmp	w3, #0x1
   838a4:	54002d00 	b.eq	83e44 <disasm_sysreg+0x884>  // b.none
   838a8:	34002563 	cbz	w3, 83d54 <disasm_sysreg+0x794>
   838ac:	7100207f 	cmp	w3, #0x8
   838b0:	54ffe9a1 	b.ne	835e4 <disasm_sysreg+0x24>  // b.any
   838b4:	f0000060 	adrp	x0, 92000 <sd_init+0x470>
   838b8:	91122000 	add	x0, x0, #0x488
   838bc:	91236000 	add	x0, x0, #0x8d8
char *disasm_str(char*s,int n) {if(!s)return "?";while(n){s++;if(!*s){s++;n--;}}return *s?s:"?";};
   838c0:	17ffff24 	b	83550 <disasm_str.part.0>
   838c4:	7100105f 	cmp	w2, #0x4
   838c8:	54001ee0 	b.eq	83ca4 <disasm_sysreg+0x6e4>  // b.none
   838cc:	7100145f 	cmp	w2, #0x5
   838d0:	54ffe8a1 	b.ne	835e4 <disasm_sysreg+0x24>  // b.any
char *disasm_sysreg(uint8_t p,uint8_t k,uint8_t n,uint8_t m,uint8_t j) {char *t=NULL;switch(p){case 2: switch(k) {case 0: switch(n) {case 0: switch(m) {case 0: t="?\0?\0OSDTRRX_EL1\0"; break;case 2: t="MDCCINT_EL1\0?\0MDSCR_EL1\0"; break;case 3: t="?\0?\0OSDTRTX_EL1\0"; break;case 6: t="?\0?\0OSECCR_EL1\0"; break;default: { n=j; j=m; switch(n) {case 4: t="DBGBVR0_EL1\0DBGBVR1_EL1\0DBGBVR2_EL1\0DBGBVR3_EL1\0DBGBVR4_EL1\0DBGBVR5_EL1\0DBGBVR6_EL1\0DBGBVR7_EL1\0"; break;case 5: t="DBGBCR0_EL1\0DBGBCR1_EL1\0DBGBCR2_EL1\0DBGBCR3_EL1\0DBGBCR4_EL1\0DBGBCR5_EL1\0DBGBCR6_EL1\0DBGBCR7_EL1\0"; break;case 6: t="DBGWVR0_EL1\0DBGWVR1_EL1\0DBGWVR2_EL1\0DBGWVR3_EL1\0DBGWVR4_EL1\0DBGWVR5_EL1\0DBGWVR6_EL1\0DBGWVR7_EL1\0"; break;case 7: t="DBGWCR0_EL1\0DBGWCR1_EL1\0DBGWCR2_EL1\0DBGWCR3_EL1\0DBGWCR4_EL1\0DBGWCR5_EL1\0DBGWCR6_EL1\0DBGWCR7_EL1\0"; break;} break; }} break;case 1: if(m==0) t="MDRAR_EL1\0?\0?\0?\0OSLAR_EL1\0"; else if(j==4) { j=m; t="OSLSR_EL1\0?\0OSDLR_EL1\0DBGPRCR_EL1\0"; }break;case 7: if(j==6) { j=m; t="?\0?\0?\0?\0?\0?\0?\0?\0DBGCLAIMSET_EL1\0DBGCLAIMCLR_EL1\0?\0?\0?\0?\0DBGAUTHSTATUS_EL1\0"; }break;} break;case 3: if(n==0&&j==0) { j=m; t="?\0MDCCSR_EL0\0?\0?\0DBGDTR_EL0\0DBGDTRRX_EL0\0"; } break;case 4: if(n==0&&m==7) t="DBGVCR32_EL2\0"; break;} break;case 3: switch(k) {case 0: switch(n) {case 0: if(m==0) t="MIDR_EL1\0?\0?\0?\0?\0MPIDR_EL1\0REVIDR_EL1\0?\0ID_PFR0_EL1\0ID_PFR1_EL1\0ID_DFR0_EL1\0ID_AFR0_EL1\0ID_MMFR0_EL1\0ID_MMFR1_EL1\0ID_MMFR2_EL1\0ID_MMFR3_EL1\0ID_ISAR0_EL1\0ID_ISAR1_EL1\0ID_ISAR2_EL1\0ID_ISAR2_EL1\0ID_ISAR3_EL1\0ID_ISAR4_EL1\0ID_ISAR5_EL1\0ID_MMFR4_EL1\0?\0MVFR0_EL1\0MVFR1_EL1\0MVFR2_EL1\0?\0?\0?\0?\0?\0ID_AA64PFR0_EL1\0ID_AA64PFR1_EL1\0?\0?\0ID_AA64ZFR0_EL1\0?\0?\0?\0ID_AA64DFR0_EL1\0ID_AA64DFR1_EL1\0?\0?\0ID_AA64AFR0_EL1\0ID_AA64AFR1_EL1\0?\0?\0ID_AA64ISAR0_EL1\0ID_AA64ISAR1_EL1\0?\0?\0?\0?\0?\0?\0ID_AA64MMFR0_EL1\0ID_AA64MMFR1_EL1\0ID_AA64MMFR2_EL1\0"; break;case 1: switch(m) {case 0: t="SCTLR_EL1\0ACTLR_EL1\0CPACR_EL1\0"; break;case 2: t="ZCR_EL1\0"; break;} break;case 2: if(m==0) t="TTBR0_EL1\0TTBR1_EL1\0TCR_EL1\0"; break;case 4: switch(m) {case 0: t="SPSR_EL1\0ELR_EL1\0"; break;case 1: t="SP_EL0\0"; break;case 2: t="SPSel\0?\0CurrentEL\0PAN\0UAO\0"; break;case 6: t="ICC_PMR_EL1\0"; break;} break;case 5: switch(m) {case 1: t="AFSR0_EL1\0AFSR1_EL1\0"; break;case 2: t="ESR_EL1"; break;case 3: t="ERRIDR_EL1\0ERRSELR_EL1\0"; break;case 4: t="ERXFR_EL1\0ERXCTLR_EL1\0ERXSTATUS_EL1\0ERXADDR_EL1\0"; break;case 5: t="ERXMISC0_EL1\0ERXMISC1_EL1\0"; break;} break;case 6: if(m==0) t="FAR_EL1\0"; break;case 7: if(m==4) t="PAR_EL1\0"; break;case 9: switch(m) {case 9: t="PMSCR_EL1\0?\0PMSICR_EL1\0PMSIRR_EL1\0PMSFCR_EL1\0PMSEVFR_EL1\0PMSLATFR_EL1\0PMSIDR_EL1\0PMSIDR_EL1\0"; break;case 10: t="PMBLIMITR_EL1\0PMBPTR_EL1\0?\0PMBSR_EL1\0?\0?\0?\0PMBIDR_EL1\0"; break;case 14: t="?\0PMINTENSET_EL1\0PMINTENCLR_EL1\0"; break;} break;case 10: if(m==4) t="LORSA_EL1\0LOREA_EL1\0LORN_EL1\0LORC_EL1\0?\0?\0?\0LORID_EL1\0"; else if(m!=4&&j==0) { j=m; t="?\0?\0MAIR_EL1\0AMAIR_EL1\0"; }break;case 12: switch(m) {case 0: t="VBAR_EL1\0RVBAR_EL1\0RMR_EL1\0"; break;case 1: t="ISR_EL1\0DISR_EL1\0"; break;case 8: t="ICC_IAR0_EL1\0ICC_EOIR0_EL1\0ICC_HPPIR0_EL1\0ICC_BPR0_EL1\0ICC_AP0R0_EL1\0ICC_AP0R1_EL1\0ICC_AP0R2_EL1\0ICC_AP0R3_EL1\0"; break;case 9: t="ICC_AP1R0_EL1\0ICC_AP1R1_EL1\0ICC_AP1R2_EL1\0ICC_AP1R3_EL1\0"; break;case 11: t="?\0ICC_DIR_EL1\0?\0ICC_RPR_EL1\0?\0ICC_SGI1R_EL1\0ICC_ASGI1R_EL1\0ICC_SGI0R_EL1\0"; break;case 12: t="ICC_IAR1_EL1\0ICC_EOIR1_EL1\0ICC_HPPIR1_EL1\0ICC_BPR1_EL1\0ICC_CTLR_EL1\0ICC_SRE_EL1\0ICC_IGRPEN0_EL1\0ICC_IGRPEN1_EL1\0"; break;} break;case 13: if(m==0) t="?\0CONTEXTIDR_EL1\0?\0?\0TPIDR_EL1\0"; break;case 14: if(m==1) t="CNTKCTL_EL1\0"; break;} break;case 1: if(n==0&&m==0) t="CCSIDR_EL1\0CLIDR_EL1\0?\0?\0?\0?\0?\0AIDR_EL1\0"; break;case 2: if(n==0&&m==0) t="CSSELR_EL1\0"; break;case 3: switch(n) {case 0: if(m==0) t="?\0CTR_EL0\0?\0?\0?\0?\0?\0DCZID_EL0\0"; break;case 4: switch(m) {case 2: t="NZCV\0DAIF\0"; break;case 4: t="FPCR\0FPSR\0"; break;case 5: t="DSPSR_EL0\0DLR_EL0\0"; break;} break;case 9: switch(m) {case 12: t="PMCR_EL0\0PMCNTENSET_EL0\0PMCNTENCLR_EL0\0PMOVSCLR_EL0\0PMSWINC_EL0\0PMSELR_EL0\0PMCEID0_EL0\0PMCEID1_EL0\0"; break;case 13: t="PMCCNTR_EL0\0PMXEVTYPER_EL0\0PMXEVCNTR_EL0\0"; break;case 14: t="PMUSERENR_EL0\0?\0?\0PMOVSSET_EL0\0"; break;} break;
   838d4:	71000c7f 	cmp	w3, #0x3
   838d8:	54003200 	b.eq	83f18 <disasm_sysreg+0x958>  // b.none
   838dc:	54001d48 	b.hi	83c84 <disasm_sysreg+0x6c4>  // b.pmore
   838e0:	7100047f 	cmp	w3, #0x1
   838e4:	54002500 	b.eq	83d84 <disasm_sysreg+0x7c4>  // b.none
   838e8:	d0000080 	adrp	x0, 95000 <sd_init+0x3470>
   838ec:	7100087f 	cmp	w3, #0x2
   838f0:	9110a000 	add	x0, x0, #0x428
   838f4:	54ffe781 	b.ne	835e4 <disasm_sysreg+0x24>  // b.any
char *disasm_str(char*s,int n) {if(!s)return "?";while(n){s++;if(!*s){s++;n--;}}return *s?s:"?";};
   838f8:	17ffff16 	b	83550 <disasm_str.part.0>
   838fc:	7100185f 	cmp	w2, #0x6
   83900:	54001280 	b.eq	83b50 <disasm_sysreg+0x590>  // b.none
   83904:	7100245f 	cmp	w2, #0x9
   83908:	54ffe6e1 	b.ne	835e4 <disasm_sysreg+0x24>  // b.any
case 13: if(m==0) t="?\0?\0TPIDR_EL0\0TPIDRRO_EL0\0"; break;case 14: switch(m) {case 0: t="CNTFRQ_EL0\0CNTPCT_EL0\0CNTVCT_EL0\0"; break;case 2: t="CNTP_TVAL_EL0\0CNTP_CTL_EL0\0CNTP_CVAL_EL0\0"; break;case 3: t="CNTV_TVAL_EL0\0CNTV_CTL_EL0\0CNTV_CVAL_EL0\0"; break;} break;} break;case 4: switch(n) {case 0: if(m==0) t="VPIDR_EL2\0?\0?\0?\0?\0VMPIDR_EL2\0"; break;case 1: switch(m) {case 0: t="SCTLR_EL2\0ACTLR_EL2\0"; break;case 1: t="HCR_EL2\0MDCR_EL2\0CPTR_EL2\0HSTR_EL2\0?\0?\0?\0HACR_EL2\0"; break;case 2: t="ZCR_EL2\0"; break;} break;case 2: switch(m) {case 0: t="TTBR0_EL2\0?\0TCR_EL2\0"; break;case 1: t="VTTBR0_EL2\0?\0VTCR_EL2\0"; break;} break;case 3: if(m==0) t="DACR32_EL2\0"; break;case 4: switch(m) {case 0: t="SPSR_EL2\0ELR_EL2\0"; break;case 1: t="SP_EL1\0"; break;case 3: t="SPSR_irq\0SPSR_abt\0SPSR_und\0SPSR_fiq\0"; break;} break;case 5: switch(m) {case 0: t="?\0IFSR32_EL2\0"; break;case 1: t="AFSR0_EL2\0AFSR1_EL2\0"; break;case 2: t="ESR_EL2\0?\0?\0VSESR_EL2\0"; break;case 3: t="FPEXC32_EL2\0"; break;} break;case 6: if(m==0) t="FAR_EL2\0?\0?\0?\0HPFAR_EL2\0"; break;case 9: if(m==9) t="PMSCR_EL2\0"; break;case 10: switch(m) {case 2: t="MAIR_EL2\0"; break;case 3: t="AMAIR_EL2\0"; break;} break;case 12: switch(m) {case 0: t="VBAR_EL2\0RVBAR_EL2\0RMR_EL2\0"; break;case 1: t="?\0VDISR_EL2\0"; break;case 8: t="ICH_AP0R0_EL2\0ICH_AP0R1_EL2\0ICH_AP0R2_EL2\0ICH_AP0R3_EL2\0"; break;case 9: t="ICH_AP1R0_EL2\0ICH_AP1R1_EL2\0ICH_AP1R2_EL2\0ICH_AP1R3_EL2\0ICC_SRE_EL2\0"; break;case 11: t="ICH_HCR_EL2\0ICH_VTR_EL2\0ICH_MISR_EL2\0ICH_EISR_EL2\0?\0ICH_ELRSR_EL2\0?\0ICH_VMCR_EL2\0"; break;case 12: t="ICH_LR0_EL2\0ICH_LR1_EL2\0ICH_LR2_EL2\0ICH_LR3_EL2\0ICH_LR4_EL2\0ICH_LR5_EL2\0ICH_LR6_EL2\0ICH_LR7_EL2\0"; break;case 13: t="ICH_LR8_EL2\0ICH_LR9_EL2\0ICH_LR10_EL2\0ICH_LR11_EL2\0ICH_LR12_EL2\0ICH_LR13_EL2\0ICH_LR14_EL2\0ICH_LR15_EL2\0"; break;} break;case 13: if(m==0) t="?\0CONTEXTIDR_EL2\0TPIDR_EL2\0"; break;case 14: switch(m) {case 0: t="?\0?\0?\0CNTVOFF_EL2\0"; break;case 1: t="CNTHCTL_EL2\0"; break;case 2: t="CNTHP_TVAL_EL2\0CNTHP_CTL_EL2\0CNTHP_CVAL_EL2\0"; break;case 3: t="CNTHV_TVAL_EL2\0CNTHV_CTL_EL2\0CNTHV_CVAL_EL2\0"; break;} break;} break;case 5: if(n==4&&m==0) t="SPSR_EL12\0ELR_EL12\0"; break;case 6: if(n==4&&m==1) t="SP_EL2\0"; break;case 7: if(n==14&&m==2) t="CNTPS_TVAL_EL1\0CNTPS_CTL_EL1\0CNTPS_CVAL_EL1\0"; break;} break;}return t?disasm_str(t,j):NULL;}
   8390c:	7100247f 	cmp	w3, #0x9
   83910:	54ffe6a1 	b.ne	835e4 <disasm_sysreg+0x24>  // b.any
   83914:	f0000060 	adrp	x0, 92000 <sd_init+0x470>
   83918:	91122000 	add	x0, x0, #0x488
   8391c:	912ea000 	add	x0, x0, #0xba8
char *disasm_str(char*s,int n) {if(!s)return "?";while(n){s++;if(!*s){s++;n--;}}return *s?s:"?";};
   83920:	17ffff0c 	b	83550 <disasm_str.part.0>
   83924:	7100085f 	cmp	w2, #0x2
   83928:	54000cc0 	b.eq	83ac0 <disasm_sysreg+0x500>  // b.none
   8392c:	540001a8 	b.hi	83960 <disasm_sysreg+0x3a0>  // b.pmore
   83930:	34000d62 	cbz	w2, 83adc <disasm_sysreg+0x51c>
   83934:	7100045f 	cmp	w2, #0x1
   83938:	54ffe561 	b.ne	835e4 <disasm_sysreg+0x24>  // b.any
case 13: if(m==0) t="?\0?\0TPIDR_EL0\0TPIDRRO_EL0\0"; break;case 14: switch(m) {case 0: t="CNTFRQ_EL0\0CNTPCT_EL0\0CNTVCT_EL0\0"; break;case 2: t="CNTP_TVAL_EL0\0CNTP_CTL_EL0\0CNTP_CVAL_EL0\0"; break;case 3: t="CNTV_TVAL_EL0\0CNTV_CTL_EL0\0CNTV_CVAL_EL0\0"; break;} break;} break;case 4: switch(n) {case 0: if(m==0) t="VPIDR_EL2\0?\0?\0?\0?\0VMPIDR_EL2\0"; break;case 1: switch(m) {case 0: t="SCTLR_EL2\0ACTLR_EL2\0"; break;case 1: t="HCR_EL2\0MDCR_EL2\0CPTR_EL2\0HSTR_EL2\0?\0?\0?\0HACR_EL2\0"; break;case 2: t="ZCR_EL2\0"; break;} break;case 2: switch(m) {case 0: t="TTBR0_EL2\0?\0TCR_EL2\0"; break;case 1: t="VTTBR0_EL2\0?\0VTCR_EL2\0"; break;} break;case 3: if(m==0) t="DACR32_EL2\0"; break;case 4: switch(m) {case 0: t="SPSR_EL2\0ELR_EL2\0"; break;case 1: t="SP_EL1\0"; break;case 3: t="SPSR_irq\0SPSR_abt\0SPSR_und\0SPSR_fiq\0"; break;} break;case 5: switch(m) {case 0: t="?\0IFSR32_EL2\0"; break;case 1: t="AFSR0_EL2\0AFSR1_EL2\0"; break;case 2: t="ESR_EL2\0?\0?\0VSESR_EL2\0"; break;case 3: t="FPEXC32_EL2\0"; break;} break;case 6: if(m==0) t="FAR_EL2\0?\0?\0?\0HPFAR_EL2\0"; break;case 9: if(m==9) t="PMSCR_EL2\0"; break;case 10: switch(m) {case 2: t="MAIR_EL2\0"; break;case 3: t="AMAIR_EL2\0"; break;} break;case 12: switch(m) {case 0: t="VBAR_EL2\0RVBAR_EL2\0RMR_EL2\0"; break;case 1: t="?\0VDISR_EL2\0"; break;case 8: t="ICH_AP0R0_EL2\0ICH_AP0R1_EL2\0ICH_AP0R2_EL2\0ICH_AP0R3_EL2\0"; break;case 9: t="ICH_AP1R0_EL2\0ICH_AP1R1_EL2\0ICH_AP1R2_EL2\0ICH_AP1R3_EL2\0ICC_SRE_EL2\0"; break;case 11: t="ICH_HCR_EL2\0ICH_VTR_EL2\0ICH_MISR_EL2\0ICH_EISR_EL2\0?\0ICH_ELRSR_EL2\0?\0ICH_VMCR_EL2\0"; break;case 12: t="ICH_LR0_EL2\0ICH_LR1_EL2\0ICH_LR2_EL2\0ICH_LR3_EL2\0ICH_LR4_EL2\0ICH_LR5_EL2\0ICH_LR6_EL2\0ICH_LR7_EL2\0"; break;case 13: t="ICH_LR8_EL2\0ICH_LR9_EL2\0ICH_LR10_EL2\0ICH_LR11_EL2\0ICH_LR12_EL2\0ICH_LR13_EL2\0ICH_LR14_EL2\0ICH_LR15_EL2\0"; break;} break;case 13: if(m==0) t="?\0CONTEXTIDR_EL2\0TPIDR_EL2\0"; break;case 14: switch(m) {case 0: t="?\0?\0?\0CNTVOFF_EL2\0"; break;case 1: t="CNTHCTL_EL2\0"; break;case 2: t="CNTHP_TVAL_EL2\0CNTHP_CTL_EL2\0CNTHP_CVAL_EL2\0"; break;case 3: t="CNTHV_TVAL_EL2\0CNTHV_CTL_EL2\0CNTHV_CVAL_EL2\0"; break;} break;} break;case 5: if(n==4&&m==0) t="SPSR_EL12\0ELR_EL12\0"; break;case 6: if(n==4&&m==1) t="SP_EL2\0"; break;case 7: if(n==14&&m==2) t="CNTPS_TVAL_EL1\0CNTPS_CTL_EL1\0CNTPS_CVAL_EL1\0"; break;} break;}return t?disasm_str(t,j):NULL;}
   8393c:	7100047f 	cmp	w3, #0x1
   83940:	54002a40 	b.eq	83e88 <disasm_sysreg+0x8c8>  // b.none
   83944:	34002503 	cbz	w3, 83de4 <disasm_sysreg+0x824>
   83948:	7100087f 	cmp	w3, #0x2
   8394c:	54ffe4c1 	b.ne	835e4 <disasm_sysreg+0x24>  // b.any
   83950:	f0000060 	adrp	x0, 92000 <sd_init+0x470>
   83954:	91122000 	add	x0, x0, #0x488
   83958:	912de000 	add	x0, x0, #0xb78
char *disasm_str(char*s,int n) {if(!s)return "?";while(n){s++;if(!*s){s++;n--;}}return *s?s:"?";};
   8395c:	17fffefd 	b	83550 <disasm_str.part.0>
   83960:	71000c5f 	cmp	w2, #0x3
   83964:	540011a0 	b.eq	83b98 <disasm_sysreg+0x5d8>  // b.none
   83968:	7100105f 	cmp	w2, #0x4
   8396c:	54ffe3c1 	b.ne	835e4 <disasm_sysreg+0x24>  // b.any
case 13: if(m==0) t="?\0?\0TPIDR_EL0\0TPIDRRO_EL0\0"; break;case 14: switch(m) {case 0: t="CNTFRQ_EL0\0CNTPCT_EL0\0CNTVCT_EL0\0"; break;case 2: t="CNTP_TVAL_EL0\0CNTP_CTL_EL0\0CNTP_CVAL_EL0\0"; break;case 3: t="CNTV_TVAL_EL0\0CNTV_CTL_EL0\0CNTV_CVAL_EL0\0"; break;} break;} break;case 4: switch(n) {case 0: if(m==0) t="VPIDR_EL2\0?\0?\0?\0?\0VMPIDR_EL2\0"; break;case 1: switch(m) {case 0: t="SCTLR_EL2\0ACTLR_EL2\0"; break;case 1: t="HCR_EL2\0MDCR_EL2\0CPTR_EL2\0HSTR_EL2\0?\0?\0?\0HACR_EL2\0"; break;case 2: t="ZCR_EL2\0"; break;} break;case 2: switch(m) {case 0: t="TTBR0_EL2\0?\0TCR_EL2\0"; break;case 1: t="VTTBR0_EL2\0?\0VTCR_EL2\0"; break;} break;case 3: if(m==0) t="DACR32_EL2\0"; break;case 4: switch(m) {case 0: t="SPSR_EL2\0ELR_EL2\0"; break;case 1: t="SP_EL1\0"; break;case 3: t="SPSR_irq\0SPSR_abt\0SPSR_und\0SPSR_fiq\0"; break;} break;case 5: switch(m) {case 0: t="?\0IFSR32_EL2\0"; break;case 1: t="AFSR0_EL2\0AFSR1_EL2\0"; break;case 2: t="ESR_EL2\0?\0?\0VSESR_EL2\0"; break;case 3: t="FPEXC32_EL2\0"; break;} break;case 6: if(m==0) t="FAR_EL2\0?\0?\0?\0HPFAR_EL2\0"; break;case 9: if(m==9) t="PMSCR_EL2\0"; break;case 10: switch(m) {case 2: t="MAIR_EL2\0"; break;case 3: t="AMAIR_EL2\0"; break;} break;case 12: switch(m) {case 0: t="VBAR_EL2\0RVBAR_EL2\0RMR_EL2\0"; break;case 1: t="?\0VDISR_EL2\0"; break;case 8: t="ICH_AP0R0_EL2\0ICH_AP0R1_EL2\0ICH_AP0R2_EL2\0ICH_AP0R3_EL2\0"; break;case 9: t="ICH_AP1R0_EL2\0ICH_AP1R1_EL2\0ICH_AP1R2_EL2\0ICH_AP1R3_EL2\0ICC_SRE_EL2\0"; break;case 11: t="ICH_HCR_EL2\0ICH_VTR_EL2\0ICH_MISR_EL2\0ICH_EISR_EL2\0?\0ICH_ELRSR_EL2\0?\0ICH_VMCR_EL2\0"; break;case 12: t="ICH_LR0_EL2\0ICH_LR1_EL2\0ICH_LR2_EL2\0ICH_LR3_EL2\0ICH_LR4_EL2\0ICH_LR5_EL2\0ICH_LR6_EL2\0ICH_LR7_EL2\0"; break;case 13: t="ICH_LR8_EL2\0ICH_LR9_EL2\0ICH_LR10_EL2\0ICH_LR11_EL2\0ICH_LR12_EL2\0ICH_LR13_EL2\0ICH_LR14_EL2\0ICH_LR15_EL2\0"; break;} break;case 13: if(m==0) t="?\0CONTEXTIDR_EL2\0TPIDR_EL2\0"; break;case 14: switch(m) {case 0: t="?\0?\0?\0CNTVOFF_EL2\0"; break;case 1: t="CNTHCTL_EL2\0"; break;case 2: t="CNTHP_TVAL_EL2\0CNTHP_CTL_EL2\0CNTHP_CVAL_EL2\0"; break;case 3: t="CNTHV_TVAL_EL2\0CNTHV_CTL_EL2\0CNTHV_CVAL_EL2\0"; break;} break;} break;case 5: if(n==4&&m==0) t="SPSR_EL12\0ELR_EL12\0"; break;case 6: if(n==4&&m==1) t="SP_EL2\0"; break;case 7: if(n==14&&m==2) t="CNTPS_TVAL_EL1\0CNTPS_CTL_EL1\0CNTPS_CVAL_EL1\0"; break;} break;}return t?disasm_str(t,j):NULL;}
   83970:	7100047f 	cmp	w3, #0x1
   83974:	54002aa0 	b.eq	83ec8 <disasm_sysreg+0x908>  // b.none
   83978:	340023e3 	cbz	w3, 83df4 <disasm_sysreg+0x834>
   8397c:	71000c7f 	cmp	w3, #0x3
   83980:	54ffe321 	b.ne	835e4 <disasm_sysreg+0x24>  // b.any
   83984:	f0000060 	adrp	x0, 92000 <sd_init+0x470>
   83988:	91122000 	add	x0, x0, #0x488
   8398c:	912bc000 	add	x0, x0, #0xaf0
char *disasm_str(char*s,int n) {if(!s)return "?";while(n){s++;if(!*s){s++;n--;}}return *s?s:"?";};
   83990:	17fffef0 	b	83550 <disasm_str.part.0>
char *disasm_sysreg(uint8_t p,uint8_t k,uint8_t n,uint8_t m,uint8_t j) {char *t=NULL;switch(p){case 2: switch(k) {case 0: switch(n) {case 0: switch(m) {case 0: t="?\0?\0OSDTRRX_EL1\0"; break;case 2: t="MDCCINT_EL1\0?\0MDSCR_EL1\0"; break;case 3: t="?\0?\0OSDTRTX_EL1\0"; break;case 6: t="?\0?\0OSECCR_EL1\0"; break;default: { n=j; j=m; switch(n) {case 4: t="DBGBVR0_EL1\0DBGBVR1_EL1\0DBGBVR2_EL1\0DBGBVR3_EL1\0DBGBVR4_EL1\0DBGBVR5_EL1\0DBGBVR6_EL1\0DBGBVR7_EL1\0"; break;case 5: t="DBGBCR0_EL1\0DBGBCR1_EL1\0DBGBCR2_EL1\0DBGBCR3_EL1\0DBGBCR4_EL1\0DBGBCR5_EL1\0DBGBCR6_EL1\0DBGBCR7_EL1\0"; break;case 6: t="DBGWVR0_EL1\0DBGWVR1_EL1\0DBGWVR2_EL1\0DBGWVR3_EL1\0DBGWVR4_EL1\0DBGWVR5_EL1\0DBGWVR6_EL1\0DBGWVR7_EL1\0"; break;case 7: t="DBGWCR0_EL1\0DBGWCR1_EL1\0DBGWCR2_EL1\0DBGWCR3_EL1\0DBGWCR4_EL1\0DBGWCR5_EL1\0DBGWCR6_EL1\0DBGWCR7_EL1\0"; break;} break; }} break;case 1: if(m==0) t="MDRAR_EL1\0?\0?\0?\0OSLAR_EL1\0"; else if(j==4) { j=m; t="OSLSR_EL1\0?\0OSDLR_EL1\0DBGPRCR_EL1\0"; }break;case 7: if(j==6) { j=m; t="?\0?\0?\0?\0?\0?\0?\0?\0DBGCLAIMSET_EL1\0DBGCLAIMCLR_EL1\0?\0?\0?\0?\0DBGAUTHSTATUS_EL1\0"; }break;} break;case 3: if(n==0&&j==0) { j=m; t="?\0MDCCSR_EL0\0?\0?\0DBGDTR_EL0\0DBGDTRRX_EL0\0"; } break;case 4: if(n==0&&m==7) t="DBGVCR32_EL2\0"; break;} break;case 3: switch(k) {case 0: switch(n) {case 0: if(m==0) t="MIDR_EL1\0?\0?\0?\0?\0MPIDR_EL1\0REVIDR_EL1\0?\0ID_PFR0_EL1\0ID_PFR1_EL1\0ID_DFR0_EL1\0ID_AFR0_EL1\0ID_MMFR0_EL1\0ID_MMFR1_EL1\0ID_MMFR2_EL1\0ID_MMFR3_EL1\0ID_ISAR0_EL1\0ID_ISAR1_EL1\0ID_ISAR2_EL1\0ID_ISAR2_EL1\0ID_ISAR3_EL1\0ID_ISAR4_EL1\0ID_ISAR5_EL1\0ID_MMFR4_EL1\0?\0MVFR0_EL1\0MVFR1_EL1\0MVFR2_EL1\0?\0?\0?\0?\0?\0ID_AA64PFR0_EL1\0ID_AA64PFR1_EL1\0?\0?\0ID_AA64ZFR0_EL1\0?\0?\0?\0ID_AA64DFR0_EL1\0ID_AA64DFR1_EL1\0?\0?\0ID_AA64AFR0_EL1\0ID_AA64AFR1_EL1\0?\0?\0ID_AA64ISAR0_EL1\0ID_AA64ISAR1_EL1\0?\0?\0?\0?\0?\0?\0ID_AA64MMFR0_EL1\0ID_AA64MMFR1_EL1\0ID_AA64MMFR2_EL1\0"; break;case 1: switch(m) {case 0: t="SCTLR_EL1\0ACTLR_EL1\0CPACR_EL1\0"; break;case 2: t="ZCR_EL1\0"; break;} break;case 2: if(m==0) t="TTBR0_EL1\0TTBR1_EL1\0TCR_EL1\0"; break;case 4: switch(m) {case 0: t="SPSR_EL1\0ELR_EL1\0"; break;case 1: t="SP_EL0\0"; break;case 2: t="SPSel\0?\0CurrentEL\0PAN\0UAO\0"; break;case 6: t="ICC_PMR_EL1\0"; break;} break;case 5: switch(m) {case 1: t="AFSR0_EL1\0AFSR1_EL1\0"; break;case 2: t="ESR_EL1"; break;case 3: t="ERRIDR_EL1\0ERRSELR_EL1\0"; break;case 4: t="ERXFR_EL1\0ERXCTLR_EL1\0ERXSTATUS_EL1\0ERXADDR_EL1\0"; break;case 5: t="ERXMISC0_EL1\0ERXMISC1_EL1\0"; break;} break;case 6: if(m==0) t="FAR_EL1\0"; break;case 7: if(m==4) t="PAR_EL1\0"; break;case 9: switch(m) {case 9: t="PMSCR_EL1\0?\0PMSICR_EL1\0PMSIRR_EL1\0PMSFCR_EL1\0PMSEVFR_EL1\0PMSLATFR_EL1\0PMSIDR_EL1\0PMSIDR_EL1\0"; break;case 10: t="PMBLIMITR_EL1\0PMBPTR_EL1\0?\0PMBSR_EL1\0?\0?\0?\0PMBIDR_EL1\0"; break;case 14: t="?\0PMINTENSET_EL1\0PMINTENCLR_EL1\0"; break;} break;case 10: if(m==4) t="LORSA_EL1\0LOREA_EL1\0LORN_EL1\0LORC_EL1\0?\0?\0?\0LORID_EL1\0"; else if(m!=4&&j==0) { j=m; t="?\0?\0MAIR_EL1\0AMAIR_EL1\0"; }break;case 12: switch(m) {case 0: t="VBAR_EL1\0RVBAR_EL1\0RMR_EL1\0"; break;case 1: t="ISR_EL1\0DISR_EL1\0"; break;case 8: t="ICC_IAR0_EL1\0ICC_EOIR0_EL1\0ICC_HPPIR0_EL1\0ICC_BPR0_EL1\0ICC_AP0R0_EL1\0ICC_AP0R1_EL1\0ICC_AP0R2_EL1\0ICC_AP0R3_EL1\0"; break;case 9: t="ICC_AP1R0_EL1\0ICC_AP1R1_EL1\0ICC_AP1R2_EL1\0ICC_AP1R3_EL1\0"; break;case 11: t="?\0ICC_DIR_EL1\0?\0ICC_RPR_EL1\0?\0ICC_SGI1R_EL1\0ICC_ASGI1R_EL1\0ICC_SGI0R_EL1\0"; break;case 12: t="ICC_IAR1_EL1\0ICC_EOIR1_EL1\0ICC_HPPIR1_EL1\0ICC_BPR1_EL1\0ICC_CTLR_EL1\0ICC_SRE_EL1\0ICC_IGRPEN0_EL1\0ICC_IGRPEN1_EL1\0"; break;} break;case 13: if(m==0) t="?\0CONTEXTIDR_EL1\0?\0?\0TPIDR_EL1\0"; break;case 14: if(m==1) t="CNTKCTL_EL1\0"; break;} break;case 1: if(n==0&&m==0) t="CCSIDR_EL1\0CLIDR_EL1\0?\0?\0?\0?\0?\0AIDR_EL1\0"; break;case 2: if(n==0&&m==0) t="CSSELR_EL1\0"; break;case 3: switch(n) {case 0: if(m==0) t="?\0CTR_EL0\0?\0?\0?\0?\0?\0DCZID_EL0\0"; break;case 4: switch(m) {case 2: t="NZCV\0DAIF\0"; break;case 4: t="FPCR\0FPSR\0"; break;case 5: t="DSPSR_EL0\0DLR_EL0\0"; break;} break;case 9: switch(m) {case 12: t="PMCR_EL0\0PMCNTENSET_EL0\0PMCNTENCLR_EL0\0PMOVSCLR_EL0\0PMSWINC_EL0\0PMSELR_EL0\0PMCEID0_EL0\0PMCEID1_EL0\0"; break;case 13: t="PMCCNTR_EL0\0PMXEVTYPER_EL0\0PMXEVCNTR_EL0\0"; break;case 14: t="PMUSERENR_EL0\0?\0?\0PMOVSSET_EL0\0"; break;} break;
   83994:	7100087f 	cmp	w3, #0x2
   83998:	54000660 	b.eq	83a64 <disasm_sysreg+0x4a4>  // b.none
   8399c:	54000229 	b.ls	839e0 <disasm_sysreg+0x420>  // b.plast
   839a0:	71000c7f 	cmp	w3, #0x3
   839a4:	54000300 	b.eq	83a04 <disasm_sysreg+0x444>  // b.none
   839a8:	7100187f 	cmp	w3, #0x6
   839ac:	54000641 	b.ne	83a74 <disasm_sysreg+0x4b4>  // b.any
   839b0:	f0000060 	adrp	x0, 92000 <sd_init+0x470>
   839b4:	91122000 	add	x0, x0, #0x488
   839b8:	91350000 	add	x0, x0, #0xd40
char *disasm_str(char*s,int n) {if(!s)return "?";while(n){s++;if(!*s){s++;n--;}}return *s?s:"?";};
   839bc:	17fffee5 	b	83550 <disasm_str.part.0>
char *disasm_sysreg(uint8_t p,uint8_t k,uint8_t n,uint8_t m,uint8_t j) {char *t=NULL;switch(p){case 2: switch(k) {case 0: switch(n) {case 0: switch(m) {case 0: t="?\0?\0OSDTRRX_EL1\0"; break;case 2: t="MDCCINT_EL1\0?\0MDSCR_EL1\0"; break;case 3: t="?\0?\0OSDTRTX_EL1\0"; break;case 6: t="?\0?\0OSECCR_EL1\0"; break;default: { n=j; j=m; switch(n) {case 4: t="DBGBVR0_EL1\0DBGBVR1_EL1\0DBGBVR2_EL1\0DBGBVR3_EL1\0DBGBVR4_EL1\0DBGBVR5_EL1\0DBGBVR6_EL1\0DBGBVR7_EL1\0"; break;case 5: t="DBGBCR0_EL1\0DBGBCR1_EL1\0DBGBCR2_EL1\0DBGBCR3_EL1\0DBGBCR4_EL1\0DBGBCR5_EL1\0DBGBCR6_EL1\0DBGBCR7_EL1\0"; break;case 6: t="DBGWVR0_EL1\0DBGWVR1_EL1\0DBGWVR2_EL1\0DBGWVR3_EL1\0DBGWVR4_EL1\0DBGWVR5_EL1\0DBGWVR6_EL1\0DBGWVR7_EL1\0"; break;case 7: t="DBGWCR0_EL1\0DBGWCR1_EL1\0DBGWCR2_EL1\0DBGWCR3_EL1\0DBGWCR4_EL1\0DBGWCR5_EL1\0DBGWCR6_EL1\0DBGWCR7_EL1\0"; break;} break; }} break;case 1: if(m==0) t="MDRAR_EL1\0?\0?\0?\0OSLAR_EL1\0"; else if(j==4) { j=m; t="OSLSR_EL1\0?\0OSDLR_EL1\0DBGPRCR_EL1\0"; }break;case 7: if(j==6) { j=m; t="?\0?\0?\0?\0?\0?\0?\0?\0DBGCLAIMSET_EL1\0DBGCLAIMCLR_EL1\0?\0?\0?\0?\0DBGAUTHSTATUS_EL1\0"; }break;} break;case 3: if(n==0&&j==0) { j=m; t="?\0MDCCSR_EL0\0?\0?\0DBGDTR_EL0\0DBGDTRRX_EL0\0"; } break;case 4: if(n==0&&m==7) t="DBGVCR32_EL2\0"; break;} break;case 3: switch(k) {case 0: switch(n) {case 0: if(m==0) t="MIDR_EL1\0?\0?\0?\0?\0MPIDR_EL1\0REVIDR_EL1\0?\0ID_PFR0_EL1\0ID_PFR1_EL1\0ID_DFR0_EL1\0ID_AFR0_EL1\0ID_MMFR0_EL1\0ID_MMFR1_EL1\0ID_MMFR2_EL1\0ID_MMFR3_EL1\0ID_ISAR0_EL1\0ID_ISAR1_EL1\0ID_ISAR2_EL1\0ID_ISAR2_EL1\0ID_ISAR3_EL1\0ID_ISAR4_EL1\0ID_ISAR5_EL1\0ID_MMFR4_EL1\0?\0MVFR0_EL1\0MVFR1_EL1\0MVFR2_EL1\0?\0?\0?\0?\0?\0ID_AA64PFR0_EL1\0ID_AA64PFR1_EL1\0?\0?\0ID_AA64ZFR0_EL1\0?\0?\0?\0ID_AA64DFR0_EL1\0ID_AA64DFR1_EL1\0?\0?\0ID_AA64AFR0_EL1\0ID_AA64AFR1_EL1\0?\0?\0ID_AA64ISAR0_EL1\0ID_AA64ISAR1_EL1\0?\0?\0?\0?\0?\0?\0ID_AA64MMFR0_EL1\0ID_AA64MMFR1_EL1\0ID_AA64MMFR2_EL1\0"; break;case 1: switch(m) {case 0: t="SCTLR_EL1\0ACTLR_EL1\0CPACR_EL1\0"; break;case 2: t="ZCR_EL1\0"; break;} break;case 2: if(m==0) t="TTBR0_EL1\0TTBR1_EL1\0TCR_EL1\0"; break;case 4: switch(m) {case 0: t="SPSR_EL1\0ELR_EL1\0"; break;case 1: t="SP_EL0\0"; break;case 2: t="SPSel\0?\0CurrentEL\0PAN\0UAO\0"; break;case 6: t="ICC_PMR_EL1\0"; break;} break;case 5: switch(m) {case 1: t="AFSR0_EL1\0AFSR1_EL1\0"; break;case 2: t="ESR_EL1"; break;case 3: t="ERRIDR_EL1\0ERRSELR_EL1\0"; break;case 4: t="ERXFR_EL1\0ERXCTLR_EL1\0ERXSTATUS_EL1\0ERXADDR_EL1\0"; break;case 5: t="ERXMISC0_EL1\0ERXMISC1_EL1\0"; break;} break;case 6: if(m==0) t="FAR_EL1\0"; break;case 7: if(m==4) t="PAR_EL1\0"; break;case 9: switch(m) {case 9: t="PMSCR_EL1\0?\0PMSICR_EL1\0PMSIRR_EL1\0PMSFCR_EL1\0PMSEVFR_EL1\0PMSLATFR_EL1\0PMSIDR_EL1\0PMSIDR_EL1\0"; break;case 10: t="PMBLIMITR_EL1\0PMBPTR_EL1\0?\0PMBSR_EL1\0?\0?\0?\0PMBIDR_EL1\0"; break;case 14: t="?\0PMINTENSET_EL1\0PMINTENCLR_EL1\0"; break;} break;case 10: if(m==4) t="LORSA_EL1\0LOREA_EL1\0LORN_EL1\0LORC_EL1\0?\0?\0?\0LORID_EL1\0"; else if(m!=4&&j==0) { j=m; t="?\0?\0MAIR_EL1\0AMAIR_EL1\0"; }break;case 12: switch(m) {case 0: t="VBAR_EL1\0RVBAR_EL1\0RMR_EL1\0"; break;case 1: t="ISR_EL1\0DISR_EL1\0"; break;case 8: t="ICC_IAR0_EL1\0ICC_EOIR0_EL1\0ICC_HPPIR0_EL1\0ICC_BPR0_EL1\0ICC_AP0R0_EL1\0ICC_AP0R1_EL1\0ICC_AP0R2_EL1\0ICC_AP0R3_EL1\0"; break;case 9: t="ICC_AP1R0_EL1\0ICC_AP1R1_EL1\0ICC_AP1R2_EL1\0ICC_AP1R3_EL1\0"; break;case 11: t="?\0ICC_DIR_EL1\0?\0ICC_RPR_EL1\0?\0ICC_SGI1R_EL1\0ICC_ASGI1R_EL1\0ICC_SGI0R_EL1\0"; break;case 12: t="ICC_IAR1_EL1\0ICC_EOIR1_EL1\0ICC_HPPIR1_EL1\0ICC_BPR1_EL1\0ICC_CTLR_EL1\0ICC_SRE_EL1\0ICC_IGRPEN0_EL1\0ICC_IGRPEN1_EL1\0"; break;} break;case 13: if(m==0) t="?\0CONTEXTIDR_EL1\0?\0?\0TPIDR_EL1\0"; break;case 14: if(m==1) t="CNTKCTL_EL1\0"; break;} break;case 1: if(n==0&&m==0) t="CCSIDR_EL1\0CLIDR_EL1\0?\0?\0?\0?\0?\0AIDR_EL1\0"; break;case 2: if(n==0&&m==0) t="CSSELR_EL1\0"; break;case 3: switch(n) {case 0: if(m==0) t="?\0CTR_EL0\0?\0?\0?\0?\0?\0DCZID_EL0\0"; break;case 4: switch(m) {case 2: t="NZCV\0DAIF\0"; break;case 4: t="FPCR\0FPSR\0"; break;case 5: t="DSPSR_EL0\0DLR_EL0\0"; break;} break;case 9: switch(m) {case 12: t="PMCR_EL0\0PMCNTENSET_EL0\0PMCNTENCLR_EL0\0PMOVSCLR_EL0\0PMSWINC_EL0\0PMSELR_EL0\0PMCEID0_EL0\0PMCEID1_EL0\0"; break;case 13: t="PMCCNTR_EL0\0PMXEVTYPER_EL0\0PMXEVCNTR_EL0\0"; break;case 14: t="PMUSERENR_EL0\0?\0?\0PMOVSSET_EL0\0"; break;} break;
   839c0:	340001a3 	cbz	w3, 839f4 <disasm_sysreg+0x434>
   839c4:	7100103f 	cmp	w1, #0x4
   839c8:	54ffe0e1 	b.ne	835e4 <disasm_sysreg+0x24>  // b.any
   839cc:	f0000060 	adrp	x0, 92000 <sd_init+0x470>
   839d0:	91122000 	add	x0, x0, #0x488
   839d4:	2a0303e1 	mov	w1, w3
   839d8:	9132a000 	add	x0, x0, #0xca8
char *disasm_str(char*s,int n) {if(!s)return "?";while(n){s++;if(!*s){s++;n--;}}return *s?s:"?";};
   839dc:	17fffedd 	b	83550 <disasm_str.part.0>
   839e0:	350004a3 	cbnz	w3, 83a74 <disasm_sysreg+0x4b4>
char *disasm_sysreg(uint8_t p,uint8_t k,uint8_t n,uint8_t m,uint8_t j) {char *t=NULL;switch(p){case 2: switch(k) {case 0: switch(n) {case 0: switch(m) {case 0: t="?\0?\0OSDTRRX_EL1\0"; break;case 2: t="MDCCINT_EL1\0?\0MDSCR_EL1\0"; break;case 3: t="?\0?\0OSDTRTX_EL1\0"; break;case 6: t="?\0?\0OSECCR_EL1\0"; break;default: { n=j; j=m; switch(n) {case 4: t="DBGBVR0_EL1\0DBGBVR1_EL1\0DBGBVR2_EL1\0DBGBVR3_EL1\0DBGBVR4_EL1\0DBGBVR5_EL1\0DBGBVR6_EL1\0DBGBVR7_EL1\0"; break;case 5: t="DBGBCR0_EL1\0DBGBCR1_EL1\0DBGBCR2_EL1\0DBGBCR3_EL1\0DBGBCR4_EL1\0DBGBCR5_EL1\0DBGBCR6_EL1\0DBGBCR7_EL1\0"; break;case 6: t="DBGWVR0_EL1\0DBGWVR1_EL1\0DBGWVR2_EL1\0DBGWVR3_EL1\0DBGWVR4_EL1\0DBGWVR5_EL1\0DBGWVR6_EL1\0DBGWVR7_EL1\0"; break;case 7: t="DBGWCR0_EL1\0DBGWCR1_EL1\0DBGWCR2_EL1\0DBGWCR3_EL1\0DBGWCR4_EL1\0DBGWCR5_EL1\0DBGWCR6_EL1\0DBGWCR7_EL1\0"; break;} break; }} break;case 1: if(m==0) t="MDRAR_EL1\0?\0?\0?\0OSLAR_EL1\0"; else if(j==4) { j=m; t="OSLSR_EL1\0?\0OSDLR_EL1\0DBGPRCR_EL1\0"; }break;case 7: if(j==6) { j=m; t="?\0?\0?\0?\0?\0?\0?\0?\0DBGCLAIMSET_EL1\0DBGCLAIMCLR_EL1\0?\0?\0?\0?\0DBGAUTHSTATUS_EL1\0"; }break;} break;case 3: if(n==0&&j==0) { j=m; t="?\0MDCCSR_EL0\0?\0?\0DBGDTR_EL0\0DBGDTRRX_EL0\0"; } break;case 4: if(n==0&&m==7) t="DBGVCR32_EL2\0"; break;} break;case 3: switch(k) {case 0: switch(n) {case 0: if(m==0) t="MIDR_EL1\0?\0?\0?\0?\0MPIDR_EL1\0REVIDR_EL1\0?\0ID_PFR0_EL1\0ID_PFR1_EL1\0ID_DFR0_EL1\0ID_AFR0_EL1\0ID_MMFR0_EL1\0ID_MMFR1_EL1\0ID_MMFR2_EL1\0ID_MMFR3_EL1\0ID_ISAR0_EL1\0ID_ISAR1_EL1\0ID_ISAR2_EL1\0ID_ISAR2_EL1\0ID_ISAR3_EL1\0ID_ISAR4_EL1\0ID_ISAR5_EL1\0ID_MMFR4_EL1\0?\0MVFR0_EL1\0MVFR1_EL1\0MVFR2_EL1\0?\0?\0?\0?\0?\0ID_AA64PFR0_EL1\0ID_AA64PFR1_EL1\0?\0?\0ID_AA64ZFR0_EL1\0?\0?\0?\0ID_AA64DFR0_EL1\0ID_AA64DFR1_EL1\0?\0?\0ID_AA64AFR0_EL1\0ID_AA64AFR1_EL1\0?\0?\0ID_AA64ISAR0_EL1\0ID_AA64ISAR1_EL1\0?\0?\0?\0?\0?\0?\0ID_AA64MMFR0_EL1\0ID_AA64MMFR1_EL1\0ID_AA64MMFR2_EL1\0"; break;case 1: switch(m) {case 0: t="SCTLR_EL1\0ACTLR_EL1\0CPACR_EL1\0"; break;case 2: t="ZCR_EL1\0"; break;} break;case 2: if(m==0) t="TTBR0_EL1\0TTBR1_EL1\0TCR_EL1\0"; break;case 4: switch(m) {case 0: t="SPSR_EL1\0ELR_EL1\0"; break;case 1: t="SP_EL0\0"; break;case 2: t="SPSel\0?\0CurrentEL\0PAN\0UAO\0"; break;case 6: t="ICC_PMR_EL1\0"; break;} break;case 5: switch(m) {case 1: t="AFSR0_EL1\0AFSR1_EL1\0"; break;case 2: t="ESR_EL1"; break;case 3: t="ERRIDR_EL1\0ERRSELR_EL1\0"; break;case 4: t="ERXFR_EL1\0ERXCTLR_EL1\0ERXSTATUS_EL1\0ERXADDR_EL1\0"; break;case 5: t="ERXMISC0_EL1\0ERXMISC1_EL1\0"; break;} break;case 6: if(m==0) t="FAR_EL1\0"; break;case 7: if(m==4) t="PAR_EL1\0"; break;case 9: switch(m) {case 9: t="PMSCR_EL1\0?\0PMSICR_EL1\0PMSIRR_EL1\0PMSFCR_EL1\0PMSEVFR_EL1\0PMSLATFR_EL1\0PMSIDR_EL1\0PMSIDR_EL1\0"; break;case 10: t="PMBLIMITR_EL1\0PMBPTR_EL1\0?\0PMBSR_EL1\0?\0?\0?\0PMBIDR_EL1\0"; break;case 14: t="?\0PMINTENSET_EL1\0PMINTENCLR_EL1\0"; break;} break;case 10: if(m==4) t="LORSA_EL1\0LOREA_EL1\0LORN_EL1\0LORC_EL1\0?\0?\0?\0LORID_EL1\0"; else if(m!=4&&j==0) { j=m; t="?\0?\0MAIR_EL1\0AMAIR_EL1\0"; }break;case 12: switch(m) {case 0: t="VBAR_EL1\0RVBAR_EL1\0RMR_EL1\0"; break;case 1: t="ISR_EL1\0DISR_EL1\0"; break;case 8: t="ICC_IAR0_EL1\0ICC_EOIR0_EL1\0ICC_HPPIR0_EL1\0ICC_BPR0_EL1\0ICC_AP0R0_EL1\0ICC_AP0R1_EL1\0ICC_AP0R2_EL1\0ICC_AP0R3_EL1\0"; break;case 9: t="ICC_AP1R0_EL1\0ICC_AP1R1_EL1\0ICC_AP1R2_EL1\0ICC_AP1R3_EL1\0"; break;case 11: t="?\0ICC_DIR_EL1\0?\0ICC_RPR_EL1\0?\0ICC_SGI1R_EL1\0ICC_ASGI1R_EL1\0ICC_SGI0R_EL1\0"; break;case 12: t="ICC_IAR1_EL1\0ICC_EOIR1_EL1\0ICC_HPPIR1_EL1\0ICC_BPR1_EL1\0ICC_CTLR_EL1\0ICC_SRE_EL1\0ICC_IGRPEN0_EL1\0ICC_IGRPEN1_EL1\0"; break;} break;case 13: if(m==0) t="?\0CONTEXTIDR_EL1\0?\0?\0TPIDR_EL1\0"; break;case 14: if(m==1) t="CNTKCTL_EL1\0"; break;} break;case 1: if(n==0&&m==0) t="CCSIDR_EL1\0CLIDR_EL1\0?\0?\0?\0?\0?\0AIDR_EL1\0"; break;case 2: if(n==0&&m==0) t="CSSELR_EL1\0"; break;case 3: switch(n) {case 0: if(m==0) t="?\0CTR_EL0\0?\0?\0?\0?\0?\0DCZID_EL0\0"; break;case 4: switch(m) {case 2: t="NZCV\0DAIF\0"; break;case 4: t="FPCR\0FPSR\0"; break;case 5: t="DSPSR_EL0\0DLR_EL0\0"; break;} break;case 9: switch(m) {case 12: t="PMCR_EL0\0PMCNTENSET_EL0\0PMCNTENCLR_EL0\0PMOVSCLR_EL0\0PMSWINC_EL0\0PMSELR_EL0\0PMCEID0_EL0\0PMCEID1_EL0\0"; break;case 13: t="PMCCNTR_EL0\0PMXEVTYPER_EL0\0PMXEVCNTR_EL0\0"; break;case 14: t="PMUSERENR_EL0\0?\0?\0PMOVSSET_EL0\0"; break;} break;
   839e4:	f0000060 	adrp	x0, 92000 <sd_init+0x470>
   839e8:	91122000 	add	x0, x0, #0x488
   839ec:	91396000 	add	x0, x0, #0xe58
char *disasm_str(char*s,int n) {if(!s)return "?";while(n){s++;if(!*s){s++;n--;}}return *s?s:"?";};
   839f0:	17fffed8 	b	83550 <disasm_str.part.0>
char *disasm_sysreg(uint8_t p,uint8_t k,uint8_t n,uint8_t m,uint8_t j) {char *t=NULL;switch(p){case 2: switch(k) {case 0: switch(n) {case 0: switch(m) {case 0: t="?\0?\0OSDTRRX_EL1\0"; break;case 2: t="MDCCINT_EL1\0?\0MDSCR_EL1\0"; break;case 3: t="?\0?\0OSDTRTX_EL1\0"; break;case 6: t="?\0?\0OSECCR_EL1\0"; break;default: { n=j; j=m; switch(n) {case 4: t="DBGBVR0_EL1\0DBGBVR1_EL1\0DBGBVR2_EL1\0DBGBVR3_EL1\0DBGBVR4_EL1\0DBGBVR5_EL1\0DBGBVR6_EL1\0DBGBVR7_EL1\0"; break;case 5: t="DBGBCR0_EL1\0DBGBCR1_EL1\0DBGBCR2_EL1\0DBGBCR3_EL1\0DBGBCR4_EL1\0DBGBCR5_EL1\0DBGBCR6_EL1\0DBGBCR7_EL1\0"; break;case 6: t="DBGWVR0_EL1\0DBGWVR1_EL1\0DBGWVR2_EL1\0DBGWVR3_EL1\0DBGWVR4_EL1\0DBGWVR5_EL1\0DBGWVR6_EL1\0DBGWVR7_EL1\0"; break;case 7: t="DBGWCR0_EL1\0DBGWCR1_EL1\0DBGWCR2_EL1\0DBGWCR3_EL1\0DBGWCR4_EL1\0DBGWCR5_EL1\0DBGWCR6_EL1\0DBGWCR7_EL1\0"; break;} break; }} break;case 1: if(m==0) t="MDRAR_EL1\0?\0?\0?\0OSLAR_EL1\0"; else if(j==4) { j=m; t="OSLSR_EL1\0?\0OSDLR_EL1\0DBGPRCR_EL1\0"; }break;case 7: if(j==6) { j=m; t="?\0?\0?\0?\0?\0?\0?\0?\0DBGCLAIMSET_EL1\0DBGCLAIMCLR_EL1\0?\0?\0?\0?\0DBGAUTHSTATUS_EL1\0"; }break;} break;case 3: if(n==0&&j==0) { j=m; t="?\0MDCCSR_EL0\0?\0?\0DBGDTR_EL0\0DBGDTRRX_EL0\0"; } break;case 4: if(n==0&&m==7) t="DBGVCR32_EL2\0"; break;} break;case 3: switch(k) {case 0: switch(n) {case 0: if(m==0) t="MIDR_EL1\0?\0?\0?\0?\0MPIDR_EL1\0REVIDR_EL1\0?\0ID_PFR0_EL1\0ID_PFR1_EL1\0ID_DFR0_EL1\0ID_AFR0_EL1\0ID_MMFR0_EL1\0ID_MMFR1_EL1\0ID_MMFR2_EL1\0ID_MMFR3_EL1\0ID_ISAR0_EL1\0ID_ISAR1_EL1\0ID_ISAR2_EL1\0ID_ISAR2_EL1\0ID_ISAR3_EL1\0ID_ISAR4_EL1\0ID_ISAR5_EL1\0ID_MMFR4_EL1\0?\0MVFR0_EL1\0MVFR1_EL1\0MVFR2_EL1\0?\0?\0?\0?\0?\0ID_AA64PFR0_EL1\0ID_AA64PFR1_EL1\0?\0?\0ID_AA64ZFR0_EL1\0?\0?\0?\0ID_AA64DFR0_EL1\0ID_AA64DFR1_EL1\0?\0?\0ID_AA64AFR0_EL1\0ID_AA64AFR1_EL1\0?\0?\0ID_AA64ISAR0_EL1\0ID_AA64ISAR1_EL1\0?\0?\0?\0?\0?\0?\0ID_AA64MMFR0_EL1\0ID_AA64MMFR1_EL1\0ID_AA64MMFR2_EL1\0"; break;case 1: switch(m) {case 0: t="SCTLR_EL1\0ACTLR_EL1\0CPACR_EL1\0"; break;case 2: t="ZCR_EL1\0"; break;} break;case 2: if(m==0) t="TTBR0_EL1\0TTBR1_EL1\0TCR_EL1\0"; break;case 4: switch(m) {case 0: t="SPSR_EL1\0ELR_EL1\0"; break;case 1: t="SP_EL0\0"; break;case 2: t="SPSel\0?\0CurrentEL\0PAN\0UAO\0"; break;case 6: t="ICC_PMR_EL1\0"; break;} break;case 5: switch(m) {case 1: t="AFSR0_EL1\0AFSR1_EL1\0"; break;case 2: t="ESR_EL1"; break;case 3: t="ERRIDR_EL1\0ERRSELR_EL1\0"; break;case 4: t="ERXFR_EL1\0ERXCTLR_EL1\0ERXSTATUS_EL1\0ERXADDR_EL1\0"; break;case 5: t="ERXMISC0_EL1\0ERXMISC1_EL1\0"; break;} break;case 6: if(m==0) t="FAR_EL1\0"; break;case 7: if(m==4) t="PAR_EL1\0"; break;case 9: switch(m) {case 9: t="PMSCR_EL1\0?\0PMSICR_EL1\0PMSIRR_EL1\0PMSFCR_EL1\0PMSEVFR_EL1\0PMSLATFR_EL1\0PMSIDR_EL1\0PMSIDR_EL1\0"; break;case 10: t="PMBLIMITR_EL1\0PMBPTR_EL1\0?\0PMBSR_EL1\0?\0?\0?\0PMBIDR_EL1\0"; break;case 14: t="?\0PMINTENSET_EL1\0PMINTENCLR_EL1\0"; break;} break;case 10: if(m==4) t="LORSA_EL1\0LOREA_EL1\0LORN_EL1\0LORC_EL1\0?\0?\0?\0LORID_EL1\0"; else if(m!=4&&j==0) { j=m; t="?\0?\0MAIR_EL1\0AMAIR_EL1\0"; }break;case 12: switch(m) {case 0: t="VBAR_EL1\0RVBAR_EL1\0RMR_EL1\0"; break;case 1: t="ISR_EL1\0DISR_EL1\0"; break;case 8: t="ICC_IAR0_EL1\0ICC_EOIR0_EL1\0ICC_HPPIR0_EL1\0ICC_BPR0_EL1\0ICC_AP0R0_EL1\0ICC_AP0R1_EL1\0ICC_AP0R2_EL1\0ICC_AP0R3_EL1\0"; break;case 9: t="ICC_AP1R0_EL1\0ICC_AP1R1_EL1\0ICC_AP1R2_EL1\0ICC_AP1R3_EL1\0"; break;case 11: t="?\0ICC_DIR_EL1\0?\0ICC_RPR_EL1\0?\0ICC_SGI1R_EL1\0ICC_ASGI1R_EL1\0ICC_SGI0R_EL1\0"; break;case 12: t="ICC_IAR1_EL1\0ICC_EOIR1_EL1\0ICC_HPPIR1_EL1\0ICC_BPR1_EL1\0ICC_CTLR_EL1\0ICC_SRE_EL1\0ICC_IGRPEN0_EL1\0ICC_IGRPEN1_EL1\0"; break;} break;case 13: if(m==0) t="?\0CONTEXTIDR_EL1\0?\0?\0TPIDR_EL1\0"; break;case 14: if(m==1) t="CNTKCTL_EL1\0"; break;} break;case 1: if(n==0&&m==0) t="CCSIDR_EL1\0CLIDR_EL1\0?\0?\0?\0?\0?\0AIDR_EL1\0"; break;case 2: if(n==0&&m==0) t="CSSELR_EL1\0"; break;case 3: switch(n) {case 0: if(m==0) t="?\0CTR_EL0\0?\0?\0?\0?\0?\0DCZID_EL0\0"; break;case 4: switch(m) {case 2: t="NZCV\0DAIF\0"; break;case 4: t="FPCR\0FPSR\0"; break;case 5: t="DSPSR_EL0\0DLR_EL0\0"; break;} break;case 9: switch(m) {case 12: t="PMCR_EL0\0PMCNTENSET_EL0\0PMCNTENCLR_EL0\0PMOVSCLR_EL0\0PMSWINC_EL0\0PMSELR_EL0\0PMCEID0_EL0\0PMCEID1_EL0\0"; break;case 13: t="PMCCNTR_EL0\0PMXEVTYPER_EL0\0PMXEVCNTR_EL0\0"; break;case 14: t="PMUSERENR_EL0\0?\0?\0PMOVSSET_EL0\0"; break;} break;
   839f4:	f0000060 	adrp	x0, 92000 <sd_init+0x470>
   839f8:	91122000 	add	x0, x0, #0x488
   839fc:	91322000 	add	x0, x0, #0xc88
char *disasm_str(char*s,int n) {if(!s)return "?";while(n){s++;if(!*s){s++;n--;}}return *s?s:"?";};
   83a00:	17fffed4 	b	83550 <disasm_str.part.0>
char *disasm_sysreg(uint8_t p,uint8_t k,uint8_t n,uint8_t m,uint8_t j) {char *t=NULL;switch(p){case 2: switch(k) {case 0: switch(n) {case 0: switch(m) {case 0: t="?\0?\0OSDTRRX_EL1\0"; break;case 2: t="MDCCINT_EL1\0?\0MDSCR_EL1\0"; break;case 3: t="?\0?\0OSDTRTX_EL1\0"; break;case 6: t="?\0?\0OSECCR_EL1\0"; break;default: { n=j; j=m; switch(n) {case 4: t="DBGBVR0_EL1\0DBGBVR1_EL1\0DBGBVR2_EL1\0DBGBVR3_EL1\0DBGBVR4_EL1\0DBGBVR5_EL1\0DBGBVR6_EL1\0DBGBVR7_EL1\0"; break;case 5: t="DBGBCR0_EL1\0DBGBCR1_EL1\0DBGBCR2_EL1\0DBGBCR3_EL1\0DBGBCR4_EL1\0DBGBCR5_EL1\0DBGBCR6_EL1\0DBGBCR7_EL1\0"; break;case 6: t="DBGWVR0_EL1\0DBGWVR1_EL1\0DBGWVR2_EL1\0DBGWVR3_EL1\0DBGWVR4_EL1\0DBGWVR5_EL1\0DBGWVR6_EL1\0DBGWVR7_EL1\0"; break;case 7: t="DBGWCR0_EL1\0DBGWCR1_EL1\0DBGWCR2_EL1\0DBGWCR3_EL1\0DBGWCR4_EL1\0DBGWCR5_EL1\0DBGWCR6_EL1\0DBGWCR7_EL1\0"; break;} break; }} break;case 1: if(m==0) t="MDRAR_EL1\0?\0?\0?\0OSLAR_EL1\0"; else if(j==4) { j=m; t="OSLSR_EL1\0?\0OSDLR_EL1\0DBGPRCR_EL1\0"; }break;case 7: if(j==6) { j=m; t="?\0?\0?\0?\0?\0?\0?\0?\0DBGCLAIMSET_EL1\0DBGCLAIMCLR_EL1\0?\0?\0?\0?\0DBGAUTHSTATUS_EL1\0"; }break;} break;case 3: if(n==0&&j==0) { j=m; t="?\0MDCCSR_EL0\0?\0?\0DBGDTR_EL0\0DBGDTRRX_EL0\0"; } break;case 4: if(n==0&&m==7) t="DBGVCR32_EL2\0"; break;} break;case 3: switch(k) {case 0: switch(n) {case 0: if(m==0) t="MIDR_EL1\0?\0?\0?\0?\0MPIDR_EL1\0REVIDR_EL1\0?\0ID_PFR0_EL1\0ID_PFR1_EL1\0ID_DFR0_EL1\0ID_AFR0_EL1\0ID_MMFR0_EL1\0ID_MMFR1_EL1\0ID_MMFR2_EL1\0ID_MMFR3_EL1\0ID_ISAR0_EL1\0ID_ISAR1_EL1\0ID_ISAR2_EL1\0ID_ISAR2_EL1\0ID_ISAR3_EL1\0ID_ISAR4_EL1\0ID_ISAR5_EL1\0ID_MMFR4_EL1\0?\0MVFR0_EL1\0MVFR1_EL1\0MVFR2_EL1\0?\0?\0?\0?\0?\0ID_AA64PFR0_EL1\0ID_AA64PFR1_EL1\0?\0?\0ID_AA64ZFR0_EL1\0?\0?\0?\0ID_AA64DFR0_EL1\0ID_AA64DFR1_EL1\0?\0?\0ID_AA64AFR0_EL1\0ID_AA64AFR1_EL1\0?\0?\0ID_AA64ISAR0_EL1\0ID_AA64ISAR1_EL1\0?\0?\0?\0?\0?\0?\0ID_AA64MMFR0_EL1\0ID_AA64MMFR1_EL1\0ID_AA64MMFR2_EL1\0"; break;case 1: switch(m) {case 0: t="SCTLR_EL1\0ACTLR_EL1\0CPACR_EL1\0"; break;case 2: t="ZCR_EL1\0"; break;} break;case 2: if(m==0) t="TTBR0_EL1\0TTBR1_EL1\0TCR_EL1\0"; break;case 4: switch(m) {case 0: t="SPSR_EL1\0ELR_EL1\0"; break;case 1: t="SP_EL0\0"; break;case 2: t="SPSel\0?\0CurrentEL\0PAN\0UAO\0"; break;case 6: t="ICC_PMR_EL1\0"; break;} break;case 5: switch(m) {case 1: t="AFSR0_EL1\0AFSR1_EL1\0"; break;case 2: t="ESR_EL1"; break;case 3: t="ERRIDR_EL1\0ERRSELR_EL1\0"; break;case 4: t="ERXFR_EL1\0ERXCTLR_EL1\0ERXSTATUS_EL1\0ERXADDR_EL1\0"; break;case 5: t="ERXMISC0_EL1\0ERXMISC1_EL1\0"; break;} break;case 6: if(m==0) t="FAR_EL1\0"; break;case 7: if(m==4) t="PAR_EL1\0"; break;case 9: switch(m) {case 9: t="PMSCR_EL1\0?\0PMSICR_EL1\0PMSIRR_EL1\0PMSFCR_EL1\0PMSEVFR_EL1\0PMSLATFR_EL1\0PMSIDR_EL1\0PMSIDR_EL1\0"; break;case 10: t="PMBLIMITR_EL1\0PMBPTR_EL1\0?\0PMBSR_EL1\0?\0?\0?\0PMBIDR_EL1\0"; break;case 14: t="?\0PMINTENSET_EL1\0PMINTENCLR_EL1\0"; break;} break;case 10: if(m==4) t="LORSA_EL1\0LOREA_EL1\0LORN_EL1\0LORC_EL1\0?\0?\0?\0LORID_EL1\0"; else if(m!=4&&j==0) { j=m; t="?\0?\0MAIR_EL1\0AMAIR_EL1\0"; }break;case 12: switch(m) {case 0: t="VBAR_EL1\0RVBAR_EL1\0RMR_EL1\0"; break;case 1: t="ISR_EL1\0DISR_EL1\0"; break;case 8: t="ICC_IAR0_EL1\0ICC_EOIR0_EL1\0ICC_HPPIR0_EL1\0ICC_BPR0_EL1\0ICC_AP0R0_EL1\0ICC_AP0R1_EL1\0ICC_AP0R2_EL1\0ICC_AP0R3_EL1\0"; break;case 9: t="ICC_AP1R0_EL1\0ICC_AP1R1_EL1\0ICC_AP1R2_EL1\0ICC_AP1R3_EL1\0"; break;case 11: t="?\0ICC_DIR_EL1\0?\0ICC_RPR_EL1\0?\0ICC_SGI1R_EL1\0ICC_ASGI1R_EL1\0ICC_SGI0R_EL1\0"; break;case 12: t="ICC_IAR1_EL1\0ICC_EOIR1_EL1\0ICC_HPPIR1_EL1\0ICC_BPR1_EL1\0ICC_CTLR_EL1\0ICC_SRE_EL1\0ICC_IGRPEN0_EL1\0ICC_IGRPEN1_EL1\0"; break;} break;case 13: if(m==0) t="?\0CONTEXTIDR_EL1\0?\0?\0TPIDR_EL1\0"; break;case 14: if(m==1) t="CNTKCTL_EL1\0"; break;} break;case 1: if(n==0&&m==0) t="CCSIDR_EL1\0CLIDR_EL1\0?\0?\0?\0?\0?\0AIDR_EL1\0"; break;case 2: if(n==0&&m==0) t="CSSELR_EL1\0"; break;case 3: switch(n) {case 0: if(m==0) t="?\0CTR_EL0\0?\0?\0?\0?\0?\0DCZID_EL0\0"; break;case 4: switch(m) {case 2: t="NZCV\0DAIF\0"; break;case 4: t="FPCR\0FPSR\0"; break;case 5: t="DSPSR_EL0\0DLR_EL0\0"; break;} break;case 9: switch(m) {case 12: t="PMCR_EL0\0PMCNTENSET_EL0\0PMCNTENCLR_EL0\0PMOVSCLR_EL0\0PMSWINC_EL0\0PMSELR_EL0\0PMCEID0_EL0\0PMCEID1_EL0\0"; break;case 13: t="PMCCNTR_EL0\0PMXEVTYPER_EL0\0PMXEVCNTR_EL0\0"; break;case 14: t="PMUSERENR_EL0\0?\0?\0PMOVSSET_EL0\0"; break;} break;
   83a04:	f0000060 	adrp	x0, 92000 <sd_init+0x470>
   83a08:	91122000 	add	x0, x0, #0x488
   83a0c:	913be000 	add	x0, x0, #0xef8
char *disasm_str(char*s,int n) {if(!s)return "?";while(n){s++;if(!*s){s++;n--;}}return *s?s:"?";};
   83a10:	17fffed0 	b	83550 <disasm_str.part.0>
case 13: if(m==0) t="?\0?\0TPIDR_EL0\0TPIDRRO_EL0\0"; break;case 14: switch(m) {case 0: t="CNTFRQ_EL0\0CNTPCT_EL0\0CNTVCT_EL0\0"; break;case 2: t="CNTP_TVAL_EL0\0CNTP_CTL_EL0\0CNTP_CVAL_EL0\0"; break;case 3: t="CNTV_TVAL_EL0\0CNTV_CTL_EL0\0CNTV_CVAL_EL0\0"; break;} break;} break;case 4: switch(n) {case 0: if(m==0) t="VPIDR_EL2\0?\0?\0?\0?\0VMPIDR_EL2\0"; break;case 1: switch(m) {case 0: t="SCTLR_EL2\0ACTLR_EL2\0"; break;case 1: t="HCR_EL2\0MDCR_EL2\0CPTR_EL2\0HSTR_EL2\0?\0?\0?\0HACR_EL2\0"; break;case 2: t="ZCR_EL2\0"; break;} break;case 2: switch(m) {case 0: t="TTBR0_EL2\0?\0TCR_EL2\0"; break;case 1: t="VTTBR0_EL2\0?\0VTCR_EL2\0"; break;} break;case 3: if(m==0) t="DACR32_EL2\0"; break;case 4: switch(m) {case 0: t="SPSR_EL2\0ELR_EL2\0"; break;case 1: t="SP_EL1\0"; break;case 3: t="SPSR_irq\0SPSR_abt\0SPSR_und\0SPSR_fiq\0"; break;} break;case 5: switch(m) {case 0: t="?\0IFSR32_EL2\0"; break;case 1: t="AFSR0_EL2\0AFSR1_EL2\0"; break;case 2: t="ESR_EL2\0?\0?\0VSESR_EL2\0"; break;case 3: t="FPEXC32_EL2\0"; break;} break;case 6: if(m==0) t="FAR_EL2\0?\0?\0?\0HPFAR_EL2\0"; break;case 9: if(m==9) t="PMSCR_EL2\0"; break;case 10: switch(m) {case 2: t="MAIR_EL2\0"; break;case 3: t="AMAIR_EL2\0"; break;} break;case 12: switch(m) {case 0: t="VBAR_EL2\0RVBAR_EL2\0RMR_EL2\0"; break;case 1: t="?\0VDISR_EL2\0"; break;case 8: t="ICH_AP0R0_EL2\0ICH_AP0R1_EL2\0ICH_AP0R2_EL2\0ICH_AP0R3_EL2\0"; break;case 9: t="ICH_AP1R0_EL2\0ICH_AP1R1_EL2\0ICH_AP1R2_EL2\0ICH_AP1R3_EL2\0ICC_SRE_EL2\0"; break;case 11: t="ICH_HCR_EL2\0ICH_VTR_EL2\0ICH_MISR_EL2\0ICH_EISR_EL2\0?\0ICH_ELRSR_EL2\0?\0ICH_VMCR_EL2\0"; break;case 12: t="ICH_LR0_EL2\0ICH_LR1_EL2\0ICH_LR2_EL2\0ICH_LR3_EL2\0ICH_LR4_EL2\0ICH_LR5_EL2\0ICH_LR6_EL2\0ICH_LR7_EL2\0"; break;case 13: t="ICH_LR8_EL2\0ICH_LR9_EL2\0ICH_LR10_EL2\0ICH_LR11_EL2\0ICH_LR12_EL2\0ICH_LR13_EL2\0ICH_LR14_EL2\0ICH_LR15_EL2\0"; break;} break;case 13: if(m==0) t="?\0CONTEXTIDR_EL2\0TPIDR_EL2\0"; break;case 14: switch(m) {case 0: t="?\0?\0?\0CNTVOFF_EL2\0"; break;case 1: t="CNTHCTL_EL2\0"; break;case 2: t="CNTHP_TVAL_EL2\0CNTHP_CTL_EL2\0CNTHP_CVAL_EL2\0"; break;case 3: t="CNTHV_TVAL_EL2\0CNTHV_CTL_EL2\0CNTHV_CVAL_EL2\0"; break;} break;} break;case 5: if(n==4&&m==0) t="SPSR_EL12\0ELR_EL12\0"; break;case 6: if(n==4&&m==1) t="SP_EL2\0"; break;case 7: if(n==14&&m==2) t="CNTPS_TVAL_EL1\0CNTPS_CTL_EL1\0CNTPS_CVAL_EL1\0"; break;} break;}return t?disasm_str(t,j):NULL;}
   83a14:	35ffde83 	cbnz	w3, 835e4 <disasm_sysreg+0x24>
   83a18:	f0000060 	adrp	x0, 92000 <sd_init+0x470>
   83a1c:	91122000 	add	x0, x0, #0x488
   83a20:	9100c000 	add	x0, x0, #0x30
char *disasm_str(char*s,int n) {if(!s)return "?";while(n){s++;if(!*s){s++;n--;}}return *s?s:"?";};
   83a24:	17fffecb 	b	83550 <disasm_str.part.0>
char *disasm_sysreg(uint8_t p,uint8_t k,uint8_t n,uint8_t m,uint8_t j) {char *t=NULL;switch(p){case 2: switch(k) {case 0: switch(n) {case 0: switch(m) {case 0: t="?\0?\0OSDTRRX_EL1\0"; break;case 2: t="MDCCINT_EL1\0?\0MDSCR_EL1\0"; break;case 3: t="?\0?\0OSDTRTX_EL1\0"; break;case 6: t="?\0?\0OSECCR_EL1\0"; break;default: { n=j; j=m; switch(n) {case 4: t="DBGBVR0_EL1\0DBGBVR1_EL1\0DBGBVR2_EL1\0DBGBVR3_EL1\0DBGBVR4_EL1\0DBGBVR5_EL1\0DBGBVR6_EL1\0DBGBVR7_EL1\0"; break;case 5: t="DBGBCR0_EL1\0DBGBCR1_EL1\0DBGBCR2_EL1\0DBGBCR3_EL1\0DBGBCR4_EL1\0DBGBCR5_EL1\0DBGBCR6_EL1\0DBGBCR7_EL1\0"; break;case 6: t="DBGWVR0_EL1\0DBGWVR1_EL1\0DBGWVR2_EL1\0DBGWVR3_EL1\0DBGWVR4_EL1\0DBGWVR5_EL1\0DBGWVR6_EL1\0DBGWVR7_EL1\0"; break;case 7: t="DBGWCR0_EL1\0DBGWCR1_EL1\0DBGWCR2_EL1\0DBGWCR3_EL1\0DBGWCR4_EL1\0DBGWCR5_EL1\0DBGWCR6_EL1\0DBGWCR7_EL1\0"; break;} break; }} break;case 1: if(m==0) t="MDRAR_EL1\0?\0?\0?\0OSLAR_EL1\0"; else if(j==4) { j=m; t="OSLSR_EL1\0?\0OSDLR_EL1\0DBGPRCR_EL1\0"; }break;case 7: if(j==6) { j=m; t="?\0?\0?\0?\0?\0?\0?\0?\0DBGCLAIMSET_EL1\0DBGCLAIMCLR_EL1\0?\0?\0?\0?\0DBGAUTHSTATUS_EL1\0"; }break;} break;case 3: if(n==0&&j==0) { j=m; t="?\0MDCCSR_EL0\0?\0?\0DBGDTR_EL0\0DBGDTRRX_EL0\0"; } break;case 4: if(n==0&&m==7) t="DBGVCR32_EL2\0"; break;} break;case 3: switch(k) {case 0: switch(n) {case 0: if(m==0) t="MIDR_EL1\0?\0?\0?\0?\0MPIDR_EL1\0REVIDR_EL1\0?\0ID_PFR0_EL1\0ID_PFR1_EL1\0ID_DFR0_EL1\0ID_AFR0_EL1\0ID_MMFR0_EL1\0ID_MMFR1_EL1\0ID_MMFR2_EL1\0ID_MMFR3_EL1\0ID_ISAR0_EL1\0ID_ISAR1_EL1\0ID_ISAR2_EL1\0ID_ISAR2_EL1\0ID_ISAR3_EL1\0ID_ISAR4_EL1\0ID_ISAR5_EL1\0ID_MMFR4_EL1\0?\0MVFR0_EL1\0MVFR1_EL1\0MVFR2_EL1\0?\0?\0?\0?\0?\0ID_AA64PFR0_EL1\0ID_AA64PFR1_EL1\0?\0?\0ID_AA64ZFR0_EL1\0?\0?\0?\0ID_AA64DFR0_EL1\0ID_AA64DFR1_EL1\0?\0?\0ID_AA64AFR0_EL1\0ID_AA64AFR1_EL1\0?\0?\0ID_AA64ISAR0_EL1\0ID_AA64ISAR1_EL1\0?\0?\0?\0?\0?\0?\0ID_AA64MMFR0_EL1\0ID_AA64MMFR1_EL1\0ID_AA64MMFR2_EL1\0"; break;case 1: switch(m) {case 0: t="SCTLR_EL1\0ACTLR_EL1\0CPACR_EL1\0"; break;case 2: t="ZCR_EL1\0"; break;} break;case 2: if(m==0) t="TTBR0_EL1\0TTBR1_EL1\0TCR_EL1\0"; break;case 4: switch(m) {case 0: t="SPSR_EL1\0ELR_EL1\0"; break;case 1: t="SP_EL0\0"; break;case 2: t="SPSel\0?\0CurrentEL\0PAN\0UAO\0"; break;case 6: t="ICC_PMR_EL1\0"; break;} break;case 5: switch(m) {case 1: t="AFSR0_EL1\0AFSR1_EL1\0"; break;case 2: t="ESR_EL1"; break;case 3: t="ERRIDR_EL1\0ERRSELR_EL1\0"; break;case 4: t="ERXFR_EL1\0ERXCTLR_EL1\0ERXSTATUS_EL1\0ERXADDR_EL1\0"; break;case 5: t="ERXMISC0_EL1\0ERXMISC1_EL1\0"; break;} break;case 6: if(m==0) t="FAR_EL1\0"; break;case 7: if(m==4) t="PAR_EL1\0"; break;case 9: switch(m) {case 9: t="PMSCR_EL1\0?\0PMSICR_EL1\0PMSIRR_EL1\0PMSFCR_EL1\0PMSEVFR_EL1\0PMSLATFR_EL1\0PMSIDR_EL1\0PMSIDR_EL1\0"; break;case 10: t="PMBLIMITR_EL1\0PMBPTR_EL1\0?\0PMBSR_EL1\0?\0?\0?\0PMBIDR_EL1\0"; break;case 14: t="?\0PMINTENSET_EL1\0PMINTENCLR_EL1\0"; break;} break;case 10: if(m==4) t="LORSA_EL1\0LOREA_EL1\0LORN_EL1\0LORC_EL1\0?\0?\0?\0LORID_EL1\0"; else if(m!=4&&j==0) { j=m; t="?\0?\0MAIR_EL1\0AMAIR_EL1\0"; }break;case 12: switch(m) {case 0: t="VBAR_EL1\0RVBAR_EL1\0RMR_EL1\0"; break;case 1: t="ISR_EL1\0DISR_EL1\0"; break;case 8: t="ICC_IAR0_EL1\0ICC_EOIR0_EL1\0ICC_HPPIR0_EL1\0ICC_BPR0_EL1\0ICC_AP0R0_EL1\0ICC_AP0R1_EL1\0ICC_AP0R2_EL1\0ICC_AP0R3_EL1\0"; break;case 9: t="ICC_AP1R0_EL1\0ICC_AP1R1_EL1\0ICC_AP1R2_EL1\0ICC_AP1R3_EL1\0"; break;case 11: t="?\0ICC_DIR_EL1\0?\0ICC_RPR_EL1\0?\0ICC_SGI1R_EL1\0ICC_ASGI1R_EL1\0ICC_SGI0R_EL1\0"; break;case 12: t="ICC_IAR1_EL1\0ICC_EOIR1_EL1\0ICC_HPPIR1_EL1\0ICC_BPR1_EL1\0ICC_CTLR_EL1\0ICC_SRE_EL1\0ICC_IGRPEN0_EL1\0ICC_IGRPEN1_EL1\0"; break;} break;case 13: if(m==0) t="?\0CONTEXTIDR_EL1\0?\0?\0TPIDR_EL1\0"; break;case 14: if(m==1) t="CNTKCTL_EL1\0"; break;} break;case 1: if(n==0&&m==0) t="CCSIDR_EL1\0CLIDR_EL1\0?\0?\0?\0?\0?\0AIDR_EL1\0"; break;case 2: if(n==0&&m==0) t="CSSELR_EL1\0"; break;case 3: switch(n) {case 0: if(m==0) t="?\0CTR_EL0\0?\0?\0?\0?\0?\0DCZID_EL0\0"; break;case 4: switch(m) {case 2: t="NZCV\0DAIF\0"; break;case 4: t="FPCR\0FPSR\0"; break;case 5: t="DSPSR_EL0\0DLR_EL0\0"; break;} break;case 9: switch(m) {case 12: t="PMCR_EL0\0PMCNTENSET_EL0\0PMCNTENCLR_EL0\0PMOVSCLR_EL0\0PMSWINC_EL0\0PMSELR_EL0\0PMCEID0_EL0\0PMCEID1_EL0\0"; break;case 13: t="PMCCNTR_EL0\0PMXEVTYPER_EL0\0PMXEVCNTR_EL0\0"; break;case 14: t="PMUSERENR_EL0\0?\0?\0PMOVSSET_EL0\0"; break;} break;
   83a28:	35ffdde3 	cbnz	w3, 835e4 <disasm_sysreg+0x24>
   83a2c:	f0000060 	adrp	x0, 92000 <sd_init+0x470>
   83a30:	91122000 	add	x0, x0, #0x488
   83a34:	911fe000 	add	x0, x0, #0x7f8
char *disasm_str(char*s,int n) {if(!s)return "?";while(n){s++;if(!*s){s++;n--;}}return *s?s:"?";};
   83a38:	17fffec6 	b	83550 <disasm_str.part.0>
char *disasm_sysreg(uint8_t p,uint8_t k,uint8_t n,uint8_t m,uint8_t j) {char *t=NULL;switch(p){case 2: switch(k) {case 0: switch(n) {case 0: switch(m) {case 0: t="?\0?\0OSDTRRX_EL1\0"; break;case 2: t="MDCCINT_EL1\0?\0MDSCR_EL1\0"; break;case 3: t="?\0?\0OSDTRTX_EL1\0"; break;case 6: t="?\0?\0OSECCR_EL1\0"; break;default: { n=j; j=m; switch(n) {case 4: t="DBGBVR0_EL1\0DBGBVR1_EL1\0DBGBVR2_EL1\0DBGBVR3_EL1\0DBGBVR4_EL1\0DBGBVR5_EL1\0DBGBVR6_EL1\0DBGBVR7_EL1\0"; break;case 5: t="DBGBCR0_EL1\0DBGBCR1_EL1\0DBGBCR2_EL1\0DBGBCR3_EL1\0DBGBCR4_EL1\0DBGBCR5_EL1\0DBGBCR6_EL1\0DBGBCR7_EL1\0"; break;case 6: t="DBGWVR0_EL1\0DBGWVR1_EL1\0DBGWVR2_EL1\0DBGWVR3_EL1\0DBGWVR4_EL1\0DBGWVR5_EL1\0DBGWVR6_EL1\0DBGWVR7_EL1\0"; break;case 7: t="DBGWCR0_EL1\0DBGWCR1_EL1\0DBGWCR2_EL1\0DBGWCR3_EL1\0DBGWCR4_EL1\0DBGWCR5_EL1\0DBGWCR6_EL1\0DBGWCR7_EL1\0"; break;} break; }} break;case 1: if(m==0) t="MDRAR_EL1\0?\0?\0?\0OSLAR_EL1\0"; else if(j==4) { j=m; t="OSLSR_EL1\0?\0OSDLR_EL1\0DBGPRCR_EL1\0"; }break;case 7: if(j==6) { j=m; t="?\0?\0?\0?\0?\0?\0?\0?\0DBGCLAIMSET_EL1\0DBGCLAIMCLR_EL1\0?\0?\0?\0?\0DBGAUTHSTATUS_EL1\0"; }break;} break;case 3: if(n==0&&j==0) { j=m; t="?\0MDCCSR_EL0\0?\0?\0DBGDTR_EL0\0DBGDTRRX_EL0\0"; } break;case 4: if(n==0&&m==7) t="DBGVCR32_EL2\0"; break;} break;case 3: switch(k) {case 0: switch(n) {case 0: if(m==0) t="MIDR_EL1\0?\0?\0?\0?\0MPIDR_EL1\0REVIDR_EL1\0?\0ID_PFR0_EL1\0ID_PFR1_EL1\0ID_DFR0_EL1\0ID_AFR0_EL1\0ID_MMFR0_EL1\0ID_MMFR1_EL1\0ID_MMFR2_EL1\0ID_MMFR3_EL1\0ID_ISAR0_EL1\0ID_ISAR1_EL1\0ID_ISAR2_EL1\0ID_ISAR2_EL1\0ID_ISAR3_EL1\0ID_ISAR4_EL1\0ID_ISAR5_EL1\0ID_MMFR4_EL1\0?\0MVFR0_EL1\0MVFR1_EL1\0MVFR2_EL1\0?\0?\0?\0?\0?\0ID_AA64PFR0_EL1\0ID_AA64PFR1_EL1\0?\0?\0ID_AA64ZFR0_EL1\0?\0?\0?\0ID_AA64DFR0_EL1\0ID_AA64DFR1_EL1\0?\0?\0ID_AA64AFR0_EL1\0ID_AA64AFR1_EL1\0?\0?\0ID_AA64ISAR0_EL1\0ID_AA64ISAR1_EL1\0?\0?\0?\0?\0?\0?\0ID_AA64MMFR0_EL1\0ID_AA64MMFR1_EL1\0ID_AA64MMFR2_EL1\0"; break;case 1: switch(m) {case 0: t="SCTLR_EL1\0ACTLR_EL1\0CPACR_EL1\0"; break;case 2: t="ZCR_EL1\0"; break;} break;case 2: if(m==0) t="TTBR0_EL1\0TTBR1_EL1\0TCR_EL1\0"; break;case 4: switch(m) {case 0: t="SPSR_EL1\0ELR_EL1\0"; break;case 1: t="SP_EL0\0"; break;case 2: t="SPSel\0?\0CurrentEL\0PAN\0UAO\0"; break;case 6: t="ICC_PMR_EL1\0"; break;} break;case 5: switch(m) {case 1: t="AFSR0_EL1\0AFSR1_EL1\0"; break;case 2: t="ESR_EL1"; break;case 3: t="ERRIDR_EL1\0ERRSELR_EL1\0"; break;case 4: t="ERXFR_EL1\0ERXCTLR_EL1\0ERXSTATUS_EL1\0ERXADDR_EL1\0"; break;case 5: t="ERXMISC0_EL1\0ERXMISC1_EL1\0"; break;} break;case 6: if(m==0) t="FAR_EL1\0"; break;case 7: if(m==4) t="PAR_EL1\0"; break;case 9: switch(m) {case 9: t="PMSCR_EL1\0?\0PMSICR_EL1\0PMSIRR_EL1\0PMSFCR_EL1\0PMSEVFR_EL1\0PMSLATFR_EL1\0PMSIDR_EL1\0PMSIDR_EL1\0"; break;case 10: t="PMBLIMITR_EL1\0PMBPTR_EL1\0?\0PMBSR_EL1\0?\0?\0?\0PMBIDR_EL1\0"; break;case 14: t="?\0PMINTENSET_EL1\0PMINTENCLR_EL1\0"; break;} break;case 10: if(m==4) t="LORSA_EL1\0LOREA_EL1\0LORN_EL1\0LORC_EL1\0?\0?\0?\0LORID_EL1\0"; else if(m!=4&&j==0) { j=m; t="?\0?\0MAIR_EL1\0AMAIR_EL1\0"; }break;case 12: switch(m) {case 0: t="VBAR_EL1\0RVBAR_EL1\0RMR_EL1\0"; break;case 1: t="ISR_EL1\0DISR_EL1\0"; break;case 8: t="ICC_IAR0_EL1\0ICC_EOIR0_EL1\0ICC_HPPIR0_EL1\0ICC_BPR0_EL1\0ICC_AP0R0_EL1\0ICC_AP0R1_EL1\0ICC_AP0R2_EL1\0ICC_AP0R3_EL1\0"; break;case 9: t="ICC_AP1R0_EL1\0ICC_AP1R1_EL1\0ICC_AP1R2_EL1\0ICC_AP1R3_EL1\0"; break;case 11: t="?\0ICC_DIR_EL1\0?\0ICC_RPR_EL1\0?\0ICC_SGI1R_EL1\0ICC_ASGI1R_EL1\0ICC_SGI0R_EL1\0"; break;case 12: t="ICC_IAR1_EL1\0ICC_EOIR1_EL1\0ICC_HPPIR1_EL1\0ICC_BPR1_EL1\0ICC_CTLR_EL1\0ICC_SRE_EL1\0ICC_IGRPEN0_EL1\0ICC_IGRPEN1_EL1\0"; break;} break;case 13: if(m==0) t="?\0CONTEXTIDR_EL1\0?\0?\0TPIDR_EL1\0"; break;case 14: if(m==1) t="CNTKCTL_EL1\0"; break;} break;case 1: if(n==0&&m==0) t="CCSIDR_EL1\0CLIDR_EL1\0?\0?\0?\0?\0?\0AIDR_EL1\0"; break;case 2: if(n==0&&m==0) t="CSSELR_EL1\0"; break;case 3: switch(n) {case 0: if(m==0) t="?\0CTR_EL0\0?\0?\0?\0?\0?\0DCZID_EL0\0"; break;case 4: switch(m) {case 2: t="NZCV\0DAIF\0"; break;case 4: t="FPCR\0FPSR\0"; break;case 5: t="DSPSR_EL0\0DLR_EL0\0"; break;} break;case 9: switch(m) {case 12: t="PMCR_EL0\0PMCNTENSET_EL0\0PMCNTENCLR_EL0\0PMOVSCLR_EL0\0PMSWINC_EL0\0PMSELR_EL0\0PMCEID0_EL0\0PMCEID1_EL0\0"; break;case 13: t="PMCCNTR_EL0\0PMXEVTYPER_EL0\0PMXEVCNTR_EL0\0"; break;case 14: t="PMUSERENR_EL0\0?\0?\0PMOVSSET_EL0\0"; break;} break;
   83a3c:	7100347f 	cmp	w3, #0xd
   83a40:	54001720 	b.eq	83d24 <disasm_sysreg+0x764>  // b.none
   83a44:	7100387f 	cmp	w3, #0xe
   83a48:	540014c0 	b.eq	83ce0 <disasm_sysreg+0x720>  // b.none
   83a4c:	7100307f 	cmp	w3, #0xc
   83a50:	54ffdca1 	b.ne	835e4 <disasm_sysreg+0x24>  // b.any
   83a54:	f0000060 	adrp	x0, 92000 <sd_init+0x470>
   83a58:	91122000 	add	x0, x0, #0x488
   83a5c:	911b2000 	add	x0, x0, #0x6c8
char *disasm_str(char*s,int n) {if(!s)return "?";while(n){s++;if(!*s){s++;n--;}}return *s?s:"?";};
   83a60:	17fffebc 	b	83550 <disasm_str.part.0>
char *disasm_sysreg(uint8_t p,uint8_t k,uint8_t n,uint8_t m,uint8_t j) {char *t=NULL;switch(p){case 2: switch(k) {case 0: switch(n) {case 0: switch(m) {case 0: t="?\0?\0OSDTRRX_EL1\0"; break;case 2: t="MDCCINT_EL1\0?\0MDSCR_EL1\0"; break;case 3: t="?\0?\0OSDTRTX_EL1\0"; break;case 6: t="?\0?\0OSECCR_EL1\0"; break;default: { n=j; j=m; switch(n) {case 4: t="DBGBVR0_EL1\0DBGBVR1_EL1\0DBGBVR2_EL1\0DBGBVR3_EL1\0DBGBVR4_EL1\0DBGBVR5_EL1\0DBGBVR6_EL1\0DBGBVR7_EL1\0"; break;case 5: t="DBGBCR0_EL1\0DBGBCR1_EL1\0DBGBCR2_EL1\0DBGBCR3_EL1\0DBGBCR4_EL1\0DBGBCR5_EL1\0DBGBCR6_EL1\0DBGBCR7_EL1\0"; break;case 6: t="DBGWVR0_EL1\0DBGWVR1_EL1\0DBGWVR2_EL1\0DBGWVR3_EL1\0DBGWVR4_EL1\0DBGWVR5_EL1\0DBGWVR6_EL1\0DBGWVR7_EL1\0"; break;case 7: t="DBGWCR0_EL1\0DBGWCR1_EL1\0DBGWCR2_EL1\0DBGWCR3_EL1\0DBGWCR4_EL1\0DBGWCR5_EL1\0DBGWCR6_EL1\0DBGWCR7_EL1\0"; break;} break; }} break;case 1: if(m==0) t="MDRAR_EL1\0?\0?\0?\0OSLAR_EL1\0"; else if(j==4) { j=m; t="OSLSR_EL1\0?\0OSDLR_EL1\0DBGPRCR_EL1\0"; }break;case 7: if(j==6) { j=m; t="?\0?\0?\0?\0?\0?\0?\0?\0DBGCLAIMSET_EL1\0DBGCLAIMCLR_EL1\0?\0?\0?\0?\0DBGAUTHSTATUS_EL1\0"; }break;} break;case 3: if(n==0&&j==0) { j=m; t="?\0MDCCSR_EL0\0?\0?\0DBGDTR_EL0\0DBGDTRRX_EL0\0"; } break;case 4: if(n==0&&m==7) t="DBGVCR32_EL2\0"; break;} break;case 3: switch(k) {case 0: switch(n) {case 0: if(m==0) t="MIDR_EL1\0?\0?\0?\0?\0MPIDR_EL1\0REVIDR_EL1\0?\0ID_PFR0_EL1\0ID_PFR1_EL1\0ID_DFR0_EL1\0ID_AFR0_EL1\0ID_MMFR0_EL1\0ID_MMFR1_EL1\0ID_MMFR2_EL1\0ID_MMFR3_EL1\0ID_ISAR0_EL1\0ID_ISAR1_EL1\0ID_ISAR2_EL1\0ID_ISAR2_EL1\0ID_ISAR3_EL1\0ID_ISAR4_EL1\0ID_ISAR5_EL1\0ID_MMFR4_EL1\0?\0MVFR0_EL1\0MVFR1_EL1\0MVFR2_EL1\0?\0?\0?\0?\0?\0ID_AA64PFR0_EL1\0ID_AA64PFR1_EL1\0?\0?\0ID_AA64ZFR0_EL1\0?\0?\0?\0ID_AA64DFR0_EL1\0ID_AA64DFR1_EL1\0?\0?\0ID_AA64AFR0_EL1\0ID_AA64AFR1_EL1\0?\0?\0ID_AA64ISAR0_EL1\0ID_AA64ISAR1_EL1\0?\0?\0?\0?\0?\0?\0ID_AA64MMFR0_EL1\0ID_AA64MMFR1_EL1\0ID_AA64MMFR2_EL1\0"; break;case 1: switch(m) {case 0: t="SCTLR_EL1\0ACTLR_EL1\0CPACR_EL1\0"; break;case 2: t="ZCR_EL1\0"; break;} break;case 2: if(m==0) t="TTBR0_EL1\0TTBR1_EL1\0TCR_EL1\0"; break;case 4: switch(m) {case 0: t="SPSR_EL1\0ELR_EL1\0"; break;case 1: t="SP_EL0\0"; break;case 2: t="SPSel\0?\0CurrentEL\0PAN\0UAO\0"; break;case 6: t="ICC_PMR_EL1\0"; break;} break;case 5: switch(m) {case 1: t="AFSR0_EL1\0AFSR1_EL1\0"; break;case 2: t="ESR_EL1"; break;case 3: t="ERRIDR_EL1\0ERRSELR_EL1\0"; break;case 4: t="ERXFR_EL1\0ERXCTLR_EL1\0ERXSTATUS_EL1\0ERXADDR_EL1\0"; break;case 5: t="ERXMISC0_EL1\0ERXMISC1_EL1\0"; break;} break;case 6: if(m==0) t="FAR_EL1\0"; break;case 7: if(m==4) t="PAR_EL1\0"; break;case 9: switch(m) {case 9: t="PMSCR_EL1\0?\0PMSICR_EL1\0PMSIRR_EL1\0PMSFCR_EL1\0PMSEVFR_EL1\0PMSLATFR_EL1\0PMSIDR_EL1\0PMSIDR_EL1\0"; break;case 10: t="PMBLIMITR_EL1\0PMBPTR_EL1\0?\0PMBSR_EL1\0?\0?\0?\0PMBIDR_EL1\0"; break;case 14: t="?\0PMINTENSET_EL1\0PMINTENCLR_EL1\0"; break;} break;case 10: if(m==4) t="LORSA_EL1\0LOREA_EL1\0LORN_EL1\0LORC_EL1\0?\0?\0?\0LORID_EL1\0"; else if(m!=4&&j==0) { j=m; t="?\0?\0MAIR_EL1\0AMAIR_EL1\0"; }break;case 12: switch(m) {case 0: t="VBAR_EL1\0RVBAR_EL1\0RMR_EL1\0"; break;case 1: t="ISR_EL1\0DISR_EL1\0"; break;case 8: t="ICC_IAR0_EL1\0ICC_EOIR0_EL1\0ICC_HPPIR0_EL1\0ICC_BPR0_EL1\0ICC_AP0R0_EL1\0ICC_AP0R1_EL1\0ICC_AP0R2_EL1\0ICC_AP0R3_EL1\0"; break;case 9: t="ICC_AP1R0_EL1\0ICC_AP1R1_EL1\0ICC_AP1R2_EL1\0ICC_AP1R3_EL1\0"; break;case 11: t="?\0ICC_DIR_EL1\0?\0ICC_RPR_EL1\0?\0ICC_SGI1R_EL1\0ICC_ASGI1R_EL1\0ICC_SGI0R_EL1\0"; break;case 12: t="ICC_IAR1_EL1\0ICC_EOIR1_EL1\0ICC_HPPIR1_EL1\0ICC_BPR1_EL1\0ICC_CTLR_EL1\0ICC_SRE_EL1\0ICC_IGRPEN0_EL1\0ICC_IGRPEN1_EL1\0"; break;} break;case 13: if(m==0) t="?\0CONTEXTIDR_EL1\0?\0?\0TPIDR_EL1\0"; break;case 14: if(m==1) t="CNTKCTL_EL1\0"; break;} break;case 1: if(n==0&&m==0) t="CCSIDR_EL1\0CLIDR_EL1\0?\0?\0?\0?\0?\0AIDR_EL1\0"; break;case 2: if(n==0&&m==0) t="CSSELR_EL1\0"; break;case 3: switch(n) {case 0: if(m==0) t="?\0CTR_EL0\0?\0?\0?\0?\0?\0DCZID_EL0\0"; break;case 4: switch(m) {case 2: t="NZCV\0DAIF\0"; break;case 4: t="FPCR\0FPSR\0"; break;case 5: t="DSPSR_EL0\0DLR_EL0\0"; break;} break;case 9: switch(m) {case 12: t="PMCR_EL0\0PMCNTENSET_EL0\0PMCNTENCLR_EL0\0PMOVSCLR_EL0\0PMSWINC_EL0\0PMSELR_EL0\0PMCEID0_EL0\0PMCEID1_EL0\0"; break;case 13: t="PMCCNTR_EL0\0PMXEVTYPER_EL0\0PMXEVCNTR_EL0\0"; break;case 14: t="PMUSERENR_EL0\0?\0?\0PMOVSSET_EL0\0"; break;} break;
   83a64:	f0000060 	adrp	x0, 92000 <sd_init+0x470>
   83a68:	91122000 	add	x0, x0, #0x488
   83a6c:	91354000 	add	x0, x0, #0xd50
char *disasm_str(char*s,int n) {if(!s)return "?";while(n){s++;if(!*s){s++;n--;}}return *s?s:"?";};
   83a70:	17fffeb8 	b	83550 <disasm_str.part.0>
char *disasm_sysreg(uint8_t p,uint8_t k,uint8_t n,uint8_t m,uint8_t j) {char *t=NULL;switch(p){case 2: switch(k) {case 0: switch(n) {case 0: switch(m) {case 0: t="?\0?\0OSDTRRX_EL1\0"; break;case 2: t="MDCCINT_EL1\0?\0MDSCR_EL1\0"; break;case 3: t="?\0?\0OSDTRTX_EL1\0"; break;case 6: t="?\0?\0OSECCR_EL1\0"; break;default: { n=j; j=m; switch(n) {case 4: t="DBGBVR0_EL1\0DBGBVR1_EL1\0DBGBVR2_EL1\0DBGBVR3_EL1\0DBGBVR4_EL1\0DBGBVR5_EL1\0DBGBVR6_EL1\0DBGBVR7_EL1\0"; break;case 5: t="DBGBCR0_EL1\0DBGBCR1_EL1\0DBGBCR2_EL1\0DBGBCR3_EL1\0DBGBCR4_EL1\0DBGBCR5_EL1\0DBGBCR6_EL1\0DBGBCR7_EL1\0"; break;case 6: t="DBGWVR0_EL1\0DBGWVR1_EL1\0DBGWVR2_EL1\0DBGWVR3_EL1\0DBGWVR4_EL1\0DBGWVR5_EL1\0DBGWVR6_EL1\0DBGWVR7_EL1\0"; break;case 7: t="DBGWCR0_EL1\0DBGWCR1_EL1\0DBGWCR2_EL1\0DBGWCR3_EL1\0DBGWCR4_EL1\0DBGWCR5_EL1\0DBGWCR6_EL1\0DBGWCR7_EL1\0"; break;} break; }} break;case 1: if(m==0) t="MDRAR_EL1\0?\0?\0?\0OSLAR_EL1\0"; else if(j==4) { j=m; t="OSLSR_EL1\0?\0OSDLR_EL1\0DBGPRCR_EL1\0"; }break;case 7: if(j==6) { j=m; t="?\0?\0?\0?\0?\0?\0?\0?\0DBGCLAIMSET_EL1\0DBGCLAIMCLR_EL1\0?\0?\0?\0?\0DBGAUTHSTATUS_EL1\0"; }break;} break;case 3: if(n==0&&j==0) { j=m; t="?\0MDCCSR_EL0\0?\0?\0DBGDTR_EL0\0DBGDTRRX_EL0\0"; } break;case 4: if(n==0&&m==7) t="DBGVCR32_EL2\0"; break;} break;case 3: switch(k) {case 0: switch(n) {case 0: if(m==0) t="MIDR_EL1\0?\0?\0?\0?\0MPIDR_EL1\0REVIDR_EL1\0?\0ID_PFR0_EL1\0ID_PFR1_EL1\0ID_DFR0_EL1\0ID_AFR0_EL1\0ID_MMFR0_EL1\0ID_MMFR1_EL1\0ID_MMFR2_EL1\0ID_MMFR3_EL1\0ID_ISAR0_EL1\0ID_ISAR1_EL1\0ID_ISAR2_EL1\0ID_ISAR2_EL1\0ID_ISAR3_EL1\0ID_ISAR4_EL1\0ID_ISAR5_EL1\0ID_MMFR4_EL1\0?\0MVFR0_EL1\0MVFR1_EL1\0MVFR2_EL1\0?\0?\0?\0?\0?\0ID_AA64PFR0_EL1\0ID_AA64PFR1_EL1\0?\0?\0ID_AA64ZFR0_EL1\0?\0?\0?\0ID_AA64DFR0_EL1\0ID_AA64DFR1_EL1\0?\0?\0ID_AA64AFR0_EL1\0ID_AA64AFR1_EL1\0?\0?\0ID_AA64ISAR0_EL1\0ID_AA64ISAR1_EL1\0?\0?\0?\0?\0?\0?\0ID_AA64MMFR0_EL1\0ID_AA64MMFR1_EL1\0ID_AA64MMFR2_EL1\0"; break;case 1: switch(m) {case 0: t="SCTLR_EL1\0ACTLR_EL1\0CPACR_EL1\0"; break;case 2: t="ZCR_EL1\0"; break;} break;case 2: if(m==0) t="TTBR0_EL1\0TTBR1_EL1\0TCR_EL1\0"; break;case 4: switch(m) {case 0: t="SPSR_EL1\0ELR_EL1\0"; break;case 1: t="SP_EL0\0"; break;case 2: t="SPSel\0?\0CurrentEL\0PAN\0UAO\0"; break;case 6: t="ICC_PMR_EL1\0"; break;} break;case 5: switch(m) {case 1: t="AFSR0_EL1\0AFSR1_EL1\0"; break;case 2: t="ESR_EL1"; break;case 3: t="ERRIDR_EL1\0ERRSELR_EL1\0"; break;case 4: t="ERXFR_EL1\0ERXCTLR_EL1\0ERXSTATUS_EL1\0ERXADDR_EL1\0"; break;case 5: t="ERXMISC0_EL1\0ERXMISC1_EL1\0"; break;} break;case 6: if(m==0) t="FAR_EL1\0"; break;case 7: if(m==4) t="PAR_EL1\0"; break;case 9: switch(m) {case 9: t="PMSCR_EL1\0?\0PMSICR_EL1\0PMSIRR_EL1\0PMSFCR_EL1\0PMSEVFR_EL1\0PMSLATFR_EL1\0PMSIDR_EL1\0PMSIDR_EL1\0"; break;case 10: t="PMBLIMITR_EL1\0PMBPTR_EL1\0?\0PMBSR_EL1\0?\0?\0?\0PMBIDR_EL1\0"; break;case 14: t="?\0PMINTENSET_EL1\0PMINTENCLR_EL1\0"; break;} break;case 10: if(m==4) t="LORSA_EL1\0LOREA_EL1\0LORN_EL1\0LORC_EL1\0?\0?\0?\0LORID_EL1\0"; else if(m!=4&&j==0) { j=m; t="?\0?\0MAIR_EL1\0AMAIR_EL1\0"; }break;case 12: switch(m) {case 0: t="VBAR_EL1\0RVBAR_EL1\0RMR_EL1\0"; break;case 1: t="ISR_EL1\0DISR_EL1\0"; break;case 8: t="ICC_IAR0_EL1\0ICC_EOIR0_EL1\0ICC_HPPIR0_EL1\0ICC_BPR0_EL1\0ICC_AP0R0_EL1\0ICC_AP0R1_EL1\0ICC_AP0R2_EL1\0ICC_AP0R3_EL1\0"; break;case 9: t="ICC_AP1R0_EL1\0ICC_AP1R1_EL1\0ICC_AP1R2_EL1\0ICC_AP1R3_EL1\0"; break;case 11: t="?\0ICC_DIR_EL1\0?\0ICC_RPR_EL1\0?\0ICC_SGI1R_EL1\0ICC_ASGI1R_EL1\0ICC_SGI0R_EL1\0"; break;case 12: t="ICC_IAR1_EL1\0ICC_EOIR1_EL1\0ICC_HPPIR1_EL1\0ICC_BPR1_EL1\0ICC_CTLR_EL1\0ICC_SRE_EL1\0ICC_IGRPEN0_EL1\0ICC_IGRPEN1_EL1\0"; break;} break;case 13: if(m==0) t="?\0CONTEXTIDR_EL1\0?\0?\0TPIDR_EL1\0"; break;case 14: if(m==1) t="CNTKCTL_EL1\0"; break;} break;case 1: if(n==0&&m==0) t="CCSIDR_EL1\0CLIDR_EL1\0?\0?\0?\0?\0?\0AIDR_EL1\0"; break;case 2: if(n==0&&m==0) t="CSSELR_EL1\0"; break;case 3: switch(n) {case 0: if(m==0) t="?\0CTR_EL0\0?\0?\0?\0?\0?\0DCZID_EL0\0"; break;case 4: switch(m) {case 2: t="NZCV\0DAIF\0"; break;case 4: t="FPCR\0FPSR\0"; break;case 5: t="DSPSR_EL0\0DLR_EL0\0"; break;} break;case 9: switch(m) {case 12: t="PMCR_EL0\0PMCNTENSET_EL0\0PMCNTENCLR_EL0\0PMOVSCLR_EL0\0PMSWINC_EL0\0PMSELR_EL0\0PMCEID0_EL0\0PMCEID1_EL0\0"; break;case 13: t="PMCCNTR_EL0\0PMXEVTYPER_EL0\0PMXEVCNTR_EL0\0"; break;case 14: t="PMUSERENR_EL0\0?\0?\0PMOVSSET_EL0\0"; break;} break;
   83a74:	7100143f 	cmp	w1, #0x5
   83a78:	54001ee0 	b.eq	83e54 <disasm_sysreg+0x894>  // b.none
   83a7c:	54000149 	b.ls	83aa4 <disasm_sysreg+0x4e4>  // b.plast
   83a80:	7100183f 	cmp	w1, #0x6
   83a84:	540013e0 	b.eq	83d00 <disasm_sysreg+0x740>  // b.none
   83a88:	71001c3f 	cmp	w1, #0x7
   83a8c:	54ffdac1 	b.ne	835e4 <disasm_sysreg+0x24>  // b.any
   83a90:	f0000060 	adrp	x0, 92000 <sd_init+0x470>
   83a94:	91122000 	add	x0, x0, #0x488
case 13: if(m==0) t="?\0?\0TPIDR_EL0\0TPIDRRO_EL0\0"; break;case 14: switch(m) {case 0: t="CNTFRQ_EL0\0CNTPCT_EL0\0CNTVCT_EL0\0"; break;case 2: t="CNTP_TVAL_EL0\0CNTP_CTL_EL0\0CNTP_CVAL_EL0\0"; break;case 3: t="CNTV_TVAL_EL0\0CNTV_CTL_EL0\0CNTV_CVAL_EL0\0"; break;} break;} break;case 4: switch(n) {case 0: if(m==0) t="VPIDR_EL2\0?\0?\0?\0?\0VMPIDR_EL2\0"; break;case 1: switch(m) {case 0: t="SCTLR_EL2\0ACTLR_EL2\0"; break;case 1: t="HCR_EL2\0MDCR_EL2\0CPTR_EL2\0HSTR_EL2\0?\0?\0?\0HACR_EL2\0"; break;case 2: t="ZCR_EL2\0"; break;} break;case 2: switch(m) {case 0: t="TTBR0_EL2\0?\0TCR_EL2\0"; break;case 1: t="VTTBR0_EL2\0?\0VTCR_EL2\0"; break;} break;case 3: if(m==0) t="DACR32_EL2\0"; break;case 4: switch(m) {case 0: t="SPSR_EL2\0ELR_EL2\0"; break;case 1: t="SP_EL1\0"; break;case 3: t="SPSR_irq\0SPSR_abt\0SPSR_und\0SPSR_fiq\0"; break;} break;case 5: switch(m) {case 0: t="?\0IFSR32_EL2\0"; break;case 1: t="AFSR0_EL2\0AFSR1_EL2\0"; break;case 2: t="ESR_EL2\0?\0?\0VSESR_EL2\0"; break;case 3: t="FPEXC32_EL2\0"; break;} break;case 6: if(m==0) t="FAR_EL2\0?\0?\0?\0HPFAR_EL2\0"; break;case 9: if(m==9) t="PMSCR_EL2\0"; break;case 10: switch(m) {case 2: t="MAIR_EL2\0"; break;case 3: t="AMAIR_EL2\0"; break;} break;case 12: switch(m) {case 0: t="VBAR_EL2\0RVBAR_EL2\0RMR_EL2\0"; break;case 1: t="?\0VDISR_EL2\0"; break;case 8: t="ICH_AP0R0_EL2\0ICH_AP0R1_EL2\0ICH_AP0R2_EL2\0ICH_AP0R3_EL2\0"; break;case 9: t="ICH_AP1R0_EL2\0ICH_AP1R1_EL2\0ICH_AP1R2_EL2\0ICH_AP1R3_EL2\0ICC_SRE_EL2\0"; break;case 11: t="ICH_HCR_EL2\0ICH_VTR_EL2\0ICH_MISR_EL2\0ICH_EISR_EL2\0?\0ICH_ELRSR_EL2\0?\0ICH_VMCR_EL2\0"; break;case 12: t="ICH_LR0_EL2\0ICH_LR1_EL2\0ICH_LR2_EL2\0ICH_LR3_EL2\0ICH_LR4_EL2\0ICH_LR5_EL2\0ICH_LR6_EL2\0ICH_LR7_EL2\0"; break;case 13: t="ICH_LR8_EL2\0ICH_LR9_EL2\0ICH_LR10_EL2\0ICH_LR11_EL2\0ICH_LR12_EL2\0ICH_LR13_EL2\0ICH_LR14_EL2\0ICH_LR15_EL2\0"; break;} break;case 13: if(m==0) t="?\0CONTEXTIDR_EL2\0TPIDR_EL2\0"; break;case 14: switch(m) {case 0: t="?\0?\0?\0CNTVOFF_EL2\0"; break;case 1: t="CNTHCTL_EL2\0"; break;case 2: t="CNTHP_TVAL_EL2\0CNTHP_CTL_EL2\0CNTHP_CVAL_EL2\0"; break;case 3: t="CNTHV_TVAL_EL2\0CNTHV_CTL_EL2\0CNTHV_CVAL_EL2\0"; break;} break;} break;case 5: if(n==4&&m==0) t="SPSR_EL12\0ELR_EL12\0"; break;case 6: if(n==4&&m==1) t="SP_EL2\0"; break;case 7: if(n==14&&m==2) t="CNTPS_TVAL_EL1\0CNTPS_CTL_EL1\0CNTPS_CVAL_EL1\0"; break;} break;}return t?disasm_str(t,j):NULL;}
   83a98:	2a0303e1 	mov	w1, w3
char *disasm_sysreg(uint8_t p,uint8_t k,uint8_t n,uint8_t m,uint8_t j) {char *t=NULL;switch(p){case 2: switch(k) {case 0: switch(n) {case 0: switch(m) {case 0: t="?\0?\0OSDTRRX_EL1\0"; break;case 2: t="MDCCINT_EL1\0?\0MDSCR_EL1\0"; break;case 3: t="?\0?\0OSDTRTX_EL1\0"; break;case 6: t="?\0?\0OSECCR_EL1\0"; break;default: { n=j; j=m; switch(n) {case 4: t="DBGBVR0_EL1\0DBGBVR1_EL1\0DBGBVR2_EL1\0DBGBVR3_EL1\0DBGBVR4_EL1\0DBGBVR5_EL1\0DBGBVR6_EL1\0DBGBVR7_EL1\0"; break;case 5: t="DBGBCR0_EL1\0DBGBCR1_EL1\0DBGBCR2_EL1\0DBGBCR3_EL1\0DBGBCR4_EL1\0DBGBCR5_EL1\0DBGBCR6_EL1\0DBGBCR7_EL1\0"; break;case 6: t="DBGWVR0_EL1\0DBGWVR1_EL1\0DBGWVR2_EL1\0DBGWVR3_EL1\0DBGWVR4_EL1\0DBGWVR5_EL1\0DBGWVR6_EL1\0DBGWVR7_EL1\0"; break;case 7: t="DBGWCR0_EL1\0DBGWCR1_EL1\0DBGWCR2_EL1\0DBGWCR3_EL1\0DBGWCR4_EL1\0DBGWCR5_EL1\0DBGWCR6_EL1\0DBGWCR7_EL1\0"; break;} break; }} break;case 1: if(m==0) t="MDRAR_EL1\0?\0?\0?\0OSLAR_EL1\0"; else if(j==4) { j=m; t="OSLSR_EL1\0?\0OSDLR_EL1\0DBGPRCR_EL1\0"; }break;case 7: if(j==6) { j=m; t="?\0?\0?\0?\0?\0?\0?\0?\0DBGCLAIMSET_EL1\0DBGCLAIMCLR_EL1\0?\0?\0?\0?\0DBGAUTHSTATUS_EL1\0"; }break;} break;case 3: if(n==0&&j==0) { j=m; t="?\0MDCCSR_EL0\0?\0?\0DBGDTR_EL0\0DBGDTRRX_EL0\0"; } break;case 4: if(n==0&&m==7) t="DBGVCR32_EL2\0"; break;} break;case 3: switch(k) {case 0: switch(n) {case 0: if(m==0) t="MIDR_EL1\0?\0?\0?\0?\0MPIDR_EL1\0REVIDR_EL1\0?\0ID_PFR0_EL1\0ID_PFR1_EL1\0ID_DFR0_EL1\0ID_AFR0_EL1\0ID_MMFR0_EL1\0ID_MMFR1_EL1\0ID_MMFR2_EL1\0ID_MMFR3_EL1\0ID_ISAR0_EL1\0ID_ISAR1_EL1\0ID_ISAR2_EL1\0ID_ISAR2_EL1\0ID_ISAR3_EL1\0ID_ISAR4_EL1\0ID_ISAR5_EL1\0ID_MMFR4_EL1\0?\0MVFR0_EL1\0MVFR1_EL1\0MVFR2_EL1\0?\0?\0?\0?\0?\0ID_AA64PFR0_EL1\0ID_AA64PFR1_EL1\0?\0?\0ID_AA64ZFR0_EL1\0?\0?\0?\0ID_AA64DFR0_EL1\0ID_AA64DFR1_EL1\0?\0?\0ID_AA64AFR0_EL1\0ID_AA64AFR1_EL1\0?\0?\0ID_AA64ISAR0_EL1\0ID_AA64ISAR1_EL1\0?\0?\0?\0?\0?\0?\0ID_AA64MMFR0_EL1\0ID_AA64MMFR1_EL1\0ID_AA64MMFR2_EL1\0"; break;case 1: switch(m) {case 0: t="SCTLR_EL1\0ACTLR_EL1\0CPACR_EL1\0"; break;case 2: t="ZCR_EL1\0"; break;} break;case 2: if(m==0) t="TTBR0_EL1\0TTBR1_EL1\0TCR_EL1\0"; break;case 4: switch(m) {case 0: t="SPSR_EL1\0ELR_EL1\0"; break;case 1: t="SP_EL0\0"; break;case 2: t="SPSel\0?\0CurrentEL\0PAN\0UAO\0"; break;case 6: t="ICC_PMR_EL1\0"; break;} break;case 5: switch(m) {case 1: t="AFSR0_EL1\0AFSR1_EL1\0"; break;case 2: t="ESR_EL1"; break;case 3: t="ERRIDR_EL1\0ERRSELR_EL1\0"; break;case 4: t="ERXFR_EL1\0ERXCTLR_EL1\0ERXSTATUS_EL1\0ERXADDR_EL1\0"; break;case 5: t="ERXMISC0_EL1\0ERXMISC1_EL1\0"; break;} break;case 6: if(m==0) t="FAR_EL1\0"; break;case 7: if(m==4) t="PAR_EL1\0"; break;case 9: switch(m) {case 9: t="PMSCR_EL1\0?\0PMSICR_EL1\0PMSIRR_EL1\0PMSFCR_EL1\0PMSEVFR_EL1\0PMSLATFR_EL1\0PMSIDR_EL1\0PMSIDR_EL1\0"; break;case 10: t="PMBLIMITR_EL1\0PMBPTR_EL1\0?\0PMBSR_EL1\0?\0?\0?\0PMBIDR_EL1\0"; break;case 14: t="?\0PMINTENSET_EL1\0PMINTENCLR_EL1\0"; break;} break;case 10: if(m==4) t="LORSA_EL1\0LOREA_EL1\0LORN_EL1\0LORC_EL1\0?\0?\0?\0LORID_EL1\0"; else if(m!=4&&j==0) { j=m; t="?\0?\0MAIR_EL1\0AMAIR_EL1\0"; }break;case 12: switch(m) {case 0: t="VBAR_EL1\0RVBAR_EL1\0RMR_EL1\0"; break;case 1: t="ISR_EL1\0DISR_EL1\0"; break;case 8: t="ICC_IAR0_EL1\0ICC_EOIR0_EL1\0ICC_HPPIR0_EL1\0ICC_BPR0_EL1\0ICC_AP0R0_EL1\0ICC_AP0R1_EL1\0ICC_AP0R2_EL1\0ICC_AP0R3_EL1\0"; break;case 9: t="ICC_AP1R0_EL1\0ICC_AP1R1_EL1\0ICC_AP1R2_EL1\0ICC_AP1R3_EL1\0"; break;case 11: t="?\0ICC_DIR_EL1\0?\0ICC_RPR_EL1\0?\0ICC_SGI1R_EL1\0ICC_ASGI1R_EL1\0ICC_SGI0R_EL1\0"; break;case 12: t="ICC_IAR1_EL1\0ICC_EOIR1_EL1\0ICC_HPPIR1_EL1\0ICC_BPR1_EL1\0ICC_CTLR_EL1\0ICC_SRE_EL1\0ICC_IGRPEN0_EL1\0ICC_IGRPEN1_EL1\0"; break;} break;case 13: if(m==0) t="?\0CONTEXTIDR_EL1\0?\0?\0TPIDR_EL1\0"; break;case 14: if(m==1) t="CNTKCTL_EL1\0"; break;} break;case 1: if(n==0&&m==0) t="CCSIDR_EL1\0CLIDR_EL1\0?\0?\0?\0?\0?\0AIDR_EL1\0"; break;case 2: if(n==0&&m==0) t="CSSELR_EL1\0"; break;case 3: switch(n) {case 0: if(m==0) t="?\0CTR_EL0\0?\0?\0?\0?\0?\0DCZID_EL0\0"; break;case 4: switch(m) {case 2: t="NZCV\0DAIF\0"; break;case 4: t="FPCR\0FPSR\0"; break;case 5: t="DSPSR_EL0\0DLR_EL0\0"; break;} break;case 9: switch(m) {case 12: t="PMCR_EL0\0PMCNTENSET_EL0\0PMCNTENCLR_EL0\0PMOVSCLR_EL0\0PMSWINC_EL0\0PMSELR_EL0\0PMCEID0_EL0\0PMCEID1_EL0\0"; break;case 13: t="PMCCNTR_EL0\0PMXEVTYPER_EL0\0PMXEVCNTR_EL0\0"; break;case 14: t="PMUSERENR_EL0\0?\0?\0PMOVSSET_EL0\0"; break;} break;
   83a9c:	91362000 	add	x0, x0, #0xd88
char *disasm_str(char*s,int n) {if(!s)return "?";while(n){s++;if(!*s){s++;n--;}}return *s?s:"?";};
   83aa0:	17fffeac 	b	83550 <disasm_str.part.0>
   83aa4:	7100103f 	cmp	w1, #0x4
   83aa8:	54ffd9e1 	b.ne	835e4 <disasm_sysreg+0x24>  // b.any
char *disasm_sysreg(uint8_t p,uint8_t k,uint8_t n,uint8_t m,uint8_t j) {char *t=NULL;switch(p){case 2: switch(k) {case 0: switch(n) {case 0: switch(m) {case 0: t="?\0?\0OSDTRRX_EL1\0"; break;case 2: t="MDCCINT_EL1\0?\0MDSCR_EL1\0"; break;case 3: t="?\0?\0OSDTRTX_EL1\0"; break;case 6: t="?\0?\0OSECCR_EL1\0"; break;default: { n=j; j=m; switch(n) {case 4: t="DBGBVR0_EL1\0DBGBVR1_EL1\0DBGBVR2_EL1\0DBGBVR3_EL1\0DBGBVR4_EL1\0DBGBVR5_EL1\0DBGBVR6_EL1\0DBGBVR7_EL1\0"; break;case 5: t="DBGBCR0_EL1\0DBGBCR1_EL1\0DBGBCR2_EL1\0DBGBCR3_EL1\0DBGBCR4_EL1\0DBGBCR5_EL1\0DBGBCR6_EL1\0DBGBCR7_EL1\0"; break;case 6: t="DBGWVR0_EL1\0DBGWVR1_EL1\0DBGWVR2_EL1\0DBGWVR3_EL1\0DBGWVR4_EL1\0DBGWVR5_EL1\0DBGWVR6_EL1\0DBGWVR7_EL1\0"; break;case 7: t="DBGWCR0_EL1\0DBGWCR1_EL1\0DBGWCR2_EL1\0DBGWCR3_EL1\0DBGWCR4_EL1\0DBGWCR5_EL1\0DBGWCR6_EL1\0DBGWCR7_EL1\0"; break;} break; }} break;case 1: if(m==0) t="MDRAR_EL1\0?\0?\0?\0OSLAR_EL1\0"; else if(j==4) { j=m; t="OSLSR_EL1\0?\0OSDLR_EL1\0DBGPRCR_EL1\0"; }break;case 7: if(j==6) { j=m; t="?\0?\0?\0?\0?\0?\0?\0?\0DBGCLAIMSET_EL1\0DBGCLAIMCLR_EL1\0?\0?\0?\0?\0DBGAUTHSTATUS_EL1\0"; }break;} break;case 3: if(n==0&&j==0) { j=m; t="?\0MDCCSR_EL0\0?\0?\0DBGDTR_EL0\0DBGDTRRX_EL0\0"; } break;case 4: if(n==0&&m==7) t="DBGVCR32_EL2\0"; break;} break;case 3: switch(k) {case 0: switch(n) {case 0: if(m==0) t="MIDR_EL1\0?\0?\0?\0?\0MPIDR_EL1\0REVIDR_EL1\0?\0ID_PFR0_EL1\0ID_PFR1_EL1\0ID_DFR0_EL1\0ID_AFR0_EL1\0ID_MMFR0_EL1\0ID_MMFR1_EL1\0ID_MMFR2_EL1\0ID_MMFR3_EL1\0ID_ISAR0_EL1\0ID_ISAR1_EL1\0ID_ISAR2_EL1\0ID_ISAR2_EL1\0ID_ISAR3_EL1\0ID_ISAR4_EL1\0ID_ISAR5_EL1\0ID_MMFR4_EL1\0?\0MVFR0_EL1\0MVFR1_EL1\0MVFR2_EL1\0?\0?\0?\0?\0?\0ID_AA64PFR0_EL1\0ID_AA64PFR1_EL1\0?\0?\0ID_AA64ZFR0_EL1\0?\0?\0?\0ID_AA64DFR0_EL1\0ID_AA64DFR1_EL1\0?\0?\0ID_AA64AFR0_EL1\0ID_AA64AFR1_EL1\0?\0?\0ID_AA64ISAR0_EL1\0ID_AA64ISAR1_EL1\0?\0?\0?\0?\0?\0?\0ID_AA64MMFR0_EL1\0ID_AA64MMFR1_EL1\0ID_AA64MMFR2_EL1\0"; break;case 1: switch(m) {case 0: t="SCTLR_EL1\0ACTLR_EL1\0CPACR_EL1\0"; break;case 2: t="ZCR_EL1\0"; break;} break;case 2: if(m==0) t="TTBR0_EL1\0TTBR1_EL1\0TCR_EL1\0"; break;case 4: switch(m) {case 0: t="SPSR_EL1\0ELR_EL1\0"; break;case 1: t="SP_EL0\0"; break;case 2: t="SPSel\0?\0CurrentEL\0PAN\0UAO\0"; break;case 6: t="ICC_PMR_EL1\0"; break;} break;case 5: switch(m) {case 1: t="AFSR0_EL1\0AFSR1_EL1\0"; break;case 2: t="ESR_EL1"; break;case 3: t="ERRIDR_EL1\0ERRSELR_EL1\0"; break;case 4: t="ERXFR_EL1\0ERXCTLR_EL1\0ERXSTATUS_EL1\0ERXADDR_EL1\0"; break;case 5: t="ERXMISC0_EL1\0ERXMISC1_EL1\0"; break;} break;case 6: if(m==0) t="FAR_EL1\0"; break;case 7: if(m==4) t="PAR_EL1\0"; break;case 9: switch(m) {case 9: t="PMSCR_EL1\0?\0PMSICR_EL1\0PMSIRR_EL1\0PMSFCR_EL1\0PMSEVFR_EL1\0PMSLATFR_EL1\0PMSIDR_EL1\0PMSIDR_EL1\0"; break;case 10: t="PMBLIMITR_EL1\0PMBPTR_EL1\0?\0PMBSR_EL1\0?\0?\0?\0PMBIDR_EL1\0"; break;case 14: t="?\0PMINTENSET_EL1\0PMINTENCLR_EL1\0"; break;} break;case 10: if(m==4) t="LORSA_EL1\0LOREA_EL1\0LORN_EL1\0LORC_EL1\0?\0?\0?\0LORID_EL1\0"; else if(m!=4&&j==0) { j=m; t="?\0?\0MAIR_EL1\0AMAIR_EL1\0"; }break;case 12: switch(m) {case 0: t="VBAR_EL1\0RVBAR_EL1\0RMR_EL1\0"; break;case 1: t="ISR_EL1\0DISR_EL1\0"; break;case 8: t="ICC_IAR0_EL1\0ICC_EOIR0_EL1\0ICC_HPPIR0_EL1\0ICC_BPR0_EL1\0ICC_AP0R0_EL1\0ICC_AP0R1_EL1\0ICC_AP0R2_EL1\0ICC_AP0R3_EL1\0"; break;case 9: t="ICC_AP1R0_EL1\0ICC_AP1R1_EL1\0ICC_AP1R2_EL1\0ICC_AP1R3_EL1\0"; break;case 11: t="?\0ICC_DIR_EL1\0?\0ICC_RPR_EL1\0?\0ICC_SGI1R_EL1\0ICC_ASGI1R_EL1\0ICC_SGI0R_EL1\0"; break;case 12: t="ICC_IAR1_EL1\0ICC_EOIR1_EL1\0ICC_HPPIR1_EL1\0ICC_BPR1_EL1\0ICC_CTLR_EL1\0ICC_SRE_EL1\0ICC_IGRPEN0_EL1\0ICC_IGRPEN1_EL1\0"; break;} break;case 13: if(m==0) t="?\0CONTEXTIDR_EL1\0?\0?\0TPIDR_EL1\0"; break;case 14: if(m==1) t="CNTKCTL_EL1\0"; break;} break;case 1: if(n==0&&m==0) t="CCSIDR_EL1\0CLIDR_EL1\0?\0?\0?\0?\0?\0AIDR_EL1\0"; break;case 2: if(n==0&&m==0) t="CSSELR_EL1\0"; break;case 3: switch(n) {case 0: if(m==0) t="?\0CTR_EL0\0?\0?\0?\0?\0?\0DCZID_EL0\0"; break;case 4: switch(m) {case 2: t="NZCV\0DAIF\0"; break;case 4: t="FPCR\0FPSR\0"; break;case 5: t="DSPSR_EL0\0DLR_EL0\0"; break;} break;case 9: switch(m) {case 12: t="PMCR_EL0\0PMCNTENSET_EL0\0PMCNTENCLR_EL0\0PMOVSCLR_EL0\0PMSWINC_EL0\0PMSELR_EL0\0PMCEID0_EL0\0PMCEID1_EL0\0"; break;case 13: t="PMCCNTR_EL0\0PMXEVTYPER_EL0\0PMXEVCNTR_EL0\0"; break;case 14: t="PMUSERENR_EL0\0?\0?\0PMOVSSET_EL0\0"; break;} break;
   83aac:	f0000060 	adrp	x0, 92000 <sd_init+0x470>
   83ab0:	91122000 	add	x0, x0, #0x488
   83ab4:	2a0303e1 	mov	w1, w3
   83ab8:	913a4000 	add	x0, x0, #0xe90
char *disasm_str(char*s,int n) {if(!s)return "?";while(n){s++;if(!*s){s++;n--;}}return *s?s:"?";};
   83abc:	17fffea5 	b	83550 <disasm_str.part.0>
case 13: if(m==0) t="?\0?\0TPIDR_EL0\0TPIDRRO_EL0\0"; break;case 14: switch(m) {case 0: t="CNTFRQ_EL0\0CNTPCT_EL0\0CNTVCT_EL0\0"; break;case 2: t="CNTP_TVAL_EL0\0CNTP_CTL_EL0\0CNTP_CVAL_EL0\0"; break;case 3: t="CNTV_TVAL_EL0\0CNTV_CTL_EL0\0CNTV_CVAL_EL0\0"; break;} break;} break;case 4: switch(n) {case 0: if(m==0) t="VPIDR_EL2\0?\0?\0?\0?\0VMPIDR_EL2\0"; break;case 1: switch(m) {case 0: t="SCTLR_EL2\0ACTLR_EL2\0"; break;case 1: t="HCR_EL2\0MDCR_EL2\0CPTR_EL2\0HSTR_EL2\0?\0?\0?\0HACR_EL2\0"; break;case 2: t="ZCR_EL2\0"; break;} break;case 2: switch(m) {case 0: t="TTBR0_EL2\0?\0TCR_EL2\0"; break;case 1: t="VTTBR0_EL2\0?\0VTCR_EL2\0"; break;} break;case 3: if(m==0) t="DACR32_EL2\0"; break;case 4: switch(m) {case 0: t="SPSR_EL2\0ELR_EL2\0"; break;case 1: t="SP_EL1\0"; break;case 3: t="SPSR_irq\0SPSR_abt\0SPSR_und\0SPSR_fiq\0"; break;} break;case 5: switch(m) {case 0: t="?\0IFSR32_EL2\0"; break;case 1: t="AFSR0_EL2\0AFSR1_EL2\0"; break;case 2: t="ESR_EL2\0?\0?\0VSESR_EL2\0"; break;case 3: t="FPEXC32_EL2\0"; break;} break;case 6: if(m==0) t="FAR_EL2\0?\0?\0?\0HPFAR_EL2\0"; break;case 9: if(m==9) t="PMSCR_EL2\0"; break;case 10: switch(m) {case 2: t="MAIR_EL2\0"; break;case 3: t="AMAIR_EL2\0"; break;} break;case 12: switch(m) {case 0: t="VBAR_EL2\0RVBAR_EL2\0RMR_EL2\0"; break;case 1: t="?\0VDISR_EL2\0"; break;case 8: t="ICH_AP0R0_EL2\0ICH_AP0R1_EL2\0ICH_AP0R2_EL2\0ICH_AP0R3_EL2\0"; break;case 9: t="ICH_AP1R0_EL2\0ICH_AP1R1_EL2\0ICH_AP1R2_EL2\0ICH_AP1R3_EL2\0ICC_SRE_EL2\0"; break;case 11: t="ICH_HCR_EL2\0ICH_VTR_EL2\0ICH_MISR_EL2\0ICH_EISR_EL2\0?\0ICH_ELRSR_EL2\0?\0ICH_VMCR_EL2\0"; break;case 12: t="ICH_LR0_EL2\0ICH_LR1_EL2\0ICH_LR2_EL2\0ICH_LR3_EL2\0ICH_LR4_EL2\0ICH_LR5_EL2\0ICH_LR6_EL2\0ICH_LR7_EL2\0"; break;case 13: t="ICH_LR8_EL2\0ICH_LR9_EL2\0ICH_LR10_EL2\0ICH_LR11_EL2\0ICH_LR12_EL2\0ICH_LR13_EL2\0ICH_LR14_EL2\0ICH_LR15_EL2\0"; break;} break;case 13: if(m==0) t="?\0CONTEXTIDR_EL2\0TPIDR_EL2\0"; break;case 14: switch(m) {case 0: t="?\0?\0?\0CNTVOFF_EL2\0"; break;case 1: t="CNTHCTL_EL2\0"; break;case 2: t="CNTHP_TVAL_EL2\0CNTHP_CTL_EL2\0CNTHP_CVAL_EL2\0"; break;case 3: t="CNTHV_TVAL_EL2\0CNTHV_CTL_EL2\0CNTHV_CVAL_EL2\0"; break;} break;} break;case 5: if(n==4&&m==0) t="SPSR_EL12\0ELR_EL12\0"; break;case 6: if(n==4&&m==1) t="SP_EL2\0"; break;case 7: if(n==14&&m==2) t="CNTPS_TVAL_EL1\0CNTPS_CTL_EL1\0CNTPS_CVAL_EL1\0"; break;} break;}return t?disasm_str(t,j):NULL;}
   83ac0:	34001a23 	cbz	w3, 83e04 <disasm_sysreg+0x844>
   83ac4:	7100047f 	cmp	w3, #0x1
   83ac8:	54ffd8e1 	b.ne	835e4 <disasm_sysreg+0x24>  // b.any
   83acc:	f0000060 	adrp	x0, 92000 <sd_init+0x470>
   83ad0:	91122000 	add	x0, x0, #0x488
   83ad4:	91302000 	add	x0, x0, #0xc08
char *disasm_str(char*s,int n) {if(!s)return "?";while(n){s++;if(!*s){s++;n--;}}return *s?s:"?";};
   83ad8:	17fffe9e 	b	83550 <disasm_str.part.0>
case 13: if(m==0) t="?\0?\0TPIDR_EL0\0TPIDRRO_EL0\0"; break;case 14: switch(m) {case 0: t="CNTFRQ_EL0\0CNTPCT_EL0\0CNTVCT_EL0\0"; break;case 2: t="CNTP_TVAL_EL0\0CNTP_CTL_EL0\0CNTP_CVAL_EL0\0"; break;case 3: t="CNTV_TVAL_EL0\0CNTV_CTL_EL0\0CNTV_CVAL_EL0\0"; break;} break;} break;case 4: switch(n) {case 0: if(m==0) t="VPIDR_EL2\0?\0?\0?\0?\0VMPIDR_EL2\0"; break;case 1: switch(m) {case 0: t="SCTLR_EL2\0ACTLR_EL2\0"; break;case 1: t="HCR_EL2\0MDCR_EL2\0CPTR_EL2\0HSTR_EL2\0?\0?\0?\0HACR_EL2\0"; break;case 2: t="ZCR_EL2\0"; break;} break;case 2: switch(m) {case 0: t="TTBR0_EL2\0?\0TCR_EL2\0"; break;case 1: t="VTTBR0_EL2\0?\0VTCR_EL2\0"; break;} break;case 3: if(m==0) t="DACR32_EL2\0"; break;case 4: switch(m) {case 0: t="SPSR_EL2\0ELR_EL2\0"; break;case 1: t="SP_EL1\0"; break;case 3: t="SPSR_irq\0SPSR_abt\0SPSR_und\0SPSR_fiq\0"; break;} break;case 5: switch(m) {case 0: t="?\0IFSR32_EL2\0"; break;case 1: t="AFSR0_EL2\0AFSR1_EL2\0"; break;case 2: t="ESR_EL2\0?\0?\0VSESR_EL2\0"; break;case 3: t="FPEXC32_EL2\0"; break;} break;case 6: if(m==0) t="FAR_EL2\0?\0?\0?\0HPFAR_EL2\0"; break;case 9: if(m==9) t="PMSCR_EL2\0"; break;case 10: switch(m) {case 2: t="MAIR_EL2\0"; break;case 3: t="AMAIR_EL2\0"; break;} break;case 12: switch(m) {case 0: t="VBAR_EL2\0RVBAR_EL2\0RMR_EL2\0"; break;case 1: t="?\0VDISR_EL2\0"; break;case 8: t="ICH_AP0R0_EL2\0ICH_AP0R1_EL2\0ICH_AP0R2_EL2\0ICH_AP0R3_EL2\0"; break;case 9: t="ICH_AP1R0_EL2\0ICH_AP1R1_EL2\0ICH_AP1R2_EL2\0ICH_AP1R3_EL2\0ICC_SRE_EL2\0"; break;case 11: t="ICH_HCR_EL2\0ICH_VTR_EL2\0ICH_MISR_EL2\0ICH_EISR_EL2\0?\0ICH_ELRSR_EL2\0?\0ICH_VMCR_EL2\0"; break;case 12: t="ICH_LR0_EL2\0ICH_LR1_EL2\0ICH_LR2_EL2\0ICH_LR3_EL2\0ICH_LR4_EL2\0ICH_LR5_EL2\0ICH_LR6_EL2\0ICH_LR7_EL2\0"; break;case 13: t="ICH_LR8_EL2\0ICH_LR9_EL2\0ICH_LR10_EL2\0ICH_LR11_EL2\0ICH_LR12_EL2\0ICH_LR13_EL2\0ICH_LR14_EL2\0ICH_LR15_EL2\0"; break;} break;case 13: if(m==0) t="?\0CONTEXTIDR_EL2\0TPIDR_EL2\0"; break;case 14: switch(m) {case 0: t="?\0?\0?\0CNTVOFF_EL2\0"; break;case 1: t="CNTHCTL_EL2\0"; break;case 2: t="CNTHP_TVAL_EL2\0CNTHP_CTL_EL2\0CNTHP_CVAL_EL2\0"; break;case 3: t="CNTHV_TVAL_EL2\0CNTHV_CTL_EL2\0CNTHV_CVAL_EL2\0"; break;} break;} break;case 5: if(n==4&&m==0) t="SPSR_EL12\0ELR_EL12\0"; break;case 6: if(n==4&&m==1) t="SP_EL2\0"; break;case 7: if(n==14&&m==2) t="CNTPS_TVAL_EL1\0CNTPS_CTL_EL1\0CNTPS_CVAL_EL1\0"; break;} break;}return t?disasm_str(t,j):NULL;}
   83adc:	35ffd843 	cbnz	w3, 835e4 <disasm_sysreg+0x24>
   83ae0:	f0000060 	adrp	x0, 92000 <sd_init+0x470>
   83ae4:	91122000 	add	x0, x0, #0x488
   83ae8:	9130e000 	add	x0, x0, #0xc38
char *disasm_str(char*s,int n) {if(!s)return "?";while(n){s++;if(!*s){s++;n--;}}return *s?s:"?";};
   83aec:	17fffe99 	b	83550 <disasm_str.part.0>
char *disasm_sysreg(uint8_t p,uint8_t k,uint8_t n,uint8_t m,uint8_t j) {char *t=NULL;switch(p){case 2: switch(k) {case 0: switch(n) {case 0: switch(m) {case 0: t="?\0?\0OSDTRRX_EL1\0"; break;case 2: t="MDCCINT_EL1\0?\0MDSCR_EL1\0"; break;case 3: t="?\0?\0OSDTRTX_EL1\0"; break;case 6: t="?\0?\0OSECCR_EL1\0"; break;default: { n=j; j=m; switch(n) {case 4: t="DBGBVR0_EL1\0DBGBVR1_EL1\0DBGBVR2_EL1\0DBGBVR3_EL1\0DBGBVR4_EL1\0DBGBVR5_EL1\0DBGBVR6_EL1\0DBGBVR7_EL1\0"; break;case 5: t="DBGBCR0_EL1\0DBGBCR1_EL1\0DBGBCR2_EL1\0DBGBCR3_EL1\0DBGBCR4_EL1\0DBGBCR5_EL1\0DBGBCR6_EL1\0DBGBCR7_EL1\0"; break;case 6: t="DBGWVR0_EL1\0DBGWVR1_EL1\0DBGWVR2_EL1\0DBGWVR3_EL1\0DBGWVR4_EL1\0DBGWVR5_EL1\0DBGWVR6_EL1\0DBGWVR7_EL1\0"; break;case 7: t="DBGWCR0_EL1\0DBGWCR1_EL1\0DBGWCR2_EL1\0DBGWCR3_EL1\0DBGWCR4_EL1\0DBGWCR5_EL1\0DBGWCR6_EL1\0DBGWCR7_EL1\0"; break;} break; }} break;case 1: if(m==0) t="MDRAR_EL1\0?\0?\0?\0OSLAR_EL1\0"; else if(j==4) { j=m; t="OSLSR_EL1\0?\0OSDLR_EL1\0DBGPRCR_EL1\0"; }break;case 7: if(j==6) { j=m; t="?\0?\0?\0?\0?\0?\0?\0?\0DBGCLAIMSET_EL1\0DBGCLAIMCLR_EL1\0?\0?\0?\0?\0DBGAUTHSTATUS_EL1\0"; }break;} break;case 3: if(n==0&&j==0) { j=m; t="?\0MDCCSR_EL0\0?\0?\0DBGDTR_EL0\0DBGDTRRX_EL0\0"; } break;case 4: if(n==0&&m==7) t="DBGVCR32_EL2\0"; break;} break;case 3: switch(k) {case 0: switch(n) {case 0: if(m==0) t="MIDR_EL1\0?\0?\0?\0?\0MPIDR_EL1\0REVIDR_EL1\0?\0ID_PFR0_EL1\0ID_PFR1_EL1\0ID_DFR0_EL1\0ID_AFR0_EL1\0ID_MMFR0_EL1\0ID_MMFR1_EL1\0ID_MMFR2_EL1\0ID_MMFR3_EL1\0ID_ISAR0_EL1\0ID_ISAR1_EL1\0ID_ISAR2_EL1\0ID_ISAR2_EL1\0ID_ISAR3_EL1\0ID_ISAR4_EL1\0ID_ISAR5_EL1\0ID_MMFR4_EL1\0?\0MVFR0_EL1\0MVFR1_EL1\0MVFR2_EL1\0?\0?\0?\0?\0?\0ID_AA64PFR0_EL1\0ID_AA64PFR1_EL1\0?\0?\0ID_AA64ZFR0_EL1\0?\0?\0?\0ID_AA64DFR0_EL1\0ID_AA64DFR1_EL1\0?\0?\0ID_AA64AFR0_EL1\0ID_AA64AFR1_EL1\0?\0?\0ID_AA64ISAR0_EL1\0ID_AA64ISAR1_EL1\0?\0?\0?\0?\0?\0?\0ID_AA64MMFR0_EL1\0ID_AA64MMFR1_EL1\0ID_AA64MMFR2_EL1\0"; break;case 1: switch(m) {case 0: t="SCTLR_EL1\0ACTLR_EL1\0CPACR_EL1\0"; break;case 2: t="ZCR_EL1\0"; break;} break;case 2: if(m==0) t="TTBR0_EL1\0TTBR1_EL1\0TCR_EL1\0"; break;case 4: switch(m) {case 0: t="SPSR_EL1\0ELR_EL1\0"; break;case 1: t="SP_EL0\0"; break;case 2: t="SPSel\0?\0CurrentEL\0PAN\0UAO\0"; break;case 6: t="ICC_PMR_EL1\0"; break;} break;case 5: switch(m) {case 1: t="AFSR0_EL1\0AFSR1_EL1\0"; break;case 2: t="ESR_EL1"; break;case 3: t="ERRIDR_EL1\0ERRSELR_EL1\0"; break;case 4: t="ERXFR_EL1\0ERXCTLR_EL1\0ERXSTATUS_EL1\0ERXADDR_EL1\0"; break;case 5: t="ERXMISC0_EL1\0ERXMISC1_EL1\0"; break;} break;case 6: if(m==0) t="FAR_EL1\0"; break;case 7: if(m==4) t="PAR_EL1\0"; break;case 9: switch(m) {case 9: t="PMSCR_EL1\0?\0PMSICR_EL1\0PMSIRR_EL1\0PMSFCR_EL1\0PMSEVFR_EL1\0PMSLATFR_EL1\0PMSIDR_EL1\0PMSIDR_EL1\0"; break;case 10: t="PMBLIMITR_EL1\0PMBPTR_EL1\0?\0PMBSR_EL1\0?\0?\0?\0PMBIDR_EL1\0"; break;case 14: t="?\0PMINTENSET_EL1\0PMINTENCLR_EL1\0"; break;} break;case 10: if(m==4) t="LORSA_EL1\0LOREA_EL1\0LORN_EL1\0LORC_EL1\0?\0?\0?\0LORID_EL1\0"; else if(m!=4&&j==0) { j=m; t="?\0?\0MAIR_EL1\0AMAIR_EL1\0"; }break;case 12: switch(m) {case 0: t="VBAR_EL1\0RVBAR_EL1\0RMR_EL1\0"; break;case 1: t="ISR_EL1\0DISR_EL1\0"; break;case 8: t="ICC_IAR0_EL1\0ICC_EOIR0_EL1\0ICC_HPPIR0_EL1\0ICC_BPR0_EL1\0ICC_AP0R0_EL1\0ICC_AP0R1_EL1\0ICC_AP0R2_EL1\0ICC_AP0R3_EL1\0"; break;case 9: t="ICC_AP1R0_EL1\0ICC_AP1R1_EL1\0ICC_AP1R2_EL1\0ICC_AP1R3_EL1\0"; break;case 11: t="?\0ICC_DIR_EL1\0?\0ICC_RPR_EL1\0?\0ICC_SGI1R_EL1\0ICC_ASGI1R_EL1\0ICC_SGI0R_EL1\0"; break;case 12: t="ICC_IAR1_EL1\0ICC_EOIR1_EL1\0ICC_HPPIR1_EL1\0ICC_BPR1_EL1\0ICC_CTLR_EL1\0ICC_SRE_EL1\0ICC_IGRPEN0_EL1\0ICC_IGRPEN1_EL1\0"; break;} break;case 13: if(m==0) t="?\0CONTEXTIDR_EL1\0?\0?\0TPIDR_EL1\0"; break;case 14: if(m==1) t="CNTKCTL_EL1\0"; break;} break;case 1: if(n==0&&m==0) t="CCSIDR_EL1\0CLIDR_EL1\0?\0?\0?\0?\0?\0AIDR_EL1\0"; break;case 2: if(n==0&&m==0) t="CSSELR_EL1\0"; break;case 3: switch(n) {case 0: if(m==0) t="?\0CTR_EL0\0?\0?\0?\0?\0?\0DCZID_EL0\0"; break;case 4: switch(m) {case 2: t="NZCV\0DAIF\0"; break;case 4: t="FPCR\0FPSR\0"; break;case 5: t="DSPSR_EL0\0DLR_EL0\0"; break;} break;case 9: switch(m) {case 12: t="PMCR_EL0\0PMCNTENSET_EL0\0PMCNTENCLR_EL0\0PMOVSCLR_EL0\0PMSWINC_EL0\0PMSELR_EL0\0PMCEID0_EL0\0PMCEID1_EL0\0"; break;case 13: t="PMCCNTR_EL0\0PMXEVTYPER_EL0\0PMXEVCNTR_EL0\0"; break;case 14: t="PMUSERENR_EL0\0?\0?\0PMOVSSET_EL0\0"; break;} break;
   83af0:	35ffd7a3 	cbnz	w3, 835e4 <disasm_sysreg+0x24>
   83af4:	f0000060 	adrp	x0, 92000 <sd_init+0x470>
   83af8:	91122000 	add	x0, x0, #0x488
   83afc:	91118000 	add	x0, x0, #0x460
char *disasm_str(char*s,int n) {if(!s)return "?";while(n){s++;if(!*s){s++;n--;}}return *s?s:"?";};
   83b00:	17fffe94 	b	83550 <disasm_str.part.0>
case 13: if(m==0) t="?\0?\0TPIDR_EL0\0TPIDRRO_EL0\0"; break;case 14: switch(m) {case 0: t="CNTFRQ_EL0\0CNTPCT_EL0\0CNTVCT_EL0\0"; break;case 2: t="CNTP_TVAL_EL0\0CNTP_CTL_EL0\0CNTP_CVAL_EL0\0"; break;case 3: t="CNTV_TVAL_EL0\0CNTV_CTL_EL0\0CNTV_CVAL_EL0\0"; break;} break;} break;case 4: switch(n) {case 0: if(m==0) t="VPIDR_EL2\0?\0?\0?\0?\0VMPIDR_EL2\0"; break;case 1: switch(m) {case 0: t="SCTLR_EL2\0ACTLR_EL2\0"; break;case 1: t="HCR_EL2\0MDCR_EL2\0CPTR_EL2\0HSTR_EL2\0?\0?\0?\0HACR_EL2\0"; break;case 2: t="ZCR_EL2\0"; break;} break;case 2: switch(m) {case 0: t="TTBR0_EL2\0?\0TCR_EL2\0"; break;case 1: t="VTTBR0_EL2\0?\0VTCR_EL2\0"; break;} break;case 3: if(m==0) t="DACR32_EL2\0"; break;case 4: switch(m) {case 0: t="SPSR_EL2\0ELR_EL2\0"; break;case 1: t="SP_EL1\0"; break;case 3: t="SPSR_irq\0SPSR_abt\0SPSR_und\0SPSR_fiq\0"; break;} break;case 5: switch(m) {case 0: t="?\0IFSR32_EL2\0"; break;case 1: t="AFSR0_EL2\0AFSR1_EL2\0"; break;case 2: t="ESR_EL2\0?\0?\0VSESR_EL2\0"; break;case 3: t="FPEXC32_EL2\0"; break;} break;case 6: if(m==0) t="FAR_EL2\0?\0?\0?\0HPFAR_EL2\0"; break;case 9: if(m==9) t="PMSCR_EL2\0"; break;case 10: switch(m) {case 2: t="MAIR_EL2\0"; break;case 3: t="AMAIR_EL2\0"; break;} break;case 12: switch(m) {case 0: t="VBAR_EL2\0RVBAR_EL2\0RMR_EL2\0"; break;case 1: t="?\0VDISR_EL2\0"; break;case 8: t="ICH_AP0R0_EL2\0ICH_AP0R1_EL2\0ICH_AP0R2_EL2\0ICH_AP0R3_EL2\0"; break;case 9: t="ICH_AP1R0_EL2\0ICH_AP1R1_EL2\0ICH_AP1R2_EL2\0ICH_AP1R3_EL2\0ICC_SRE_EL2\0"; break;case 11: t="ICH_HCR_EL2\0ICH_VTR_EL2\0ICH_MISR_EL2\0ICH_EISR_EL2\0?\0ICH_ELRSR_EL2\0?\0ICH_VMCR_EL2\0"; break;case 12: t="ICH_LR0_EL2\0ICH_LR1_EL2\0ICH_LR2_EL2\0ICH_LR3_EL2\0ICH_LR4_EL2\0ICH_LR5_EL2\0ICH_LR6_EL2\0ICH_LR7_EL2\0"; break;case 13: t="ICH_LR8_EL2\0ICH_LR9_EL2\0ICH_LR10_EL2\0ICH_LR11_EL2\0ICH_LR12_EL2\0ICH_LR13_EL2\0ICH_LR14_EL2\0ICH_LR15_EL2\0"; break;} break;case 13: if(m==0) t="?\0CONTEXTIDR_EL2\0TPIDR_EL2\0"; break;case 14: switch(m) {case 0: t="?\0?\0?\0CNTVOFF_EL2\0"; break;case 1: t="CNTHCTL_EL2\0"; break;case 2: t="CNTHP_TVAL_EL2\0CNTHP_CTL_EL2\0CNTHP_CVAL_EL2\0"; break;case 3: t="CNTHV_TVAL_EL2\0CNTHV_CTL_EL2\0CNTHV_CVAL_EL2\0"; break;} break;} break;case 5: if(n==4&&m==0) t="SPSR_EL12\0ELR_EL12\0"; break;case 6: if(n==4&&m==1) t="SP_EL2\0"; break;case 7: if(n==14&&m==2) t="CNTPS_TVAL_EL1\0CNTPS_CTL_EL1\0CNTPS_CVAL_EL1\0"; break;} break;}return t?disasm_str(t,j):NULL;}
   83b04:	7100087f 	cmp	w3, #0x2
   83b08:	540018e0 	b.eq	83e24 <disasm_sysreg+0x864>  // b.none
   83b0c:	71000c7f 	cmp	w3, #0x3
   83b10:	54ffd6a1 	b.ne	835e4 <disasm_sysreg+0x24>  // b.any
   83b14:	f0000060 	adrp	x0, 92000 <sd_init+0x470>
   83b18:	91122000 	add	x0, x0, #0x488
   83b1c:	91232000 	add	x0, x0, #0x8c8
char *disasm_str(char*s,int n) {if(!s)return "?";while(n){s++;if(!*s){s++;n--;}}return *s?s:"?";};
   83b20:	17fffe8c 	b	83550 <disasm_str.part.0>
case 13: if(m==0) t="?\0?\0TPIDR_EL0\0TPIDRRO_EL0\0"; break;case 14: switch(m) {case 0: t="CNTFRQ_EL0\0CNTPCT_EL0\0CNTVCT_EL0\0"; break;case 2: t="CNTP_TVAL_EL0\0CNTP_CTL_EL0\0CNTP_CVAL_EL0\0"; break;case 3: t="CNTV_TVAL_EL0\0CNTV_CTL_EL0\0CNTV_CVAL_EL0\0"; break;} break;} break;case 4: switch(n) {case 0: if(m==0) t="VPIDR_EL2\0?\0?\0?\0?\0VMPIDR_EL2\0"; break;case 1: switch(m) {case 0: t="SCTLR_EL2\0ACTLR_EL2\0"; break;case 1: t="HCR_EL2\0MDCR_EL2\0CPTR_EL2\0HSTR_EL2\0?\0?\0?\0HACR_EL2\0"; break;case 2: t="ZCR_EL2\0"; break;} break;case 2: switch(m) {case 0: t="TTBR0_EL2\0?\0TCR_EL2\0"; break;case 1: t="VTTBR0_EL2\0?\0VTCR_EL2\0"; break;} break;case 3: if(m==0) t="DACR32_EL2\0"; break;case 4: switch(m) {case 0: t="SPSR_EL2\0ELR_EL2\0"; break;case 1: t="SP_EL1\0"; break;case 3: t="SPSR_irq\0SPSR_abt\0SPSR_und\0SPSR_fiq\0"; break;} break;case 5: switch(m) {case 0: t="?\0IFSR32_EL2\0"; break;case 1: t="AFSR0_EL2\0AFSR1_EL2\0"; break;case 2: t="ESR_EL2\0?\0?\0VSESR_EL2\0"; break;case 3: t="FPEXC32_EL2\0"; break;} break;case 6: if(m==0) t="FAR_EL2\0?\0?\0?\0HPFAR_EL2\0"; break;case 9: if(m==9) t="PMSCR_EL2\0"; break;case 10: switch(m) {case 2: t="MAIR_EL2\0"; break;case 3: t="AMAIR_EL2\0"; break;} break;case 12: switch(m) {case 0: t="VBAR_EL2\0RVBAR_EL2\0RMR_EL2\0"; break;case 1: t="?\0VDISR_EL2\0"; break;case 8: t="ICH_AP0R0_EL2\0ICH_AP0R1_EL2\0ICH_AP0R2_EL2\0ICH_AP0R3_EL2\0"; break;case 9: t="ICH_AP1R0_EL2\0ICH_AP1R1_EL2\0ICH_AP1R2_EL2\0ICH_AP1R3_EL2\0ICC_SRE_EL2\0"; break;case 11: t="ICH_HCR_EL2\0ICH_VTR_EL2\0ICH_MISR_EL2\0ICH_EISR_EL2\0?\0ICH_ELRSR_EL2\0?\0ICH_VMCR_EL2\0"; break;case 12: t="ICH_LR0_EL2\0ICH_LR1_EL2\0ICH_LR2_EL2\0ICH_LR3_EL2\0ICH_LR4_EL2\0ICH_LR5_EL2\0ICH_LR6_EL2\0ICH_LR7_EL2\0"; break;case 13: t="ICH_LR8_EL2\0ICH_LR9_EL2\0ICH_LR10_EL2\0ICH_LR11_EL2\0ICH_LR12_EL2\0ICH_LR13_EL2\0ICH_LR14_EL2\0ICH_LR15_EL2\0"; break;} break;case 13: if(m==0) t="?\0CONTEXTIDR_EL2\0TPIDR_EL2\0"; break;case 14: switch(m) {case 0: t="?\0?\0?\0CNTVOFF_EL2\0"; break;case 1: t="CNTHCTL_EL2\0"; break;case 2: t="CNTHP_TVAL_EL2\0CNTHP_CTL_EL2\0CNTHP_CVAL_EL2\0"; break;case 3: t="CNTHV_TVAL_EL2\0CNTHV_CTL_EL2\0CNTHV_CVAL_EL2\0"; break;} break;} break;case 5: if(n==4&&m==0) t="SPSR_EL12\0ELR_EL12\0"; break;case 6: if(n==4&&m==1) t="SP_EL2\0"; break;case 7: if(n==14&&m==2) t="CNTPS_TVAL_EL1\0CNTPS_CTL_EL1\0CNTPS_CVAL_EL1\0"; break;} break;}return t?disasm_str(t,j):NULL;}
   83b24:	7100047f 	cmp	w3, #0x1
   83b28:	54001e80 	b.eq	83ef8 <disasm_sysreg+0x938>  // b.none
   83b2c:	34001be3 	cbz	w3, 83ea8 <disasm_sysreg+0x8e8>
   83b30:	7100087f 	cmp	w3, #0x2
   83b34:	54001800 	b.eq	83e34 <disasm_sysreg+0x874>  // b.none
   83b38:	71000c7f 	cmp	w3, #0x3
   83b3c:	54ffd541 	b.ne	835e4 <disasm_sysreg+0x24>  // b.any
   83b40:	f0000060 	adrp	x0, 92000 <sd_init+0x470>
   83b44:	91122000 	add	x0, x0, #0x488
   83b48:	912b2000 	add	x0, x0, #0xac8
char *disasm_str(char*s,int n) {if(!s)return "?";while(n){s++;if(!*s){s++;n--;}}return *s?s:"?";};
   83b4c:	17fffe81 	b	83550 <disasm_str.part.0>
case 13: if(m==0) t="?\0?\0TPIDR_EL0\0TPIDRRO_EL0\0"; break;case 14: switch(m) {case 0: t="CNTFRQ_EL0\0CNTPCT_EL0\0CNTVCT_EL0\0"; break;case 2: t="CNTP_TVAL_EL0\0CNTP_CTL_EL0\0CNTP_CVAL_EL0\0"; break;case 3: t="CNTV_TVAL_EL0\0CNTV_CTL_EL0\0CNTV_CVAL_EL0\0"; break;} break;} break;case 4: switch(n) {case 0: if(m==0) t="VPIDR_EL2\0?\0?\0?\0?\0VMPIDR_EL2\0"; break;case 1: switch(m) {case 0: t="SCTLR_EL2\0ACTLR_EL2\0"; break;case 1: t="HCR_EL2\0MDCR_EL2\0CPTR_EL2\0HSTR_EL2\0?\0?\0?\0HACR_EL2\0"; break;case 2: t="ZCR_EL2\0"; break;} break;case 2: switch(m) {case 0: t="TTBR0_EL2\0?\0TCR_EL2\0"; break;case 1: t="VTTBR0_EL2\0?\0VTCR_EL2\0"; break;} break;case 3: if(m==0) t="DACR32_EL2\0"; break;case 4: switch(m) {case 0: t="SPSR_EL2\0ELR_EL2\0"; break;case 1: t="SP_EL1\0"; break;case 3: t="SPSR_irq\0SPSR_abt\0SPSR_und\0SPSR_fiq\0"; break;} break;case 5: switch(m) {case 0: t="?\0IFSR32_EL2\0"; break;case 1: t="AFSR0_EL2\0AFSR1_EL2\0"; break;case 2: t="ESR_EL2\0?\0?\0VSESR_EL2\0"; break;case 3: t="FPEXC32_EL2\0"; break;} break;case 6: if(m==0) t="FAR_EL2\0?\0?\0?\0HPFAR_EL2\0"; break;case 9: if(m==9) t="PMSCR_EL2\0"; break;case 10: switch(m) {case 2: t="MAIR_EL2\0"; break;case 3: t="AMAIR_EL2\0"; break;} break;case 12: switch(m) {case 0: t="VBAR_EL2\0RVBAR_EL2\0RMR_EL2\0"; break;case 1: t="?\0VDISR_EL2\0"; break;case 8: t="ICH_AP0R0_EL2\0ICH_AP0R1_EL2\0ICH_AP0R2_EL2\0ICH_AP0R3_EL2\0"; break;case 9: t="ICH_AP1R0_EL2\0ICH_AP1R1_EL2\0ICH_AP1R2_EL2\0ICH_AP1R3_EL2\0ICC_SRE_EL2\0"; break;case 11: t="ICH_HCR_EL2\0ICH_VTR_EL2\0ICH_MISR_EL2\0ICH_EISR_EL2\0?\0ICH_ELRSR_EL2\0?\0ICH_VMCR_EL2\0"; break;case 12: t="ICH_LR0_EL2\0ICH_LR1_EL2\0ICH_LR2_EL2\0ICH_LR3_EL2\0ICH_LR4_EL2\0ICH_LR5_EL2\0ICH_LR6_EL2\0ICH_LR7_EL2\0"; break;case 13: t="ICH_LR8_EL2\0ICH_LR9_EL2\0ICH_LR10_EL2\0ICH_LR11_EL2\0ICH_LR12_EL2\0ICH_LR13_EL2\0ICH_LR14_EL2\0ICH_LR15_EL2\0"; break;} break;case 13: if(m==0) t="?\0CONTEXTIDR_EL2\0TPIDR_EL2\0"; break;case 14: switch(m) {case 0: t="?\0?\0?\0CNTVOFF_EL2\0"; break;case 1: t="CNTHCTL_EL2\0"; break;case 2: t="CNTHP_TVAL_EL2\0CNTHP_CTL_EL2\0CNTHP_CVAL_EL2\0"; break;case 3: t="CNTHV_TVAL_EL2\0CNTHV_CTL_EL2\0CNTHV_CVAL_EL2\0"; break;} break;} break;case 5: if(n==4&&m==0) t="SPSR_EL12\0ELR_EL12\0"; break;case 6: if(n==4&&m==1) t="SP_EL2\0"; break;case 7: if(n==14&&m==2) t="CNTPS_TVAL_EL1\0CNTPS_CTL_EL1\0CNTPS_CVAL_EL1\0"; break;} break;}return t?disasm_str(t,j):NULL;}
   83b50:	35ffd4a3 	cbnz	w3, 835e4 <disasm_sysreg+0x24>
   83b54:	f0000060 	adrp	x0, 92000 <sd_init+0x470>
   83b58:	91122000 	add	x0, x0, #0x488
   83b5c:	912a2000 	add	x0, x0, #0xa88
char *disasm_str(char*s,int n) {if(!s)return "?";while(n){s++;if(!*s){s++;n--;}}return *s?s:"?";};
   83b60:	17fffe7c 	b	83550 <disasm_str.part.0>
char *disasm_sysreg(uint8_t p,uint8_t k,uint8_t n,uint8_t m,uint8_t j) {char *t=NULL;switch(p){case 2: switch(k) {case 0: switch(n) {case 0: switch(m) {case 0: t="?\0?\0OSDTRRX_EL1\0"; break;case 2: t="MDCCINT_EL1\0?\0MDSCR_EL1\0"; break;case 3: t="?\0?\0OSDTRTX_EL1\0"; break;case 6: t="?\0?\0OSECCR_EL1\0"; break;default: { n=j; j=m; switch(n) {case 4: t="DBGBVR0_EL1\0DBGBVR1_EL1\0DBGBVR2_EL1\0DBGBVR3_EL1\0DBGBVR4_EL1\0DBGBVR5_EL1\0DBGBVR6_EL1\0DBGBVR7_EL1\0"; break;case 5: t="DBGBCR0_EL1\0DBGBCR1_EL1\0DBGBCR2_EL1\0DBGBCR3_EL1\0DBGBCR4_EL1\0DBGBCR5_EL1\0DBGBCR6_EL1\0DBGBCR7_EL1\0"; break;case 6: t="DBGWVR0_EL1\0DBGWVR1_EL1\0DBGWVR2_EL1\0DBGWVR3_EL1\0DBGWVR4_EL1\0DBGWVR5_EL1\0DBGWVR6_EL1\0DBGWVR7_EL1\0"; break;case 7: t="DBGWCR0_EL1\0DBGWCR1_EL1\0DBGWCR2_EL1\0DBGWCR3_EL1\0DBGWCR4_EL1\0DBGWCR5_EL1\0DBGWCR6_EL1\0DBGWCR7_EL1\0"; break;} break; }} break;case 1: if(m==0) t="MDRAR_EL1\0?\0?\0?\0OSLAR_EL1\0"; else if(j==4) { j=m; t="OSLSR_EL1\0?\0OSDLR_EL1\0DBGPRCR_EL1\0"; }break;case 7: if(j==6) { j=m; t="?\0?\0?\0?\0?\0?\0?\0?\0DBGCLAIMSET_EL1\0DBGCLAIMCLR_EL1\0?\0?\0?\0?\0DBGAUTHSTATUS_EL1\0"; }break;} break;case 3: if(n==0&&j==0) { j=m; t="?\0MDCCSR_EL0\0?\0?\0DBGDTR_EL0\0DBGDTRRX_EL0\0"; } break;case 4: if(n==0&&m==7) t="DBGVCR32_EL2\0"; break;} break;case 3: switch(k) {case 0: switch(n) {case 0: if(m==0) t="MIDR_EL1\0?\0?\0?\0?\0MPIDR_EL1\0REVIDR_EL1\0?\0ID_PFR0_EL1\0ID_PFR1_EL1\0ID_DFR0_EL1\0ID_AFR0_EL1\0ID_MMFR0_EL1\0ID_MMFR1_EL1\0ID_MMFR2_EL1\0ID_MMFR3_EL1\0ID_ISAR0_EL1\0ID_ISAR1_EL1\0ID_ISAR2_EL1\0ID_ISAR2_EL1\0ID_ISAR3_EL1\0ID_ISAR4_EL1\0ID_ISAR5_EL1\0ID_MMFR4_EL1\0?\0MVFR0_EL1\0MVFR1_EL1\0MVFR2_EL1\0?\0?\0?\0?\0?\0ID_AA64PFR0_EL1\0ID_AA64PFR1_EL1\0?\0?\0ID_AA64ZFR0_EL1\0?\0?\0?\0ID_AA64DFR0_EL1\0ID_AA64DFR1_EL1\0?\0?\0ID_AA64AFR0_EL1\0ID_AA64AFR1_EL1\0?\0?\0ID_AA64ISAR0_EL1\0ID_AA64ISAR1_EL1\0?\0?\0?\0?\0?\0?\0ID_AA64MMFR0_EL1\0ID_AA64MMFR1_EL1\0ID_AA64MMFR2_EL1\0"; break;case 1: switch(m) {case 0: t="SCTLR_EL1\0ACTLR_EL1\0CPACR_EL1\0"; break;case 2: t="ZCR_EL1\0"; break;} break;case 2: if(m==0) t="TTBR0_EL1\0TTBR1_EL1\0TCR_EL1\0"; break;case 4: switch(m) {case 0: t="SPSR_EL1\0ELR_EL1\0"; break;case 1: t="SP_EL0\0"; break;case 2: t="SPSel\0?\0CurrentEL\0PAN\0UAO\0"; break;case 6: t="ICC_PMR_EL1\0"; break;} break;case 5: switch(m) {case 1: t="AFSR0_EL1\0AFSR1_EL1\0"; break;case 2: t="ESR_EL1"; break;case 3: t="ERRIDR_EL1\0ERRSELR_EL1\0"; break;case 4: t="ERXFR_EL1\0ERXCTLR_EL1\0ERXSTATUS_EL1\0ERXADDR_EL1\0"; break;case 5: t="ERXMISC0_EL1\0ERXMISC1_EL1\0"; break;} break;case 6: if(m==0) t="FAR_EL1\0"; break;case 7: if(m==4) t="PAR_EL1\0"; break;case 9: switch(m) {case 9: t="PMSCR_EL1\0?\0PMSICR_EL1\0PMSIRR_EL1\0PMSFCR_EL1\0PMSEVFR_EL1\0PMSLATFR_EL1\0PMSIDR_EL1\0PMSIDR_EL1\0"; break;case 10: t="PMBLIMITR_EL1\0PMBPTR_EL1\0?\0PMBSR_EL1\0?\0?\0?\0PMBIDR_EL1\0"; break;case 14: t="?\0PMINTENSET_EL1\0PMINTENCLR_EL1\0"; break;} break;case 10: if(m==4) t="LORSA_EL1\0LOREA_EL1\0LORN_EL1\0LORC_EL1\0?\0?\0?\0LORID_EL1\0"; else if(m!=4&&j==0) { j=m; t="?\0?\0MAIR_EL1\0AMAIR_EL1\0"; }break;case 12: switch(m) {case 0: t="VBAR_EL1\0RVBAR_EL1\0RMR_EL1\0"; break;case 1: t="ISR_EL1\0DISR_EL1\0"; break;case 8: t="ICC_IAR0_EL1\0ICC_EOIR0_EL1\0ICC_HPPIR0_EL1\0ICC_BPR0_EL1\0ICC_AP0R0_EL1\0ICC_AP0R1_EL1\0ICC_AP0R2_EL1\0ICC_AP0R3_EL1\0"; break;case 9: t="ICC_AP1R0_EL1\0ICC_AP1R1_EL1\0ICC_AP1R2_EL1\0ICC_AP1R3_EL1\0"; break;case 11: t="?\0ICC_DIR_EL1\0?\0ICC_RPR_EL1\0?\0ICC_SGI1R_EL1\0ICC_ASGI1R_EL1\0ICC_SGI0R_EL1\0"; break;case 12: t="ICC_IAR1_EL1\0ICC_EOIR1_EL1\0ICC_HPPIR1_EL1\0ICC_BPR1_EL1\0ICC_CTLR_EL1\0ICC_SRE_EL1\0ICC_IGRPEN0_EL1\0ICC_IGRPEN1_EL1\0"; break;} break;case 13: if(m==0) t="?\0CONTEXTIDR_EL1\0?\0?\0TPIDR_EL1\0"; break;case 14: if(m==1) t="CNTKCTL_EL1\0"; break;} break;case 1: if(n==0&&m==0) t="CCSIDR_EL1\0CLIDR_EL1\0?\0?\0?\0?\0?\0AIDR_EL1\0"; break;case 2: if(n==0&&m==0) t="CSSELR_EL1\0"; break;case 3: switch(n) {case 0: if(m==0) t="?\0CTR_EL0\0?\0?\0?\0?\0?\0DCZID_EL0\0"; break;case 4: switch(m) {case 2: t="NZCV\0DAIF\0"; break;case 4: t="FPCR\0FPSR\0"; break;case 5: t="DSPSR_EL0\0DLR_EL0\0"; break;} break;case 9: switch(m) {case 12: t="PMCR_EL0\0PMCNTENSET_EL0\0PMCNTENCLR_EL0\0PMOVSCLR_EL0\0PMSWINC_EL0\0PMSELR_EL0\0PMCEID0_EL0\0PMCEID1_EL0\0"; break;case 13: t="PMCCNTR_EL0\0PMXEVTYPER_EL0\0PMXEVCNTR_EL0\0"; break;case 14: t="PMUSERENR_EL0\0?\0?\0PMOVSSET_EL0\0"; break;} break;
   83b64:	7100107f 	cmp	w3, #0x4
   83b68:	540011e0 	b.eq	83da4 <disasm_sysreg+0x7e4>  // b.none
   83b6c:	35ffd3c1 	cbnz	w1, 835e4 <disasm_sysreg+0x24>
   83b70:	f0000060 	adrp	x0, 92000 <sd_init+0x470>
   83b74:	91122000 	add	x0, x0, #0x488
   83b78:	2a0303e1 	mov	w1, w3
   83b7c:	910ea000 	add	x0, x0, #0x3a8
char *disasm_str(char*s,int n) {if(!s)return "?";while(n){s++;if(!*s){s++;n--;}}return *s?s:"?";};
   83b80:	17fffe74 	b	83550 <disasm_str.part.0>
char *disasm_sysreg(uint8_t p,uint8_t k,uint8_t n,uint8_t m,uint8_t j) {char *t=NULL;switch(p){case 2: switch(k) {case 0: switch(n) {case 0: switch(m) {case 0: t="?\0?\0OSDTRRX_EL1\0"; break;case 2: t="MDCCINT_EL1\0?\0MDSCR_EL1\0"; break;case 3: t="?\0?\0OSDTRTX_EL1\0"; break;case 6: t="?\0?\0OSECCR_EL1\0"; break;default: { n=j; j=m; switch(n) {case 4: t="DBGBVR0_EL1\0DBGBVR1_EL1\0DBGBVR2_EL1\0DBGBVR3_EL1\0DBGBVR4_EL1\0DBGBVR5_EL1\0DBGBVR6_EL1\0DBGBVR7_EL1\0"; break;case 5: t="DBGBCR0_EL1\0DBGBCR1_EL1\0DBGBCR2_EL1\0DBGBCR3_EL1\0DBGBCR4_EL1\0DBGBCR5_EL1\0DBGBCR6_EL1\0DBGBCR7_EL1\0"; break;case 6: t="DBGWVR0_EL1\0DBGWVR1_EL1\0DBGWVR2_EL1\0DBGWVR3_EL1\0DBGWVR4_EL1\0DBGWVR5_EL1\0DBGWVR6_EL1\0DBGWVR7_EL1\0"; break;case 7: t="DBGWCR0_EL1\0DBGWCR1_EL1\0DBGWCR2_EL1\0DBGWCR3_EL1\0DBGWCR4_EL1\0DBGWCR5_EL1\0DBGWCR6_EL1\0DBGWCR7_EL1\0"; break;} break; }} break;case 1: if(m==0) t="MDRAR_EL1\0?\0?\0?\0OSLAR_EL1\0"; else if(j==4) { j=m; t="OSLSR_EL1\0?\0OSDLR_EL1\0DBGPRCR_EL1\0"; }break;case 7: if(j==6) { j=m; t="?\0?\0?\0?\0?\0?\0?\0?\0DBGCLAIMSET_EL1\0DBGCLAIMCLR_EL1\0?\0?\0?\0?\0DBGAUTHSTATUS_EL1\0"; }break;} break;case 3: if(n==0&&j==0) { j=m; t="?\0MDCCSR_EL0\0?\0?\0DBGDTR_EL0\0DBGDTRRX_EL0\0"; } break;case 4: if(n==0&&m==7) t="DBGVCR32_EL2\0"; break;} break;case 3: switch(k) {case 0: switch(n) {case 0: if(m==0) t="MIDR_EL1\0?\0?\0?\0?\0MPIDR_EL1\0REVIDR_EL1\0?\0ID_PFR0_EL1\0ID_PFR1_EL1\0ID_DFR0_EL1\0ID_AFR0_EL1\0ID_MMFR0_EL1\0ID_MMFR1_EL1\0ID_MMFR2_EL1\0ID_MMFR3_EL1\0ID_ISAR0_EL1\0ID_ISAR1_EL1\0ID_ISAR2_EL1\0ID_ISAR2_EL1\0ID_ISAR3_EL1\0ID_ISAR4_EL1\0ID_ISAR5_EL1\0ID_MMFR4_EL1\0?\0MVFR0_EL1\0MVFR1_EL1\0MVFR2_EL1\0?\0?\0?\0?\0?\0ID_AA64PFR0_EL1\0ID_AA64PFR1_EL1\0?\0?\0ID_AA64ZFR0_EL1\0?\0?\0?\0ID_AA64DFR0_EL1\0ID_AA64DFR1_EL1\0?\0?\0ID_AA64AFR0_EL1\0ID_AA64AFR1_EL1\0?\0?\0ID_AA64ISAR0_EL1\0ID_AA64ISAR1_EL1\0?\0?\0?\0?\0?\0?\0ID_AA64MMFR0_EL1\0ID_AA64MMFR1_EL1\0ID_AA64MMFR2_EL1\0"; break;case 1: switch(m) {case 0: t="SCTLR_EL1\0ACTLR_EL1\0CPACR_EL1\0"; break;case 2: t="ZCR_EL1\0"; break;} break;case 2: if(m==0) t="TTBR0_EL1\0TTBR1_EL1\0TCR_EL1\0"; break;case 4: switch(m) {case 0: t="SPSR_EL1\0ELR_EL1\0"; break;case 1: t="SP_EL0\0"; break;case 2: t="SPSel\0?\0CurrentEL\0PAN\0UAO\0"; break;case 6: t="ICC_PMR_EL1\0"; break;} break;case 5: switch(m) {case 1: t="AFSR0_EL1\0AFSR1_EL1\0"; break;case 2: t="ESR_EL1"; break;case 3: t="ERRIDR_EL1\0ERRSELR_EL1\0"; break;case 4: t="ERXFR_EL1\0ERXCTLR_EL1\0ERXSTATUS_EL1\0ERXADDR_EL1\0"; break;case 5: t="ERXMISC0_EL1\0ERXMISC1_EL1\0"; break;} break;case 6: if(m==0) t="FAR_EL1\0"; break;case 7: if(m==4) t="PAR_EL1\0"; break;case 9: switch(m) {case 9: t="PMSCR_EL1\0?\0PMSICR_EL1\0PMSIRR_EL1\0PMSFCR_EL1\0PMSEVFR_EL1\0PMSLATFR_EL1\0PMSIDR_EL1\0PMSIDR_EL1\0"; break;case 10: t="PMBLIMITR_EL1\0PMBPTR_EL1\0?\0PMBSR_EL1\0?\0?\0?\0PMBIDR_EL1\0"; break;case 14: t="?\0PMINTENSET_EL1\0PMINTENCLR_EL1\0"; break;} break;case 10: if(m==4) t="LORSA_EL1\0LOREA_EL1\0LORN_EL1\0LORC_EL1\0?\0?\0?\0LORID_EL1\0"; else if(m!=4&&j==0) { j=m; t="?\0?\0MAIR_EL1\0AMAIR_EL1\0"; }break;case 12: switch(m) {case 0: t="VBAR_EL1\0RVBAR_EL1\0RMR_EL1\0"; break;case 1: t="ISR_EL1\0DISR_EL1\0"; break;case 8: t="ICC_IAR0_EL1\0ICC_EOIR0_EL1\0ICC_HPPIR0_EL1\0ICC_BPR0_EL1\0ICC_AP0R0_EL1\0ICC_AP0R1_EL1\0ICC_AP0R2_EL1\0ICC_AP0R3_EL1\0"; break;case 9: t="ICC_AP1R0_EL1\0ICC_AP1R1_EL1\0ICC_AP1R2_EL1\0ICC_AP1R3_EL1\0"; break;case 11: t="?\0ICC_DIR_EL1\0?\0ICC_RPR_EL1\0?\0ICC_SGI1R_EL1\0ICC_ASGI1R_EL1\0ICC_SGI0R_EL1\0"; break;case 12: t="ICC_IAR1_EL1\0ICC_EOIR1_EL1\0ICC_HPPIR1_EL1\0ICC_BPR1_EL1\0ICC_CTLR_EL1\0ICC_SRE_EL1\0ICC_IGRPEN0_EL1\0ICC_IGRPEN1_EL1\0"; break;} break;case 13: if(m==0) t="?\0CONTEXTIDR_EL1\0?\0?\0TPIDR_EL1\0"; break;case 14: if(m==1) t="CNTKCTL_EL1\0"; break;} break;case 1: if(n==0&&m==0) t="CCSIDR_EL1\0CLIDR_EL1\0?\0?\0?\0?\0?\0AIDR_EL1\0"; break;case 2: if(n==0&&m==0) t="CSSELR_EL1\0"; break;case 3: switch(n) {case 0: if(m==0) t="?\0CTR_EL0\0?\0?\0?\0?\0?\0DCZID_EL0\0"; break;case 4: switch(m) {case 2: t="NZCV\0DAIF\0"; break;case 4: t="FPCR\0FPSR\0"; break;case 5: t="DSPSR_EL0\0DLR_EL0\0"; break;} break;case 9: switch(m) {case 12: t="PMCR_EL0\0PMCNTENSET_EL0\0PMCNTENCLR_EL0\0PMOVSCLR_EL0\0PMSWINC_EL0\0PMSELR_EL0\0PMCEID0_EL0\0PMCEID1_EL0\0"; break;case 13: t="PMCCNTR_EL0\0PMXEVTYPER_EL0\0PMXEVCNTR_EL0\0"; break;case 14: t="PMUSERENR_EL0\0?\0?\0PMOVSSET_EL0\0"; break;} break;
   83b84:	35ffd303 	cbnz	w3, 835e4 <disasm_sysreg+0x24>
   83b88:	f0000060 	adrp	x0, 92000 <sd_init+0x470>
   83b8c:	91122000 	add	x0, x0, #0x488
   83b90:	910a0000 	add	x0, x0, #0x280
char *disasm_str(char*s,int n) {if(!s)return "?";while(n){s++;if(!*s){s++;n--;}}return *s?s:"?";};
   83b94:	17fffe6f 	b	83550 <disasm_str.part.0>
case 13: if(m==0) t="?\0?\0TPIDR_EL0\0TPIDRRO_EL0\0"; break;case 14: switch(m) {case 0: t="CNTFRQ_EL0\0CNTPCT_EL0\0CNTVCT_EL0\0"; break;case 2: t="CNTP_TVAL_EL0\0CNTP_CTL_EL0\0CNTP_CVAL_EL0\0"; break;case 3: t="CNTV_TVAL_EL0\0CNTV_CTL_EL0\0CNTV_CVAL_EL0\0"; break;} break;} break;case 4: switch(n) {case 0: if(m==0) t="VPIDR_EL2\0?\0?\0?\0?\0VMPIDR_EL2\0"; break;case 1: switch(m) {case 0: t="SCTLR_EL2\0ACTLR_EL2\0"; break;case 1: t="HCR_EL2\0MDCR_EL2\0CPTR_EL2\0HSTR_EL2\0?\0?\0?\0HACR_EL2\0"; break;case 2: t="ZCR_EL2\0"; break;} break;case 2: switch(m) {case 0: t="TTBR0_EL2\0?\0TCR_EL2\0"; break;case 1: t="VTTBR0_EL2\0?\0VTCR_EL2\0"; break;} break;case 3: if(m==0) t="DACR32_EL2\0"; break;case 4: switch(m) {case 0: t="SPSR_EL2\0ELR_EL2\0"; break;case 1: t="SP_EL1\0"; break;case 3: t="SPSR_irq\0SPSR_abt\0SPSR_und\0SPSR_fiq\0"; break;} break;case 5: switch(m) {case 0: t="?\0IFSR32_EL2\0"; break;case 1: t="AFSR0_EL2\0AFSR1_EL2\0"; break;case 2: t="ESR_EL2\0?\0?\0VSESR_EL2\0"; break;case 3: t="FPEXC32_EL2\0"; break;} break;case 6: if(m==0) t="FAR_EL2\0?\0?\0?\0HPFAR_EL2\0"; break;case 9: if(m==9) t="PMSCR_EL2\0"; break;case 10: switch(m) {case 2: t="MAIR_EL2\0"; break;case 3: t="AMAIR_EL2\0"; break;} break;case 12: switch(m) {case 0: t="VBAR_EL2\0RVBAR_EL2\0RMR_EL2\0"; break;case 1: t="?\0VDISR_EL2\0"; break;case 8: t="ICH_AP0R0_EL2\0ICH_AP0R1_EL2\0ICH_AP0R2_EL2\0ICH_AP0R3_EL2\0"; break;case 9: t="ICH_AP1R0_EL2\0ICH_AP1R1_EL2\0ICH_AP1R2_EL2\0ICH_AP1R3_EL2\0ICC_SRE_EL2\0"; break;case 11: t="ICH_HCR_EL2\0ICH_VTR_EL2\0ICH_MISR_EL2\0ICH_EISR_EL2\0?\0ICH_ELRSR_EL2\0?\0ICH_VMCR_EL2\0"; break;case 12: t="ICH_LR0_EL2\0ICH_LR1_EL2\0ICH_LR2_EL2\0ICH_LR3_EL2\0ICH_LR4_EL2\0ICH_LR5_EL2\0ICH_LR6_EL2\0ICH_LR7_EL2\0"; break;case 13: t="ICH_LR8_EL2\0ICH_LR9_EL2\0ICH_LR10_EL2\0ICH_LR11_EL2\0ICH_LR12_EL2\0ICH_LR13_EL2\0ICH_LR14_EL2\0ICH_LR15_EL2\0"; break;} break;case 13: if(m==0) t="?\0CONTEXTIDR_EL2\0TPIDR_EL2\0"; break;case 14: switch(m) {case 0: t="?\0?\0?\0CNTVOFF_EL2\0"; break;case 1: t="CNTHCTL_EL2\0"; break;case 2: t="CNTHP_TVAL_EL2\0CNTHP_CTL_EL2\0CNTHP_CVAL_EL2\0"; break;case 3: t="CNTHV_TVAL_EL2\0CNTHV_CTL_EL2\0CNTHV_CVAL_EL2\0"; break;} break;} break;case 5: if(n==4&&m==0) t="SPSR_EL12\0ELR_EL12\0"; break;case 6: if(n==4&&m==1) t="SP_EL2\0"; break;case 7: if(n==14&&m==2) t="CNTPS_TVAL_EL1\0CNTPS_CTL_EL1\0CNTPS_CVAL_EL1\0"; break;} break;}return t?disasm_str(t,j):NULL;}
   83b98:	35ffd263 	cbnz	w3, 835e4 <disasm_sysreg+0x24>
   83b9c:	f0000060 	adrp	x0, 92000 <sd_init+0x470>
   83ba0:	91122000 	add	x0, x0, #0x488
   83ba4:	912fe000 	add	x0, x0, #0xbf8
char *disasm_str(char*s,int n) {if(!s)return "?";while(n){s++;if(!*s){s++;n--;}}return *s?s:"?";};
   83ba8:	17fffe6a 	b	83550 <disasm_str.part.0>
char *disasm_sysreg(uint8_t p,uint8_t k,uint8_t n,uint8_t m,uint8_t j) {char *t=NULL;switch(p){case 2: switch(k) {case 0: switch(n) {case 0: switch(m) {case 0: t="?\0?\0OSDTRRX_EL1\0"; break;case 2: t="MDCCINT_EL1\0?\0MDSCR_EL1\0"; break;case 3: t="?\0?\0OSDTRTX_EL1\0"; break;case 6: t="?\0?\0OSECCR_EL1\0"; break;default: { n=j; j=m; switch(n) {case 4: t="DBGBVR0_EL1\0DBGBVR1_EL1\0DBGBVR2_EL1\0DBGBVR3_EL1\0DBGBVR4_EL1\0DBGBVR5_EL1\0DBGBVR6_EL1\0DBGBVR7_EL1\0"; break;case 5: t="DBGBCR0_EL1\0DBGBCR1_EL1\0DBGBCR2_EL1\0DBGBCR3_EL1\0DBGBCR4_EL1\0DBGBCR5_EL1\0DBGBCR6_EL1\0DBGBCR7_EL1\0"; break;case 6: t="DBGWVR0_EL1\0DBGWVR1_EL1\0DBGWVR2_EL1\0DBGWVR3_EL1\0DBGWVR4_EL1\0DBGWVR5_EL1\0DBGWVR6_EL1\0DBGWVR7_EL1\0"; break;case 7: t="DBGWCR0_EL1\0DBGWCR1_EL1\0DBGWCR2_EL1\0DBGWCR3_EL1\0DBGWCR4_EL1\0DBGWCR5_EL1\0DBGWCR6_EL1\0DBGWCR7_EL1\0"; break;} break; }} break;case 1: if(m==0) t="MDRAR_EL1\0?\0?\0?\0OSLAR_EL1\0"; else if(j==4) { j=m; t="OSLSR_EL1\0?\0OSDLR_EL1\0DBGPRCR_EL1\0"; }break;case 7: if(j==6) { j=m; t="?\0?\0?\0?\0?\0?\0?\0?\0DBGCLAIMSET_EL1\0DBGCLAIMCLR_EL1\0?\0?\0?\0?\0DBGAUTHSTATUS_EL1\0"; }break;} break;case 3: if(n==0&&j==0) { j=m; t="?\0MDCCSR_EL0\0?\0?\0DBGDTR_EL0\0DBGDTRRX_EL0\0"; } break;case 4: if(n==0&&m==7) t="DBGVCR32_EL2\0"; break;} break;case 3: switch(k) {case 0: switch(n) {case 0: if(m==0) t="MIDR_EL1\0?\0?\0?\0?\0MPIDR_EL1\0REVIDR_EL1\0?\0ID_PFR0_EL1\0ID_PFR1_EL1\0ID_DFR0_EL1\0ID_AFR0_EL1\0ID_MMFR0_EL1\0ID_MMFR1_EL1\0ID_MMFR2_EL1\0ID_MMFR3_EL1\0ID_ISAR0_EL1\0ID_ISAR1_EL1\0ID_ISAR2_EL1\0ID_ISAR2_EL1\0ID_ISAR3_EL1\0ID_ISAR4_EL1\0ID_ISAR5_EL1\0ID_MMFR4_EL1\0?\0MVFR0_EL1\0MVFR1_EL1\0MVFR2_EL1\0?\0?\0?\0?\0?\0ID_AA64PFR0_EL1\0ID_AA64PFR1_EL1\0?\0?\0ID_AA64ZFR0_EL1\0?\0?\0?\0ID_AA64DFR0_EL1\0ID_AA64DFR1_EL1\0?\0?\0ID_AA64AFR0_EL1\0ID_AA64AFR1_EL1\0?\0?\0ID_AA64ISAR0_EL1\0ID_AA64ISAR1_EL1\0?\0?\0?\0?\0?\0?\0ID_AA64MMFR0_EL1\0ID_AA64MMFR1_EL1\0ID_AA64MMFR2_EL1\0"; break;case 1: switch(m) {case 0: t="SCTLR_EL1\0ACTLR_EL1\0CPACR_EL1\0"; break;case 2: t="ZCR_EL1\0"; break;} break;case 2: if(m==0) t="TTBR0_EL1\0TTBR1_EL1\0TCR_EL1\0"; break;case 4: switch(m) {case 0: t="SPSR_EL1\0ELR_EL1\0"; break;case 1: t="SP_EL0\0"; break;case 2: t="SPSel\0?\0CurrentEL\0PAN\0UAO\0"; break;case 6: t="ICC_PMR_EL1\0"; break;} break;case 5: switch(m) {case 1: t="AFSR0_EL1\0AFSR1_EL1\0"; break;case 2: t="ESR_EL1"; break;case 3: t="ERRIDR_EL1\0ERRSELR_EL1\0"; break;case 4: t="ERXFR_EL1\0ERXCTLR_EL1\0ERXSTATUS_EL1\0ERXADDR_EL1\0"; break;case 5: t="ERXMISC0_EL1\0ERXMISC1_EL1\0"; break;} break;case 6: if(m==0) t="FAR_EL1\0"; break;case 7: if(m==4) t="PAR_EL1\0"; break;case 9: switch(m) {case 9: t="PMSCR_EL1\0?\0PMSICR_EL1\0PMSIRR_EL1\0PMSFCR_EL1\0PMSEVFR_EL1\0PMSLATFR_EL1\0PMSIDR_EL1\0PMSIDR_EL1\0"; break;case 10: t="PMBLIMITR_EL1\0PMBPTR_EL1\0?\0PMBSR_EL1\0?\0?\0?\0PMBIDR_EL1\0"; break;case 14: t="?\0PMINTENSET_EL1\0PMINTENCLR_EL1\0"; break;} break;case 10: if(m==4) t="LORSA_EL1\0LOREA_EL1\0LORN_EL1\0LORC_EL1\0?\0?\0?\0LORID_EL1\0"; else if(m!=4&&j==0) { j=m; t="?\0?\0MAIR_EL1\0AMAIR_EL1\0"; }break;case 12: switch(m) {case 0: t="VBAR_EL1\0RVBAR_EL1\0RMR_EL1\0"; break;case 1: t="ISR_EL1\0DISR_EL1\0"; break;case 8: t="ICC_IAR0_EL1\0ICC_EOIR0_EL1\0ICC_HPPIR0_EL1\0ICC_BPR0_EL1\0ICC_AP0R0_EL1\0ICC_AP0R1_EL1\0ICC_AP0R2_EL1\0ICC_AP0R3_EL1\0"; break;case 9: t="ICC_AP1R0_EL1\0ICC_AP1R1_EL1\0ICC_AP1R2_EL1\0ICC_AP1R3_EL1\0"; break;case 11: t="?\0ICC_DIR_EL1\0?\0ICC_RPR_EL1\0?\0ICC_SGI1R_EL1\0ICC_ASGI1R_EL1\0ICC_SGI0R_EL1\0"; break;case 12: t="ICC_IAR1_EL1\0ICC_EOIR1_EL1\0ICC_HPPIR1_EL1\0ICC_BPR1_EL1\0ICC_CTLR_EL1\0ICC_SRE_EL1\0ICC_IGRPEN0_EL1\0ICC_IGRPEN1_EL1\0"; break;} break;case 13: if(m==0) t="?\0CONTEXTIDR_EL1\0?\0?\0TPIDR_EL1\0"; break;case 14: if(m==1) t="CNTKCTL_EL1\0"; break;} break;case 1: if(n==0&&m==0) t="CCSIDR_EL1\0CLIDR_EL1\0?\0?\0?\0?\0?\0AIDR_EL1\0"; break;case 2: if(n==0&&m==0) t="CSSELR_EL1\0"; break;case 3: switch(n) {case 0: if(m==0) t="?\0CTR_EL0\0?\0?\0?\0?\0?\0DCZID_EL0\0"; break;case 4: switch(m) {case 2: t="NZCV\0DAIF\0"; break;case 4: t="FPCR\0FPSR\0"; break;case 5: t="DSPSR_EL0\0DLR_EL0\0"; break;} break;case 9: switch(m) {case 12: t="PMCR_EL0\0PMCNTENSET_EL0\0PMCNTENCLR_EL0\0PMOVSCLR_EL0\0PMSWINC_EL0\0PMSELR_EL0\0PMCEID0_EL0\0PMCEID1_EL0\0"; break;case 13: t="PMCCNTR_EL0\0PMXEVTYPER_EL0\0PMXEVCNTR_EL0\0"; break;case 14: t="PMUSERENR_EL0\0?\0?\0PMOVSSET_EL0\0"; break;} break;
   83bac:	35ffd1c3 	cbnz	w3, 835e4 <disasm_sysreg+0x24>
   83bb0:	f0000060 	adrp	x0, 92000 <sd_init+0x470>
   83bb4:	91122000 	add	x0, x0, #0x488
   83bb8:	91124000 	add	x0, x0, #0x490
char *disasm_str(char*s,int n) {if(!s)return "?";while(n){s++;if(!*s){s++;n--;}}return *s?s:"?";};
   83bbc:	17fffe65 	b	83550 <disasm_str.part.0>
   83bc0:	7100307f 	cmp	w3, #0xc
   83bc4:	540015a0 	b.eq	83e78 <disasm_sysreg+0x8b8>  // b.none
   83bc8:	7100347f 	cmp	w3, #0xd
   83bcc:	54000d40 	b.eq	83d74 <disasm_sysreg+0x7b4>  // b.none
   83bd0:	71002c7f 	cmp	w3, #0xb
   83bd4:	54ffd081 	b.ne	835e4 <disasm_sysreg+0x24>  // b.any
case 13: if(m==0) t="?\0?\0TPIDR_EL0\0TPIDRRO_EL0\0"; break;case 14: switch(m) {case 0: t="CNTFRQ_EL0\0CNTPCT_EL0\0CNTVCT_EL0\0"; break;case 2: t="CNTP_TVAL_EL0\0CNTP_CTL_EL0\0CNTP_CVAL_EL0\0"; break;case 3: t="CNTV_TVAL_EL0\0CNTV_CTL_EL0\0CNTV_CVAL_EL0\0"; break;} break;} break;case 4: switch(n) {case 0: if(m==0) t="VPIDR_EL2\0?\0?\0?\0?\0VMPIDR_EL2\0"; break;case 1: switch(m) {case 0: t="SCTLR_EL2\0ACTLR_EL2\0"; break;case 1: t="HCR_EL2\0MDCR_EL2\0CPTR_EL2\0HSTR_EL2\0?\0?\0?\0HACR_EL2\0"; break;case 2: t="ZCR_EL2\0"; break;} break;case 2: switch(m) {case 0: t="TTBR0_EL2\0?\0TCR_EL2\0"; break;case 1: t="VTTBR0_EL2\0?\0VTCR_EL2\0"; break;} break;case 3: if(m==0) t="DACR32_EL2\0"; break;case 4: switch(m) {case 0: t="SPSR_EL2\0ELR_EL2\0"; break;case 1: t="SP_EL1\0"; break;case 3: t="SPSR_irq\0SPSR_abt\0SPSR_und\0SPSR_fiq\0"; break;} break;case 5: switch(m) {case 0: t="?\0IFSR32_EL2\0"; break;case 1: t="AFSR0_EL2\0AFSR1_EL2\0"; break;case 2: t="ESR_EL2\0?\0?\0VSESR_EL2\0"; break;case 3: t="FPEXC32_EL2\0"; break;} break;case 6: if(m==0) t="FAR_EL2\0?\0?\0?\0HPFAR_EL2\0"; break;case 9: if(m==9) t="PMSCR_EL2\0"; break;case 10: switch(m) {case 2: t="MAIR_EL2\0"; break;case 3: t="AMAIR_EL2\0"; break;} break;case 12: switch(m) {case 0: t="VBAR_EL2\0RVBAR_EL2\0RMR_EL2\0"; break;case 1: t="?\0VDISR_EL2\0"; break;case 8: t="ICH_AP0R0_EL2\0ICH_AP0R1_EL2\0ICH_AP0R2_EL2\0ICH_AP0R3_EL2\0"; break;case 9: t="ICH_AP1R0_EL2\0ICH_AP1R1_EL2\0ICH_AP1R2_EL2\0ICH_AP1R3_EL2\0ICC_SRE_EL2\0"; break;case 11: t="ICH_HCR_EL2\0ICH_VTR_EL2\0ICH_MISR_EL2\0ICH_EISR_EL2\0?\0ICH_ELRSR_EL2\0?\0ICH_VMCR_EL2\0"; break;case 12: t="ICH_LR0_EL2\0ICH_LR1_EL2\0ICH_LR2_EL2\0ICH_LR3_EL2\0ICH_LR4_EL2\0ICH_LR5_EL2\0ICH_LR6_EL2\0ICH_LR7_EL2\0"; break;case 13: t="ICH_LR8_EL2\0ICH_LR9_EL2\0ICH_LR10_EL2\0ICH_LR11_EL2\0ICH_LR12_EL2\0ICH_LR13_EL2\0ICH_LR14_EL2\0ICH_LR15_EL2\0"; break;} break;case 13: if(m==0) t="?\0CONTEXTIDR_EL2\0TPIDR_EL2\0"; break;case 14: switch(m) {case 0: t="?\0?\0?\0CNTVOFF_EL2\0"; break;case 1: t="CNTHCTL_EL2\0"; break;case 2: t="CNTHP_TVAL_EL2\0CNTHP_CTL_EL2\0CNTHP_CVAL_EL2\0"; break;case 3: t="CNTHV_TVAL_EL2\0CNTHV_CTL_EL2\0CNTHV_CVAL_EL2\0"; break;} break;} break;case 5: if(n==4&&m==0) t="SPSR_EL12\0ELR_EL12\0"; break;case 6: if(n==4&&m==1) t="SP_EL2\0"; break;case 7: if(n==14&&m==2) t="CNTPS_TVAL_EL1\0CNTPS_CTL_EL1\0CNTPS_CVAL_EL1\0"; break;} break;}return t?disasm_str(t,j):NULL;}
   83bd8:	f0000060 	adrp	x0, 92000 <sd_init+0x470>
   83bdc:	91122000 	add	x0, x0, #0x488
   83be0:	91258000 	add	x0, x0, #0x960
char *disasm_str(char*s,int n) {if(!s)return "?";while(n){s++;if(!*s){s++;n--;}}return *s?s:"?";};
   83be4:	17fffe5b 	b	83550 <disasm_str.part.0>
case 13: if(m==0) t="?\0?\0TPIDR_EL0\0TPIDRRO_EL0\0"; break;case 14: switch(m) {case 0: t="CNTFRQ_EL0\0CNTPCT_EL0\0CNTVCT_EL0\0"; break;case 2: t="CNTP_TVAL_EL0\0CNTP_CTL_EL0\0CNTP_CVAL_EL0\0"; break;case 3: t="CNTV_TVAL_EL0\0CNTV_CTL_EL0\0CNTV_CVAL_EL0\0"; break;} break;} break;case 4: switch(n) {case 0: if(m==0) t="VPIDR_EL2\0?\0?\0?\0?\0VMPIDR_EL2\0"; break;case 1: switch(m) {case 0: t="SCTLR_EL2\0ACTLR_EL2\0"; break;case 1: t="HCR_EL2\0MDCR_EL2\0CPTR_EL2\0HSTR_EL2\0?\0?\0?\0HACR_EL2\0"; break;case 2: t="ZCR_EL2\0"; break;} break;case 2: switch(m) {case 0: t="TTBR0_EL2\0?\0TCR_EL2\0"; break;case 1: t="VTTBR0_EL2\0?\0VTCR_EL2\0"; break;} break;case 3: if(m==0) t="DACR32_EL2\0"; break;case 4: switch(m) {case 0: t="SPSR_EL2\0ELR_EL2\0"; break;case 1: t="SP_EL1\0"; break;case 3: t="SPSR_irq\0SPSR_abt\0SPSR_und\0SPSR_fiq\0"; break;} break;case 5: switch(m) {case 0: t="?\0IFSR32_EL2\0"; break;case 1: t="AFSR0_EL2\0AFSR1_EL2\0"; break;case 2: t="ESR_EL2\0?\0?\0VSESR_EL2\0"; break;case 3: t="FPEXC32_EL2\0"; break;} break;case 6: if(m==0) t="FAR_EL2\0?\0?\0?\0HPFAR_EL2\0"; break;case 9: if(m==9) t="PMSCR_EL2\0"; break;case 10: switch(m) {case 2: t="MAIR_EL2\0"; break;case 3: t="AMAIR_EL2\0"; break;} break;case 12: switch(m) {case 0: t="VBAR_EL2\0RVBAR_EL2\0RMR_EL2\0"; break;case 1: t="?\0VDISR_EL2\0"; break;case 8: t="ICH_AP0R0_EL2\0ICH_AP0R1_EL2\0ICH_AP0R2_EL2\0ICH_AP0R3_EL2\0"; break;case 9: t="ICH_AP1R0_EL2\0ICH_AP1R1_EL2\0ICH_AP1R2_EL2\0ICH_AP1R3_EL2\0ICC_SRE_EL2\0"; break;case 11: t="ICH_HCR_EL2\0ICH_VTR_EL2\0ICH_MISR_EL2\0ICH_EISR_EL2\0?\0ICH_ELRSR_EL2\0?\0ICH_VMCR_EL2\0"; break;case 12: t="ICH_LR0_EL2\0ICH_LR1_EL2\0ICH_LR2_EL2\0ICH_LR3_EL2\0ICH_LR4_EL2\0ICH_LR5_EL2\0ICH_LR6_EL2\0ICH_LR7_EL2\0"; break;case 13: t="ICH_LR8_EL2\0ICH_LR9_EL2\0ICH_LR10_EL2\0ICH_LR11_EL2\0ICH_LR12_EL2\0ICH_LR13_EL2\0ICH_LR14_EL2\0ICH_LR15_EL2\0"; break;} break;case 13: if(m==0) t="?\0CONTEXTIDR_EL2\0TPIDR_EL2\0"; break;case 14: switch(m) {case 0: t="?\0?\0?\0CNTVOFF_EL2\0"; break;case 1: t="CNTHCTL_EL2\0"; break;case 2: t="CNTHP_TVAL_EL2\0CNTHP_CTL_EL2\0CNTHP_CVAL_EL2\0"; break;case 3: t="CNTHV_TVAL_EL2\0CNTHV_CTL_EL2\0CNTHV_CVAL_EL2\0"; break;} break;} break;case 5: if(n==4&&m==0) t="SPSR_EL12\0ELR_EL12\0"; break;case 6: if(n==4&&m==1) t="SP_EL2\0"; break;case 7: if(n==14&&m==2) t="CNTPS_TVAL_EL1\0CNTPS_CTL_EL1\0CNTPS_CVAL_EL1\0"; break;} break;}return t?disasm_str(t,j):NULL;}
   83be8:	7100047f 	cmp	w3, #0x1
   83bec:	540017e0 	b.eq	83ee8 <disasm_sysreg+0x928>  // b.none
   83bf0:	34001743 	cbz	w3, 83ed8 <disasm_sysreg+0x918>
   83bf4:	7100087f 	cmp	w3, #0x2
   83bf8:	54000ee0 	b.eq	83dd4 <disasm_sysreg+0x814>  // b.none
   83bfc:	71000c7f 	cmp	w3, #0x3
   83c00:	54ffcf21 	b.ne	835e4 <disasm_sysreg+0x24>  // b.any
   83c04:	f0000060 	adrp	x0, 92000 <sd_init+0x470>
   83c08:	91122000 	add	x0, x0, #0x488
   83c0c:	91226000 	add	x0, x0, #0x898
char *disasm_str(char*s,int n) {if(!s)return "?";while(n){s++;if(!*s){s++;n--;}}return *s?s:"?";};
   83c10:	17fffe50 	b	83550 <disasm_str.part.0>
case 13: if(m==0) t="?\0?\0TPIDR_EL0\0TPIDRRO_EL0\0"; break;case 14: switch(m) {case 0: t="CNTFRQ_EL0\0CNTPCT_EL0\0CNTVCT_EL0\0"; break;case 2: t="CNTP_TVAL_EL0\0CNTP_CTL_EL0\0CNTP_CVAL_EL0\0"; break;case 3: t="CNTV_TVAL_EL0\0CNTV_CTL_EL0\0CNTV_CVAL_EL0\0"; break;} break;} break;case 4: switch(n) {case 0: if(m==0) t="VPIDR_EL2\0?\0?\0?\0?\0VMPIDR_EL2\0"; break;case 1: switch(m) {case 0: t="SCTLR_EL2\0ACTLR_EL2\0"; break;case 1: t="HCR_EL2\0MDCR_EL2\0CPTR_EL2\0HSTR_EL2\0?\0?\0?\0HACR_EL2\0"; break;case 2: t="ZCR_EL2\0"; break;} break;case 2: switch(m) {case 0: t="TTBR0_EL2\0?\0TCR_EL2\0"; break;case 1: t="VTTBR0_EL2\0?\0VTCR_EL2\0"; break;} break;case 3: if(m==0) t="DACR32_EL2\0"; break;case 4: switch(m) {case 0: t="SPSR_EL2\0ELR_EL2\0"; break;case 1: t="SP_EL1\0"; break;case 3: t="SPSR_irq\0SPSR_abt\0SPSR_und\0SPSR_fiq\0"; break;} break;case 5: switch(m) {case 0: t="?\0IFSR32_EL2\0"; break;case 1: t="AFSR0_EL2\0AFSR1_EL2\0"; break;case 2: t="ESR_EL2\0?\0?\0VSESR_EL2\0"; break;case 3: t="FPEXC32_EL2\0"; break;} break;case 6: if(m==0) t="FAR_EL2\0?\0?\0?\0HPFAR_EL2\0"; break;case 9: if(m==9) t="PMSCR_EL2\0"; break;case 10: switch(m) {case 2: t="MAIR_EL2\0"; break;case 3: t="AMAIR_EL2\0"; break;} break;case 12: switch(m) {case 0: t="VBAR_EL2\0RVBAR_EL2\0RMR_EL2\0"; break;case 1: t="?\0VDISR_EL2\0"; break;case 8: t="ICH_AP0R0_EL2\0ICH_AP0R1_EL2\0ICH_AP0R2_EL2\0ICH_AP0R3_EL2\0"; break;case 9: t="ICH_AP1R0_EL2\0ICH_AP1R1_EL2\0ICH_AP1R2_EL2\0ICH_AP1R3_EL2\0ICC_SRE_EL2\0"; break;case 11: t="ICH_HCR_EL2\0ICH_VTR_EL2\0ICH_MISR_EL2\0ICH_EISR_EL2\0?\0ICH_ELRSR_EL2\0?\0ICH_VMCR_EL2\0"; break;case 12: t="ICH_LR0_EL2\0ICH_LR1_EL2\0ICH_LR2_EL2\0ICH_LR3_EL2\0ICH_LR4_EL2\0ICH_LR5_EL2\0ICH_LR6_EL2\0ICH_LR7_EL2\0"; break;case 13: t="ICH_LR8_EL2\0ICH_LR9_EL2\0ICH_LR10_EL2\0ICH_LR11_EL2\0ICH_LR12_EL2\0ICH_LR13_EL2\0ICH_LR14_EL2\0ICH_LR15_EL2\0"; break;} break;case 13: if(m==0) t="?\0CONTEXTIDR_EL2\0TPIDR_EL2\0"; break;case 14: switch(m) {case 0: t="?\0?\0?\0CNTVOFF_EL2\0"; break;case 1: t="CNTHCTL_EL2\0"; break;case 2: t="CNTHP_TVAL_EL2\0CNTHP_CTL_EL2\0CNTHP_CVAL_EL2\0"; break;case 3: t="CNTHV_TVAL_EL2\0CNTHV_CTL_EL2\0CNTHV_CVAL_EL2\0"; break;} break;} break;case 5: if(n==4&&m==0) t="SPSR_EL12\0ELR_EL12\0"; break;case 6: if(n==4&&m==1) t="SP_EL2\0"; break;case 7: if(n==14&&m==2) t="CNTPS_TVAL_EL1\0CNTPS_CTL_EL1\0CNTPS_CVAL_EL1\0"; break;} break;}return t?disasm_str(t,j):NULL;}
   83c14:	35ffce83 	cbnz	w3, 835e4 <disasm_sysreg+0x24>
   83c18:	f0000060 	adrp	x0, 92000 <sd_init+0x470>
   83c1c:	91122000 	add	x0, x0, #0x488
   83c20:	91014000 	add	x0, x0, #0x50
char *disasm_str(char*s,int n) {if(!s)return "?";while(n){s++;if(!*s){s++;n--;}}return *s?s:"?";};
   83c24:	17fffe4b 	b	83550 <disasm_str.part.0>
   83c28:	340008e3 	cbz	w3, 83d44 <disasm_sysreg+0x784>
   83c2c:	7100047f 	cmp	w3, #0x1
   83c30:	54ffcda1 	b.ne	835e4 <disasm_sysreg+0x24>  // b.any
char *disasm_sysreg(uint8_t p,uint8_t k,uint8_t n,uint8_t m,uint8_t j) {char *t=NULL;switch(p){case 2: switch(k) {case 0: switch(n) {case 0: switch(m) {case 0: t="?\0?\0OSDTRRX_EL1\0"; break;case 2: t="MDCCINT_EL1\0?\0MDSCR_EL1\0"; break;case 3: t="?\0?\0OSDTRTX_EL1\0"; break;case 6: t="?\0?\0OSECCR_EL1\0"; break;default: { n=j; j=m; switch(n) {case 4: t="DBGBVR0_EL1\0DBGBVR1_EL1\0DBGBVR2_EL1\0DBGBVR3_EL1\0DBGBVR4_EL1\0DBGBVR5_EL1\0DBGBVR6_EL1\0DBGBVR7_EL1\0"; break;case 5: t="DBGBCR0_EL1\0DBGBCR1_EL1\0DBGBCR2_EL1\0DBGBCR3_EL1\0DBGBCR4_EL1\0DBGBCR5_EL1\0DBGBCR6_EL1\0DBGBCR7_EL1\0"; break;case 6: t="DBGWVR0_EL1\0DBGWVR1_EL1\0DBGWVR2_EL1\0DBGWVR3_EL1\0DBGWVR4_EL1\0DBGWVR5_EL1\0DBGWVR6_EL1\0DBGWVR7_EL1\0"; break;case 7: t="DBGWCR0_EL1\0DBGWCR1_EL1\0DBGWCR2_EL1\0DBGWCR3_EL1\0DBGWCR4_EL1\0DBGWCR5_EL1\0DBGWCR6_EL1\0DBGWCR7_EL1\0"; break;} break; }} break;case 1: if(m==0) t="MDRAR_EL1\0?\0?\0?\0OSLAR_EL1\0"; else if(j==4) { j=m; t="OSLSR_EL1\0?\0OSDLR_EL1\0DBGPRCR_EL1\0"; }break;case 7: if(j==6) { j=m; t="?\0?\0?\0?\0?\0?\0?\0?\0DBGCLAIMSET_EL1\0DBGCLAIMCLR_EL1\0?\0?\0?\0?\0DBGAUTHSTATUS_EL1\0"; }break;} break;case 3: if(n==0&&j==0) { j=m; t="?\0MDCCSR_EL0\0?\0?\0DBGDTR_EL0\0DBGDTRRX_EL0\0"; } break;case 4: if(n==0&&m==7) t="DBGVCR32_EL2\0"; break;} break;case 3: switch(k) {case 0: switch(n) {case 0: if(m==0) t="MIDR_EL1\0?\0?\0?\0?\0MPIDR_EL1\0REVIDR_EL1\0?\0ID_PFR0_EL1\0ID_PFR1_EL1\0ID_DFR0_EL1\0ID_AFR0_EL1\0ID_MMFR0_EL1\0ID_MMFR1_EL1\0ID_MMFR2_EL1\0ID_MMFR3_EL1\0ID_ISAR0_EL1\0ID_ISAR1_EL1\0ID_ISAR2_EL1\0ID_ISAR2_EL1\0ID_ISAR3_EL1\0ID_ISAR4_EL1\0ID_ISAR5_EL1\0ID_MMFR4_EL1\0?\0MVFR0_EL1\0MVFR1_EL1\0MVFR2_EL1\0?\0?\0?\0?\0?\0ID_AA64PFR0_EL1\0ID_AA64PFR1_EL1\0?\0?\0ID_AA64ZFR0_EL1\0?\0?\0?\0ID_AA64DFR0_EL1\0ID_AA64DFR1_EL1\0?\0?\0ID_AA64AFR0_EL1\0ID_AA64AFR1_EL1\0?\0?\0ID_AA64ISAR0_EL1\0ID_AA64ISAR1_EL1\0?\0?\0?\0?\0?\0?\0ID_AA64MMFR0_EL1\0ID_AA64MMFR1_EL1\0ID_AA64MMFR2_EL1\0"; break;case 1: switch(m) {case 0: t="SCTLR_EL1\0ACTLR_EL1\0CPACR_EL1\0"; break;case 2: t="ZCR_EL1\0"; break;} break;case 2: if(m==0) t="TTBR0_EL1\0TTBR1_EL1\0TCR_EL1\0"; break;case 4: switch(m) {case 0: t="SPSR_EL1\0ELR_EL1\0"; break;case 1: t="SP_EL0\0"; break;case 2: t="SPSel\0?\0CurrentEL\0PAN\0UAO\0"; break;case 6: t="ICC_PMR_EL1\0"; break;} break;case 5: switch(m) {case 1: t="AFSR0_EL1\0AFSR1_EL1\0"; break;case 2: t="ESR_EL1"; break;case 3: t="ERRIDR_EL1\0ERRSELR_EL1\0"; break;case 4: t="ERXFR_EL1\0ERXCTLR_EL1\0ERXSTATUS_EL1\0ERXADDR_EL1\0"; break;case 5: t="ERXMISC0_EL1\0ERXMISC1_EL1\0"; break;} break;case 6: if(m==0) t="FAR_EL1\0"; break;case 7: if(m==4) t="PAR_EL1\0"; break;case 9: switch(m) {case 9: t="PMSCR_EL1\0?\0PMSICR_EL1\0PMSIRR_EL1\0PMSFCR_EL1\0PMSEVFR_EL1\0PMSLATFR_EL1\0PMSIDR_EL1\0PMSIDR_EL1\0"; break;case 10: t="PMBLIMITR_EL1\0PMBPTR_EL1\0?\0PMBSR_EL1\0?\0?\0?\0PMBIDR_EL1\0"; break;case 14: t="?\0PMINTENSET_EL1\0PMINTENCLR_EL1\0"; break;} break;case 10: if(m==4) t="LORSA_EL1\0LOREA_EL1\0LORN_EL1\0LORC_EL1\0?\0?\0?\0LORID_EL1\0"; else if(m!=4&&j==0) { j=m; t="?\0?\0MAIR_EL1\0AMAIR_EL1\0"; }break;case 12: switch(m) {case 0: t="VBAR_EL1\0RVBAR_EL1\0RMR_EL1\0"; break;case 1: t="ISR_EL1\0DISR_EL1\0"; break;case 8: t="ICC_IAR0_EL1\0ICC_EOIR0_EL1\0ICC_HPPIR0_EL1\0ICC_BPR0_EL1\0ICC_AP0R0_EL1\0ICC_AP0R1_EL1\0ICC_AP0R2_EL1\0ICC_AP0R3_EL1\0"; break;case 9: t="ICC_AP1R0_EL1\0ICC_AP1R1_EL1\0ICC_AP1R2_EL1\0ICC_AP1R3_EL1\0"; break;case 11: t="?\0ICC_DIR_EL1\0?\0ICC_RPR_EL1\0?\0ICC_SGI1R_EL1\0ICC_ASGI1R_EL1\0ICC_SGI0R_EL1\0"; break;case 12: t="ICC_IAR1_EL1\0ICC_EOIR1_EL1\0ICC_HPPIR1_EL1\0ICC_BPR1_EL1\0ICC_CTLR_EL1\0ICC_SRE_EL1\0ICC_IGRPEN0_EL1\0ICC_IGRPEN1_EL1\0"; break;} break;case 13: if(m==0) t="?\0CONTEXTIDR_EL1\0?\0?\0TPIDR_EL1\0"; break;case 14: if(m==1) t="CNTKCTL_EL1\0"; break;} break;case 1: if(n==0&&m==0) t="CCSIDR_EL1\0CLIDR_EL1\0?\0?\0?\0?\0?\0AIDR_EL1\0"; break;case 2: if(n==0&&m==0) t="CSSELR_EL1\0"; break;case 3: switch(n) {case 0: if(m==0) t="?\0CTR_EL0\0?\0?\0?\0?\0?\0DCZID_EL0\0"; break;case 4: switch(m) {case 2: t="NZCV\0DAIF\0"; break;case 4: t="FPCR\0FPSR\0"; break;case 5: t="DSPSR_EL0\0DLR_EL0\0"; break;} break;case 9: switch(m) {case 12: t="PMCR_EL0\0PMCNTENSET_EL0\0PMCNTENCLR_EL0\0PMOVSCLR_EL0\0PMSWINC_EL0\0PMSELR_EL0\0PMCEID0_EL0\0PMCEID1_EL0\0"; break;case 13: t="PMCCNTR_EL0\0PMXEVTYPER_EL0\0PMXEVCNTR_EL0\0"; break;case 14: t="PMUSERENR_EL0\0?\0?\0PMOVSSET_EL0\0"; break;} break;
   83c34:	f0000060 	adrp	x0, 92000 <sd_init+0x470>
   83c38:	91122000 	add	x0, x0, #0x488
   83c3c:	910e4000 	add	x0, x0, #0x390
char *disasm_str(char*s,int n) {if(!s)return "?";while(n){s++;if(!*s){s++;n--;}}return *s?s:"?";};
   83c40:	17fffe44 	b	83550 <disasm_str.part.0>
char *disasm_sysreg(uint8_t p,uint8_t k,uint8_t n,uint8_t m,uint8_t j) {char *t=NULL;switch(p){case 2: switch(k) {case 0: switch(n) {case 0: switch(m) {case 0: t="?\0?\0OSDTRRX_EL1\0"; break;case 2: t="MDCCINT_EL1\0?\0MDSCR_EL1\0"; break;case 3: t="?\0?\0OSDTRTX_EL1\0"; break;case 6: t="?\0?\0OSECCR_EL1\0"; break;default: { n=j; j=m; switch(n) {case 4: t="DBGBVR0_EL1\0DBGBVR1_EL1\0DBGBVR2_EL1\0DBGBVR3_EL1\0DBGBVR4_EL1\0DBGBVR5_EL1\0DBGBVR6_EL1\0DBGBVR7_EL1\0"; break;case 5: t="DBGBCR0_EL1\0DBGBCR1_EL1\0DBGBCR2_EL1\0DBGBCR3_EL1\0DBGBCR4_EL1\0DBGBCR5_EL1\0DBGBCR6_EL1\0DBGBCR7_EL1\0"; break;case 6: t="DBGWVR0_EL1\0DBGWVR1_EL1\0DBGWVR2_EL1\0DBGWVR3_EL1\0DBGWVR4_EL1\0DBGWVR5_EL1\0DBGWVR6_EL1\0DBGWVR7_EL1\0"; break;case 7: t="DBGWCR0_EL1\0DBGWCR1_EL1\0DBGWCR2_EL1\0DBGWCR3_EL1\0DBGWCR4_EL1\0DBGWCR5_EL1\0DBGWCR6_EL1\0DBGWCR7_EL1\0"; break;} break; }} break;case 1: if(m==0) t="MDRAR_EL1\0?\0?\0?\0OSLAR_EL1\0"; else if(j==4) { j=m; t="OSLSR_EL1\0?\0OSDLR_EL1\0DBGPRCR_EL1\0"; }break;case 7: if(j==6) { j=m; t="?\0?\0?\0?\0?\0?\0?\0?\0DBGCLAIMSET_EL1\0DBGCLAIMCLR_EL1\0?\0?\0?\0?\0DBGAUTHSTATUS_EL1\0"; }break;} break;case 3: if(n==0&&j==0) { j=m; t="?\0MDCCSR_EL0\0?\0?\0DBGDTR_EL0\0DBGDTRRX_EL0\0"; } break;case 4: if(n==0&&m==7) t="DBGVCR32_EL2\0"; break;} break;case 3: switch(k) {case 0: switch(n) {case 0: if(m==0) t="MIDR_EL1\0?\0?\0?\0?\0MPIDR_EL1\0REVIDR_EL1\0?\0ID_PFR0_EL1\0ID_PFR1_EL1\0ID_DFR0_EL1\0ID_AFR0_EL1\0ID_MMFR0_EL1\0ID_MMFR1_EL1\0ID_MMFR2_EL1\0ID_MMFR3_EL1\0ID_ISAR0_EL1\0ID_ISAR1_EL1\0ID_ISAR2_EL1\0ID_ISAR2_EL1\0ID_ISAR3_EL1\0ID_ISAR4_EL1\0ID_ISAR5_EL1\0ID_MMFR4_EL1\0?\0MVFR0_EL1\0MVFR1_EL1\0MVFR2_EL1\0?\0?\0?\0?\0?\0ID_AA64PFR0_EL1\0ID_AA64PFR1_EL1\0?\0?\0ID_AA64ZFR0_EL1\0?\0?\0?\0ID_AA64DFR0_EL1\0ID_AA64DFR1_EL1\0?\0?\0ID_AA64AFR0_EL1\0ID_AA64AFR1_EL1\0?\0?\0ID_AA64ISAR0_EL1\0ID_AA64ISAR1_EL1\0?\0?\0?\0?\0?\0?\0ID_AA64MMFR0_EL1\0ID_AA64MMFR1_EL1\0ID_AA64MMFR2_EL1\0"; break;case 1: switch(m) {case 0: t="SCTLR_EL1\0ACTLR_EL1\0CPACR_EL1\0"; break;case 2: t="ZCR_EL1\0"; break;} break;case 2: if(m==0) t="TTBR0_EL1\0TTBR1_EL1\0TCR_EL1\0"; break;case 4: switch(m) {case 0: t="SPSR_EL1\0ELR_EL1\0"; break;case 1: t="SP_EL0\0"; break;case 2: t="SPSel\0?\0CurrentEL\0PAN\0UAO\0"; break;case 6: t="ICC_PMR_EL1\0"; break;} break;case 5: switch(m) {case 1: t="AFSR0_EL1\0AFSR1_EL1\0"; break;case 2: t="ESR_EL1"; break;case 3: t="ERRIDR_EL1\0ERRSELR_EL1\0"; break;case 4: t="ERXFR_EL1\0ERXCTLR_EL1\0ERXSTATUS_EL1\0ERXADDR_EL1\0"; break;case 5: t="ERXMISC0_EL1\0ERXMISC1_EL1\0"; break;} break;case 6: if(m==0) t="FAR_EL1\0"; break;case 7: if(m==4) t="PAR_EL1\0"; break;case 9: switch(m) {case 9: t="PMSCR_EL1\0?\0PMSICR_EL1\0PMSIRR_EL1\0PMSFCR_EL1\0PMSEVFR_EL1\0PMSLATFR_EL1\0PMSIDR_EL1\0PMSIDR_EL1\0"; break;case 10: t="PMBLIMITR_EL1\0PMBPTR_EL1\0?\0PMBSR_EL1\0?\0?\0?\0PMBIDR_EL1\0"; break;case 14: t="?\0PMINTENSET_EL1\0PMINTENCLR_EL1\0"; break;} break;case 10: if(m==4) t="LORSA_EL1\0LOREA_EL1\0LORN_EL1\0LORC_EL1\0?\0?\0?\0LORID_EL1\0"; else if(m!=4&&j==0) { j=m; t="?\0?\0MAIR_EL1\0AMAIR_EL1\0"; }break;case 12: switch(m) {case 0: t="VBAR_EL1\0RVBAR_EL1\0RMR_EL1\0"; break;case 1: t="ISR_EL1\0DISR_EL1\0"; break;case 8: t="ICC_IAR0_EL1\0ICC_EOIR0_EL1\0ICC_HPPIR0_EL1\0ICC_BPR0_EL1\0ICC_AP0R0_EL1\0ICC_AP0R1_EL1\0ICC_AP0R2_EL1\0ICC_AP0R3_EL1\0"; break;case 9: t="ICC_AP1R0_EL1\0ICC_AP1R1_EL1\0ICC_AP1R2_EL1\0ICC_AP1R3_EL1\0"; break;case 11: t="?\0ICC_DIR_EL1\0?\0ICC_RPR_EL1\0?\0ICC_SGI1R_EL1\0ICC_ASGI1R_EL1\0ICC_SGI0R_EL1\0"; break;case 12: t="ICC_IAR1_EL1\0ICC_EOIR1_EL1\0ICC_HPPIR1_EL1\0ICC_BPR1_EL1\0ICC_CTLR_EL1\0ICC_SRE_EL1\0ICC_IGRPEN0_EL1\0ICC_IGRPEN1_EL1\0"; break;} break;case 13: if(m==0) t="?\0CONTEXTIDR_EL1\0?\0?\0TPIDR_EL1\0"; break;case 14: if(m==1) t="CNTKCTL_EL1\0"; break;} break;case 1: if(n==0&&m==0) t="CCSIDR_EL1\0CLIDR_EL1\0?\0?\0?\0?\0?\0AIDR_EL1\0"; break;case 2: if(n==0&&m==0) t="CSSELR_EL1\0"; break;case 3: switch(n) {case 0: if(m==0) t="?\0CTR_EL0\0?\0?\0?\0?\0?\0DCZID_EL0\0"; break;case 4: switch(m) {case 2: t="NZCV\0DAIF\0"; break;case 4: t="FPCR\0FPSR\0"; break;case 5: t="DSPSR_EL0\0DLR_EL0\0"; break;} break;case 9: switch(m) {case 12: t="PMCR_EL0\0PMCNTENSET_EL0\0PMCNTENCLR_EL0\0PMOVSCLR_EL0\0PMSWINC_EL0\0PMSELR_EL0\0PMCEID0_EL0\0PMCEID1_EL0\0"; break;case 13: t="PMCCNTR_EL0\0PMXEVTYPER_EL0\0PMXEVCNTR_EL0\0"; break;case 14: t="PMUSERENR_EL0\0?\0?\0PMOVSSET_EL0\0"; break;} break;
   83c44:	7100047f 	cmp	w3, #0x1
   83c48:	54ffcce1 	b.ne	835e4 <disasm_sysreg+0x24>  // b.any
   83c4c:	f0000060 	adrp	x0, 92000 <sd_init+0x470>
   83c50:	91122000 	add	x0, x0, #0x488
   83c54:	91008000 	add	x0, x0, #0x20
char *disasm_str(char*s,int n) {if(!s)return "?";while(n){s++;if(!*s){s++;n--;}}return *s?s:"?";};
   83c58:	17fffe3e 	b	83550 <disasm_str.part.0>
char *disasm_sysreg(uint8_t p,uint8_t k,uint8_t n,uint8_t m,uint8_t j) {char *t=NULL;switch(p){case 2: switch(k) {case 0: switch(n) {case 0: switch(m) {case 0: t="?\0?\0OSDTRRX_EL1\0"; break;case 2: t="MDCCINT_EL1\0?\0MDSCR_EL1\0"; break;case 3: t="?\0?\0OSDTRTX_EL1\0"; break;case 6: t="?\0?\0OSECCR_EL1\0"; break;default: { n=j; j=m; switch(n) {case 4: t="DBGBVR0_EL1\0DBGBVR1_EL1\0DBGBVR2_EL1\0DBGBVR3_EL1\0DBGBVR4_EL1\0DBGBVR5_EL1\0DBGBVR6_EL1\0DBGBVR7_EL1\0"; break;case 5: t="DBGBCR0_EL1\0DBGBCR1_EL1\0DBGBCR2_EL1\0DBGBCR3_EL1\0DBGBCR4_EL1\0DBGBCR5_EL1\0DBGBCR6_EL1\0DBGBCR7_EL1\0"; break;case 6: t="DBGWVR0_EL1\0DBGWVR1_EL1\0DBGWVR2_EL1\0DBGWVR3_EL1\0DBGWVR4_EL1\0DBGWVR5_EL1\0DBGWVR6_EL1\0DBGWVR7_EL1\0"; break;case 7: t="DBGWCR0_EL1\0DBGWCR1_EL1\0DBGWCR2_EL1\0DBGWCR3_EL1\0DBGWCR4_EL1\0DBGWCR5_EL1\0DBGWCR6_EL1\0DBGWCR7_EL1\0"; break;} break; }} break;case 1: if(m==0) t="MDRAR_EL1\0?\0?\0?\0OSLAR_EL1\0"; else if(j==4) { j=m; t="OSLSR_EL1\0?\0OSDLR_EL1\0DBGPRCR_EL1\0"; }break;case 7: if(j==6) { j=m; t="?\0?\0?\0?\0?\0?\0?\0?\0DBGCLAIMSET_EL1\0DBGCLAIMCLR_EL1\0?\0?\0?\0?\0DBGAUTHSTATUS_EL1\0"; }break;} break;case 3: if(n==0&&j==0) { j=m; t="?\0MDCCSR_EL0\0?\0?\0DBGDTR_EL0\0DBGDTRRX_EL0\0"; } break;case 4: if(n==0&&m==7) t="DBGVCR32_EL2\0"; break;} break;case 3: switch(k) {case 0: switch(n) {case 0: if(m==0) t="MIDR_EL1\0?\0?\0?\0?\0MPIDR_EL1\0REVIDR_EL1\0?\0ID_PFR0_EL1\0ID_PFR1_EL1\0ID_DFR0_EL1\0ID_AFR0_EL1\0ID_MMFR0_EL1\0ID_MMFR1_EL1\0ID_MMFR2_EL1\0ID_MMFR3_EL1\0ID_ISAR0_EL1\0ID_ISAR1_EL1\0ID_ISAR2_EL1\0ID_ISAR2_EL1\0ID_ISAR3_EL1\0ID_ISAR4_EL1\0ID_ISAR5_EL1\0ID_MMFR4_EL1\0?\0MVFR0_EL1\0MVFR1_EL1\0MVFR2_EL1\0?\0?\0?\0?\0?\0ID_AA64PFR0_EL1\0ID_AA64PFR1_EL1\0?\0?\0ID_AA64ZFR0_EL1\0?\0?\0?\0ID_AA64DFR0_EL1\0ID_AA64DFR1_EL1\0?\0?\0ID_AA64AFR0_EL1\0ID_AA64AFR1_EL1\0?\0?\0ID_AA64ISAR0_EL1\0ID_AA64ISAR1_EL1\0?\0?\0?\0?\0?\0?\0ID_AA64MMFR0_EL1\0ID_AA64MMFR1_EL1\0ID_AA64MMFR2_EL1\0"; break;case 1: switch(m) {case 0: t="SCTLR_EL1\0ACTLR_EL1\0CPACR_EL1\0"; break;case 2: t="ZCR_EL1\0"; break;} break;case 2: if(m==0) t="TTBR0_EL1\0TTBR1_EL1\0TCR_EL1\0"; break;case 4: switch(m) {case 0: t="SPSR_EL1\0ELR_EL1\0"; break;case 1: t="SP_EL0\0"; break;case 2: t="SPSel\0?\0CurrentEL\0PAN\0UAO\0"; break;case 6: t="ICC_PMR_EL1\0"; break;} break;case 5: switch(m) {case 1: t="AFSR0_EL1\0AFSR1_EL1\0"; break;case 2: t="ESR_EL1"; break;case 3: t="ERRIDR_EL1\0ERRSELR_EL1\0"; break;case 4: t="ERXFR_EL1\0ERXCTLR_EL1\0ERXSTATUS_EL1\0ERXADDR_EL1\0"; break;case 5: t="ERXMISC0_EL1\0ERXMISC1_EL1\0"; break;} break;case 6: if(m==0) t="FAR_EL1\0"; break;case 7: if(m==4) t="PAR_EL1\0"; break;case 9: switch(m) {case 9: t="PMSCR_EL1\0?\0PMSICR_EL1\0PMSIRR_EL1\0PMSFCR_EL1\0PMSEVFR_EL1\0PMSLATFR_EL1\0PMSIDR_EL1\0PMSIDR_EL1\0"; break;case 10: t="PMBLIMITR_EL1\0PMBPTR_EL1\0?\0PMBSR_EL1\0?\0?\0?\0PMBIDR_EL1\0"; break;case 14: t="?\0PMINTENSET_EL1\0PMINTENCLR_EL1\0"; break;} break;case 10: if(m==4) t="LORSA_EL1\0LOREA_EL1\0LORN_EL1\0LORC_EL1\0?\0?\0?\0LORID_EL1\0"; else if(m!=4&&j==0) { j=m; t="?\0?\0MAIR_EL1\0AMAIR_EL1\0"; }break;case 12: switch(m) {case 0: t="VBAR_EL1\0RVBAR_EL1\0RMR_EL1\0"; break;case 1: t="ISR_EL1\0DISR_EL1\0"; break;case 8: t="ICC_IAR0_EL1\0ICC_EOIR0_EL1\0ICC_HPPIR0_EL1\0ICC_BPR0_EL1\0ICC_AP0R0_EL1\0ICC_AP0R1_EL1\0ICC_AP0R2_EL1\0ICC_AP0R3_EL1\0"; break;case 9: t="ICC_AP1R0_EL1\0ICC_AP1R1_EL1\0ICC_AP1R2_EL1\0ICC_AP1R3_EL1\0"; break;case 11: t="?\0ICC_DIR_EL1\0?\0ICC_RPR_EL1\0?\0ICC_SGI1R_EL1\0ICC_ASGI1R_EL1\0ICC_SGI0R_EL1\0"; break;case 12: t="ICC_IAR1_EL1\0ICC_EOIR1_EL1\0ICC_HPPIR1_EL1\0ICC_BPR1_EL1\0ICC_CTLR_EL1\0ICC_SRE_EL1\0ICC_IGRPEN0_EL1\0ICC_IGRPEN1_EL1\0"; break;} break;case 13: if(m==0) t="?\0CONTEXTIDR_EL1\0?\0?\0TPIDR_EL1\0"; break;case 14: if(m==1) t="CNTKCTL_EL1\0"; break;} break;case 1: if(n==0&&m==0) t="CCSIDR_EL1\0CLIDR_EL1\0?\0?\0?\0?\0?\0AIDR_EL1\0"; break;case 2: if(n==0&&m==0) t="CSSELR_EL1\0"; break;case 3: switch(n) {case 0: if(m==0) t="?\0CTR_EL0\0?\0?\0?\0?\0?\0DCZID_EL0\0"; break;case 4: switch(m) {case 2: t="NZCV\0DAIF\0"; break;case 4: t="FPCR\0FPSR\0"; break;case 5: t="DSPSR_EL0\0DLR_EL0\0"; break;} break;case 9: switch(m) {case 12: t="PMCR_EL0\0PMCNTENSET_EL0\0PMCNTENCLR_EL0\0PMOVSCLR_EL0\0PMSWINC_EL0\0PMSELR_EL0\0PMCEID0_EL0\0PMCEID1_EL0\0"; break;case 13: t="PMCCNTR_EL0\0PMXEVTYPER_EL0\0PMXEVCNTR_EL0\0"; break;case 14: t="PMUSERENR_EL0\0?\0?\0PMOVSSET_EL0\0"; break;} break;
   83c5c:	35ffcc43 	cbnz	w3, 835e4 <disasm_sysreg+0x24>
   83c60:	f0000060 	adrp	x0, 92000 <sd_init+0x470>
   83c64:	91122000 	add	x0, x0, #0x488
char *disasm_str(char*s,int n) {if(!s)return "?";while(n){s++;if(!*s){s++;n--;}}return *s?s:"?";};
   83c68:	17fffe3a 	b	83550 <disasm_str.part.0>
char *disasm_sysreg(uint8_t p,uint8_t k,uint8_t n,uint8_t m,uint8_t j) {char *t=NULL;switch(p){case 2: switch(k) {case 0: switch(n) {case 0: switch(m) {case 0: t="?\0?\0OSDTRRX_EL1\0"; break;case 2: t="MDCCINT_EL1\0?\0MDSCR_EL1\0"; break;case 3: t="?\0?\0OSDTRTX_EL1\0"; break;case 6: t="?\0?\0OSECCR_EL1\0"; break;default: { n=j; j=m; switch(n) {case 4: t="DBGBVR0_EL1\0DBGBVR1_EL1\0DBGBVR2_EL1\0DBGBVR3_EL1\0DBGBVR4_EL1\0DBGBVR5_EL1\0DBGBVR6_EL1\0DBGBVR7_EL1\0"; break;case 5: t="DBGBCR0_EL1\0DBGBCR1_EL1\0DBGBCR2_EL1\0DBGBCR3_EL1\0DBGBCR4_EL1\0DBGBCR5_EL1\0DBGBCR6_EL1\0DBGBCR7_EL1\0"; break;case 6: t="DBGWVR0_EL1\0DBGWVR1_EL1\0DBGWVR2_EL1\0DBGWVR3_EL1\0DBGWVR4_EL1\0DBGWVR5_EL1\0DBGWVR6_EL1\0DBGWVR7_EL1\0"; break;case 7: t="DBGWCR0_EL1\0DBGWCR1_EL1\0DBGWCR2_EL1\0DBGWCR3_EL1\0DBGWCR4_EL1\0DBGWCR5_EL1\0DBGWCR6_EL1\0DBGWCR7_EL1\0"; break;} break; }} break;case 1: if(m==0) t="MDRAR_EL1\0?\0?\0?\0OSLAR_EL1\0"; else if(j==4) { j=m; t="OSLSR_EL1\0?\0OSDLR_EL1\0DBGPRCR_EL1\0"; }break;case 7: if(j==6) { j=m; t="?\0?\0?\0?\0?\0?\0?\0?\0DBGCLAIMSET_EL1\0DBGCLAIMCLR_EL1\0?\0?\0?\0?\0DBGAUTHSTATUS_EL1\0"; }break;} break;case 3: if(n==0&&j==0) { j=m; t="?\0MDCCSR_EL0\0?\0?\0DBGDTR_EL0\0DBGDTRRX_EL0\0"; } break;case 4: if(n==0&&m==7) t="DBGVCR32_EL2\0"; break;} break;case 3: switch(k) {case 0: switch(n) {case 0: if(m==0) t="MIDR_EL1\0?\0?\0?\0?\0MPIDR_EL1\0REVIDR_EL1\0?\0ID_PFR0_EL1\0ID_PFR1_EL1\0ID_DFR0_EL1\0ID_AFR0_EL1\0ID_MMFR0_EL1\0ID_MMFR1_EL1\0ID_MMFR2_EL1\0ID_MMFR3_EL1\0ID_ISAR0_EL1\0ID_ISAR1_EL1\0ID_ISAR2_EL1\0ID_ISAR2_EL1\0ID_ISAR3_EL1\0ID_ISAR4_EL1\0ID_ISAR5_EL1\0ID_MMFR4_EL1\0?\0MVFR0_EL1\0MVFR1_EL1\0MVFR2_EL1\0?\0?\0?\0?\0?\0ID_AA64PFR0_EL1\0ID_AA64PFR1_EL1\0?\0?\0ID_AA64ZFR0_EL1\0?\0?\0?\0ID_AA64DFR0_EL1\0ID_AA64DFR1_EL1\0?\0?\0ID_AA64AFR0_EL1\0ID_AA64AFR1_EL1\0?\0?\0ID_AA64ISAR0_EL1\0ID_AA64ISAR1_EL1\0?\0?\0?\0?\0?\0?\0ID_AA64MMFR0_EL1\0ID_AA64MMFR1_EL1\0ID_AA64MMFR2_EL1\0"; break;case 1: switch(m) {case 0: t="SCTLR_EL1\0ACTLR_EL1\0CPACR_EL1\0"; break;case 2: t="ZCR_EL1\0"; break;} break;case 2: if(m==0) t="TTBR0_EL1\0TTBR1_EL1\0TCR_EL1\0"; break;case 4: switch(m) {case 0: t="SPSR_EL1\0ELR_EL1\0"; break;case 1: t="SP_EL0\0"; break;case 2: t="SPSel\0?\0CurrentEL\0PAN\0UAO\0"; break;case 6: t="ICC_PMR_EL1\0"; break;} break;case 5: switch(m) {case 1: t="AFSR0_EL1\0AFSR1_EL1\0"; break;case 2: t="ESR_EL1"; break;case 3: t="ERRIDR_EL1\0ERRSELR_EL1\0"; break;case 4: t="ERXFR_EL1\0ERXCTLR_EL1\0ERXSTATUS_EL1\0ERXADDR_EL1\0"; break;case 5: t="ERXMISC0_EL1\0ERXMISC1_EL1\0"; break;} break;case 6: if(m==0) t="FAR_EL1\0"; break;case 7: if(m==4) t="PAR_EL1\0"; break;case 9: switch(m) {case 9: t="PMSCR_EL1\0?\0PMSICR_EL1\0PMSIRR_EL1\0PMSFCR_EL1\0PMSEVFR_EL1\0PMSLATFR_EL1\0PMSIDR_EL1\0PMSIDR_EL1\0"; break;case 10: t="PMBLIMITR_EL1\0PMBPTR_EL1\0?\0PMBSR_EL1\0?\0?\0?\0PMBIDR_EL1\0"; break;case 14: t="?\0PMINTENSET_EL1\0PMINTENCLR_EL1\0"; break;} break;case 10: if(m==4) t="LORSA_EL1\0LOREA_EL1\0LORN_EL1\0LORC_EL1\0?\0?\0?\0LORID_EL1\0"; else if(m!=4&&j==0) { j=m; t="?\0?\0MAIR_EL1\0AMAIR_EL1\0"; }break;case 12: switch(m) {case 0: t="VBAR_EL1\0RVBAR_EL1\0RMR_EL1\0"; break;case 1: t="ISR_EL1\0DISR_EL1\0"; break;case 8: t="ICC_IAR0_EL1\0ICC_EOIR0_EL1\0ICC_HPPIR0_EL1\0ICC_BPR0_EL1\0ICC_AP0R0_EL1\0ICC_AP0R1_EL1\0ICC_AP0R2_EL1\0ICC_AP0R3_EL1\0"; break;case 9: t="ICC_AP1R0_EL1\0ICC_AP1R1_EL1\0ICC_AP1R2_EL1\0ICC_AP1R3_EL1\0"; break;case 11: t="?\0ICC_DIR_EL1\0?\0ICC_RPR_EL1\0?\0ICC_SGI1R_EL1\0ICC_ASGI1R_EL1\0ICC_SGI0R_EL1\0"; break;case 12: t="ICC_IAR1_EL1\0ICC_EOIR1_EL1\0ICC_HPPIR1_EL1\0ICC_BPR1_EL1\0ICC_CTLR_EL1\0ICC_SRE_EL1\0ICC_IGRPEN0_EL1\0ICC_IGRPEN1_EL1\0"; break;} break;case 13: if(m==0) t="?\0CONTEXTIDR_EL1\0?\0?\0TPIDR_EL1\0"; break;case 14: if(m==1) t="CNTKCTL_EL1\0"; break;} break;case 1: if(n==0&&m==0) t="CCSIDR_EL1\0CLIDR_EL1\0?\0?\0?\0?\0?\0AIDR_EL1\0"; break;case 2: if(n==0&&m==0) t="CSSELR_EL1\0"; break;case 3: switch(n) {case 0: if(m==0) t="?\0CTR_EL0\0?\0?\0?\0?\0?\0DCZID_EL0\0"; break;case 4: switch(m) {case 2: t="NZCV\0DAIF\0"; break;case 4: t="FPCR\0FPSR\0"; break;case 5: t="DSPSR_EL0\0DLR_EL0\0"; break;} break;case 9: switch(m) {case 12: t="PMCR_EL0\0PMCNTENSET_EL0\0PMCNTENCLR_EL0\0PMOVSCLR_EL0\0PMSWINC_EL0\0PMSELR_EL0\0PMCEID0_EL0\0PMCEID1_EL0\0"; break;case 13: t="PMCCNTR_EL0\0PMXEVTYPER_EL0\0PMXEVCNTR_EL0\0"; break;case 14: t="PMUSERENR_EL0\0?\0?\0PMOVSSET_EL0\0"; break;} break;
   83c6c:	7100107f 	cmp	w3, #0x4
   83c70:	54ffcba1 	b.ne	835e4 <disasm_sysreg+0x24>  // b.any
   83c74:	f0000060 	adrp	x0, 92000 <sd_init+0x470>
   83c78:	91122000 	add	x0, x0, #0x488
   83c7c:	91108000 	add	x0, x0, #0x420
char *disasm_str(char*s,int n) {if(!s)return "?";while(n){s++;if(!*s){s++;n--;}}return *s?s:"?";};
   83c80:	17fffe34 	b	83550 <disasm_str.part.0>
   83c84:	7100107f 	cmp	w3, #0x4
   83c88:	54000860 	b.eq	83d94 <disasm_sysreg+0x7d4>  // b.none
   83c8c:	7100147f 	cmp	w3, #0x5
   83c90:	54ffcaa1 	b.ne	835e4 <disasm_sysreg+0x24>  // b.any
char *disasm_sysreg(uint8_t p,uint8_t k,uint8_t n,uint8_t m,uint8_t j) {char *t=NULL;switch(p){case 2: switch(k) {case 0: switch(n) {case 0: switch(m) {case 0: t="?\0?\0OSDTRRX_EL1\0"; break;case 2: t="MDCCINT_EL1\0?\0MDSCR_EL1\0"; break;case 3: t="?\0?\0OSDTRTX_EL1\0"; break;case 6: t="?\0?\0OSECCR_EL1\0"; break;default: { n=j; j=m; switch(n) {case 4: t="DBGBVR0_EL1\0DBGBVR1_EL1\0DBGBVR2_EL1\0DBGBVR3_EL1\0DBGBVR4_EL1\0DBGBVR5_EL1\0DBGBVR6_EL1\0DBGBVR7_EL1\0"; break;case 5: t="DBGBCR0_EL1\0DBGBCR1_EL1\0DBGBCR2_EL1\0DBGBCR3_EL1\0DBGBCR4_EL1\0DBGBCR5_EL1\0DBGBCR6_EL1\0DBGBCR7_EL1\0"; break;case 6: t="DBGWVR0_EL1\0DBGWVR1_EL1\0DBGWVR2_EL1\0DBGWVR3_EL1\0DBGWVR4_EL1\0DBGWVR5_EL1\0DBGWVR6_EL1\0DBGWVR7_EL1\0"; break;case 7: t="DBGWCR0_EL1\0DBGWCR1_EL1\0DBGWCR2_EL1\0DBGWCR3_EL1\0DBGWCR4_EL1\0DBGWCR5_EL1\0DBGWCR6_EL1\0DBGWCR7_EL1\0"; break;} break; }} break;case 1: if(m==0) t="MDRAR_EL1\0?\0?\0?\0OSLAR_EL1\0"; else if(j==4) { j=m; t="OSLSR_EL1\0?\0OSDLR_EL1\0DBGPRCR_EL1\0"; }break;case 7: if(j==6) { j=m; t="?\0?\0?\0?\0?\0?\0?\0?\0DBGCLAIMSET_EL1\0DBGCLAIMCLR_EL1\0?\0?\0?\0?\0DBGAUTHSTATUS_EL1\0"; }break;} break;case 3: if(n==0&&j==0) { j=m; t="?\0MDCCSR_EL0\0?\0?\0DBGDTR_EL0\0DBGDTRRX_EL0\0"; } break;case 4: if(n==0&&m==7) t="DBGVCR32_EL2\0"; break;} break;case 3: switch(k) {case 0: switch(n) {case 0: if(m==0) t="MIDR_EL1\0?\0?\0?\0?\0MPIDR_EL1\0REVIDR_EL1\0?\0ID_PFR0_EL1\0ID_PFR1_EL1\0ID_DFR0_EL1\0ID_AFR0_EL1\0ID_MMFR0_EL1\0ID_MMFR1_EL1\0ID_MMFR2_EL1\0ID_MMFR3_EL1\0ID_ISAR0_EL1\0ID_ISAR1_EL1\0ID_ISAR2_EL1\0ID_ISAR2_EL1\0ID_ISAR3_EL1\0ID_ISAR4_EL1\0ID_ISAR5_EL1\0ID_MMFR4_EL1\0?\0MVFR0_EL1\0MVFR1_EL1\0MVFR2_EL1\0?\0?\0?\0?\0?\0ID_AA64PFR0_EL1\0ID_AA64PFR1_EL1\0?\0?\0ID_AA64ZFR0_EL1\0?\0?\0?\0ID_AA64DFR0_EL1\0ID_AA64DFR1_EL1\0?\0?\0ID_AA64AFR0_EL1\0ID_AA64AFR1_EL1\0?\0?\0ID_AA64ISAR0_EL1\0ID_AA64ISAR1_EL1\0?\0?\0?\0?\0?\0?\0ID_AA64MMFR0_EL1\0ID_AA64MMFR1_EL1\0ID_AA64MMFR2_EL1\0"; break;case 1: switch(m) {case 0: t="SCTLR_EL1\0ACTLR_EL1\0CPACR_EL1\0"; break;case 2: t="ZCR_EL1\0"; break;} break;case 2: if(m==0) t="TTBR0_EL1\0TTBR1_EL1\0TCR_EL1\0"; break;case 4: switch(m) {case 0: t="SPSR_EL1\0ELR_EL1\0"; break;case 1: t="SP_EL0\0"; break;case 2: t="SPSel\0?\0CurrentEL\0PAN\0UAO\0"; break;case 6: t="ICC_PMR_EL1\0"; break;} break;case 5: switch(m) {case 1: t="AFSR0_EL1\0AFSR1_EL1\0"; break;case 2: t="ESR_EL1"; break;case 3: t="ERRIDR_EL1\0ERRSELR_EL1\0"; break;case 4: t="ERXFR_EL1\0ERXCTLR_EL1\0ERXSTATUS_EL1\0ERXADDR_EL1\0"; break;case 5: t="ERXMISC0_EL1\0ERXMISC1_EL1\0"; break;} break;case 6: if(m==0) t="FAR_EL1\0"; break;case 7: if(m==4) t="PAR_EL1\0"; break;case 9: switch(m) {case 9: t="PMSCR_EL1\0?\0PMSICR_EL1\0PMSIRR_EL1\0PMSFCR_EL1\0PMSEVFR_EL1\0PMSLATFR_EL1\0PMSIDR_EL1\0PMSIDR_EL1\0"; break;case 10: t="PMBLIMITR_EL1\0PMBPTR_EL1\0?\0PMBSR_EL1\0?\0?\0?\0PMBIDR_EL1\0"; break;case 14: t="?\0PMINTENSET_EL1\0PMINTENCLR_EL1\0"; break;} break;case 10: if(m==4) t="LORSA_EL1\0LOREA_EL1\0LORN_EL1\0LORC_EL1\0?\0?\0?\0LORID_EL1\0"; else if(m!=4&&j==0) { j=m; t="?\0?\0MAIR_EL1\0AMAIR_EL1\0"; }break;case 12: switch(m) {case 0: t="VBAR_EL1\0RVBAR_EL1\0RMR_EL1\0"; break;case 1: t="ISR_EL1\0DISR_EL1\0"; break;case 8: t="ICC_IAR0_EL1\0ICC_EOIR0_EL1\0ICC_HPPIR0_EL1\0ICC_BPR0_EL1\0ICC_AP0R0_EL1\0ICC_AP0R1_EL1\0ICC_AP0R2_EL1\0ICC_AP0R3_EL1\0"; break;case 9: t="ICC_AP1R0_EL1\0ICC_AP1R1_EL1\0ICC_AP1R2_EL1\0ICC_AP1R3_EL1\0"; break;case 11: t="?\0ICC_DIR_EL1\0?\0ICC_RPR_EL1\0?\0ICC_SGI1R_EL1\0ICC_ASGI1R_EL1\0ICC_SGI0R_EL1\0"; break;case 12: t="ICC_IAR1_EL1\0ICC_EOIR1_EL1\0ICC_HPPIR1_EL1\0ICC_BPR1_EL1\0ICC_CTLR_EL1\0ICC_SRE_EL1\0ICC_IGRPEN0_EL1\0ICC_IGRPEN1_EL1\0"; break;} break;case 13: if(m==0) t="?\0CONTEXTIDR_EL1\0?\0?\0TPIDR_EL1\0"; break;case 14: if(m==1) t="CNTKCTL_EL1\0"; break;} break;case 1: if(n==0&&m==0) t="CCSIDR_EL1\0CLIDR_EL1\0?\0?\0?\0?\0?\0AIDR_EL1\0"; break;case 2: if(n==0&&m==0) t="CSSELR_EL1\0"; break;case 3: switch(n) {case 0: if(m==0) t="?\0CTR_EL0\0?\0?\0?\0?\0?\0DCZID_EL0\0"; break;case 4: switch(m) {case 2: t="NZCV\0DAIF\0"; break;case 4: t="FPCR\0FPSR\0"; break;case 5: t="DSPSR_EL0\0DLR_EL0\0"; break;} break;case 9: switch(m) {case 12: t="PMCR_EL0\0PMCNTENSET_EL0\0PMCNTENCLR_EL0\0PMOVSCLR_EL0\0PMSWINC_EL0\0PMSELR_EL0\0PMCEID0_EL0\0PMCEID1_EL0\0"; break;case 13: t="PMCCNTR_EL0\0PMXEVTYPER_EL0\0PMXEVCNTR_EL0\0"; break;case 14: t="PMUSERENR_EL0\0?\0?\0PMOVSSET_EL0\0"; break;} break;
   83c94:	f0000060 	adrp	x0, 92000 <sd_init+0x470>
   83c98:	91122000 	add	x0, x0, #0x488
   83c9c:	910c4000 	add	x0, x0, #0x310
char *disasm_str(char*s,int n) {if(!s)return "?";while(n){s++;if(!*s){s++;n--;}}return *s?s:"?";};
   83ca0:	17fffe2c 	b	83550 <disasm_str.part.0>
char *disasm_sysreg(uint8_t p,uint8_t k,uint8_t n,uint8_t m,uint8_t j) {char *t=NULL;switch(p){case 2: switch(k) {case 0: switch(n) {case 0: switch(m) {case 0: t="?\0?\0OSDTRRX_EL1\0"; break;case 2: t="MDCCINT_EL1\0?\0MDSCR_EL1\0"; break;case 3: t="?\0?\0OSDTRTX_EL1\0"; break;case 6: t="?\0?\0OSECCR_EL1\0"; break;default: { n=j; j=m; switch(n) {case 4: t="DBGBVR0_EL1\0DBGBVR1_EL1\0DBGBVR2_EL1\0DBGBVR3_EL1\0DBGBVR4_EL1\0DBGBVR5_EL1\0DBGBVR6_EL1\0DBGBVR7_EL1\0"; break;case 5: t="DBGBCR0_EL1\0DBGBCR1_EL1\0DBGBCR2_EL1\0DBGBCR3_EL1\0DBGBCR4_EL1\0DBGBCR5_EL1\0DBGBCR6_EL1\0DBGBCR7_EL1\0"; break;case 6: t="DBGWVR0_EL1\0DBGWVR1_EL1\0DBGWVR2_EL1\0DBGWVR3_EL1\0DBGWVR4_EL1\0DBGWVR5_EL1\0DBGWVR6_EL1\0DBGWVR7_EL1\0"; break;case 7: t="DBGWCR0_EL1\0DBGWCR1_EL1\0DBGWCR2_EL1\0DBGWCR3_EL1\0DBGWCR4_EL1\0DBGWCR5_EL1\0DBGWCR6_EL1\0DBGWCR7_EL1\0"; break;} break; }} break;case 1: if(m==0) t="MDRAR_EL1\0?\0?\0?\0OSLAR_EL1\0"; else if(j==4) { j=m; t="OSLSR_EL1\0?\0OSDLR_EL1\0DBGPRCR_EL1\0"; }break;case 7: if(j==6) { j=m; t="?\0?\0?\0?\0?\0?\0?\0?\0DBGCLAIMSET_EL1\0DBGCLAIMCLR_EL1\0?\0?\0?\0?\0DBGAUTHSTATUS_EL1\0"; }break;} break;case 3: if(n==0&&j==0) { j=m; t="?\0MDCCSR_EL0\0?\0?\0DBGDTR_EL0\0DBGDTRRX_EL0\0"; } break;case 4: if(n==0&&m==7) t="DBGVCR32_EL2\0"; break;} break;case 3: switch(k) {case 0: switch(n) {case 0: if(m==0) t="MIDR_EL1\0?\0?\0?\0?\0MPIDR_EL1\0REVIDR_EL1\0?\0ID_PFR0_EL1\0ID_PFR1_EL1\0ID_DFR0_EL1\0ID_AFR0_EL1\0ID_MMFR0_EL1\0ID_MMFR1_EL1\0ID_MMFR2_EL1\0ID_MMFR3_EL1\0ID_ISAR0_EL1\0ID_ISAR1_EL1\0ID_ISAR2_EL1\0ID_ISAR2_EL1\0ID_ISAR3_EL1\0ID_ISAR4_EL1\0ID_ISAR5_EL1\0ID_MMFR4_EL1\0?\0MVFR0_EL1\0MVFR1_EL1\0MVFR2_EL1\0?\0?\0?\0?\0?\0ID_AA64PFR0_EL1\0ID_AA64PFR1_EL1\0?\0?\0ID_AA64ZFR0_EL1\0?\0?\0?\0ID_AA64DFR0_EL1\0ID_AA64DFR1_EL1\0?\0?\0ID_AA64AFR0_EL1\0ID_AA64AFR1_EL1\0?\0?\0ID_AA64ISAR0_EL1\0ID_AA64ISAR1_EL1\0?\0?\0?\0?\0?\0?\0ID_AA64MMFR0_EL1\0ID_AA64MMFR1_EL1\0ID_AA64MMFR2_EL1\0"; break;case 1: switch(m) {case 0: t="SCTLR_EL1\0ACTLR_EL1\0CPACR_EL1\0"; break;case 2: t="ZCR_EL1\0"; break;} break;case 2: if(m==0) t="TTBR0_EL1\0TTBR1_EL1\0TCR_EL1\0"; break;case 4: switch(m) {case 0: t="SPSR_EL1\0ELR_EL1\0"; break;case 1: t="SP_EL0\0"; break;case 2: t="SPSel\0?\0CurrentEL\0PAN\0UAO\0"; break;case 6: t="ICC_PMR_EL1\0"; break;} break;case 5: switch(m) {case 1: t="AFSR0_EL1\0AFSR1_EL1\0"; break;case 2: t="ESR_EL1"; break;case 3: t="ERRIDR_EL1\0ERRSELR_EL1\0"; break;case 4: t="ERXFR_EL1\0ERXCTLR_EL1\0ERXSTATUS_EL1\0ERXADDR_EL1\0"; break;case 5: t="ERXMISC0_EL1\0ERXMISC1_EL1\0"; break;} break;case 6: if(m==0) t="FAR_EL1\0"; break;case 7: if(m==4) t="PAR_EL1\0"; break;case 9: switch(m) {case 9: t="PMSCR_EL1\0?\0PMSICR_EL1\0PMSIRR_EL1\0PMSFCR_EL1\0PMSEVFR_EL1\0PMSLATFR_EL1\0PMSIDR_EL1\0PMSIDR_EL1\0"; break;case 10: t="PMBLIMITR_EL1\0PMBPTR_EL1\0?\0PMBSR_EL1\0?\0?\0?\0PMBIDR_EL1\0"; break;case 14: t="?\0PMINTENSET_EL1\0PMINTENCLR_EL1\0"; break;} break;case 10: if(m==4) t="LORSA_EL1\0LOREA_EL1\0LORN_EL1\0LORC_EL1\0?\0?\0?\0LORID_EL1\0"; else if(m!=4&&j==0) { j=m; t="?\0?\0MAIR_EL1\0AMAIR_EL1\0"; }break;case 12: switch(m) {case 0: t="VBAR_EL1\0RVBAR_EL1\0RMR_EL1\0"; break;case 1: t="ISR_EL1\0DISR_EL1\0"; break;case 8: t="ICC_IAR0_EL1\0ICC_EOIR0_EL1\0ICC_HPPIR0_EL1\0ICC_BPR0_EL1\0ICC_AP0R0_EL1\0ICC_AP0R1_EL1\0ICC_AP0R2_EL1\0ICC_AP0R3_EL1\0"; break;case 9: t="ICC_AP1R0_EL1\0ICC_AP1R1_EL1\0ICC_AP1R2_EL1\0ICC_AP1R3_EL1\0"; break;case 11: t="?\0ICC_DIR_EL1\0?\0ICC_RPR_EL1\0?\0ICC_SGI1R_EL1\0ICC_ASGI1R_EL1\0ICC_SGI0R_EL1\0"; break;case 12: t="ICC_IAR1_EL1\0ICC_EOIR1_EL1\0ICC_HPPIR1_EL1\0ICC_BPR1_EL1\0ICC_CTLR_EL1\0ICC_SRE_EL1\0ICC_IGRPEN0_EL1\0ICC_IGRPEN1_EL1\0"; break;} break;case 13: if(m==0) t="?\0CONTEXTIDR_EL1\0?\0?\0TPIDR_EL1\0"; break;case 14: if(m==1) t="CNTKCTL_EL1\0"; break;} break;case 1: if(n==0&&m==0) t="CCSIDR_EL1\0CLIDR_EL1\0?\0?\0?\0?\0?\0AIDR_EL1\0"; break;case 2: if(n==0&&m==0) t="CSSELR_EL1\0"; break;case 3: switch(n) {case 0: if(m==0) t="?\0CTR_EL0\0?\0?\0?\0?\0?\0DCZID_EL0\0"; break;case 4: switch(m) {case 2: t="NZCV\0DAIF\0"; break;case 4: t="FPCR\0FPSR\0"; break;case 5: t="DSPSR_EL0\0DLR_EL0\0"; break;} break;case 9: switch(m) {case 12: t="PMCR_EL0\0PMCNTENSET_EL0\0PMCNTENCLR_EL0\0PMOVSCLR_EL0\0PMSWINC_EL0\0PMSELR_EL0\0PMCEID0_EL0\0PMCEID1_EL0\0"; break;case 13: t="PMCCNTR_EL0\0PMXEVTYPER_EL0\0PMXEVCNTR_EL0\0"; break;case 14: t="PMUSERENR_EL0\0?\0?\0PMOVSSET_EL0\0"; break;} break;
   83ca4:	7100047f 	cmp	w3, #0x1
   83ca8:	54001300 	b.eq	83f08 <disasm_sysreg+0x948>  // b.none
   83cac:	34000f63 	cbz	w3, 83e98 <disasm_sysreg+0x8d8>
   83cb0:	7100087f 	cmp	w3, #0x2
   83cb4:	54000b00 	b.eq	83e14 <disasm_sysreg+0x854>  // b.none
   83cb8:	7100187f 	cmp	w3, #0x6
   83cbc:	54ffc941 	b.ne	835e4 <disasm_sysreg+0x24>  // b.any
   83cc0:	f0000060 	adrp	x0, 92000 <sd_init+0x470>
   83cc4:	91122000 	add	x0, x0, #0x488
   83cc8:	910dc000 	add	x0, x0, #0x370
char *disasm_str(char*s,int n) {if(!s)return "?";while(n){s++;if(!*s){s++;n--;}}return *s?s:"?";};
   83ccc:	17fffe21 	b	83550 <disasm_str.part.0>
char *disasm_sysreg(uint8_t p,uint8_t k,uint8_t n,uint8_t m,uint8_t j) {char *t=NULL;switch(p){case 2: switch(k) {case 0: switch(n) {case 0: switch(m) {case 0: t="?\0?\0OSDTRRX_EL1\0"; break;case 2: t="MDCCINT_EL1\0?\0MDSCR_EL1\0"; break;case 3: t="?\0?\0OSDTRTX_EL1\0"; break;case 6: t="?\0?\0OSECCR_EL1\0"; break;default: { n=j; j=m; switch(n) {case 4: t="DBGBVR0_EL1\0DBGBVR1_EL1\0DBGBVR2_EL1\0DBGBVR3_EL1\0DBGBVR4_EL1\0DBGBVR5_EL1\0DBGBVR6_EL1\0DBGBVR7_EL1\0"; break;case 5: t="DBGBCR0_EL1\0DBGBCR1_EL1\0DBGBCR2_EL1\0DBGBCR3_EL1\0DBGBCR4_EL1\0DBGBCR5_EL1\0DBGBCR6_EL1\0DBGBCR7_EL1\0"; break;case 6: t="DBGWVR0_EL1\0DBGWVR1_EL1\0DBGWVR2_EL1\0DBGWVR3_EL1\0DBGWVR4_EL1\0DBGWVR5_EL1\0DBGWVR6_EL1\0DBGWVR7_EL1\0"; break;case 7: t="DBGWCR0_EL1\0DBGWCR1_EL1\0DBGWCR2_EL1\0DBGWCR3_EL1\0DBGWCR4_EL1\0DBGWCR5_EL1\0DBGWCR6_EL1\0DBGWCR7_EL1\0"; break;} break; }} break;case 1: if(m==0) t="MDRAR_EL1\0?\0?\0?\0OSLAR_EL1\0"; else if(j==4) { j=m; t="OSLSR_EL1\0?\0OSDLR_EL1\0DBGPRCR_EL1\0"; }break;case 7: if(j==6) { j=m; t="?\0?\0?\0?\0?\0?\0?\0?\0DBGCLAIMSET_EL1\0DBGCLAIMCLR_EL1\0?\0?\0?\0?\0DBGAUTHSTATUS_EL1\0"; }break;} break;case 3: if(n==0&&j==0) { j=m; t="?\0MDCCSR_EL0\0?\0?\0DBGDTR_EL0\0DBGDTRRX_EL0\0"; } break;case 4: if(n==0&&m==7) t="DBGVCR32_EL2\0"; break;} break;case 3: switch(k) {case 0: switch(n) {case 0: if(m==0) t="MIDR_EL1\0?\0?\0?\0?\0MPIDR_EL1\0REVIDR_EL1\0?\0ID_PFR0_EL1\0ID_PFR1_EL1\0ID_DFR0_EL1\0ID_AFR0_EL1\0ID_MMFR0_EL1\0ID_MMFR1_EL1\0ID_MMFR2_EL1\0ID_MMFR3_EL1\0ID_ISAR0_EL1\0ID_ISAR1_EL1\0ID_ISAR2_EL1\0ID_ISAR2_EL1\0ID_ISAR3_EL1\0ID_ISAR4_EL1\0ID_ISAR5_EL1\0ID_MMFR4_EL1\0?\0MVFR0_EL1\0MVFR1_EL1\0MVFR2_EL1\0?\0?\0?\0?\0?\0ID_AA64PFR0_EL1\0ID_AA64PFR1_EL1\0?\0?\0ID_AA64ZFR0_EL1\0?\0?\0?\0ID_AA64DFR0_EL1\0ID_AA64DFR1_EL1\0?\0?\0ID_AA64AFR0_EL1\0ID_AA64AFR1_EL1\0?\0?\0ID_AA64ISAR0_EL1\0ID_AA64ISAR1_EL1\0?\0?\0?\0?\0?\0?\0ID_AA64MMFR0_EL1\0ID_AA64MMFR1_EL1\0ID_AA64MMFR2_EL1\0"; break;case 1: switch(m) {case 0: t="SCTLR_EL1\0ACTLR_EL1\0CPACR_EL1\0"; break;case 2: t="ZCR_EL1\0"; break;} break;case 2: if(m==0) t="TTBR0_EL1\0TTBR1_EL1\0TCR_EL1\0"; break;case 4: switch(m) {case 0: t="SPSR_EL1\0ELR_EL1\0"; break;case 1: t="SP_EL0\0"; break;case 2: t="SPSel\0?\0CurrentEL\0PAN\0UAO\0"; break;case 6: t="ICC_PMR_EL1\0"; break;} break;case 5: switch(m) {case 1: t="AFSR0_EL1\0AFSR1_EL1\0"; break;case 2: t="ESR_EL1"; break;case 3: t="ERRIDR_EL1\0ERRSELR_EL1\0"; break;case 4: t="ERXFR_EL1\0ERXCTLR_EL1\0ERXSTATUS_EL1\0ERXADDR_EL1\0"; break;case 5: t="ERXMISC0_EL1\0ERXMISC1_EL1\0"; break;} break;case 6: if(m==0) t="FAR_EL1\0"; break;case 7: if(m==4) t="PAR_EL1\0"; break;case 9: switch(m) {case 9: t="PMSCR_EL1\0?\0PMSICR_EL1\0PMSIRR_EL1\0PMSFCR_EL1\0PMSEVFR_EL1\0PMSLATFR_EL1\0PMSIDR_EL1\0PMSIDR_EL1\0"; break;case 10: t="PMBLIMITR_EL1\0PMBPTR_EL1\0?\0PMBSR_EL1\0?\0?\0?\0PMBIDR_EL1\0"; break;case 14: t="?\0PMINTENSET_EL1\0PMINTENCLR_EL1\0"; break;} break;case 10: if(m==4) t="LORSA_EL1\0LOREA_EL1\0LORN_EL1\0LORC_EL1\0?\0?\0?\0LORID_EL1\0"; else if(m!=4&&j==0) { j=m; t="?\0?\0MAIR_EL1\0AMAIR_EL1\0"; }break;case 12: switch(m) {case 0: t="VBAR_EL1\0RVBAR_EL1\0RMR_EL1\0"; break;case 1: t="ISR_EL1\0DISR_EL1\0"; break;case 8: t="ICC_IAR0_EL1\0ICC_EOIR0_EL1\0ICC_HPPIR0_EL1\0ICC_BPR0_EL1\0ICC_AP0R0_EL1\0ICC_AP0R1_EL1\0ICC_AP0R2_EL1\0ICC_AP0R3_EL1\0"; break;case 9: t="ICC_AP1R0_EL1\0ICC_AP1R1_EL1\0ICC_AP1R2_EL1\0ICC_AP1R3_EL1\0"; break;case 11: t="?\0ICC_DIR_EL1\0?\0ICC_RPR_EL1\0?\0ICC_SGI1R_EL1\0ICC_ASGI1R_EL1\0ICC_SGI0R_EL1\0"; break;case 12: t="ICC_IAR1_EL1\0ICC_EOIR1_EL1\0ICC_HPPIR1_EL1\0ICC_BPR1_EL1\0ICC_CTLR_EL1\0ICC_SRE_EL1\0ICC_IGRPEN0_EL1\0ICC_IGRPEN1_EL1\0"; break;} break;case 13: if(m==0) t="?\0CONTEXTIDR_EL1\0?\0?\0TPIDR_EL1\0"; break;case 14: if(m==1) t="CNTKCTL_EL1\0"; break;} break;case 1: if(n==0&&m==0) t="CCSIDR_EL1\0CLIDR_EL1\0?\0?\0?\0?\0?\0AIDR_EL1\0"; break;case 2: if(n==0&&m==0) t="CSSELR_EL1\0"; break;case 3: switch(n) {case 0: if(m==0) t="?\0CTR_EL0\0?\0?\0?\0?\0?\0DCZID_EL0\0"; break;case 4: switch(m) {case 2: t="NZCV\0DAIF\0"; break;case 4: t="FPCR\0FPSR\0"; break;case 5: t="DSPSR_EL0\0DLR_EL0\0"; break;} break;case 9: switch(m) {case 12: t="PMCR_EL0\0PMCNTENSET_EL0\0PMCNTENCLR_EL0\0PMOVSCLR_EL0\0PMSWINC_EL0\0PMSELR_EL0\0PMCEID0_EL0\0PMCEID1_EL0\0"; break;case 13: t="PMCCNTR_EL0\0PMXEVTYPER_EL0\0PMXEVCNTR_EL0\0"; break;case 14: t="PMUSERENR_EL0\0?\0?\0PMOVSSET_EL0\0"; break;} break;
   83cd0:	f0000060 	adrp	x0, 92000 <sd_init+0x470>
   83cd4:	91122000 	add	x0, x0, #0x488
   83cd8:	911e8000 	add	x0, x0, #0x7a0
char *disasm_str(char*s,int n) {if(!s)return "?";while(n){s++;if(!*s){s++;n--;}}return *s?s:"?";};
   83cdc:	17fffe1d 	b	83550 <disasm_str.part.0>
char *disasm_sysreg(uint8_t p,uint8_t k,uint8_t n,uint8_t m,uint8_t j) {char *t=NULL;switch(p){case 2: switch(k) {case 0: switch(n) {case 0: switch(m) {case 0: t="?\0?\0OSDTRRX_EL1\0"; break;case 2: t="MDCCINT_EL1\0?\0MDSCR_EL1\0"; break;case 3: t="?\0?\0OSDTRTX_EL1\0"; break;case 6: t="?\0?\0OSECCR_EL1\0"; break;default: { n=j; j=m; switch(n) {case 4: t="DBGBVR0_EL1\0DBGBVR1_EL1\0DBGBVR2_EL1\0DBGBVR3_EL1\0DBGBVR4_EL1\0DBGBVR5_EL1\0DBGBVR6_EL1\0DBGBVR7_EL1\0"; break;case 5: t="DBGBCR0_EL1\0DBGBCR1_EL1\0DBGBCR2_EL1\0DBGBCR3_EL1\0DBGBCR4_EL1\0DBGBCR5_EL1\0DBGBCR6_EL1\0DBGBCR7_EL1\0"; break;case 6: t="DBGWVR0_EL1\0DBGWVR1_EL1\0DBGWVR2_EL1\0DBGWVR3_EL1\0DBGWVR4_EL1\0DBGWVR5_EL1\0DBGWVR6_EL1\0DBGWVR7_EL1\0"; break;case 7: t="DBGWCR0_EL1\0DBGWCR1_EL1\0DBGWCR2_EL1\0DBGWCR3_EL1\0DBGWCR4_EL1\0DBGWCR5_EL1\0DBGWCR6_EL1\0DBGWCR7_EL1\0"; break;} break; }} break;case 1: if(m==0) t="MDRAR_EL1\0?\0?\0?\0OSLAR_EL1\0"; else if(j==4) { j=m; t="OSLSR_EL1\0?\0OSDLR_EL1\0DBGPRCR_EL1\0"; }break;case 7: if(j==6) { j=m; t="?\0?\0?\0?\0?\0?\0?\0?\0DBGCLAIMSET_EL1\0DBGCLAIMCLR_EL1\0?\0?\0?\0?\0DBGAUTHSTATUS_EL1\0"; }break;} break;case 3: if(n==0&&j==0) { j=m; t="?\0MDCCSR_EL0\0?\0?\0DBGDTR_EL0\0DBGDTRRX_EL0\0"; } break;case 4: if(n==0&&m==7) t="DBGVCR32_EL2\0"; break;} break;case 3: switch(k) {case 0: switch(n) {case 0: if(m==0) t="MIDR_EL1\0?\0?\0?\0?\0MPIDR_EL1\0REVIDR_EL1\0?\0ID_PFR0_EL1\0ID_PFR1_EL1\0ID_DFR0_EL1\0ID_AFR0_EL1\0ID_MMFR0_EL1\0ID_MMFR1_EL1\0ID_MMFR2_EL1\0ID_MMFR3_EL1\0ID_ISAR0_EL1\0ID_ISAR1_EL1\0ID_ISAR2_EL1\0ID_ISAR2_EL1\0ID_ISAR3_EL1\0ID_ISAR4_EL1\0ID_ISAR5_EL1\0ID_MMFR4_EL1\0?\0MVFR0_EL1\0MVFR1_EL1\0MVFR2_EL1\0?\0?\0?\0?\0?\0ID_AA64PFR0_EL1\0ID_AA64PFR1_EL1\0?\0?\0ID_AA64ZFR0_EL1\0?\0?\0?\0ID_AA64DFR0_EL1\0ID_AA64DFR1_EL1\0?\0?\0ID_AA64AFR0_EL1\0ID_AA64AFR1_EL1\0?\0?\0ID_AA64ISAR0_EL1\0ID_AA64ISAR1_EL1\0?\0?\0?\0?\0?\0?\0ID_AA64MMFR0_EL1\0ID_AA64MMFR1_EL1\0ID_AA64MMFR2_EL1\0"; break;case 1: switch(m) {case 0: t="SCTLR_EL1\0ACTLR_EL1\0CPACR_EL1\0"; break;case 2: t="ZCR_EL1\0"; break;} break;case 2: if(m==0) t="TTBR0_EL1\0TTBR1_EL1\0TCR_EL1\0"; break;case 4: switch(m) {case 0: t="SPSR_EL1\0ELR_EL1\0"; break;case 1: t="SP_EL0\0"; break;case 2: t="SPSel\0?\0CurrentEL\0PAN\0UAO\0"; break;case 6: t="ICC_PMR_EL1\0"; break;} break;case 5: switch(m) {case 1: t="AFSR0_EL1\0AFSR1_EL1\0"; break;case 2: t="ESR_EL1"; break;case 3: t="ERRIDR_EL1\0ERRSELR_EL1\0"; break;case 4: t="ERXFR_EL1\0ERXCTLR_EL1\0ERXSTATUS_EL1\0ERXADDR_EL1\0"; break;case 5: t="ERXMISC0_EL1\0ERXMISC1_EL1\0"; break;} break;case 6: if(m==0) t="FAR_EL1\0"; break;case 7: if(m==4) t="PAR_EL1\0"; break;case 9: switch(m) {case 9: t="PMSCR_EL1\0?\0PMSICR_EL1\0PMSIRR_EL1\0PMSFCR_EL1\0PMSEVFR_EL1\0PMSLATFR_EL1\0PMSIDR_EL1\0PMSIDR_EL1\0"; break;case 10: t="PMBLIMITR_EL1\0PMBPTR_EL1\0?\0PMBSR_EL1\0?\0?\0?\0PMBIDR_EL1\0"; break;case 14: t="?\0PMINTENSET_EL1\0PMINTENCLR_EL1\0"; break;} break;case 10: if(m==4) t="LORSA_EL1\0LOREA_EL1\0LORN_EL1\0LORC_EL1\0?\0?\0?\0LORID_EL1\0"; else if(m!=4&&j==0) { j=m; t="?\0?\0MAIR_EL1\0AMAIR_EL1\0"; }break;case 12: switch(m) {case 0: t="VBAR_EL1\0RVBAR_EL1\0RMR_EL1\0"; break;case 1: t="ISR_EL1\0DISR_EL1\0"; break;case 8: t="ICC_IAR0_EL1\0ICC_EOIR0_EL1\0ICC_HPPIR0_EL1\0ICC_BPR0_EL1\0ICC_AP0R0_EL1\0ICC_AP0R1_EL1\0ICC_AP0R2_EL1\0ICC_AP0R3_EL1\0"; break;case 9: t="ICC_AP1R0_EL1\0ICC_AP1R1_EL1\0ICC_AP1R2_EL1\0ICC_AP1R3_EL1\0"; break;case 11: t="?\0ICC_DIR_EL1\0?\0ICC_RPR_EL1\0?\0ICC_SGI1R_EL1\0ICC_ASGI1R_EL1\0ICC_SGI0R_EL1\0"; break;case 12: t="ICC_IAR1_EL1\0ICC_EOIR1_EL1\0ICC_HPPIR1_EL1\0ICC_BPR1_EL1\0ICC_CTLR_EL1\0ICC_SRE_EL1\0ICC_IGRPEN0_EL1\0ICC_IGRPEN1_EL1\0"; break;} break;case 13: if(m==0) t="?\0CONTEXTIDR_EL1\0?\0?\0TPIDR_EL1\0"; break;case 14: if(m==1) t="CNTKCTL_EL1\0"; break;} break;case 1: if(n==0&&m==0) t="CCSIDR_EL1\0CLIDR_EL1\0?\0?\0?\0?\0?\0AIDR_EL1\0"; break;case 2: if(n==0&&m==0) t="CSSELR_EL1\0"; break;case 3: switch(n) {case 0: if(m==0) t="?\0CTR_EL0\0?\0?\0?\0?\0?\0DCZID_EL0\0"; break;case 4: switch(m) {case 2: t="NZCV\0DAIF\0"; break;case 4: t="FPCR\0FPSR\0"; break;case 5: t="DSPSR_EL0\0DLR_EL0\0"; break;} break;case 9: switch(m) {case 12: t="PMCR_EL0\0PMCNTENSET_EL0\0PMCNTENCLR_EL0\0PMOVSCLR_EL0\0PMSWINC_EL0\0PMSELR_EL0\0PMCEID0_EL0\0PMCEID1_EL0\0"; break;case 13: t="PMCCNTR_EL0\0PMXEVTYPER_EL0\0PMXEVCNTR_EL0\0"; break;case 14: t="PMUSERENR_EL0\0?\0?\0PMOVSSET_EL0\0"; break;} break;
   83ce0:	f0000060 	adrp	x0, 92000 <sd_init+0x470>
   83ce4:	91122000 	add	x0, x0, #0x488
   83ce8:	911dc000 	add	x0, x0, #0x770
char *disasm_str(char*s,int n) {if(!s)return "?";while(n){s++;if(!*s){s++;n--;}}return *s?s:"?";};
   83cec:	17fffe19 	b	83550 <disasm_str.part.0>
case 13: if(m==0) t="?\0?\0TPIDR_EL0\0TPIDRRO_EL0\0"; break;case 14: switch(m) {case 0: t="CNTFRQ_EL0\0CNTPCT_EL0\0CNTVCT_EL0\0"; break;case 2: t="CNTP_TVAL_EL0\0CNTP_CTL_EL0\0CNTP_CVAL_EL0\0"; break;case 3: t="CNTV_TVAL_EL0\0CNTV_CTL_EL0\0CNTV_CVAL_EL0\0"; break;} break;} break;case 4: switch(n) {case 0: if(m==0) t="VPIDR_EL2\0?\0?\0?\0?\0VMPIDR_EL2\0"; break;case 1: switch(m) {case 0: t="SCTLR_EL2\0ACTLR_EL2\0"; break;case 1: t="HCR_EL2\0MDCR_EL2\0CPTR_EL2\0HSTR_EL2\0?\0?\0?\0HACR_EL2\0"; break;case 2: t="ZCR_EL2\0"; break;} break;case 2: switch(m) {case 0: t="TTBR0_EL2\0?\0TCR_EL2\0"; break;case 1: t="VTTBR0_EL2\0?\0VTCR_EL2\0"; break;} break;case 3: if(m==0) t="DACR32_EL2\0"; break;case 4: switch(m) {case 0: t="SPSR_EL2\0ELR_EL2\0"; break;case 1: t="SP_EL1\0"; break;case 3: t="SPSR_irq\0SPSR_abt\0SPSR_und\0SPSR_fiq\0"; break;} break;case 5: switch(m) {case 0: t="?\0IFSR32_EL2\0"; break;case 1: t="AFSR0_EL2\0AFSR1_EL2\0"; break;case 2: t="ESR_EL2\0?\0?\0VSESR_EL2\0"; break;case 3: t="FPEXC32_EL2\0"; break;} break;case 6: if(m==0) t="FAR_EL2\0?\0?\0?\0HPFAR_EL2\0"; break;case 9: if(m==9) t="PMSCR_EL2\0"; break;case 10: switch(m) {case 2: t="MAIR_EL2\0"; break;case 3: t="AMAIR_EL2\0"; break;} break;case 12: switch(m) {case 0: t="VBAR_EL2\0RVBAR_EL2\0RMR_EL2\0"; break;case 1: t="?\0VDISR_EL2\0"; break;case 8: t="ICH_AP0R0_EL2\0ICH_AP0R1_EL2\0ICH_AP0R2_EL2\0ICH_AP0R3_EL2\0"; break;case 9: t="ICH_AP1R0_EL2\0ICH_AP1R1_EL2\0ICH_AP1R2_EL2\0ICH_AP1R3_EL2\0ICC_SRE_EL2\0"; break;case 11: t="ICH_HCR_EL2\0ICH_VTR_EL2\0ICH_MISR_EL2\0ICH_EISR_EL2\0?\0ICH_ELRSR_EL2\0?\0ICH_VMCR_EL2\0"; break;case 12: t="ICH_LR0_EL2\0ICH_LR1_EL2\0ICH_LR2_EL2\0ICH_LR3_EL2\0ICH_LR4_EL2\0ICH_LR5_EL2\0ICH_LR6_EL2\0ICH_LR7_EL2\0"; break;case 13: t="ICH_LR8_EL2\0ICH_LR9_EL2\0ICH_LR10_EL2\0ICH_LR11_EL2\0ICH_LR12_EL2\0ICH_LR13_EL2\0ICH_LR14_EL2\0ICH_LR15_EL2\0"; break;} break;case 13: if(m==0) t="?\0CONTEXTIDR_EL2\0TPIDR_EL2\0"; break;case 14: switch(m) {case 0: t="?\0?\0?\0CNTVOFF_EL2\0"; break;case 1: t="CNTHCTL_EL2\0"; break;case 2: t="CNTHP_TVAL_EL2\0CNTHP_CTL_EL2\0CNTHP_CVAL_EL2\0"; break;case 3: t="CNTHV_TVAL_EL2\0CNTHV_CTL_EL2\0CNTHV_CVAL_EL2\0"; break;} break;} break;case 5: if(n==4&&m==0) t="SPSR_EL12\0ELR_EL12\0"; break;case 6: if(n==4&&m==1) t="SP_EL2\0"; break;case 7: if(n==14&&m==2) t="CNTPS_TVAL_EL1\0CNTPS_CTL_EL1\0CNTPS_CVAL_EL1\0"; break;} break;}return t?disasm_str(t,j):NULL;}
   83cf0:	f0000060 	adrp	x0, 92000 <sd_init+0x470>
   83cf4:	91122000 	add	x0, x0, #0x488
   83cf8:	911cc000 	add	x0, x0, #0x730
char *disasm_str(char*s,int n) {if(!s)return "?";while(n){s++;if(!*s){s++;n--;}}return *s?s:"?";};
   83cfc:	17fffe15 	b	83550 <disasm_str.part.0>
char *disasm_sysreg(uint8_t p,uint8_t k,uint8_t n,uint8_t m,uint8_t j) {char *t=NULL;switch(p){case 2: switch(k) {case 0: switch(n) {case 0: switch(m) {case 0: t="?\0?\0OSDTRRX_EL1\0"; break;case 2: t="MDCCINT_EL1\0?\0MDSCR_EL1\0"; break;case 3: t="?\0?\0OSDTRTX_EL1\0"; break;case 6: t="?\0?\0OSECCR_EL1\0"; break;default: { n=j; j=m; switch(n) {case 4: t="DBGBVR0_EL1\0DBGBVR1_EL1\0DBGBVR2_EL1\0DBGBVR3_EL1\0DBGBVR4_EL1\0DBGBVR5_EL1\0DBGBVR6_EL1\0DBGBVR7_EL1\0"; break;case 5: t="DBGBCR0_EL1\0DBGBCR1_EL1\0DBGBCR2_EL1\0DBGBCR3_EL1\0DBGBCR4_EL1\0DBGBCR5_EL1\0DBGBCR6_EL1\0DBGBCR7_EL1\0"; break;case 6: t="DBGWVR0_EL1\0DBGWVR1_EL1\0DBGWVR2_EL1\0DBGWVR3_EL1\0DBGWVR4_EL1\0DBGWVR5_EL1\0DBGWVR6_EL1\0DBGWVR7_EL1\0"; break;case 7: t="DBGWCR0_EL1\0DBGWCR1_EL1\0DBGWCR2_EL1\0DBGWCR3_EL1\0DBGWCR4_EL1\0DBGWCR5_EL1\0DBGWCR6_EL1\0DBGWCR7_EL1\0"; break;} break; }} break;case 1: if(m==0) t="MDRAR_EL1\0?\0?\0?\0OSLAR_EL1\0"; else if(j==4) { j=m; t="OSLSR_EL1\0?\0OSDLR_EL1\0DBGPRCR_EL1\0"; }break;case 7: if(j==6) { j=m; t="?\0?\0?\0?\0?\0?\0?\0?\0DBGCLAIMSET_EL1\0DBGCLAIMCLR_EL1\0?\0?\0?\0?\0DBGAUTHSTATUS_EL1\0"; }break;} break;case 3: if(n==0&&j==0) { j=m; t="?\0MDCCSR_EL0\0?\0?\0DBGDTR_EL0\0DBGDTRRX_EL0\0"; } break;case 4: if(n==0&&m==7) t="DBGVCR32_EL2\0"; break;} break;case 3: switch(k) {case 0: switch(n) {case 0: if(m==0) t="MIDR_EL1\0?\0?\0?\0?\0MPIDR_EL1\0REVIDR_EL1\0?\0ID_PFR0_EL1\0ID_PFR1_EL1\0ID_DFR0_EL1\0ID_AFR0_EL1\0ID_MMFR0_EL1\0ID_MMFR1_EL1\0ID_MMFR2_EL1\0ID_MMFR3_EL1\0ID_ISAR0_EL1\0ID_ISAR1_EL1\0ID_ISAR2_EL1\0ID_ISAR2_EL1\0ID_ISAR3_EL1\0ID_ISAR4_EL1\0ID_ISAR5_EL1\0ID_MMFR4_EL1\0?\0MVFR0_EL1\0MVFR1_EL1\0MVFR2_EL1\0?\0?\0?\0?\0?\0ID_AA64PFR0_EL1\0ID_AA64PFR1_EL1\0?\0?\0ID_AA64ZFR0_EL1\0?\0?\0?\0ID_AA64DFR0_EL1\0ID_AA64DFR1_EL1\0?\0?\0ID_AA64AFR0_EL1\0ID_AA64AFR1_EL1\0?\0?\0ID_AA64ISAR0_EL1\0ID_AA64ISAR1_EL1\0?\0?\0?\0?\0?\0?\0ID_AA64MMFR0_EL1\0ID_AA64MMFR1_EL1\0ID_AA64MMFR2_EL1\0"; break;case 1: switch(m) {case 0: t="SCTLR_EL1\0ACTLR_EL1\0CPACR_EL1\0"; break;case 2: t="ZCR_EL1\0"; break;} break;case 2: if(m==0) t="TTBR0_EL1\0TTBR1_EL1\0TCR_EL1\0"; break;case 4: switch(m) {case 0: t="SPSR_EL1\0ELR_EL1\0"; break;case 1: t="SP_EL0\0"; break;case 2: t="SPSel\0?\0CurrentEL\0PAN\0UAO\0"; break;case 6: t="ICC_PMR_EL1\0"; break;} break;case 5: switch(m) {case 1: t="AFSR0_EL1\0AFSR1_EL1\0"; break;case 2: t="ESR_EL1"; break;case 3: t="ERRIDR_EL1\0ERRSELR_EL1\0"; break;case 4: t="ERXFR_EL1\0ERXCTLR_EL1\0ERXSTATUS_EL1\0ERXADDR_EL1\0"; break;case 5: t="ERXMISC0_EL1\0ERXMISC1_EL1\0"; break;} break;case 6: if(m==0) t="FAR_EL1\0"; break;case 7: if(m==4) t="PAR_EL1\0"; break;case 9: switch(m) {case 9: t="PMSCR_EL1\0?\0PMSICR_EL1\0PMSIRR_EL1\0PMSFCR_EL1\0PMSEVFR_EL1\0PMSLATFR_EL1\0PMSIDR_EL1\0PMSIDR_EL1\0"; break;case 10: t="PMBLIMITR_EL1\0PMBPTR_EL1\0?\0PMBSR_EL1\0?\0?\0?\0PMBIDR_EL1\0"; break;case 14: t="?\0PMINTENSET_EL1\0PMINTENCLR_EL1\0"; break;} break;case 10: if(m==4) t="LORSA_EL1\0LOREA_EL1\0LORN_EL1\0LORC_EL1\0?\0?\0?\0LORID_EL1\0"; else if(m!=4&&j==0) { j=m; t="?\0?\0MAIR_EL1\0AMAIR_EL1\0"; }break;case 12: switch(m) {case 0: t="VBAR_EL1\0RVBAR_EL1\0RMR_EL1\0"; break;case 1: t="ISR_EL1\0DISR_EL1\0"; break;case 8: t="ICC_IAR0_EL1\0ICC_EOIR0_EL1\0ICC_HPPIR0_EL1\0ICC_BPR0_EL1\0ICC_AP0R0_EL1\0ICC_AP0R1_EL1\0ICC_AP0R2_EL1\0ICC_AP0R3_EL1\0"; break;case 9: t="ICC_AP1R0_EL1\0ICC_AP1R1_EL1\0ICC_AP1R2_EL1\0ICC_AP1R3_EL1\0"; break;case 11: t="?\0ICC_DIR_EL1\0?\0ICC_RPR_EL1\0?\0ICC_SGI1R_EL1\0ICC_ASGI1R_EL1\0ICC_SGI0R_EL1\0"; break;case 12: t="ICC_IAR1_EL1\0ICC_EOIR1_EL1\0ICC_HPPIR1_EL1\0ICC_BPR1_EL1\0ICC_CTLR_EL1\0ICC_SRE_EL1\0ICC_IGRPEN0_EL1\0ICC_IGRPEN1_EL1\0"; break;} break;case 13: if(m==0) t="?\0CONTEXTIDR_EL1\0?\0?\0TPIDR_EL1\0"; break;case 14: if(m==1) t="CNTKCTL_EL1\0"; break;} break;case 1: if(n==0&&m==0) t="CCSIDR_EL1\0CLIDR_EL1\0?\0?\0?\0?\0?\0AIDR_EL1\0"; break;case 2: if(n==0&&m==0) t="CSSELR_EL1\0"; break;case 3: switch(n) {case 0: if(m==0) t="?\0CTR_EL0\0?\0?\0?\0?\0?\0DCZID_EL0\0"; break;case 4: switch(m) {case 2: t="NZCV\0DAIF\0"; break;case 4: t="FPCR\0FPSR\0"; break;case 5: t="DSPSR_EL0\0DLR_EL0\0"; break;} break;case 9: switch(m) {case 12: t="PMCR_EL0\0PMCNTENSET_EL0\0PMCNTENCLR_EL0\0PMOVSCLR_EL0\0PMSWINC_EL0\0PMSELR_EL0\0PMCEID0_EL0\0PMCEID1_EL0\0"; break;case 13: t="PMCCNTR_EL0\0PMXEVTYPER_EL0\0PMXEVCNTR_EL0\0"; break;case 14: t="PMUSERENR_EL0\0?\0?\0PMOVSSET_EL0\0"; break;} break;
   83d00:	f0000060 	adrp	x0, 92000 <sd_init+0x470>
   83d04:	91122000 	add	x0, x0, #0x488
   83d08:	2a0303e1 	mov	w1, w3
   83d0c:	9137c000 	add	x0, x0, #0xdf0
char *disasm_str(char*s,int n) {if(!s)return "?";while(n){s++;if(!*s){s++;n--;}}return *s?s:"?";};
   83d10:	17fffe10 	b	83550 <disasm_str.part.0>
char *disasm_sysreg(uint8_t p,uint8_t k,uint8_t n,uint8_t m,uint8_t j) {char *t=NULL;switch(p){case 2: switch(k) {case 0: switch(n) {case 0: switch(m) {case 0: t="?\0?\0OSDTRRX_EL1\0"; break;case 2: t="MDCCINT_EL1\0?\0MDSCR_EL1\0"; break;case 3: t="?\0?\0OSDTRTX_EL1\0"; break;case 6: t="?\0?\0OSECCR_EL1\0"; break;default: { n=j; j=m; switch(n) {case 4: t="DBGBVR0_EL1\0DBGBVR1_EL1\0DBGBVR2_EL1\0DBGBVR3_EL1\0DBGBVR4_EL1\0DBGBVR5_EL1\0DBGBVR6_EL1\0DBGBVR7_EL1\0"; break;case 5: t="DBGBCR0_EL1\0DBGBCR1_EL1\0DBGBCR2_EL1\0DBGBCR3_EL1\0DBGBCR4_EL1\0DBGBCR5_EL1\0DBGBCR6_EL1\0DBGBCR7_EL1\0"; break;case 6: t="DBGWVR0_EL1\0DBGWVR1_EL1\0DBGWVR2_EL1\0DBGWVR3_EL1\0DBGWVR4_EL1\0DBGWVR5_EL1\0DBGWVR6_EL1\0DBGWVR7_EL1\0"; break;case 7: t="DBGWCR0_EL1\0DBGWCR1_EL1\0DBGWCR2_EL1\0DBGWCR3_EL1\0DBGWCR4_EL1\0DBGWCR5_EL1\0DBGWCR6_EL1\0DBGWCR7_EL1\0"; break;} break; }} break;case 1: if(m==0) t="MDRAR_EL1\0?\0?\0?\0OSLAR_EL1\0"; else if(j==4) { j=m; t="OSLSR_EL1\0?\0OSDLR_EL1\0DBGPRCR_EL1\0"; }break;case 7: if(j==6) { j=m; t="?\0?\0?\0?\0?\0?\0?\0?\0DBGCLAIMSET_EL1\0DBGCLAIMCLR_EL1\0?\0?\0?\0?\0DBGAUTHSTATUS_EL1\0"; }break;} break;case 3: if(n==0&&j==0) { j=m; t="?\0MDCCSR_EL0\0?\0?\0DBGDTR_EL0\0DBGDTRRX_EL0\0"; } break;case 4: if(n==0&&m==7) t="DBGVCR32_EL2\0"; break;} break;case 3: switch(k) {case 0: switch(n) {case 0: if(m==0) t="MIDR_EL1\0?\0?\0?\0?\0MPIDR_EL1\0REVIDR_EL1\0?\0ID_PFR0_EL1\0ID_PFR1_EL1\0ID_DFR0_EL1\0ID_AFR0_EL1\0ID_MMFR0_EL1\0ID_MMFR1_EL1\0ID_MMFR2_EL1\0ID_MMFR3_EL1\0ID_ISAR0_EL1\0ID_ISAR1_EL1\0ID_ISAR2_EL1\0ID_ISAR2_EL1\0ID_ISAR3_EL1\0ID_ISAR4_EL1\0ID_ISAR5_EL1\0ID_MMFR4_EL1\0?\0MVFR0_EL1\0MVFR1_EL1\0MVFR2_EL1\0?\0?\0?\0?\0?\0ID_AA64PFR0_EL1\0ID_AA64PFR1_EL1\0?\0?\0ID_AA64ZFR0_EL1\0?\0?\0?\0ID_AA64DFR0_EL1\0ID_AA64DFR1_EL1\0?\0?\0ID_AA64AFR0_EL1\0ID_AA64AFR1_EL1\0?\0?\0ID_AA64ISAR0_EL1\0ID_AA64ISAR1_EL1\0?\0?\0?\0?\0?\0?\0ID_AA64MMFR0_EL1\0ID_AA64MMFR1_EL1\0ID_AA64MMFR2_EL1\0"; break;case 1: switch(m) {case 0: t="SCTLR_EL1\0ACTLR_EL1\0CPACR_EL1\0"; break;case 2: t="ZCR_EL1\0"; break;} break;case 2: if(m==0) t="TTBR0_EL1\0TTBR1_EL1\0TCR_EL1\0"; break;case 4: switch(m) {case 0: t="SPSR_EL1\0ELR_EL1\0"; break;case 1: t="SP_EL0\0"; break;case 2: t="SPSel\0?\0CurrentEL\0PAN\0UAO\0"; break;case 6: t="ICC_PMR_EL1\0"; break;} break;case 5: switch(m) {case 1: t="AFSR0_EL1\0AFSR1_EL1\0"; break;case 2: t="ESR_EL1"; break;case 3: t="ERRIDR_EL1\0ERRSELR_EL1\0"; break;case 4: t="ERXFR_EL1\0ERXCTLR_EL1\0ERXSTATUS_EL1\0ERXADDR_EL1\0"; break;case 5: t="ERXMISC0_EL1\0ERXMISC1_EL1\0"; break;} break;case 6: if(m==0) t="FAR_EL1\0"; break;case 7: if(m==4) t="PAR_EL1\0"; break;case 9: switch(m) {case 9: t="PMSCR_EL1\0?\0PMSICR_EL1\0PMSIRR_EL1\0PMSFCR_EL1\0PMSEVFR_EL1\0PMSLATFR_EL1\0PMSIDR_EL1\0PMSIDR_EL1\0"; break;case 10: t="PMBLIMITR_EL1\0PMBPTR_EL1\0?\0PMBSR_EL1\0?\0?\0?\0PMBIDR_EL1\0"; break;case 14: t="?\0PMINTENSET_EL1\0PMINTENCLR_EL1\0"; break;} break;case 10: if(m==4) t="LORSA_EL1\0LOREA_EL1\0LORN_EL1\0LORC_EL1\0?\0?\0?\0LORID_EL1\0"; else if(m!=4&&j==0) { j=m; t="?\0?\0MAIR_EL1\0AMAIR_EL1\0"; }break;case 12: switch(m) {case 0: t="VBAR_EL1\0RVBAR_EL1\0RMR_EL1\0"; break;case 1: t="ISR_EL1\0DISR_EL1\0"; break;case 8: t="ICC_IAR0_EL1\0ICC_EOIR0_EL1\0ICC_HPPIR0_EL1\0ICC_BPR0_EL1\0ICC_AP0R0_EL1\0ICC_AP0R1_EL1\0ICC_AP0R2_EL1\0ICC_AP0R3_EL1\0"; break;case 9: t="ICC_AP1R0_EL1\0ICC_AP1R1_EL1\0ICC_AP1R2_EL1\0ICC_AP1R3_EL1\0"; break;case 11: t="?\0ICC_DIR_EL1\0?\0ICC_RPR_EL1\0?\0ICC_SGI1R_EL1\0ICC_ASGI1R_EL1\0ICC_SGI0R_EL1\0"; break;case 12: t="ICC_IAR1_EL1\0ICC_EOIR1_EL1\0ICC_HPPIR1_EL1\0ICC_BPR1_EL1\0ICC_CTLR_EL1\0ICC_SRE_EL1\0ICC_IGRPEN0_EL1\0ICC_IGRPEN1_EL1\0"; break;} break;case 13: if(m==0) t="?\0CONTEXTIDR_EL1\0?\0?\0TPIDR_EL1\0"; break;case 14: if(m==1) t="CNTKCTL_EL1\0"; break;} break;case 1: if(n==0&&m==0) t="CCSIDR_EL1\0CLIDR_EL1\0?\0?\0?\0?\0?\0AIDR_EL1\0"; break;case 2: if(n==0&&m==0) t="CSSELR_EL1\0"; break;case 3: switch(n) {case 0: if(m==0) t="?\0CTR_EL0\0?\0?\0?\0?\0?\0DCZID_EL0\0"; break;case 4: switch(m) {case 2: t="NZCV\0DAIF\0"; break;case 4: t="FPCR\0FPSR\0"; break;case 5: t="DSPSR_EL0\0DLR_EL0\0"; break;} break;case 9: switch(m) {case 12: t="PMCR_EL0\0PMCNTENSET_EL0\0PMCNTENCLR_EL0\0PMOVSCLR_EL0\0PMSWINC_EL0\0PMSELR_EL0\0PMCEID0_EL0\0PMCEID1_EL0\0"; break;case 13: t="PMCCNTR_EL0\0PMXEVTYPER_EL0\0PMXEVCNTR_EL0\0"; break;case 14: t="PMUSERENR_EL0\0?\0?\0PMOVSSET_EL0\0"; break;} break;
   83d14:	f0000060 	adrp	x0, 92000 <sd_init+0x470>
   83d18:	91122000 	add	x0, x0, #0x488
   83d1c:	911d8000 	add	x0, x0, #0x760
char *disasm_str(char*s,int n) {if(!s)return "?";while(n){s++;if(!*s){s++;n--;}}return *s?s:"?";};
   83d20:	17fffe0c 	b	83550 <disasm_str.part.0>
char *disasm_sysreg(uint8_t p,uint8_t k,uint8_t n,uint8_t m,uint8_t j) {char *t=NULL;switch(p){case 2: switch(k) {case 0: switch(n) {case 0: switch(m) {case 0: t="?\0?\0OSDTRRX_EL1\0"; break;case 2: t="MDCCINT_EL1\0?\0MDSCR_EL1\0"; break;case 3: t="?\0?\0OSDTRTX_EL1\0"; break;case 6: t="?\0?\0OSECCR_EL1\0"; break;default: { n=j; j=m; switch(n) {case 4: t="DBGBVR0_EL1\0DBGBVR1_EL1\0DBGBVR2_EL1\0DBGBVR3_EL1\0DBGBVR4_EL1\0DBGBVR5_EL1\0DBGBVR6_EL1\0DBGBVR7_EL1\0"; break;case 5: t="DBGBCR0_EL1\0DBGBCR1_EL1\0DBGBCR2_EL1\0DBGBCR3_EL1\0DBGBCR4_EL1\0DBGBCR5_EL1\0DBGBCR6_EL1\0DBGBCR7_EL1\0"; break;case 6: t="DBGWVR0_EL1\0DBGWVR1_EL1\0DBGWVR2_EL1\0DBGWVR3_EL1\0DBGWVR4_EL1\0DBGWVR5_EL1\0DBGWVR6_EL1\0DBGWVR7_EL1\0"; break;case 7: t="DBGWCR0_EL1\0DBGWCR1_EL1\0DBGWCR2_EL1\0DBGWCR3_EL1\0DBGWCR4_EL1\0DBGWCR5_EL1\0DBGWCR6_EL1\0DBGWCR7_EL1\0"; break;} break; }} break;case 1: if(m==0) t="MDRAR_EL1\0?\0?\0?\0OSLAR_EL1\0"; else if(j==4) { j=m; t="OSLSR_EL1\0?\0OSDLR_EL1\0DBGPRCR_EL1\0"; }break;case 7: if(j==6) { j=m; t="?\0?\0?\0?\0?\0?\0?\0?\0DBGCLAIMSET_EL1\0DBGCLAIMCLR_EL1\0?\0?\0?\0?\0DBGAUTHSTATUS_EL1\0"; }break;} break;case 3: if(n==0&&j==0) { j=m; t="?\0MDCCSR_EL0\0?\0?\0DBGDTR_EL0\0DBGDTRRX_EL0\0"; } break;case 4: if(n==0&&m==7) t="DBGVCR32_EL2\0"; break;} break;case 3: switch(k) {case 0: switch(n) {case 0: if(m==0) t="MIDR_EL1\0?\0?\0?\0?\0MPIDR_EL1\0REVIDR_EL1\0?\0ID_PFR0_EL1\0ID_PFR1_EL1\0ID_DFR0_EL1\0ID_AFR0_EL1\0ID_MMFR0_EL1\0ID_MMFR1_EL1\0ID_MMFR2_EL1\0ID_MMFR3_EL1\0ID_ISAR0_EL1\0ID_ISAR1_EL1\0ID_ISAR2_EL1\0ID_ISAR2_EL1\0ID_ISAR3_EL1\0ID_ISAR4_EL1\0ID_ISAR5_EL1\0ID_MMFR4_EL1\0?\0MVFR0_EL1\0MVFR1_EL1\0MVFR2_EL1\0?\0?\0?\0?\0?\0ID_AA64PFR0_EL1\0ID_AA64PFR1_EL1\0?\0?\0ID_AA64ZFR0_EL1\0?\0?\0?\0ID_AA64DFR0_EL1\0ID_AA64DFR1_EL1\0?\0?\0ID_AA64AFR0_EL1\0ID_AA64AFR1_EL1\0?\0?\0ID_AA64ISAR0_EL1\0ID_AA64ISAR1_EL1\0?\0?\0?\0?\0?\0?\0ID_AA64MMFR0_EL1\0ID_AA64MMFR1_EL1\0ID_AA64MMFR2_EL1\0"; break;case 1: switch(m) {case 0: t="SCTLR_EL1\0ACTLR_EL1\0CPACR_EL1\0"; break;case 2: t="ZCR_EL1\0"; break;} break;case 2: if(m==0) t="TTBR0_EL1\0TTBR1_EL1\0TCR_EL1\0"; break;case 4: switch(m) {case 0: t="SPSR_EL1\0ELR_EL1\0"; break;case 1: t="SP_EL0\0"; break;case 2: t="SPSel\0?\0CurrentEL\0PAN\0UAO\0"; break;case 6: t="ICC_PMR_EL1\0"; break;} break;case 5: switch(m) {case 1: t="AFSR0_EL1\0AFSR1_EL1\0"; break;case 2: t="ESR_EL1"; break;case 3: t="ERRIDR_EL1\0ERRSELR_EL1\0"; break;case 4: t="ERXFR_EL1\0ERXCTLR_EL1\0ERXSTATUS_EL1\0ERXADDR_EL1\0"; break;case 5: t="ERXMISC0_EL1\0ERXMISC1_EL1\0"; break;} break;case 6: if(m==0) t="FAR_EL1\0"; break;case 7: if(m==4) t="PAR_EL1\0"; break;case 9: switch(m) {case 9: t="PMSCR_EL1\0?\0PMSICR_EL1\0PMSIRR_EL1\0PMSFCR_EL1\0PMSEVFR_EL1\0PMSLATFR_EL1\0PMSIDR_EL1\0PMSIDR_EL1\0"; break;case 10: t="PMBLIMITR_EL1\0PMBPTR_EL1\0?\0PMBSR_EL1\0?\0?\0?\0PMBIDR_EL1\0"; break;case 14: t="?\0PMINTENSET_EL1\0PMINTENCLR_EL1\0"; break;} break;case 10: if(m==4) t="LORSA_EL1\0LOREA_EL1\0LORN_EL1\0LORC_EL1\0?\0?\0?\0LORID_EL1\0"; else if(m!=4&&j==0) { j=m; t="?\0?\0MAIR_EL1\0AMAIR_EL1\0"; }break;case 12: switch(m) {case 0: t="VBAR_EL1\0RVBAR_EL1\0RMR_EL1\0"; break;case 1: t="ISR_EL1\0DISR_EL1\0"; break;case 8: t="ICC_IAR0_EL1\0ICC_EOIR0_EL1\0ICC_HPPIR0_EL1\0ICC_BPR0_EL1\0ICC_AP0R0_EL1\0ICC_AP0R1_EL1\0ICC_AP0R2_EL1\0ICC_AP0R3_EL1\0"; break;case 9: t="ICC_AP1R0_EL1\0ICC_AP1R1_EL1\0ICC_AP1R2_EL1\0ICC_AP1R3_EL1\0"; break;case 11: t="?\0ICC_DIR_EL1\0?\0ICC_RPR_EL1\0?\0ICC_SGI1R_EL1\0ICC_ASGI1R_EL1\0ICC_SGI0R_EL1\0"; break;case 12: t="ICC_IAR1_EL1\0ICC_EOIR1_EL1\0ICC_HPPIR1_EL1\0ICC_BPR1_EL1\0ICC_CTLR_EL1\0ICC_SRE_EL1\0ICC_IGRPEN0_EL1\0ICC_IGRPEN1_EL1\0"; break;} break;case 13: if(m==0) t="?\0CONTEXTIDR_EL1\0?\0?\0TPIDR_EL1\0"; break;case 14: if(m==1) t="CNTKCTL_EL1\0"; break;} break;case 1: if(n==0&&m==0) t="CCSIDR_EL1\0CLIDR_EL1\0?\0?\0?\0?\0?\0AIDR_EL1\0"; break;case 2: if(n==0&&m==0) t="CSSELR_EL1\0"; break;case 3: switch(n) {case 0: if(m==0) t="?\0CTR_EL0\0?\0?\0?\0?\0?\0DCZID_EL0\0"; break;case 4: switch(m) {case 2: t="NZCV\0DAIF\0"; break;case 4: t="FPCR\0FPSR\0"; break;case 5: t="DSPSR_EL0\0DLR_EL0\0"; break;} break;case 9: switch(m) {case 12: t="PMCR_EL0\0PMCNTENSET_EL0\0PMCNTENCLR_EL0\0PMOVSCLR_EL0\0PMSWINC_EL0\0PMSELR_EL0\0PMCEID0_EL0\0PMCEID1_EL0\0"; break;case 13: t="PMCCNTR_EL0\0PMXEVTYPER_EL0\0PMXEVCNTR_EL0\0"; break;case 14: t="PMUSERENR_EL0\0?\0?\0PMOVSSET_EL0\0"; break;} break;
   83d24:	f0000060 	adrp	x0, 92000 <sd_init+0x470>
   83d28:	91122000 	add	x0, x0, #0x488
   83d2c:	911ee000 	add	x0, x0, #0x7b8
char *disasm_str(char*s,int n) {if(!s)return "?";while(n){s++;if(!*s){s++;n--;}}return *s?s:"?";};
   83d30:	17fffe08 	b	83550 <disasm_str.part.0>
case 13: if(m==0) t="?\0?\0TPIDR_EL0\0TPIDRRO_EL0\0"; break;case 14: switch(m) {case 0: t="CNTFRQ_EL0\0CNTPCT_EL0\0CNTVCT_EL0\0"; break;case 2: t="CNTP_TVAL_EL0\0CNTP_CTL_EL0\0CNTP_CVAL_EL0\0"; break;case 3: t="CNTV_TVAL_EL0\0CNTV_CTL_EL0\0CNTV_CVAL_EL0\0"; break;} break;} break;case 4: switch(n) {case 0: if(m==0) t="VPIDR_EL2\0?\0?\0?\0?\0VMPIDR_EL2\0"; break;case 1: switch(m) {case 0: t="SCTLR_EL2\0ACTLR_EL2\0"; break;case 1: t="HCR_EL2\0MDCR_EL2\0CPTR_EL2\0HSTR_EL2\0?\0?\0?\0HACR_EL2\0"; break;case 2: t="ZCR_EL2\0"; break;} break;case 2: switch(m) {case 0: t="TTBR0_EL2\0?\0TCR_EL2\0"; break;case 1: t="VTTBR0_EL2\0?\0VTCR_EL2\0"; break;} break;case 3: if(m==0) t="DACR32_EL2\0"; break;case 4: switch(m) {case 0: t="SPSR_EL2\0ELR_EL2\0"; break;case 1: t="SP_EL1\0"; break;case 3: t="SPSR_irq\0SPSR_abt\0SPSR_und\0SPSR_fiq\0"; break;} break;case 5: switch(m) {case 0: t="?\0IFSR32_EL2\0"; break;case 1: t="AFSR0_EL2\0AFSR1_EL2\0"; break;case 2: t="ESR_EL2\0?\0?\0VSESR_EL2\0"; break;case 3: t="FPEXC32_EL2\0"; break;} break;case 6: if(m==0) t="FAR_EL2\0?\0?\0?\0HPFAR_EL2\0"; break;case 9: if(m==9) t="PMSCR_EL2\0"; break;case 10: switch(m) {case 2: t="MAIR_EL2\0"; break;case 3: t="AMAIR_EL2\0"; break;} break;case 12: switch(m) {case 0: t="VBAR_EL2\0RVBAR_EL2\0RMR_EL2\0"; break;case 1: t="?\0VDISR_EL2\0"; break;case 8: t="ICH_AP0R0_EL2\0ICH_AP0R1_EL2\0ICH_AP0R2_EL2\0ICH_AP0R3_EL2\0"; break;case 9: t="ICH_AP1R0_EL2\0ICH_AP1R1_EL2\0ICH_AP1R2_EL2\0ICH_AP1R3_EL2\0ICC_SRE_EL2\0"; break;case 11: t="ICH_HCR_EL2\0ICH_VTR_EL2\0ICH_MISR_EL2\0ICH_EISR_EL2\0?\0ICH_ELRSR_EL2\0?\0ICH_VMCR_EL2\0"; break;case 12: t="ICH_LR0_EL2\0ICH_LR1_EL2\0ICH_LR2_EL2\0ICH_LR3_EL2\0ICH_LR4_EL2\0ICH_LR5_EL2\0ICH_LR6_EL2\0ICH_LR7_EL2\0"; break;case 13: t="ICH_LR8_EL2\0ICH_LR9_EL2\0ICH_LR10_EL2\0ICH_LR11_EL2\0ICH_LR12_EL2\0ICH_LR13_EL2\0ICH_LR14_EL2\0ICH_LR15_EL2\0"; break;} break;case 13: if(m==0) t="?\0CONTEXTIDR_EL2\0TPIDR_EL2\0"; break;case 14: switch(m) {case 0: t="?\0?\0?\0CNTVOFF_EL2\0"; break;case 1: t="CNTHCTL_EL2\0"; break;case 2: t="CNTHP_TVAL_EL2\0CNTHP_CTL_EL2\0CNTHP_CVAL_EL2\0"; break;case 3: t="CNTHV_TVAL_EL2\0CNTHV_CTL_EL2\0CNTHV_CVAL_EL2\0"; break;} break;} break;case 5: if(n==4&&m==0) t="SPSR_EL12\0ELR_EL12\0"; break;case 6: if(n==4&&m==1) t="SP_EL2\0"; break;case 7: if(n==14&&m==2) t="CNTPS_TVAL_EL1\0CNTPS_CTL_EL1\0CNTPS_CVAL_EL1\0"; break;} break;}return t?disasm_str(t,j):NULL;}
   83d34:	f0000060 	adrp	x0, 92000 <sd_init+0x470>
   83d38:	91122000 	add	x0, x0, #0x488
   83d3c:	91316000 	add	x0, x0, #0xc58
char *disasm_str(char*s,int n) {if(!s)return "?";while(n){s++;if(!*s){s++;n--;}}return *s?s:"?";};
   83d40:	17fffe04 	b	83550 <disasm_str.part.0>
char *disasm_sysreg(uint8_t p,uint8_t k,uint8_t n,uint8_t m,uint8_t j) {char *t=NULL;switch(p){case 2: switch(k) {case 0: switch(n) {case 0: switch(m) {case 0: t="?\0?\0OSDTRRX_EL1\0"; break;case 2: t="MDCCINT_EL1\0?\0MDSCR_EL1\0"; break;case 3: t="?\0?\0OSDTRTX_EL1\0"; break;case 6: t="?\0?\0OSECCR_EL1\0"; break;default: { n=j; j=m; switch(n) {case 4: t="DBGBVR0_EL1\0DBGBVR1_EL1\0DBGBVR2_EL1\0DBGBVR3_EL1\0DBGBVR4_EL1\0DBGBVR5_EL1\0DBGBVR6_EL1\0DBGBVR7_EL1\0"; break;case 5: t="DBGBCR0_EL1\0DBGBCR1_EL1\0DBGBCR2_EL1\0DBGBCR3_EL1\0DBGBCR4_EL1\0DBGBCR5_EL1\0DBGBCR6_EL1\0DBGBCR7_EL1\0"; break;case 6: t="DBGWVR0_EL1\0DBGWVR1_EL1\0DBGWVR2_EL1\0DBGWVR3_EL1\0DBGWVR4_EL1\0DBGWVR5_EL1\0DBGWVR6_EL1\0DBGWVR7_EL1\0"; break;case 7: t="DBGWCR0_EL1\0DBGWCR1_EL1\0DBGWCR2_EL1\0DBGWCR3_EL1\0DBGWCR4_EL1\0DBGWCR5_EL1\0DBGWCR6_EL1\0DBGWCR7_EL1\0"; break;} break; }} break;case 1: if(m==0) t="MDRAR_EL1\0?\0?\0?\0OSLAR_EL1\0"; else if(j==4) { j=m; t="OSLSR_EL1\0?\0OSDLR_EL1\0DBGPRCR_EL1\0"; }break;case 7: if(j==6) { j=m; t="?\0?\0?\0?\0?\0?\0?\0?\0DBGCLAIMSET_EL1\0DBGCLAIMCLR_EL1\0?\0?\0?\0?\0DBGAUTHSTATUS_EL1\0"; }break;} break;case 3: if(n==0&&j==0) { j=m; t="?\0MDCCSR_EL0\0?\0?\0DBGDTR_EL0\0DBGDTRRX_EL0\0"; } break;case 4: if(n==0&&m==7) t="DBGVCR32_EL2\0"; break;} break;case 3: switch(k) {case 0: switch(n) {case 0: if(m==0) t="MIDR_EL1\0?\0?\0?\0?\0MPIDR_EL1\0REVIDR_EL1\0?\0ID_PFR0_EL1\0ID_PFR1_EL1\0ID_DFR0_EL1\0ID_AFR0_EL1\0ID_MMFR0_EL1\0ID_MMFR1_EL1\0ID_MMFR2_EL1\0ID_MMFR3_EL1\0ID_ISAR0_EL1\0ID_ISAR1_EL1\0ID_ISAR2_EL1\0ID_ISAR2_EL1\0ID_ISAR3_EL1\0ID_ISAR4_EL1\0ID_ISAR5_EL1\0ID_MMFR4_EL1\0?\0MVFR0_EL1\0MVFR1_EL1\0MVFR2_EL1\0?\0?\0?\0?\0?\0ID_AA64PFR0_EL1\0ID_AA64PFR1_EL1\0?\0?\0ID_AA64ZFR0_EL1\0?\0?\0?\0ID_AA64DFR0_EL1\0ID_AA64DFR1_EL1\0?\0?\0ID_AA64AFR0_EL1\0ID_AA64AFR1_EL1\0?\0?\0ID_AA64ISAR0_EL1\0ID_AA64ISAR1_EL1\0?\0?\0?\0?\0?\0?\0ID_AA64MMFR0_EL1\0ID_AA64MMFR1_EL1\0ID_AA64MMFR2_EL1\0"; break;case 1: switch(m) {case 0: t="SCTLR_EL1\0ACTLR_EL1\0CPACR_EL1\0"; break;case 2: t="ZCR_EL1\0"; break;} break;case 2: if(m==0) t="TTBR0_EL1\0TTBR1_EL1\0TCR_EL1\0"; break;case 4: switch(m) {case 0: t="SPSR_EL1\0ELR_EL1\0"; break;case 1: t="SP_EL0\0"; break;case 2: t="SPSel\0?\0CurrentEL\0PAN\0UAO\0"; break;case 6: t="ICC_PMR_EL1\0"; break;} break;case 5: switch(m) {case 1: t="AFSR0_EL1\0AFSR1_EL1\0"; break;case 2: t="ESR_EL1"; break;case 3: t="ERRIDR_EL1\0ERRSELR_EL1\0"; break;case 4: t="ERXFR_EL1\0ERXCTLR_EL1\0ERXSTATUS_EL1\0ERXADDR_EL1\0"; break;case 5: t="ERXMISC0_EL1\0ERXMISC1_EL1\0"; break;} break;case 6: if(m==0) t="FAR_EL1\0"; break;case 7: if(m==4) t="PAR_EL1\0"; break;case 9: switch(m) {case 9: t="PMSCR_EL1\0?\0PMSICR_EL1\0PMSIRR_EL1\0PMSFCR_EL1\0PMSEVFR_EL1\0PMSLATFR_EL1\0PMSIDR_EL1\0PMSIDR_EL1\0"; break;case 10: t="PMBLIMITR_EL1\0PMBPTR_EL1\0?\0PMBSR_EL1\0?\0?\0?\0PMBIDR_EL1\0"; break;case 14: t="?\0PMINTENSET_EL1\0PMINTENCLR_EL1\0"; break;} break;case 10: if(m==4) t="LORSA_EL1\0LOREA_EL1\0LORN_EL1\0LORC_EL1\0?\0?\0?\0LORID_EL1\0"; else if(m!=4&&j==0) { j=m; t="?\0?\0MAIR_EL1\0AMAIR_EL1\0"; }break;case 12: switch(m) {case 0: t="VBAR_EL1\0RVBAR_EL1\0RMR_EL1\0"; break;case 1: t="ISR_EL1\0DISR_EL1\0"; break;case 8: t="ICC_IAR0_EL1\0ICC_EOIR0_EL1\0ICC_HPPIR0_EL1\0ICC_BPR0_EL1\0ICC_AP0R0_EL1\0ICC_AP0R1_EL1\0ICC_AP0R2_EL1\0ICC_AP0R3_EL1\0"; break;case 9: t="ICC_AP1R0_EL1\0ICC_AP1R1_EL1\0ICC_AP1R2_EL1\0ICC_AP1R3_EL1\0"; break;case 11: t="?\0ICC_DIR_EL1\0?\0ICC_RPR_EL1\0?\0ICC_SGI1R_EL1\0ICC_ASGI1R_EL1\0ICC_SGI0R_EL1\0"; break;case 12: t="ICC_IAR1_EL1\0ICC_EOIR1_EL1\0ICC_HPPIR1_EL1\0ICC_BPR1_EL1\0ICC_CTLR_EL1\0ICC_SRE_EL1\0ICC_IGRPEN0_EL1\0ICC_IGRPEN1_EL1\0"; break;} break;case 13: if(m==0) t="?\0CONTEXTIDR_EL1\0?\0?\0TPIDR_EL1\0"; break;case 14: if(m==1) t="CNTKCTL_EL1\0"; break;} break;case 1: if(n==0&&m==0) t="CCSIDR_EL1\0CLIDR_EL1\0?\0?\0?\0?\0?\0AIDR_EL1\0"; break;case 2: if(n==0&&m==0) t="CSSELR_EL1\0"; break;case 3: switch(n) {case 0: if(m==0) t="?\0CTR_EL0\0?\0?\0?\0?\0?\0DCZID_EL0\0"; break;case 4: switch(m) {case 2: t="NZCV\0DAIF\0"; break;case 4: t="FPCR\0FPSR\0"; break;case 5: t="DSPSR_EL0\0DLR_EL0\0"; break;} break;case 9: switch(m) {case 12: t="PMCR_EL0\0PMCNTENSET_EL0\0PMCNTENCLR_EL0\0PMOVSCLR_EL0\0PMSWINC_EL0\0PMSELR_EL0\0PMCEID0_EL0\0PMCEID1_EL0\0"; break;case 13: t="PMCCNTR_EL0\0PMXEVTYPER_EL0\0PMXEVCNTR_EL0\0"; break;case 14: t="PMUSERENR_EL0\0?\0?\0PMOVSSET_EL0\0"; break;} break;
   83d44:	f0000060 	adrp	x0, 92000 <sd_init+0x470>
   83d48:	91122000 	add	x0, x0, #0x488
   83d4c:	9139c000 	add	x0, x0, #0xe70
char *disasm_str(char*s,int n) {if(!s)return "?";while(n){s++;if(!*s){s++;n--;}}return *s?s:"?";};
   83d50:	17fffe00 	b	83550 <disasm_str.part.0>
case 13: if(m==0) t="?\0?\0TPIDR_EL0\0TPIDRRO_EL0\0"; break;case 14: switch(m) {case 0: t="CNTFRQ_EL0\0CNTPCT_EL0\0CNTVCT_EL0\0"; break;case 2: t="CNTP_TVAL_EL0\0CNTP_CTL_EL0\0CNTP_CVAL_EL0\0"; break;case 3: t="CNTV_TVAL_EL0\0CNTV_CTL_EL0\0CNTV_CVAL_EL0\0"; break;} break;} break;case 4: switch(n) {case 0: if(m==0) t="VPIDR_EL2\0?\0?\0?\0?\0VMPIDR_EL2\0"; break;case 1: switch(m) {case 0: t="SCTLR_EL2\0ACTLR_EL2\0"; break;case 1: t="HCR_EL2\0MDCR_EL2\0CPTR_EL2\0HSTR_EL2\0?\0?\0?\0HACR_EL2\0"; break;case 2: t="ZCR_EL2\0"; break;} break;case 2: switch(m) {case 0: t="TTBR0_EL2\0?\0TCR_EL2\0"; break;case 1: t="VTTBR0_EL2\0?\0VTCR_EL2\0"; break;} break;case 3: if(m==0) t="DACR32_EL2\0"; break;case 4: switch(m) {case 0: t="SPSR_EL2\0ELR_EL2\0"; break;case 1: t="SP_EL1\0"; break;case 3: t="SPSR_irq\0SPSR_abt\0SPSR_und\0SPSR_fiq\0"; break;} break;case 5: switch(m) {case 0: t="?\0IFSR32_EL2\0"; break;case 1: t="AFSR0_EL2\0AFSR1_EL2\0"; break;case 2: t="ESR_EL2\0?\0?\0VSESR_EL2\0"; break;case 3: t="FPEXC32_EL2\0"; break;} break;case 6: if(m==0) t="FAR_EL2\0?\0?\0?\0HPFAR_EL2\0"; break;case 9: if(m==9) t="PMSCR_EL2\0"; break;case 10: switch(m) {case 2: t="MAIR_EL2\0"; break;case 3: t="AMAIR_EL2\0"; break;} break;case 12: switch(m) {case 0: t="VBAR_EL2\0RVBAR_EL2\0RMR_EL2\0"; break;case 1: t="?\0VDISR_EL2\0"; break;case 8: t="ICH_AP0R0_EL2\0ICH_AP0R1_EL2\0ICH_AP0R2_EL2\0ICH_AP0R3_EL2\0"; break;case 9: t="ICH_AP1R0_EL2\0ICH_AP1R1_EL2\0ICH_AP1R2_EL2\0ICH_AP1R3_EL2\0ICC_SRE_EL2\0"; break;case 11: t="ICH_HCR_EL2\0ICH_VTR_EL2\0ICH_MISR_EL2\0ICH_EISR_EL2\0?\0ICH_ELRSR_EL2\0?\0ICH_VMCR_EL2\0"; break;case 12: t="ICH_LR0_EL2\0ICH_LR1_EL2\0ICH_LR2_EL2\0ICH_LR3_EL2\0ICH_LR4_EL2\0ICH_LR5_EL2\0ICH_LR6_EL2\0ICH_LR7_EL2\0"; break;case 13: t="ICH_LR8_EL2\0ICH_LR9_EL2\0ICH_LR10_EL2\0ICH_LR11_EL2\0ICH_LR12_EL2\0ICH_LR13_EL2\0ICH_LR14_EL2\0ICH_LR15_EL2\0"; break;} break;case 13: if(m==0) t="?\0CONTEXTIDR_EL2\0TPIDR_EL2\0"; break;case 14: switch(m) {case 0: t="?\0?\0?\0CNTVOFF_EL2\0"; break;case 1: t="CNTHCTL_EL2\0"; break;case 2: t="CNTHP_TVAL_EL2\0CNTHP_CTL_EL2\0CNTHP_CVAL_EL2\0"; break;case 3: t="CNTHV_TVAL_EL2\0CNTHV_CTL_EL2\0CNTHV_CVAL_EL2\0"; break;} break;} break;case 5: if(n==4&&m==0) t="SPSR_EL12\0ELR_EL12\0"; break;case 6: if(n==4&&m==1) t="SP_EL2\0"; break;case 7: if(n==14&&m==2) t="CNTPS_TVAL_EL1\0CNTPS_CTL_EL1\0CNTPS_CVAL_EL1\0"; break;} break;}return t?disasm_str(t,j):NULL;}
   83d54:	f0000060 	adrp	x0, 92000 <sd_init+0x470>
   83d58:	91122000 	add	x0, x0, #0x488
   83d5c:	91212000 	add	x0, x0, #0x848
char *disasm_str(char*s,int n) {if(!s)return "?";while(n){s++;if(!*s){s++;n--;}}return *s?s:"?";};
   83d60:	17fffdfc 	b	83550 <disasm_str.part.0>
char *disasm_sysreg(uint8_t p,uint8_t k,uint8_t n,uint8_t m,uint8_t j) {char *t=NULL;switch(p){case 2: switch(k) {case 0: switch(n) {case 0: switch(m) {case 0: t="?\0?\0OSDTRRX_EL1\0"; break;case 2: t="MDCCINT_EL1\0?\0MDSCR_EL1\0"; break;case 3: t="?\0?\0OSDTRTX_EL1\0"; break;case 6: t="?\0?\0OSECCR_EL1\0"; break;default: { n=j; j=m; switch(n) {case 4: t="DBGBVR0_EL1\0DBGBVR1_EL1\0DBGBVR2_EL1\0DBGBVR3_EL1\0DBGBVR4_EL1\0DBGBVR5_EL1\0DBGBVR6_EL1\0DBGBVR7_EL1\0"; break;case 5: t="DBGBCR0_EL1\0DBGBCR1_EL1\0DBGBCR2_EL1\0DBGBCR3_EL1\0DBGBCR4_EL1\0DBGBCR5_EL1\0DBGBCR6_EL1\0DBGBCR7_EL1\0"; break;case 6: t="DBGWVR0_EL1\0DBGWVR1_EL1\0DBGWVR2_EL1\0DBGWVR3_EL1\0DBGWVR4_EL1\0DBGWVR5_EL1\0DBGWVR6_EL1\0DBGWVR7_EL1\0"; break;case 7: t="DBGWCR0_EL1\0DBGWCR1_EL1\0DBGWCR2_EL1\0DBGWCR3_EL1\0DBGWCR4_EL1\0DBGWCR5_EL1\0DBGWCR6_EL1\0DBGWCR7_EL1\0"; break;} break; }} break;case 1: if(m==0) t="MDRAR_EL1\0?\0?\0?\0OSLAR_EL1\0"; else if(j==4) { j=m; t="OSLSR_EL1\0?\0OSDLR_EL1\0DBGPRCR_EL1\0"; }break;case 7: if(j==6) { j=m; t="?\0?\0?\0?\0?\0?\0?\0?\0DBGCLAIMSET_EL1\0DBGCLAIMCLR_EL1\0?\0?\0?\0?\0DBGAUTHSTATUS_EL1\0"; }break;} break;case 3: if(n==0&&j==0) { j=m; t="?\0MDCCSR_EL0\0?\0?\0DBGDTR_EL0\0DBGDTRRX_EL0\0"; } break;case 4: if(n==0&&m==7) t="DBGVCR32_EL2\0"; break;} break;case 3: switch(k) {case 0: switch(n) {case 0: if(m==0) t="MIDR_EL1\0?\0?\0?\0?\0MPIDR_EL1\0REVIDR_EL1\0?\0ID_PFR0_EL1\0ID_PFR1_EL1\0ID_DFR0_EL1\0ID_AFR0_EL1\0ID_MMFR0_EL1\0ID_MMFR1_EL1\0ID_MMFR2_EL1\0ID_MMFR3_EL1\0ID_ISAR0_EL1\0ID_ISAR1_EL1\0ID_ISAR2_EL1\0ID_ISAR2_EL1\0ID_ISAR3_EL1\0ID_ISAR4_EL1\0ID_ISAR5_EL1\0ID_MMFR4_EL1\0?\0MVFR0_EL1\0MVFR1_EL1\0MVFR2_EL1\0?\0?\0?\0?\0?\0ID_AA64PFR0_EL1\0ID_AA64PFR1_EL1\0?\0?\0ID_AA64ZFR0_EL1\0?\0?\0?\0ID_AA64DFR0_EL1\0ID_AA64DFR1_EL1\0?\0?\0ID_AA64AFR0_EL1\0ID_AA64AFR1_EL1\0?\0?\0ID_AA64ISAR0_EL1\0ID_AA64ISAR1_EL1\0?\0?\0?\0?\0?\0?\0ID_AA64MMFR0_EL1\0ID_AA64MMFR1_EL1\0ID_AA64MMFR2_EL1\0"; break;case 1: switch(m) {case 0: t="SCTLR_EL1\0ACTLR_EL1\0CPACR_EL1\0"; break;case 2: t="ZCR_EL1\0"; break;} break;case 2: if(m==0) t="TTBR0_EL1\0TTBR1_EL1\0TCR_EL1\0"; break;case 4: switch(m) {case 0: t="SPSR_EL1\0ELR_EL1\0"; break;case 1: t="SP_EL0\0"; break;case 2: t="SPSel\0?\0CurrentEL\0PAN\0UAO\0"; break;case 6: t="ICC_PMR_EL1\0"; break;} break;case 5: switch(m) {case 1: t="AFSR0_EL1\0AFSR1_EL1\0"; break;case 2: t="ESR_EL1"; break;case 3: t="ERRIDR_EL1\0ERRSELR_EL1\0"; break;case 4: t="ERXFR_EL1\0ERXCTLR_EL1\0ERXSTATUS_EL1\0ERXADDR_EL1\0"; break;case 5: t="ERXMISC0_EL1\0ERXMISC1_EL1\0"; break;} break;case 6: if(m==0) t="FAR_EL1\0"; break;case 7: if(m==4) t="PAR_EL1\0"; break;case 9: switch(m) {case 9: t="PMSCR_EL1\0?\0PMSICR_EL1\0PMSIRR_EL1\0PMSFCR_EL1\0PMSEVFR_EL1\0PMSLATFR_EL1\0PMSIDR_EL1\0PMSIDR_EL1\0"; break;case 10: t="PMBLIMITR_EL1\0PMBPTR_EL1\0?\0PMBSR_EL1\0?\0?\0?\0PMBIDR_EL1\0"; break;case 14: t="?\0PMINTENSET_EL1\0PMINTENCLR_EL1\0"; break;} break;case 10: if(m==4) t="LORSA_EL1\0LOREA_EL1\0LORN_EL1\0LORC_EL1\0?\0?\0?\0LORID_EL1\0"; else if(m!=4&&j==0) { j=m; t="?\0?\0MAIR_EL1\0AMAIR_EL1\0"; }break;case 12: switch(m) {case 0: t="VBAR_EL1\0RVBAR_EL1\0RMR_EL1\0"; break;case 1: t="ISR_EL1\0DISR_EL1\0"; break;case 8: t="ICC_IAR0_EL1\0ICC_EOIR0_EL1\0ICC_HPPIR0_EL1\0ICC_BPR0_EL1\0ICC_AP0R0_EL1\0ICC_AP0R1_EL1\0ICC_AP0R2_EL1\0ICC_AP0R3_EL1\0"; break;case 9: t="ICC_AP1R0_EL1\0ICC_AP1R1_EL1\0ICC_AP1R2_EL1\0ICC_AP1R3_EL1\0"; break;case 11: t="?\0ICC_DIR_EL1\0?\0ICC_RPR_EL1\0?\0ICC_SGI1R_EL1\0ICC_ASGI1R_EL1\0ICC_SGI0R_EL1\0"; break;case 12: t="ICC_IAR1_EL1\0ICC_EOIR1_EL1\0ICC_HPPIR1_EL1\0ICC_BPR1_EL1\0ICC_CTLR_EL1\0ICC_SRE_EL1\0ICC_IGRPEN0_EL1\0ICC_IGRPEN1_EL1\0"; break;} break;case 13: if(m==0) t="?\0CONTEXTIDR_EL1\0?\0?\0TPIDR_EL1\0"; break;case 14: if(m==1) t="CNTKCTL_EL1\0"; break;} break;case 1: if(n==0&&m==0) t="CCSIDR_EL1\0CLIDR_EL1\0?\0?\0?\0?\0?\0AIDR_EL1\0"; break;case 2: if(n==0&&m==0) t="CSSELR_EL1\0"; break;case 3: switch(n) {case 0: if(m==0) t="?\0CTR_EL0\0?\0?\0?\0?\0?\0DCZID_EL0\0"; break;case 4: switch(m) {case 2: t="NZCV\0DAIF\0"; break;case 4: t="FPCR\0FPSR\0"; break;case 5: t="DSPSR_EL0\0DLR_EL0\0"; break;} break;case 9: switch(m) {case 12: t="PMCR_EL0\0PMCNTENSET_EL0\0PMCNTENCLR_EL0\0PMOVSCLR_EL0\0PMSWINC_EL0\0PMSELR_EL0\0PMCEID0_EL0\0PMCEID1_EL0\0"; break;case 13: t="PMCCNTR_EL0\0PMXEVTYPER_EL0\0PMXEVCNTR_EL0\0"; break;case 14: t="PMUSERENR_EL0\0?\0?\0PMOVSSET_EL0\0"; break;} break;
   83d64:	f0000060 	adrp	x0, 92000 <sd_init+0x470>
   83d68:	91122000 	add	x0, x0, #0x488
   83d6c:	91074000 	add	x0, x0, #0x1d0
char *disasm_str(char*s,int n) {if(!s)return "?";while(n){s++;if(!*s){s++;n--;}}return *s?s:"?";};
   83d70:	17fffdf8 	b	83550 <disasm_str.part.0>
case 13: if(m==0) t="?\0?\0TPIDR_EL0\0TPIDRRO_EL0\0"; break;case 14: switch(m) {case 0: t="CNTFRQ_EL0\0CNTPCT_EL0\0CNTVCT_EL0\0"; break;case 2: t="CNTP_TVAL_EL0\0CNTP_CTL_EL0\0CNTP_CVAL_EL0\0"; break;case 3: t="CNTV_TVAL_EL0\0CNTV_CTL_EL0\0CNTV_CVAL_EL0\0"; break;} break;} break;case 4: switch(n) {case 0: if(m==0) t="VPIDR_EL2\0?\0?\0?\0?\0VMPIDR_EL2\0"; break;case 1: switch(m) {case 0: t="SCTLR_EL2\0ACTLR_EL2\0"; break;case 1: t="HCR_EL2\0MDCR_EL2\0CPTR_EL2\0HSTR_EL2\0?\0?\0?\0HACR_EL2\0"; break;case 2: t="ZCR_EL2\0"; break;} break;case 2: switch(m) {case 0: t="TTBR0_EL2\0?\0TCR_EL2\0"; break;case 1: t="VTTBR0_EL2\0?\0VTCR_EL2\0"; break;} break;case 3: if(m==0) t="DACR32_EL2\0"; break;case 4: switch(m) {case 0: t="SPSR_EL2\0ELR_EL2\0"; break;case 1: t="SP_EL1\0"; break;case 3: t="SPSR_irq\0SPSR_abt\0SPSR_und\0SPSR_fiq\0"; break;} break;case 5: switch(m) {case 0: t="?\0IFSR32_EL2\0"; break;case 1: t="AFSR0_EL2\0AFSR1_EL2\0"; break;case 2: t="ESR_EL2\0?\0?\0VSESR_EL2\0"; break;case 3: t="FPEXC32_EL2\0"; break;} break;case 6: if(m==0) t="FAR_EL2\0?\0?\0?\0HPFAR_EL2\0"; break;case 9: if(m==9) t="PMSCR_EL2\0"; break;case 10: switch(m) {case 2: t="MAIR_EL2\0"; break;case 3: t="AMAIR_EL2\0"; break;} break;case 12: switch(m) {case 0: t="VBAR_EL2\0RVBAR_EL2\0RMR_EL2\0"; break;case 1: t="?\0VDISR_EL2\0"; break;case 8: t="ICH_AP0R0_EL2\0ICH_AP0R1_EL2\0ICH_AP0R2_EL2\0ICH_AP0R3_EL2\0"; break;case 9: t="ICH_AP1R0_EL2\0ICH_AP1R1_EL2\0ICH_AP1R2_EL2\0ICH_AP1R3_EL2\0ICC_SRE_EL2\0"; break;case 11: t="ICH_HCR_EL2\0ICH_VTR_EL2\0ICH_MISR_EL2\0ICH_EISR_EL2\0?\0ICH_ELRSR_EL2\0?\0ICH_VMCR_EL2\0"; break;case 12: t="ICH_LR0_EL2\0ICH_LR1_EL2\0ICH_LR2_EL2\0ICH_LR3_EL2\0ICH_LR4_EL2\0ICH_LR5_EL2\0ICH_LR6_EL2\0ICH_LR7_EL2\0"; break;case 13: t="ICH_LR8_EL2\0ICH_LR9_EL2\0ICH_LR10_EL2\0ICH_LR11_EL2\0ICH_LR12_EL2\0ICH_LR13_EL2\0ICH_LR14_EL2\0ICH_LR15_EL2\0"; break;} break;case 13: if(m==0) t="?\0CONTEXTIDR_EL2\0TPIDR_EL2\0"; break;case 14: switch(m) {case 0: t="?\0?\0?\0CNTVOFF_EL2\0"; break;case 1: t="CNTHCTL_EL2\0"; break;case 2: t="CNTHP_TVAL_EL2\0CNTHP_CTL_EL2\0CNTHP_CVAL_EL2\0"; break;case 3: t="CNTHV_TVAL_EL2\0CNTHV_CTL_EL2\0CNTHV_CVAL_EL2\0"; break;} break;} break;case 5: if(n==4&&m==0) t="SPSR_EL12\0ELR_EL12\0"; break;case 6: if(n==4&&m==1) t="SP_EL2\0"; break;case 7: if(n==14&&m==2) t="CNTPS_TVAL_EL1\0CNTPS_CTL_EL1\0CNTPS_CVAL_EL1\0"; break;} break;}return t?disasm_str(t,j):NULL;}
   83d74:	f0000060 	adrp	x0, 92000 <sd_init+0x470>
   83d78:	91122000 	add	x0, x0, #0x488
   83d7c:	91288000 	add	x0, x0, #0xa20
char *disasm_str(char*s,int n) {if(!s)return "?";while(n){s++;if(!*s){s++;n--;}}return *s?s:"?";};
   83d80:	17fffdf4 	b	83550 <disasm_str.part.0>
char *disasm_sysreg(uint8_t p,uint8_t k,uint8_t n,uint8_t m,uint8_t j) {char *t=NULL;switch(p){case 2: switch(k) {case 0: switch(n) {case 0: switch(m) {case 0: t="?\0?\0OSDTRRX_EL1\0"; break;case 2: t="MDCCINT_EL1\0?\0MDSCR_EL1\0"; break;case 3: t="?\0?\0OSDTRTX_EL1\0"; break;case 6: t="?\0?\0OSECCR_EL1\0"; break;default: { n=j; j=m; switch(n) {case 4: t="DBGBVR0_EL1\0DBGBVR1_EL1\0DBGBVR2_EL1\0DBGBVR3_EL1\0DBGBVR4_EL1\0DBGBVR5_EL1\0DBGBVR6_EL1\0DBGBVR7_EL1\0"; break;case 5: t="DBGBCR0_EL1\0DBGBCR1_EL1\0DBGBCR2_EL1\0DBGBCR3_EL1\0DBGBCR4_EL1\0DBGBCR5_EL1\0DBGBCR6_EL1\0DBGBCR7_EL1\0"; break;case 6: t="DBGWVR0_EL1\0DBGWVR1_EL1\0DBGWVR2_EL1\0DBGWVR3_EL1\0DBGWVR4_EL1\0DBGWVR5_EL1\0DBGWVR6_EL1\0DBGWVR7_EL1\0"; break;case 7: t="DBGWCR0_EL1\0DBGWCR1_EL1\0DBGWCR2_EL1\0DBGWCR3_EL1\0DBGWCR4_EL1\0DBGWCR5_EL1\0DBGWCR6_EL1\0DBGWCR7_EL1\0"; break;} break; }} break;case 1: if(m==0) t="MDRAR_EL1\0?\0?\0?\0OSLAR_EL1\0"; else if(j==4) { j=m; t="OSLSR_EL1\0?\0OSDLR_EL1\0DBGPRCR_EL1\0"; }break;case 7: if(j==6) { j=m; t="?\0?\0?\0?\0?\0?\0?\0?\0DBGCLAIMSET_EL1\0DBGCLAIMCLR_EL1\0?\0?\0?\0?\0DBGAUTHSTATUS_EL1\0"; }break;} break;case 3: if(n==0&&j==0) { j=m; t="?\0MDCCSR_EL0\0?\0?\0DBGDTR_EL0\0DBGDTRRX_EL0\0"; } break;case 4: if(n==0&&m==7) t="DBGVCR32_EL2\0"; break;} break;case 3: switch(k) {case 0: switch(n) {case 0: if(m==0) t="MIDR_EL1\0?\0?\0?\0?\0MPIDR_EL1\0REVIDR_EL1\0?\0ID_PFR0_EL1\0ID_PFR1_EL1\0ID_DFR0_EL1\0ID_AFR0_EL1\0ID_MMFR0_EL1\0ID_MMFR1_EL1\0ID_MMFR2_EL1\0ID_MMFR3_EL1\0ID_ISAR0_EL1\0ID_ISAR1_EL1\0ID_ISAR2_EL1\0ID_ISAR2_EL1\0ID_ISAR3_EL1\0ID_ISAR4_EL1\0ID_ISAR5_EL1\0ID_MMFR4_EL1\0?\0MVFR0_EL1\0MVFR1_EL1\0MVFR2_EL1\0?\0?\0?\0?\0?\0ID_AA64PFR0_EL1\0ID_AA64PFR1_EL1\0?\0?\0ID_AA64ZFR0_EL1\0?\0?\0?\0ID_AA64DFR0_EL1\0ID_AA64DFR1_EL1\0?\0?\0ID_AA64AFR0_EL1\0ID_AA64AFR1_EL1\0?\0?\0ID_AA64ISAR0_EL1\0ID_AA64ISAR1_EL1\0?\0?\0?\0?\0?\0?\0ID_AA64MMFR0_EL1\0ID_AA64MMFR1_EL1\0ID_AA64MMFR2_EL1\0"; break;case 1: switch(m) {case 0: t="SCTLR_EL1\0ACTLR_EL1\0CPACR_EL1\0"; break;case 2: t="ZCR_EL1\0"; break;} break;case 2: if(m==0) t="TTBR0_EL1\0TTBR1_EL1\0TCR_EL1\0"; break;case 4: switch(m) {case 0: t="SPSR_EL1\0ELR_EL1\0"; break;case 1: t="SP_EL0\0"; break;case 2: t="SPSel\0?\0CurrentEL\0PAN\0UAO\0"; break;case 6: t="ICC_PMR_EL1\0"; break;} break;case 5: switch(m) {case 1: t="AFSR0_EL1\0AFSR1_EL1\0"; break;case 2: t="ESR_EL1"; break;case 3: t="ERRIDR_EL1\0ERRSELR_EL1\0"; break;case 4: t="ERXFR_EL1\0ERXCTLR_EL1\0ERXSTATUS_EL1\0ERXADDR_EL1\0"; break;case 5: t="ERXMISC0_EL1\0ERXMISC1_EL1\0"; break;} break;case 6: if(m==0) t="FAR_EL1\0"; break;case 7: if(m==4) t="PAR_EL1\0"; break;case 9: switch(m) {case 9: t="PMSCR_EL1\0?\0PMSICR_EL1\0PMSIRR_EL1\0PMSFCR_EL1\0PMSEVFR_EL1\0PMSLATFR_EL1\0PMSIDR_EL1\0PMSIDR_EL1\0"; break;case 10: t="PMBLIMITR_EL1\0PMBPTR_EL1\0?\0PMBSR_EL1\0?\0?\0?\0PMBIDR_EL1\0"; break;case 14: t="?\0PMINTENSET_EL1\0PMINTENCLR_EL1\0"; break;} break;case 10: if(m==4) t="LORSA_EL1\0LOREA_EL1\0LORN_EL1\0LORC_EL1\0?\0?\0?\0LORID_EL1\0"; else if(m!=4&&j==0) { j=m; t="?\0?\0MAIR_EL1\0AMAIR_EL1\0"; }break;case 12: switch(m) {case 0: t="VBAR_EL1\0RVBAR_EL1\0RMR_EL1\0"; break;case 1: t="ISR_EL1\0DISR_EL1\0"; break;case 8: t="ICC_IAR0_EL1\0ICC_EOIR0_EL1\0ICC_HPPIR0_EL1\0ICC_BPR0_EL1\0ICC_AP0R0_EL1\0ICC_AP0R1_EL1\0ICC_AP0R2_EL1\0ICC_AP0R3_EL1\0"; break;case 9: t="ICC_AP1R0_EL1\0ICC_AP1R1_EL1\0ICC_AP1R2_EL1\0ICC_AP1R3_EL1\0"; break;case 11: t="?\0ICC_DIR_EL1\0?\0ICC_RPR_EL1\0?\0ICC_SGI1R_EL1\0ICC_ASGI1R_EL1\0ICC_SGI0R_EL1\0"; break;case 12: t="ICC_IAR1_EL1\0ICC_EOIR1_EL1\0ICC_HPPIR1_EL1\0ICC_BPR1_EL1\0ICC_CTLR_EL1\0ICC_SRE_EL1\0ICC_IGRPEN0_EL1\0ICC_IGRPEN1_EL1\0"; break;} break;case 13: if(m==0) t="?\0CONTEXTIDR_EL1\0?\0?\0TPIDR_EL1\0"; break;case 14: if(m==1) t="CNTKCTL_EL1\0"; break;} break;case 1: if(n==0&&m==0) t="CCSIDR_EL1\0CLIDR_EL1\0?\0?\0?\0?\0?\0AIDR_EL1\0"; break;case 2: if(n==0&&m==0) t="CSSELR_EL1\0"; break;case 3: switch(n) {case 0: if(m==0) t="?\0CTR_EL0\0?\0?\0?\0?\0?\0DCZID_EL0\0"; break;case 4: switch(m) {case 2: t="NZCV\0DAIF\0"; break;case 4: t="FPCR\0FPSR\0"; break;case 5: t="DSPSR_EL0\0DLR_EL0\0"; break;} break;case 9: switch(m) {case 12: t="PMCR_EL0\0PMCNTENSET_EL0\0PMCNTENCLR_EL0\0PMOVSCLR_EL0\0PMSWINC_EL0\0PMSELR_EL0\0PMCEID0_EL0\0PMCEID1_EL0\0"; break;case 13: t="PMCCNTR_EL0\0PMXEVTYPER_EL0\0PMXEVCNTR_EL0\0"; break;case 14: t="PMUSERENR_EL0\0?\0?\0PMOVSSET_EL0\0"; break;} break;
   83d84:	f0000060 	adrp	x0, 92000 <sd_init+0x470>
   83d88:	91122000 	add	x0, x0, #0x488
   83d8c:	9110c000 	add	x0, x0, #0x430
char *disasm_str(char*s,int n) {if(!s)return "?";while(n){s++;if(!*s){s++;n--;}}return *s?s:"?";};
   83d90:	17fffdf0 	b	83550 <disasm_str.part.0>
char *disasm_sysreg(uint8_t p,uint8_t k,uint8_t n,uint8_t m,uint8_t j) {char *t=NULL;switch(p){case 2: switch(k) {case 0: switch(n) {case 0: switch(m) {case 0: t="?\0?\0OSDTRRX_EL1\0"; break;case 2: t="MDCCINT_EL1\0?\0MDSCR_EL1\0"; break;case 3: t="?\0?\0OSDTRTX_EL1\0"; break;case 6: t="?\0?\0OSECCR_EL1\0"; break;default: { n=j; j=m; switch(n) {case 4: t="DBGBVR0_EL1\0DBGBVR1_EL1\0DBGBVR2_EL1\0DBGBVR3_EL1\0DBGBVR4_EL1\0DBGBVR5_EL1\0DBGBVR6_EL1\0DBGBVR7_EL1\0"; break;case 5: t="DBGBCR0_EL1\0DBGBCR1_EL1\0DBGBCR2_EL1\0DBGBCR3_EL1\0DBGBCR4_EL1\0DBGBCR5_EL1\0DBGBCR6_EL1\0DBGBCR7_EL1\0"; break;case 6: t="DBGWVR0_EL1\0DBGWVR1_EL1\0DBGWVR2_EL1\0DBGWVR3_EL1\0DBGWVR4_EL1\0DBGWVR5_EL1\0DBGWVR6_EL1\0DBGWVR7_EL1\0"; break;case 7: t="DBGWCR0_EL1\0DBGWCR1_EL1\0DBGWCR2_EL1\0DBGWCR3_EL1\0DBGWCR4_EL1\0DBGWCR5_EL1\0DBGWCR6_EL1\0DBGWCR7_EL1\0"; break;} break; }} break;case 1: if(m==0) t="MDRAR_EL1\0?\0?\0?\0OSLAR_EL1\0"; else if(j==4) { j=m; t="OSLSR_EL1\0?\0OSDLR_EL1\0DBGPRCR_EL1\0"; }break;case 7: if(j==6) { j=m; t="?\0?\0?\0?\0?\0?\0?\0?\0DBGCLAIMSET_EL1\0DBGCLAIMCLR_EL1\0?\0?\0?\0?\0DBGAUTHSTATUS_EL1\0"; }break;} break;case 3: if(n==0&&j==0) { j=m; t="?\0MDCCSR_EL0\0?\0?\0DBGDTR_EL0\0DBGDTRRX_EL0\0"; } break;case 4: if(n==0&&m==7) t="DBGVCR32_EL2\0"; break;} break;case 3: switch(k) {case 0: switch(n) {case 0: if(m==0) t="MIDR_EL1\0?\0?\0?\0?\0MPIDR_EL1\0REVIDR_EL1\0?\0ID_PFR0_EL1\0ID_PFR1_EL1\0ID_DFR0_EL1\0ID_AFR0_EL1\0ID_MMFR0_EL1\0ID_MMFR1_EL1\0ID_MMFR2_EL1\0ID_MMFR3_EL1\0ID_ISAR0_EL1\0ID_ISAR1_EL1\0ID_ISAR2_EL1\0ID_ISAR2_EL1\0ID_ISAR3_EL1\0ID_ISAR4_EL1\0ID_ISAR5_EL1\0ID_MMFR4_EL1\0?\0MVFR0_EL1\0MVFR1_EL1\0MVFR2_EL1\0?\0?\0?\0?\0?\0ID_AA64PFR0_EL1\0ID_AA64PFR1_EL1\0?\0?\0ID_AA64ZFR0_EL1\0?\0?\0?\0ID_AA64DFR0_EL1\0ID_AA64DFR1_EL1\0?\0?\0ID_AA64AFR0_EL1\0ID_AA64AFR1_EL1\0?\0?\0ID_AA64ISAR0_EL1\0ID_AA64ISAR1_EL1\0?\0?\0?\0?\0?\0?\0ID_AA64MMFR0_EL1\0ID_AA64MMFR1_EL1\0ID_AA64MMFR2_EL1\0"; break;case 1: switch(m) {case 0: t="SCTLR_EL1\0ACTLR_EL1\0CPACR_EL1\0"; break;case 2: t="ZCR_EL1\0"; break;} break;case 2: if(m==0) t="TTBR0_EL1\0TTBR1_EL1\0TCR_EL1\0"; break;case 4: switch(m) {case 0: t="SPSR_EL1\0ELR_EL1\0"; break;case 1: t="SP_EL0\0"; break;case 2: t="SPSel\0?\0CurrentEL\0PAN\0UAO\0"; break;case 6: t="ICC_PMR_EL1\0"; break;} break;case 5: switch(m) {case 1: t="AFSR0_EL1\0AFSR1_EL1\0"; break;case 2: t="ESR_EL1"; break;case 3: t="ERRIDR_EL1\0ERRSELR_EL1\0"; break;case 4: t="ERXFR_EL1\0ERXCTLR_EL1\0ERXSTATUS_EL1\0ERXADDR_EL1\0"; break;case 5: t="ERXMISC0_EL1\0ERXMISC1_EL1\0"; break;} break;case 6: if(m==0) t="FAR_EL1\0"; break;case 7: if(m==4) t="PAR_EL1\0"; break;case 9: switch(m) {case 9: t="PMSCR_EL1\0?\0PMSICR_EL1\0PMSIRR_EL1\0PMSFCR_EL1\0PMSEVFR_EL1\0PMSLATFR_EL1\0PMSIDR_EL1\0PMSIDR_EL1\0"; break;case 10: t="PMBLIMITR_EL1\0PMBPTR_EL1\0?\0PMBSR_EL1\0?\0?\0?\0PMBIDR_EL1\0"; break;case 14: t="?\0PMINTENSET_EL1\0PMINTENCLR_EL1\0"; break;} break;case 10: if(m==4) t="LORSA_EL1\0LOREA_EL1\0LORN_EL1\0LORC_EL1\0?\0?\0?\0LORID_EL1\0"; else if(m!=4&&j==0) { j=m; t="?\0?\0MAIR_EL1\0AMAIR_EL1\0"; }break;case 12: switch(m) {case 0: t="VBAR_EL1\0RVBAR_EL1\0RMR_EL1\0"; break;case 1: t="ISR_EL1\0DISR_EL1\0"; break;case 8: t="ICC_IAR0_EL1\0ICC_EOIR0_EL1\0ICC_HPPIR0_EL1\0ICC_BPR0_EL1\0ICC_AP0R0_EL1\0ICC_AP0R1_EL1\0ICC_AP0R2_EL1\0ICC_AP0R3_EL1\0"; break;case 9: t="ICC_AP1R0_EL1\0ICC_AP1R1_EL1\0ICC_AP1R2_EL1\0ICC_AP1R3_EL1\0"; break;case 11: t="?\0ICC_DIR_EL1\0?\0ICC_RPR_EL1\0?\0ICC_SGI1R_EL1\0ICC_ASGI1R_EL1\0ICC_SGI0R_EL1\0"; break;case 12: t="ICC_IAR1_EL1\0ICC_EOIR1_EL1\0ICC_HPPIR1_EL1\0ICC_BPR1_EL1\0ICC_CTLR_EL1\0ICC_SRE_EL1\0ICC_IGRPEN0_EL1\0ICC_IGRPEN1_EL1\0"; break;} break;case 13: if(m==0) t="?\0CONTEXTIDR_EL1\0?\0?\0TPIDR_EL1\0"; break;case 14: if(m==1) t="CNTKCTL_EL1\0"; break;} break;case 1: if(n==0&&m==0) t="CCSIDR_EL1\0CLIDR_EL1\0?\0?\0?\0?\0?\0AIDR_EL1\0"; break;case 2: if(n==0&&m==0) t="CSSELR_EL1\0"; break;case 3: switch(n) {case 0: if(m==0) t="?\0CTR_EL0\0?\0?\0?\0?\0?\0DCZID_EL0\0"; break;case 4: switch(m) {case 2: t="NZCV\0DAIF\0"; break;case 4: t="FPCR\0FPSR\0"; break;case 5: t="DSPSR_EL0\0DLR_EL0\0"; break;} break;case 9: switch(m) {case 12: t="PMCR_EL0\0PMCNTENSET_EL0\0PMCNTENCLR_EL0\0PMOVSCLR_EL0\0PMSWINC_EL0\0PMSELR_EL0\0PMCEID0_EL0\0PMCEID1_EL0\0"; break;case 13: t="PMCCNTR_EL0\0PMXEVTYPER_EL0\0PMXEVCNTR_EL0\0"; break;case 14: t="PMUSERENR_EL0\0?\0?\0PMOVSSET_EL0\0"; break;} break;
   83d94:	f0000060 	adrp	x0, 92000 <sd_init+0x470>
   83d98:	91122000 	add	x0, x0, #0x488
   83d9c:	910b6000 	add	x0, x0, #0x2d8
char *disasm_str(char*s,int n) {if(!s)return "?";while(n){s++;if(!*s){s++;n--;}}return *s?s:"?";};
   83da0:	17fffdec 	b	83550 <disasm_str.part.0>
char *disasm_sysreg(uint8_t p,uint8_t k,uint8_t n,uint8_t m,uint8_t j) {char *t=NULL;switch(p){case 2: switch(k) {case 0: switch(n) {case 0: switch(m) {case 0: t="?\0?\0OSDTRRX_EL1\0"; break;case 2: t="MDCCINT_EL1\0?\0MDSCR_EL1\0"; break;case 3: t="?\0?\0OSDTRTX_EL1\0"; break;case 6: t="?\0?\0OSECCR_EL1\0"; break;default: { n=j; j=m; switch(n) {case 4: t="DBGBVR0_EL1\0DBGBVR1_EL1\0DBGBVR2_EL1\0DBGBVR3_EL1\0DBGBVR4_EL1\0DBGBVR5_EL1\0DBGBVR6_EL1\0DBGBVR7_EL1\0"; break;case 5: t="DBGBCR0_EL1\0DBGBCR1_EL1\0DBGBCR2_EL1\0DBGBCR3_EL1\0DBGBCR4_EL1\0DBGBCR5_EL1\0DBGBCR6_EL1\0DBGBCR7_EL1\0"; break;case 6: t="DBGWVR0_EL1\0DBGWVR1_EL1\0DBGWVR2_EL1\0DBGWVR3_EL1\0DBGWVR4_EL1\0DBGWVR5_EL1\0DBGWVR6_EL1\0DBGWVR7_EL1\0"; break;case 7: t="DBGWCR0_EL1\0DBGWCR1_EL1\0DBGWCR2_EL1\0DBGWCR3_EL1\0DBGWCR4_EL1\0DBGWCR5_EL1\0DBGWCR6_EL1\0DBGWCR7_EL1\0"; break;} break; }} break;case 1: if(m==0) t="MDRAR_EL1\0?\0?\0?\0OSLAR_EL1\0"; else if(j==4) { j=m; t="OSLSR_EL1\0?\0OSDLR_EL1\0DBGPRCR_EL1\0"; }break;case 7: if(j==6) { j=m; t="?\0?\0?\0?\0?\0?\0?\0?\0DBGCLAIMSET_EL1\0DBGCLAIMCLR_EL1\0?\0?\0?\0?\0DBGAUTHSTATUS_EL1\0"; }break;} break;case 3: if(n==0&&j==0) { j=m; t="?\0MDCCSR_EL0\0?\0?\0DBGDTR_EL0\0DBGDTRRX_EL0\0"; } break;case 4: if(n==0&&m==7) t="DBGVCR32_EL2\0"; break;} break;case 3: switch(k) {case 0: switch(n) {case 0: if(m==0) t="MIDR_EL1\0?\0?\0?\0?\0MPIDR_EL1\0REVIDR_EL1\0?\0ID_PFR0_EL1\0ID_PFR1_EL1\0ID_DFR0_EL1\0ID_AFR0_EL1\0ID_MMFR0_EL1\0ID_MMFR1_EL1\0ID_MMFR2_EL1\0ID_MMFR3_EL1\0ID_ISAR0_EL1\0ID_ISAR1_EL1\0ID_ISAR2_EL1\0ID_ISAR2_EL1\0ID_ISAR3_EL1\0ID_ISAR4_EL1\0ID_ISAR5_EL1\0ID_MMFR4_EL1\0?\0MVFR0_EL1\0MVFR1_EL1\0MVFR2_EL1\0?\0?\0?\0?\0?\0ID_AA64PFR0_EL1\0ID_AA64PFR1_EL1\0?\0?\0ID_AA64ZFR0_EL1\0?\0?\0?\0ID_AA64DFR0_EL1\0ID_AA64DFR1_EL1\0?\0?\0ID_AA64AFR0_EL1\0ID_AA64AFR1_EL1\0?\0?\0ID_AA64ISAR0_EL1\0ID_AA64ISAR1_EL1\0?\0?\0?\0?\0?\0?\0ID_AA64MMFR0_EL1\0ID_AA64MMFR1_EL1\0ID_AA64MMFR2_EL1\0"; break;case 1: switch(m) {case 0: t="SCTLR_EL1\0ACTLR_EL1\0CPACR_EL1\0"; break;case 2: t="ZCR_EL1\0"; break;} break;case 2: if(m==0) t="TTBR0_EL1\0TTBR1_EL1\0TCR_EL1\0"; break;case 4: switch(m) {case 0: t="SPSR_EL1\0ELR_EL1\0"; break;case 1: t="SP_EL0\0"; break;case 2: t="SPSel\0?\0CurrentEL\0PAN\0UAO\0"; break;case 6: t="ICC_PMR_EL1\0"; break;} break;case 5: switch(m) {case 1: t="AFSR0_EL1\0AFSR1_EL1\0"; break;case 2: t="ESR_EL1"; break;case 3: t="ERRIDR_EL1\0ERRSELR_EL1\0"; break;case 4: t="ERXFR_EL1\0ERXCTLR_EL1\0ERXSTATUS_EL1\0ERXADDR_EL1\0"; break;case 5: t="ERXMISC0_EL1\0ERXMISC1_EL1\0"; break;} break;case 6: if(m==0) t="FAR_EL1\0"; break;case 7: if(m==4) t="PAR_EL1\0"; break;case 9: switch(m) {case 9: t="PMSCR_EL1\0?\0PMSICR_EL1\0PMSIRR_EL1\0PMSFCR_EL1\0PMSEVFR_EL1\0PMSLATFR_EL1\0PMSIDR_EL1\0PMSIDR_EL1\0"; break;case 10: t="PMBLIMITR_EL1\0PMBPTR_EL1\0?\0PMBSR_EL1\0?\0?\0?\0PMBIDR_EL1\0"; break;case 14: t="?\0PMINTENSET_EL1\0PMINTENCLR_EL1\0"; break;} break;case 10: if(m==4) t="LORSA_EL1\0LOREA_EL1\0LORN_EL1\0LORC_EL1\0?\0?\0?\0LORID_EL1\0"; else if(m!=4&&j==0) { j=m; t="?\0?\0MAIR_EL1\0AMAIR_EL1\0"; }break;case 12: switch(m) {case 0: t="VBAR_EL1\0RVBAR_EL1\0RMR_EL1\0"; break;case 1: t="ISR_EL1\0DISR_EL1\0"; break;case 8: t="ICC_IAR0_EL1\0ICC_EOIR0_EL1\0ICC_HPPIR0_EL1\0ICC_BPR0_EL1\0ICC_AP0R0_EL1\0ICC_AP0R1_EL1\0ICC_AP0R2_EL1\0ICC_AP0R3_EL1\0"; break;case 9: t="ICC_AP1R0_EL1\0ICC_AP1R1_EL1\0ICC_AP1R2_EL1\0ICC_AP1R3_EL1\0"; break;case 11: t="?\0ICC_DIR_EL1\0?\0ICC_RPR_EL1\0?\0ICC_SGI1R_EL1\0ICC_ASGI1R_EL1\0ICC_SGI0R_EL1\0"; break;case 12: t="ICC_IAR1_EL1\0ICC_EOIR1_EL1\0ICC_HPPIR1_EL1\0ICC_BPR1_EL1\0ICC_CTLR_EL1\0ICC_SRE_EL1\0ICC_IGRPEN0_EL1\0ICC_IGRPEN1_EL1\0"; break;} break;case 13: if(m==0) t="?\0CONTEXTIDR_EL1\0?\0?\0TPIDR_EL1\0"; break;case 14: if(m==1) t="CNTKCTL_EL1\0"; break;} break;case 1: if(n==0&&m==0) t="CCSIDR_EL1\0CLIDR_EL1\0?\0?\0?\0?\0?\0AIDR_EL1\0"; break;case 2: if(n==0&&m==0) t="CSSELR_EL1\0"; break;case 3: switch(n) {case 0: if(m==0) t="?\0CTR_EL0\0?\0?\0?\0?\0?\0DCZID_EL0\0"; break;case 4: switch(m) {case 2: t="NZCV\0DAIF\0"; break;case 4: t="FPCR\0FPSR\0"; break;case 5: t="DSPSR_EL0\0DLR_EL0\0"; break;} break;case 9: switch(m) {case 12: t="PMCR_EL0\0PMCNTENSET_EL0\0PMCNTENCLR_EL0\0PMOVSCLR_EL0\0PMSWINC_EL0\0PMSELR_EL0\0PMCEID0_EL0\0PMCEID1_EL0\0"; break;case 13: t="PMCCNTR_EL0\0PMXEVTYPER_EL0\0PMXEVCNTR_EL0\0"; break;case 14: t="PMUSERENR_EL0\0?\0?\0PMOVSSET_EL0\0"; break;} break;
   83da4:	f0000060 	adrp	x0, 92000 <sd_init+0x470>
   83da8:	91122000 	add	x0, x0, #0x488
   83dac:	91026000 	add	x0, x0, #0x98
char *disasm_str(char*s,int n) {if(!s)return "?";while(n){s++;if(!*s){s++;n--;}}return *s?s:"?";};
   83db0:	17fffde8 	b	83550 <disasm_str.part.0>
char *disasm_sysreg(uint8_t p,uint8_t k,uint8_t n,uint8_t m,uint8_t j) {char *t=NULL;switch(p){case 2: switch(k) {case 0: switch(n) {case 0: switch(m) {case 0: t="?\0?\0OSDTRRX_EL1\0"; break;case 2: t="MDCCINT_EL1\0?\0MDSCR_EL1\0"; break;case 3: t="?\0?\0OSDTRTX_EL1\0"; break;case 6: t="?\0?\0OSECCR_EL1\0"; break;default: { n=j; j=m; switch(n) {case 4: t="DBGBVR0_EL1\0DBGBVR1_EL1\0DBGBVR2_EL1\0DBGBVR3_EL1\0DBGBVR4_EL1\0DBGBVR5_EL1\0DBGBVR6_EL1\0DBGBVR7_EL1\0"; break;case 5: t="DBGBCR0_EL1\0DBGBCR1_EL1\0DBGBCR2_EL1\0DBGBCR3_EL1\0DBGBCR4_EL1\0DBGBCR5_EL1\0DBGBCR6_EL1\0DBGBCR7_EL1\0"; break;case 6: t="DBGWVR0_EL1\0DBGWVR1_EL1\0DBGWVR2_EL1\0DBGWVR3_EL1\0DBGWVR4_EL1\0DBGWVR5_EL1\0DBGWVR6_EL1\0DBGWVR7_EL1\0"; break;case 7: t="DBGWCR0_EL1\0DBGWCR1_EL1\0DBGWCR2_EL1\0DBGWCR3_EL1\0DBGWCR4_EL1\0DBGWCR5_EL1\0DBGWCR6_EL1\0DBGWCR7_EL1\0"; break;} break; }} break;case 1: if(m==0) t="MDRAR_EL1\0?\0?\0?\0OSLAR_EL1\0"; else if(j==4) { j=m; t="OSLSR_EL1\0?\0OSDLR_EL1\0DBGPRCR_EL1\0"; }break;case 7: if(j==6) { j=m; t="?\0?\0?\0?\0?\0?\0?\0?\0DBGCLAIMSET_EL1\0DBGCLAIMCLR_EL1\0?\0?\0?\0?\0DBGAUTHSTATUS_EL1\0"; }break;} break;case 3: if(n==0&&j==0) { j=m; t="?\0MDCCSR_EL0\0?\0?\0DBGDTR_EL0\0DBGDTRRX_EL0\0"; } break;case 4: if(n==0&&m==7) t="DBGVCR32_EL2\0"; break;} break;case 3: switch(k) {case 0: switch(n) {case 0: if(m==0) t="MIDR_EL1\0?\0?\0?\0?\0MPIDR_EL1\0REVIDR_EL1\0?\0ID_PFR0_EL1\0ID_PFR1_EL1\0ID_DFR0_EL1\0ID_AFR0_EL1\0ID_MMFR0_EL1\0ID_MMFR1_EL1\0ID_MMFR2_EL1\0ID_MMFR3_EL1\0ID_ISAR0_EL1\0ID_ISAR1_EL1\0ID_ISAR2_EL1\0ID_ISAR2_EL1\0ID_ISAR3_EL1\0ID_ISAR4_EL1\0ID_ISAR5_EL1\0ID_MMFR4_EL1\0?\0MVFR0_EL1\0MVFR1_EL1\0MVFR2_EL1\0?\0?\0?\0?\0?\0ID_AA64PFR0_EL1\0ID_AA64PFR1_EL1\0?\0?\0ID_AA64ZFR0_EL1\0?\0?\0?\0ID_AA64DFR0_EL1\0ID_AA64DFR1_EL1\0?\0?\0ID_AA64AFR0_EL1\0ID_AA64AFR1_EL1\0?\0?\0ID_AA64ISAR0_EL1\0ID_AA64ISAR1_EL1\0?\0?\0?\0?\0?\0?\0ID_AA64MMFR0_EL1\0ID_AA64MMFR1_EL1\0ID_AA64MMFR2_EL1\0"; break;case 1: switch(m) {case 0: t="SCTLR_EL1\0ACTLR_EL1\0CPACR_EL1\0"; break;case 2: t="ZCR_EL1\0"; break;} break;case 2: if(m==0) t="TTBR0_EL1\0TTBR1_EL1\0TCR_EL1\0"; break;case 4: switch(m) {case 0: t="SPSR_EL1\0ELR_EL1\0"; break;case 1: t="SP_EL0\0"; break;case 2: t="SPSel\0?\0CurrentEL\0PAN\0UAO\0"; break;case 6: t="ICC_PMR_EL1\0"; break;} break;case 5: switch(m) {case 1: t="AFSR0_EL1\0AFSR1_EL1\0"; break;case 2: t="ESR_EL1"; break;case 3: t="ERRIDR_EL1\0ERRSELR_EL1\0"; break;case 4: t="ERXFR_EL1\0ERXCTLR_EL1\0ERXSTATUS_EL1\0ERXADDR_EL1\0"; break;case 5: t="ERXMISC0_EL1\0ERXMISC1_EL1\0"; break;} break;case 6: if(m==0) t="FAR_EL1\0"; break;case 7: if(m==4) t="PAR_EL1\0"; break;case 9: switch(m) {case 9: t="PMSCR_EL1\0?\0PMSICR_EL1\0PMSIRR_EL1\0PMSFCR_EL1\0PMSEVFR_EL1\0PMSLATFR_EL1\0PMSIDR_EL1\0PMSIDR_EL1\0"; break;case 10: t="PMBLIMITR_EL1\0PMBPTR_EL1\0?\0PMBSR_EL1\0?\0?\0?\0PMBIDR_EL1\0"; break;case 14: t="?\0PMINTENSET_EL1\0PMINTENCLR_EL1\0"; break;} break;case 10: if(m==4) t="LORSA_EL1\0LOREA_EL1\0LORN_EL1\0LORC_EL1\0?\0?\0?\0LORID_EL1\0"; else if(m!=4&&j==0) { j=m; t="?\0?\0MAIR_EL1\0AMAIR_EL1\0"; }break;case 12: switch(m) {case 0: t="VBAR_EL1\0RVBAR_EL1\0RMR_EL1\0"; break;case 1: t="ISR_EL1\0DISR_EL1\0"; break;case 8: t="ICC_IAR0_EL1\0ICC_EOIR0_EL1\0ICC_HPPIR0_EL1\0ICC_BPR0_EL1\0ICC_AP0R0_EL1\0ICC_AP0R1_EL1\0ICC_AP0R2_EL1\0ICC_AP0R3_EL1\0"; break;case 9: t="ICC_AP1R0_EL1\0ICC_AP1R1_EL1\0ICC_AP1R2_EL1\0ICC_AP1R3_EL1\0"; break;case 11: t="?\0ICC_DIR_EL1\0?\0ICC_RPR_EL1\0?\0ICC_SGI1R_EL1\0ICC_ASGI1R_EL1\0ICC_SGI0R_EL1\0"; break;case 12: t="ICC_IAR1_EL1\0ICC_EOIR1_EL1\0ICC_HPPIR1_EL1\0ICC_BPR1_EL1\0ICC_CTLR_EL1\0ICC_SRE_EL1\0ICC_IGRPEN0_EL1\0ICC_IGRPEN1_EL1\0"; break;} break;case 13: if(m==0) t="?\0CONTEXTIDR_EL1\0?\0?\0TPIDR_EL1\0"; break;case 14: if(m==1) t="CNTKCTL_EL1\0"; break;} break;case 1: if(n==0&&m==0) t="CCSIDR_EL1\0CLIDR_EL1\0?\0?\0?\0?\0?\0AIDR_EL1\0"; break;case 2: if(n==0&&m==0) t="CSSELR_EL1\0"; break;case 3: switch(n) {case 0: if(m==0) t="?\0CTR_EL0\0?\0?\0?\0?\0?\0DCZID_EL0\0"; break;case 4: switch(m) {case 2: t="NZCV\0DAIF\0"; break;case 4: t="FPCR\0FPSR\0"; break;case 5: t="DSPSR_EL0\0DLR_EL0\0"; break;} break;case 9: switch(m) {case 12: t="PMCR_EL0\0PMCNTENSET_EL0\0PMCNTENCLR_EL0\0PMOVSCLR_EL0\0PMSWINC_EL0\0PMSELR_EL0\0PMCEID0_EL0\0PMCEID1_EL0\0"; break;case 13: t="PMCCNTR_EL0\0PMXEVTYPER_EL0\0PMXEVCNTR_EL0\0"; break;case 14: t="PMUSERENR_EL0\0?\0?\0PMOVSSET_EL0\0"; break;} break;
   83db4:	f0000060 	adrp	x0, 92000 <sd_init+0x470>
   83db8:	91122000 	add	x0, x0, #0x488
   83dbc:	910a4000 	add	x0, x0, #0x290
char *disasm_str(char*s,int n) {if(!s)return "?";while(n){s++;if(!*s){s++;n--;}}return *s?s:"?";};
   83dc0:	17fffde4 	b	83550 <disasm_str.part.0>
char *disasm_sysreg(uint8_t p,uint8_t k,uint8_t n,uint8_t m,uint8_t j) {char *t=NULL;switch(p){case 2: switch(k) {case 0: switch(n) {case 0: switch(m) {case 0: t="?\0?\0OSDTRRX_EL1\0"; break;case 2: t="MDCCINT_EL1\0?\0MDSCR_EL1\0"; break;case 3: t="?\0?\0OSDTRTX_EL1\0"; break;case 6: t="?\0?\0OSECCR_EL1\0"; break;default: { n=j; j=m; switch(n) {case 4: t="DBGBVR0_EL1\0DBGBVR1_EL1\0DBGBVR2_EL1\0DBGBVR3_EL1\0DBGBVR4_EL1\0DBGBVR5_EL1\0DBGBVR6_EL1\0DBGBVR7_EL1\0"; break;case 5: t="DBGBCR0_EL1\0DBGBCR1_EL1\0DBGBCR2_EL1\0DBGBCR3_EL1\0DBGBCR4_EL1\0DBGBCR5_EL1\0DBGBCR6_EL1\0DBGBCR7_EL1\0"; break;case 6: t="DBGWVR0_EL1\0DBGWVR1_EL1\0DBGWVR2_EL1\0DBGWVR3_EL1\0DBGWVR4_EL1\0DBGWVR5_EL1\0DBGWVR6_EL1\0DBGWVR7_EL1\0"; break;case 7: t="DBGWCR0_EL1\0DBGWCR1_EL1\0DBGWCR2_EL1\0DBGWCR3_EL1\0DBGWCR4_EL1\0DBGWCR5_EL1\0DBGWCR6_EL1\0DBGWCR7_EL1\0"; break;} break; }} break;case 1: if(m==0) t="MDRAR_EL1\0?\0?\0?\0OSLAR_EL1\0"; else if(j==4) { j=m; t="OSLSR_EL1\0?\0OSDLR_EL1\0DBGPRCR_EL1\0"; }break;case 7: if(j==6) { j=m; t="?\0?\0?\0?\0?\0?\0?\0?\0DBGCLAIMSET_EL1\0DBGCLAIMCLR_EL1\0?\0?\0?\0?\0DBGAUTHSTATUS_EL1\0"; }break;} break;case 3: if(n==0&&j==0) { j=m; t="?\0MDCCSR_EL0\0?\0?\0DBGDTR_EL0\0DBGDTRRX_EL0\0"; } break;case 4: if(n==0&&m==7) t="DBGVCR32_EL2\0"; break;} break;case 3: switch(k) {case 0: switch(n) {case 0: if(m==0) t="MIDR_EL1\0?\0?\0?\0?\0MPIDR_EL1\0REVIDR_EL1\0?\0ID_PFR0_EL1\0ID_PFR1_EL1\0ID_DFR0_EL1\0ID_AFR0_EL1\0ID_MMFR0_EL1\0ID_MMFR1_EL1\0ID_MMFR2_EL1\0ID_MMFR3_EL1\0ID_ISAR0_EL1\0ID_ISAR1_EL1\0ID_ISAR2_EL1\0ID_ISAR2_EL1\0ID_ISAR3_EL1\0ID_ISAR4_EL1\0ID_ISAR5_EL1\0ID_MMFR4_EL1\0?\0MVFR0_EL1\0MVFR1_EL1\0MVFR2_EL1\0?\0?\0?\0?\0?\0ID_AA64PFR0_EL1\0ID_AA64PFR1_EL1\0?\0?\0ID_AA64ZFR0_EL1\0?\0?\0?\0ID_AA64DFR0_EL1\0ID_AA64DFR1_EL1\0?\0?\0ID_AA64AFR0_EL1\0ID_AA64AFR1_EL1\0?\0?\0ID_AA64ISAR0_EL1\0ID_AA64ISAR1_EL1\0?\0?\0?\0?\0?\0?\0ID_AA64MMFR0_EL1\0ID_AA64MMFR1_EL1\0ID_AA64MMFR2_EL1\0"; break;case 1: switch(m) {case 0: t="SCTLR_EL1\0ACTLR_EL1\0CPACR_EL1\0"; break;case 2: t="ZCR_EL1\0"; break;} break;case 2: if(m==0) t="TTBR0_EL1\0TTBR1_EL1\0TCR_EL1\0"; break;case 4: switch(m) {case 0: t="SPSR_EL1\0ELR_EL1\0"; break;case 1: t="SP_EL0\0"; break;case 2: t="SPSel\0?\0CurrentEL\0PAN\0UAO\0"; break;case 6: t="ICC_PMR_EL1\0"; break;} break;case 5: switch(m) {case 1: t="AFSR0_EL1\0AFSR1_EL1\0"; break;case 2: t="ESR_EL1"; break;case 3: t="ERRIDR_EL1\0ERRSELR_EL1\0"; break;case 4: t="ERXFR_EL1\0ERXCTLR_EL1\0ERXSTATUS_EL1\0ERXADDR_EL1\0"; break;case 5: t="ERXMISC0_EL1\0ERXMISC1_EL1\0"; break;} break;case 6: if(m==0) t="FAR_EL1\0"; break;case 7: if(m==4) t="PAR_EL1\0"; break;case 9: switch(m) {case 9: t="PMSCR_EL1\0?\0PMSICR_EL1\0PMSIRR_EL1\0PMSFCR_EL1\0PMSEVFR_EL1\0PMSLATFR_EL1\0PMSIDR_EL1\0PMSIDR_EL1\0"; break;case 10: t="PMBLIMITR_EL1\0PMBPTR_EL1\0?\0PMBSR_EL1\0?\0?\0?\0PMBIDR_EL1\0"; break;case 14: t="?\0PMINTENSET_EL1\0PMINTENCLR_EL1\0"; break;} break;case 10: if(m==4) t="LORSA_EL1\0LOREA_EL1\0LORN_EL1\0LORC_EL1\0?\0?\0?\0LORID_EL1\0"; else if(m!=4&&j==0) { j=m; t="?\0?\0MAIR_EL1\0AMAIR_EL1\0"; }break;case 12: switch(m) {case 0: t="VBAR_EL1\0RVBAR_EL1\0RMR_EL1\0"; break;case 1: t="ISR_EL1\0DISR_EL1\0"; break;case 8: t="ICC_IAR0_EL1\0ICC_EOIR0_EL1\0ICC_HPPIR0_EL1\0ICC_BPR0_EL1\0ICC_AP0R0_EL1\0ICC_AP0R1_EL1\0ICC_AP0R2_EL1\0ICC_AP0R3_EL1\0"; break;case 9: t="ICC_AP1R0_EL1\0ICC_AP1R1_EL1\0ICC_AP1R2_EL1\0ICC_AP1R3_EL1\0"; break;case 11: t="?\0ICC_DIR_EL1\0?\0ICC_RPR_EL1\0?\0ICC_SGI1R_EL1\0ICC_ASGI1R_EL1\0ICC_SGI0R_EL1\0"; break;case 12: t="ICC_IAR1_EL1\0ICC_EOIR1_EL1\0ICC_HPPIR1_EL1\0ICC_BPR1_EL1\0ICC_CTLR_EL1\0ICC_SRE_EL1\0ICC_IGRPEN0_EL1\0ICC_IGRPEN1_EL1\0"; break;} break;case 13: if(m==0) t="?\0CONTEXTIDR_EL1\0?\0?\0TPIDR_EL1\0"; break;case 14: if(m==1) t="CNTKCTL_EL1\0"; break;} break;case 1: if(n==0&&m==0) t="CCSIDR_EL1\0CLIDR_EL1\0?\0?\0?\0?\0?\0AIDR_EL1\0"; break;case 2: if(n==0&&m==0) t="CSSELR_EL1\0"; break;case 3: switch(n) {case 0: if(m==0) t="?\0CTR_EL0\0?\0?\0?\0?\0?\0DCZID_EL0\0"; break;case 4: switch(m) {case 2: t="NZCV\0DAIF\0"; break;case 4: t="FPCR\0FPSR\0"; break;case 5: t="DSPSR_EL0\0DLR_EL0\0"; break;} break;case 9: switch(m) {case 12: t="PMCR_EL0\0PMCNTENSET_EL0\0PMCNTENCLR_EL0\0PMOVSCLR_EL0\0PMSWINC_EL0\0PMSELR_EL0\0PMCEID0_EL0\0PMCEID1_EL0\0"; break;case 13: t="PMCCNTR_EL0\0PMXEVTYPER_EL0\0PMXEVCNTR_EL0\0"; break;case 14: t="PMUSERENR_EL0\0?\0?\0PMOVSSET_EL0\0"; break;} break;
   83dc4:	f0000060 	adrp	x0, 92000 <sd_init+0x470>
   83dc8:	91122000 	add	x0, x0, #0x488
   83dcc:	910cc000 	add	x0, x0, #0x330
char *disasm_str(char*s,int n) {if(!s)return "?";while(n){s++;if(!*s){s++;n--;}}return *s?s:"?";};
   83dd0:	17fffde0 	b	83550 <disasm_str.part.0>
case 13: if(m==0) t="?\0?\0TPIDR_EL0\0TPIDRRO_EL0\0"; break;case 14: switch(m) {case 0: t="CNTFRQ_EL0\0CNTPCT_EL0\0CNTVCT_EL0\0"; break;case 2: t="CNTP_TVAL_EL0\0CNTP_CTL_EL0\0CNTP_CVAL_EL0\0"; break;case 3: t="CNTV_TVAL_EL0\0CNTV_CTL_EL0\0CNTV_CVAL_EL0\0"; break;} break;} break;case 4: switch(n) {case 0: if(m==0) t="VPIDR_EL2\0?\0?\0?\0?\0VMPIDR_EL2\0"; break;case 1: switch(m) {case 0: t="SCTLR_EL2\0ACTLR_EL2\0"; break;case 1: t="HCR_EL2\0MDCR_EL2\0CPTR_EL2\0HSTR_EL2\0?\0?\0?\0HACR_EL2\0"; break;case 2: t="ZCR_EL2\0"; break;} break;case 2: switch(m) {case 0: t="TTBR0_EL2\0?\0TCR_EL2\0"; break;case 1: t="VTTBR0_EL2\0?\0VTCR_EL2\0"; break;} break;case 3: if(m==0) t="DACR32_EL2\0"; break;case 4: switch(m) {case 0: t="SPSR_EL2\0ELR_EL2\0"; break;case 1: t="SP_EL1\0"; break;case 3: t="SPSR_irq\0SPSR_abt\0SPSR_und\0SPSR_fiq\0"; break;} break;case 5: switch(m) {case 0: t="?\0IFSR32_EL2\0"; break;case 1: t="AFSR0_EL2\0AFSR1_EL2\0"; break;case 2: t="ESR_EL2\0?\0?\0VSESR_EL2\0"; break;case 3: t="FPEXC32_EL2\0"; break;} break;case 6: if(m==0) t="FAR_EL2\0?\0?\0?\0HPFAR_EL2\0"; break;case 9: if(m==9) t="PMSCR_EL2\0"; break;case 10: switch(m) {case 2: t="MAIR_EL2\0"; break;case 3: t="AMAIR_EL2\0"; break;} break;case 12: switch(m) {case 0: t="VBAR_EL2\0RVBAR_EL2\0RMR_EL2\0"; break;case 1: t="?\0VDISR_EL2\0"; break;case 8: t="ICH_AP0R0_EL2\0ICH_AP0R1_EL2\0ICH_AP0R2_EL2\0ICH_AP0R3_EL2\0"; break;case 9: t="ICH_AP1R0_EL2\0ICH_AP1R1_EL2\0ICH_AP1R2_EL2\0ICH_AP1R3_EL2\0ICC_SRE_EL2\0"; break;case 11: t="ICH_HCR_EL2\0ICH_VTR_EL2\0ICH_MISR_EL2\0ICH_EISR_EL2\0?\0ICH_ELRSR_EL2\0?\0ICH_VMCR_EL2\0"; break;case 12: t="ICH_LR0_EL2\0ICH_LR1_EL2\0ICH_LR2_EL2\0ICH_LR3_EL2\0ICH_LR4_EL2\0ICH_LR5_EL2\0ICH_LR6_EL2\0ICH_LR7_EL2\0"; break;case 13: t="ICH_LR8_EL2\0ICH_LR9_EL2\0ICH_LR10_EL2\0ICH_LR11_EL2\0ICH_LR12_EL2\0ICH_LR13_EL2\0ICH_LR14_EL2\0ICH_LR15_EL2\0"; break;} break;case 13: if(m==0) t="?\0CONTEXTIDR_EL2\0TPIDR_EL2\0"; break;case 14: switch(m) {case 0: t="?\0?\0?\0CNTVOFF_EL2\0"; break;case 1: t="CNTHCTL_EL2\0"; break;case 2: t="CNTHP_TVAL_EL2\0CNTHP_CTL_EL2\0CNTHP_CVAL_EL2\0"; break;case 3: t="CNTHV_TVAL_EL2\0CNTHV_CTL_EL2\0CNTHV_CVAL_EL2\0"; break;} break;} break;case 5: if(n==4&&m==0) t="SPSR_EL12\0ELR_EL12\0"; break;case 6: if(n==4&&m==1) t="SP_EL2\0"; break;case 7: if(n==14&&m==2) t="CNTPS_TVAL_EL1\0CNTPS_CTL_EL1\0CNTPS_CVAL_EL1\0"; break;} break;}return t?disasm_str(t,j):NULL;}
   83dd4:	f0000060 	adrp	x0, 92000 <sd_init+0x470>
   83dd8:	91122000 	add	x0, x0, #0x488
   83ddc:	9121a000 	add	x0, x0, #0x868
char *disasm_str(char*s,int n) {if(!s)return "?";while(n){s++;if(!*s){s++;n--;}}return *s?s:"?";};
   83de0:	17fffddc 	b	83550 <disasm_str.part.0>
case 13: if(m==0) t="?\0?\0TPIDR_EL0\0TPIDRRO_EL0\0"; break;case 14: switch(m) {case 0: t="CNTFRQ_EL0\0CNTPCT_EL0\0CNTVCT_EL0\0"; break;case 2: t="CNTP_TVAL_EL0\0CNTP_CTL_EL0\0CNTP_CVAL_EL0\0"; break;case 3: t="CNTV_TVAL_EL0\0CNTV_CTL_EL0\0CNTV_CVAL_EL0\0"; break;} break;} break;case 4: switch(n) {case 0: if(m==0) t="VPIDR_EL2\0?\0?\0?\0?\0VMPIDR_EL2\0"; break;case 1: switch(m) {case 0: t="SCTLR_EL2\0ACTLR_EL2\0"; break;case 1: t="HCR_EL2\0MDCR_EL2\0CPTR_EL2\0HSTR_EL2\0?\0?\0?\0HACR_EL2\0"; break;case 2: t="ZCR_EL2\0"; break;} break;case 2: switch(m) {case 0: t="TTBR0_EL2\0?\0TCR_EL2\0"; break;case 1: t="VTTBR0_EL2\0?\0VTCR_EL2\0"; break;} break;case 3: if(m==0) t="DACR32_EL2\0"; break;case 4: switch(m) {case 0: t="SPSR_EL2\0ELR_EL2\0"; break;case 1: t="SP_EL1\0"; break;case 3: t="SPSR_irq\0SPSR_abt\0SPSR_und\0SPSR_fiq\0"; break;} break;case 5: switch(m) {case 0: t="?\0IFSR32_EL2\0"; break;case 1: t="AFSR0_EL2\0AFSR1_EL2\0"; break;case 2: t="ESR_EL2\0?\0?\0VSESR_EL2\0"; break;case 3: t="FPEXC32_EL2\0"; break;} break;case 6: if(m==0) t="FAR_EL2\0?\0?\0?\0HPFAR_EL2\0"; break;case 9: if(m==9) t="PMSCR_EL2\0"; break;case 10: switch(m) {case 2: t="MAIR_EL2\0"; break;case 3: t="AMAIR_EL2\0"; break;} break;case 12: switch(m) {case 0: t="VBAR_EL2\0RVBAR_EL2\0RMR_EL2\0"; break;case 1: t="?\0VDISR_EL2\0"; break;case 8: t="ICH_AP0R0_EL2\0ICH_AP0R1_EL2\0ICH_AP0R2_EL2\0ICH_AP0R3_EL2\0"; break;case 9: t="ICH_AP1R0_EL2\0ICH_AP1R1_EL2\0ICH_AP1R2_EL2\0ICH_AP1R3_EL2\0ICC_SRE_EL2\0"; break;case 11: t="ICH_HCR_EL2\0ICH_VTR_EL2\0ICH_MISR_EL2\0ICH_EISR_EL2\0?\0ICH_ELRSR_EL2\0?\0ICH_VMCR_EL2\0"; break;case 12: t="ICH_LR0_EL2\0ICH_LR1_EL2\0ICH_LR2_EL2\0ICH_LR3_EL2\0ICH_LR4_EL2\0ICH_LR5_EL2\0ICH_LR6_EL2\0ICH_LR7_EL2\0"; break;case 13: t="ICH_LR8_EL2\0ICH_LR9_EL2\0ICH_LR10_EL2\0ICH_LR11_EL2\0ICH_LR12_EL2\0ICH_LR13_EL2\0ICH_LR14_EL2\0ICH_LR15_EL2\0"; break;} break;case 13: if(m==0) t="?\0CONTEXTIDR_EL2\0TPIDR_EL2\0"; break;case 14: switch(m) {case 0: t="?\0?\0?\0CNTVOFF_EL2\0"; break;case 1: t="CNTHCTL_EL2\0"; break;case 2: t="CNTHP_TVAL_EL2\0CNTHP_CTL_EL2\0CNTHP_CVAL_EL2\0"; break;case 3: t="CNTHV_TVAL_EL2\0CNTHV_CTL_EL2\0CNTHV_CVAL_EL2\0"; break;} break;} break;case 5: if(n==4&&m==0) t="SPSR_EL12\0ELR_EL12\0"; break;case 6: if(n==4&&m==1) t="SP_EL2\0"; break;case 7: if(n==14&&m==2) t="CNTPS_TVAL_EL1\0CNTPS_CTL_EL1\0CNTPS_CVAL_EL1\0"; break;} break;}return t?disasm_str(t,j):NULL;}
   83de4:	f0000060 	adrp	x0, 92000 <sd_init+0x470>
   83de8:	91122000 	add	x0, x0, #0x488
   83dec:	91308000 	add	x0, x0, #0xc20
char *disasm_str(char*s,int n) {if(!s)return "?";while(n){s++;if(!*s){s++;n--;}}return *s?s:"?";};
   83df0:	17fffdd8 	b	83550 <disasm_str.part.0>
case 13: if(m==0) t="?\0?\0TPIDR_EL0\0TPIDRRO_EL0\0"; break;case 14: switch(m) {case 0: t="CNTFRQ_EL0\0CNTPCT_EL0\0CNTVCT_EL0\0"; break;case 2: t="CNTP_TVAL_EL0\0CNTP_CTL_EL0\0CNTP_CVAL_EL0\0"; break;case 3: t="CNTV_TVAL_EL0\0CNTV_CTL_EL0\0CNTV_CVAL_EL0\0"; break;} break;} break;case 4: switch(n) {case 0: if(m==0) t="VPIDR_EL2\0?\0?\0?\0?\0VMPIDR_EL2\0"; break;case 1: switch(m) {case 0: t="SCTLR_EL2\0ACTLR_EL2\0"; break;case 1: t="HCR_EL2\0MDCR_EL2\0CPTR_EL2\0HSTR_EL2\0?\0?\0?\0HACR_EL2\0"; break;case 2: t="ZCR_EL2\0"; break;} break;case 2: switch(m) {case 0: t="TTBR0_EL2\0?\0TCR_EL2\0"; break;case 1: t="VTTBR0_EL2\0?\0VTCR_EL2\0"; break;} break;case 3: if(m==0) t="DACR32_EL2\0"; break;case 4: switch(m) {case 0: t="SPSR_EL2\0ELR_EL2\0"; break;case 1: t="SP_EL1\0"; break;case 3: t="SPSR_irq\0SPSR_abt\0SPSR_und\0SPSR_fiq\0"; break;} break;case 5: switch(m) {case 0: t="?\0IFSR32_EL2\0"; break;case 1: t="AFSR0_EL2\0AFSR1_EL2\0"; break;case 2: t="ESR_EL2\0?\0?\0VSESR_EL2\0"; break;case 3: t="FPEXC32_EL2\0"; break;} break;case 6: if(m==0) t="FAR_EL2\0?\0?\0?\0HPFAR_EL2\0"; break;case 9: if(m==9) t="PMSCR_EL2\0"; break;case 10: switch(m) {case 2: t="MAIR_EL2\0"; break;case 3: t="AMAIR_EL2\0"; break;} break;case 12: switch(m) {case 0: t="VBAR_EL2\0RVBAR_EL2\0RMR_EL2\0"; break;case 1: t="?\0VDISR_EL2\0"; break;case 8: t="ICH_AP0R0_EL2\0ICH_AP0R1_EL2\0ICH_AP0R2_EL2\0ICH_AP0R3_EL2\0"; break;case 9: t="ICH_AP1R0_EL2\0ICH_AP1R1_EL2\0ICH_AP1R2_EL2\0ICH_AP1R3_EL2\0ICC_SRE_EL2\0"; break;case 11: t="ICH_HCR_EL2\0ICH_VTR_EL2\0ICH_MISR_EL2\0ICH_EISR_EL2\0?\0ICH_ELRSR_EL2\0?\0ICH_VMCR_EL2\0"; break;case 12: t="ICH_LR0_EL2\0ICH_LR1_EL2\0ICH_LR2_EL2\0ICH_LR3_EL2\0ICH_LR4_EL2\0ICH_LR5_EL2\0ICH_LR6_EL2\0ICH_LR7_EL2\0"; break;case 13: t="ICH_LR8_EL2\0ICH_LR9_EL2\0ICH_LR10_EL2\0ICH_LR11_EL2\0ICH_LR12_EL2\0ICH_LR13_EL2\0ICH_LR14_EL2\0ICH_LR15_EL2\0"; break;} break;case 13: if(m==0) t="?\0CONTEXTIDR_EL2\0TPIDR_EL2\0"; break;case 14: switch(m) {case 0: t="?\0?\0?\0CNTVOFF_EL2\0"; break;case 1: t="CNTHCTL_EL2\0"; break;case 2: t="CNTHP_TVAL_EL2\0CNTHP_CTL_EL2\0CNTHP_CVAL_EL2\0"; break;case 3: t="CNTHV_TVAL_EL2\0CNTHV_CTL_EL2\0CNTHV_CVAL_EL2\0"; break;} break;} break;case 5: if(n==4&&m==0) t="SPSR_EL12\0ELR_EL12\0"; break;case 6: if(n==4&&m==1) t="SP_EL2\0"; break;case 7: if(n==14&&m==2) t="CNTPS_TVAL_EL1\0CNTPS_CTL_EL1\0CNTPS_CVAL_EL1\0"; break;} break;}return t?disasm_str(t,j):NULL;}
   83df4:	f0000060 	adrp	x0, 92000 <sd_init+0x470>
   83df8:	91122000 	add	x0, x0, #0x488
   83dfc:	912f8000 	add	x0, x0, #0xbe0
char *disasm_str(char*s,int n) {if(!s)return "?";while(n){s++;if(!*s){s++;n--;}}return *s?s:"?";};
   83e00:	17fffdd4 	b	83550 <disasm_str.part.0>
case 13: if(m==0) t="?\0?\0TPIDR_EL0\0TPIDRRO_EL0\0"; break;case 14: switch(m) {case 0: t="CNTFRQ_EL0\0CNTPCT_EL0\0CNTVCT_EL0\0"; break;case 2: t="CNTP_TVAL_EL0\0CNTP_CTL_EL0\0CNTP_CVAL_EL0\0"; break;case 3: t="CNTV_TVAL_EL0\0CNTV_CTL_EL0\0CNTV_CVAL_EL0\0"; break;} break;} break;case 4: switch(n) {case 0: if(m==0) t="VPIDR_EL2\0?\0?\0?\0?\0VMPIDR_EL2\0"; break;case 1: switch(m) {case 0: t="SCTLR_EL2\0ACTLR_EL2\0"; break;case 1: t="HCR_EL2\0MDCR_EL2\0CPTR_EL2\0HSTR_EL2\0?\0?\0?\0HACR_EL2\0"; break;case 2: t="ZCR_EL2\0"; break;} break;case 2: switch(m) {case 0: t="TTBR0_EL2\0?\0TCR_EL2\0"; break;case 1: t="VTTBR0_EL2\0?\0VTCR_EL2\0"; break;} break;case 3: if(m==0) t="DACR32_EL2\0"; break;case 4: switch(m) {case 0: t="SPSR_EL2\0ELR_EL2\0"; break;case 1: t="SP_EL1\0"; break;case 3: t="SPSR_irq\0SPSR_abt\0SPSR_und\0SPSR_fiq\0"; break;} break;case 5: switch(m) {case 0: t="?\0IFSR32_EL2\0"; break;case 1: t="AFSR0_EL2\0AFSR1_EL2\0"; break;case 2: t="ESR_EL2\0?\0?\0VSESR_EL2\0"; break;case 3: t="FPEXC32_EL2\0"; break;} break;case 6: if(m==0) t="FAR_EL2\0?\0?\0?\0HPFAR_EL2\0"; break;case 9: if(m==9) t="PMSCR_EL2\0"; break;case 10: switch(m) {case 2: t="MAIR_EL2\0"; break;case 3: t="AMAIR_EL2\0"; break;} break;case 12: switch(m) {case 0: t="VBAR_EL2\0RVBAR_EL2\0RMR_EL2\0"; break;case 1: t="?\0VDISR_EL2\0"; break;case 8: t="ICH_AP0R0_EL2\0ICH_AP0R1_EL2\0ICH_AP0R2_EL2\0ICH_AP0R3_EL2\0"; break;case 9: t="ICH_AP1R0_EL2\0ICH_AP1R1_EL2\0ICH_AP1R2_EL2\0ICH_AP1R3_EL2\0ICC_SRE_EL2\0"; break;case 11: t="ICH_HCR_EL2\0ICH_VTR_EL2\0ICH_MISR_EL2\0ICH_EISR_EL2\0?\0ICH_ELRSR_EL2\0?\0ICH_VMCR_EL2\0"; break;case 12: t="ICH_LR0_EL2\0ICH_LR1_EL2\0ICH_LR2_EL2\0ICH_LR3_EL2\0ICH_LR4_EL2\0ICH_LR5_EL2\0ICH_LR6_EL2\0ICH_LR7_EL2\0"; break;case 13: t="ICH_LR8_EL2\0ICH_LR9_EL2\0ICH_LR10_EL2\0ICH_LR11_EL2\0ICH_LR12_EL2\0ICH_LR13_EL2\0ICH_LR14_EL2\0ICH_LR15_EL2\0"; break;} break;case 13: if(m==0) t="?\0CONTEXTIDR_EL2\0TPIDR_EL2\0"; break;case 14: switch(m) {case 0: t="?\0?\0?\0CNTVOFF_EL2\0"; break;case 1: t="CNTHCTL_EL2\0"; break;case 2: t="CNTHP_TVAL_EL2\0CNTHP_CTL_EL2\0CNTHP_CVAL_EL2\0"; break;case 3: t="CNTHV_TVAL_EL2\0CNTHV_CTL_EL2\0CNTHV_CVAL_EL2\0"; break;} break;} break;case 5: if(n==4&&m==0) t="SPSR_EL12\0ELR_EL12\0"; break;case 6: if(n==4&&m==1) t="SP_EL2\0"; break;case 7: if(n==14&&m==2) t="CNTPS_TVAL_EL1\0CNTPS_CTL_EL1\0CNTPS_CVAL_EL1\0"; break;} break;}return t?disasm_str(t,j):NULL;}
   83e04:	f0000060 	adrp	x0, 92000 <sd_init+0x470>
   83e08:	91122000 	add	x0, x0, #0x488
   83e0c:	912b6000 	add	x0, x0, #0xad8
char *disasm_str(char*s,int n) {if(!s)return "?";while(n){s++;if(!*s){s++;n--;}}return *s?s:"?";};
   83e10:	17fffdd0 	b	83550 <disasm_str.part.0>
char *disasm_sysreg(uint8_t p,uint8_t k,uint8_t n,uint8_t m,uint8_t j) {char *t=NULL;switch(p){case 2: switch(k) {case 0: switch(n) {case 0: switch(m) {case 0: t="?\0?\0OSDTRRX_EL1\0"; break;case 2: t="MDCCINT_EL1\0?\0MDSCR_EL1\0"; break;case 3: t="?\0?\0OSDTRTX_EL1\0"; break;case 6: t="?\0?\0OSECCR_EL1\0"; break;default: { n=j; j=m; switch(n) {case 4: t="DBGBVR0_EL1\0DBGBVR1_EL1\0DBGBVR2_EL1\0DBGBVR3_EL1\0DBGBVR4_EL1\0DBGBVR5_EL1\0DBGBVR6_EL1\0DBGBVR7_EL1\0"; break;case 5: t="DBGBCR0_EL1\0DBGBCR1_EL1\0DBGBCR2_EL1\0DBGBCR3_EL1\0DBGBCR4_EL1\0DBGBCR5_EL1\0DBGBCR6_EL1\0DBGBCR7_EL1\0"; break;case 6: t="DBGWVR0_EL1\0DBGWVR1_EL1\0DBGWVR2_EL1\0DBGWVR3_EL1\0DBGWVR4_EL1\0DBGWVR5_EL1\0DBGWVR6_EL1\0DBGWVR7_EL1\0"; break;case 7: t="DBGWCR0_EL1\0DBGWCR1_EL1\0DBGWCR2_EL1\0DBGWCR3_EL1\0DBGWCR4_EL1\0DBGWCR5_EL1\0DBGWCR6_EL1\0DBGWCR7_EL1\0"; break;} break; }} break;case 1: if(m==0) t="MDRAR_EL1\0?\0?\0?\0OSLAR_EL1\0"; else if(j==4) { j=m; t="OSLSR_EL1\0?\0OSDLR_EL1\0DBGPRCR_EL1\0"; }break;case 7: if(j==6) { j=m; t="?\0?\0?\0?\0?\0?\0?\0?\0DBGCLAIMSET_EL1\0DBGCLAIMCLR_EL1\0?\0?\0?\0?\0DBGAUTHSTATUS_EL1\0"; }break;} break;case 3: if(n==0&&j==0) { j=m; t="?\0MDCCSR_EL0\0?\0?\0DBGDTR_EL0\0DBGDTRRX_EL0\0"; } break;case 4: if(n==0&&m==7) t="DBGVCR32_EL2\0"; break;} break;case 3: switch(k) {case 0: switch(n) {case 0: if(m==0) t="MIDR_EL1\0?\0?\0?\0?\0MPIDR_EL1\0REVIDR_EL1\0?\0ID_PFR0_EL1\0ID_PFR1_EL1\0ID_DFR0_EL1\0ID_AFR0_EL1\0ID_MMFR0_EL1\0ID_MMFR1_EL1\0ID_MMFR2_EL1\0ID_MMFR3_EL1\0ID_ISAR0_EL1\0ID_ISAR1_EL1\0ID_ISAR2_EL1\0ID_ISAR2_EL1\0ID_ISAR3_EL1\0ID_ISAR4_EL1\0ID_ISAR5_EL1\0ID_MMFR4_EL1\0?\0MVFR0_EL1\0MVFR1_EL1\0MVFR2_EL1\0?\0?\0?\0?\0?\0ID_AA64PFR0_EL1\0ID_AA64PFR1_EL1\0?\0?\0ID_AA64ZFR0_EL1\0?\0?\0?\0ID_AA64DFR0_EL1\0ID_AA64DFR1_EL1\0?\0?\0ID_AA64AFR0_EL1\0ID_AA64AFR1_EL1\0?\0?\0ID_AA64ISAR0_EL1\0ID_AA64ISAR1_EL1\0?\0?\0?\0?\0?\0?\0ID_AA64MMFR0_EL1\0ID_AA64MMFR1_EL1\0ID_AA64MMFR2_EL1\0"; break;case 1: switch(m) {case 0: t="SCTLR_EL1\0ACTLR_EL1\0CPACR_EL1\0"; break;case 2: t="ZCR_EL1\0"; break;} break;case 2: if(m==0) t="TTBR0_EL1\0TTBR1_EL1\0TCR_EL1\0"; break;case 4: switch(m) {case 0: t="SPSR_EL1\0ELR_EL1\0"; break;case 1: t="SP_EL0\0"; break;case 2: t="SPSel\0?\0CurrentEL\0PAN\0UAO\0"; break;case 6: t="ICC_PMR_EL1\0"; break;} break;case 5: switch(m) {case 1: t="AFSR0_EL1\0AFSR1_EL1\0"; break;case 2: t="ESR_EL1"; break;case 3: t="ERRIDR_EL1\0ERRSELR_EL1\0"; break;case 4: t="ERXFR_EL1\0ERXCTLR_EL1\0ERXSTATUS_EL1\0ERXADDR_EL1\0"; break;case 5: t="ERXMISC0_EL1\0ERXMISC1_EL1\0"; break;} break;case 6: if(m==0) t="FAR_EL1\0"; break;case 7: if(m==4) t="PAR_EL1\0"; break;case 9: switch(m) {case 9: t="PMSCR_EL1\0?\0PMSICR_EL1\0PMSIRR_EL1\0PMSFCR_EL1\0PMSEVFR_EL1\0PMSLATFR_EL1\0PMSIDR_EL1\0PMSIDR_EL1\0"; break;case 10: t="PMBLIMITR_EL1\0PMBPTR_EL1\0?\0PMBSR_EL1\0?\0?\0?\0PMBIDR_EL1\0"; break;case 14: t="?\0PMINTENSET_EL1\0PMINTENCLR_EL1\0"; break;} break;case 10: if(m==4) t="LORSA_EL1\0LOREA_EL1\0LORN_EL1\0LORC_EL1\0?\0?\0?\0LORID_EL1\0"; else if(m!=4&&j==0) { j=m; t="?\0?\0MAIR_EL1\0AMAIR_EL1\0"; }break;case 12: switch(m) {case 0: t="VBAR_EL1\0RVBAR_EL1\0RMR_EL1\0"; break;case 1: t="ISR_EL1\0DISR_EL1\0"; break;case 8: t="ICC_IAR0_EL1\0ICC_EOIR0_EL1\0ICC_HPPIR0_EL1\0ICC_BPR0_EL1\0ICC_AP0R0_EL1\0ICC_AP0R1_EL1\0ICC_AP0R2_EL1\0ICC_AP0R3_EL1\0"; break;case 9: t="ICC_AP1R0_EL1\0ICC_AP1R1_EL1\0ICC_AP1R2_EL1\0ICC_AP1R3_EL1\0"; break;case 11: t="?\0ICC_DIR_EL1\0?\0ICC_RPR_EL1\0?\0ICC_SGI1R_EL1\0ICC_ASGI1R_EL1\0ICC_SGI0R_EL1\0"; break;case 12: t="ICC_IAR1_EL1\0ICC_EOIR1_EL1\0ICC_HPPIR1_EL1\0ICC_BPR1_EL1\0ICC_CTLR_EL1\0ICC_SRE_EL1\0ICC_IGRPEN0_EL1\0ICC_IGRPEN1_EL1\0"; break;} break;case 13: if(m==0) t="?\0CONTEXTIDR_EL1\0?\0?\0TPIDR_EL1\0"; break;case 14: if(m==1) t="CNTKCTL_EL1\0"; break;} break;case 1: if(n==0&&m==0) t="CCSIDR_EL1\0CLIDR_EL1\0?\0?\0?\0?\0?\0AIDR_EL1\0"; break;case 2: if(n==0&&m==0) t="CSSELR_EL1\0"; break;case 3: switch(n) {case 0: if(m==0) t="?\0CTR_EL0\0?\0?\0?\0?\0?\0DCZID_EL0\0"; break;case 4: switch(m) {case 2: t="NZCV\0DAIF\0"; break;case 4: t="FPCR\0FPSR\0"; break;case 5: t="DSPSR_EL0\0DLR_EL0\0"; break;} break;case 9: switch(m) {case 12: t="PMCR_EL0\0PMCNTENSET_EL0\0PMCNTENCLR_EL0\0PMOVSCLR_EL0\0PMSWINC_EL0\0PMSELR_EL0\0PMCEID0_EL0\0PMCEID1_EL0\0"; break;case 13: t="PMCCNTR_EL0\0PMXEVTYPER_EL0\0PMXEVCNTR_EL0\0"; break;case 14: t="PMUSERENR_EL0\0?\0?\0PMOVSSET_EL0\0"; break;} break;
   83e14:	f0000060 	adrp	x0, 92000 <sd_init+0x470>
   83e18:	91122000 	add	x0, x0, #0x488
   83e1c:	910d4000 	add	x0, x0, #0x350
char *disasm_str(char*s,int n) {if(!s)return "?";while(n){s++;if(!*s){s++;n--;}}return *s?s:"?";};
   83e20:	17fffdcc 	b	83550 <disasm_str.part.0>
case 13: if(m==0) t="?\0?\0TPIDR_EL0\0TPIDRRO_EL0\0"; break;case 14: switch(m) {case 0: t="CNTFRQ_EL0\0CNTPCT_EL0\0CNTVCT_EL0\0"; break;case 2: t="CNTP_TVAL_EL0\0CNTP_CTL_EL0\0CNTP_CVAL_EL0\0"; break;case 3: t="CNTV_TVAL_EL0\0CNTV_CTL_EL0\0CNTV_CVAL_EL0\0"; break;} break;} break;case 4: switch(n) {case 0: if(m==0) t="VPIDR_EL2\0?\0?\0?\0?\0VMPIDR_EL2\0"; break;case 1: switch(m) {case 0: t="SCTLR_EL2\0ACTLR_EL2\0"; break;case 1: t="HCR_EL2\0MDCR_EL2\0CPTR_EL2\0HSTR_EL2\0?\0?\0?\0HACR_EL2\0"; break;case 2: t="ZCR_EL2\0"; break;} break;case 2: switch(m) {case 0: t="TTBR0_EL2\0?\0TCR_EL2\0"; break;case 1: t="VTTBR0_EL2\0?\0VTCR_EL2\0"; break;} break;case 3: if(m==0) t="DACR32_EL2\0"; break;case 4: switch(m) {case 0: t="SPSR_EL2\0ELR_EL2\0"; break;case 1: t="SP_EL1\0"; break;case 3: t="SPSR_irq\0SPSR_abt\0SPSR_und\0SPSR_fiq\0"; break;} break;case 5: switch(m) {case 0: t="?\0IFSR32_EL2\0"; break;case 1: t="AFSR0_EL2\0AFSR1_EL2\0"; break;case 2: t="ESR_EL2\0?\0?\0VSESR_EL2\0"; break;case 3: t="FPEXC32_EL2\0"; break;} break;case 6: if(m==0) t="FAR_EL2\0?\0?\0?\0HPFAR_EL2\0"; break;case 9: if(m==9) t="PMSCR_EL2\0"; break;case 10: switch(m) {case 2: t="MAIR_EL2\0"; break;case 3: t="AMAIR_EL2\0"; break;} break;case 12: switch(m) {case 0: t="VBAR_EL2\0RVBAR_EL2\0RMR_EL2\0"; break;case 1: t="?\0VDISR_EL2\0"; break;case 8: t="ICH_AP0R0_EL2\0ICH_AP0R1_EL2\0ICH_AP0R2_EL2\0ICH_AP0R3_EL2\0"; break;case 9: t="ICH_AP1R0_EL2\0ICH_AP1R1_EL2\0ICH_AP1R2_EL2\0ICH_AP1R3_EL2\0ICC_SRE_EL2\0"; break;case 11: t="ICH_HCR_EL2\0ICH_VTR_EL2\0ICH_MISR_EL2\0ICH_EISR_EL2\0?\0ICH_ELRSR_EL2\0?\0ICH_VMCR_EL2\0"; break;case 12: t="ICH_LR0_EL2\0ICH_LR1_EL2\0ICH_LR2_EL2\0ICH_LR3_EL2\0ICH_LR4_EL2\0ICH_LR5_EL2\0ICH_LR6_EL2\0ICH_LR7_EL2\0"; break;case 13: t="ICH_LR8_EL2\0ICH_LR9_EL2\0ICH_LR10_EL2\0ICH_LR11_EL2\0ICH_LR12_EL2\0ICH_LR13_EL2\0ICH_LR14_EL2\0ICH_LR15_EL2\0"; break;} break;case 13: if(m==0) t="?\0CONTEXTIDR_EL2\0TPIDR_EL2\0"; break;case 14: switch(m) {case 0: t="?\0?\0?\0CNTVOFF_EL2\0"; break;case 1: t="CNTHCTL_EL2\0"; break;case 2: t="CNTHP_TVAL_EL2\0CNTHP_CTL_EL2\0CNTHP_CVAL_EL2\0"; break;case 3: t="CNTHV_TVAL_EL2\0CNTHV_CTL_EL2\0CNTHV_CVAL_EL2\0"; break;} break;} break;case 5: if(n==4&&m==0) t="SPSR_EL12\0ELR_EL12\0"; break;case 6: if(n==4&&m==1) t="SP_EL2\0"; break;case 7: if(n==14&&m==2) t="CNTPS_TVAL_EL1\0CNTPS_CTL_EL1\0CNTPS_CVAL_EL1\0"; break;} break;}return t?disasm_str(t,j):NULL;}
   83e24:	f0000060 	adrp	x0, 92000 <sd_init+0x470>
   83e28:	91122000 	add	x0, x0, #0x488
   83e2c:	912e6000 	add	x0, x0, #0xb98
char *disasm_str(char*s,int n) {if(!s)return "?";while(n){s++;if(!*s){s++;n--;}}return *s?s:"?";};
   83e30:	17fffdc8 	b	83550 <disasm_str.part.0>
case 13: if(m==0) t="?\0?\0TPIDR_EL0\0TPIDRRO_EL0\0"; break;case 14: switch(m) {case 0: t="CNTFRQ_EL0\0CNTPCT_EL0\0CNTVCT_EL0\0"; break;case 2: t="CNTP_TVAL_EL0\0CNTP_CTL_EL0\0CNTP_CVAL_EL0\0"; break;case 3: t="CNTV_TVAL_EL0\0CNTV_CTL_EL0\0CNTV_CVAL_EL0\0"; break;} break;} break;case 4: switch(n) {case 0: if(m==0) t="VPIDR_EL2\0?\0?\0?\0?\0VMPIDR_EL2\0"; break;case 1: switch(m) {case 0: t="SCTLR_EL2\0ACTLR_EL2\0"; break;case 1: t="HCR_EL2\0MDCR_EL2\0CPTR_EL2\0HSTR_EL2\0?\0?\0?\0HACR_EL2\0"; break;case 2: t="ZCR_EL2\0"; break;} break;case 2: switch(m) {case 0: t="TTBR0_EL2\0?\0TCR_EL2\0"; break;case 1: t="VTTBR0_EL2\0?\0VTCR_EL2\0"; break;} break;case 3: if(m==0) t="DACR32_EL2\0"; break;case 4: switch(m) {case 0: t="SPSR_EL2\0ELR_EL2\0"; break;case 1: t="SP_EL1\0"; break;case 3: t="SPSR_irq\0SPSR_abt\0SPSR_und\0SPSR_fiq\0"; break;} break;case 5: switch(m) {case 0: t="?\0IFSR32_EL2\0"; break;case 1: t="AFSR0_EL2\0AFSR1_EL2\0"; break;case 2: t="ESR_EL2\0?\0?\0VSESR_EL2\0"; break;case 3: t="FPEXC32_EL2\0"; break;} break;case 6: if(m==0) t="FAR_EL2\0?\0?\0?\0HPFAR_EL2\0"; break;case 9: if(m==9) t="PMSCR_EL2\0"; break;case 10: switch(m) {case 2: t="MAIR_EL2\0"; break;case 3: t="AMAIR_EL2\0"; break;} break;case 12: switch(m) {case 0: t="VBAR_EL2\0RVBAR_EL2\0RMR_EL2\0"; break;case 1: t="?\0VDISR_EL2\0"; break;case 8: t="ICH_AP0R0_EL2\0ICH_AP0R1_EL2\0ICH_AP0R2_EL2\0ICH_AP0R3_EL2\0"; break;case 9: t="ICH_AP1R0_EL2\0ICH_AP1R1_EL2\0ICH_AP1R2_EL2\0ICH_AP1R3_EL2\0ICC_SRE_EL2\0"; break;case 11: t="ICH_HCR_EL2\0ICH_VTR_EL2\0ICH_MISR_EL2\0ICH_EISR_EL2\0?\0ICH_ELRSR_EL2\0?\0ICH_VMCR_EL2\0"; break;case 12: t="ICH_LR0_EL2\0ICH_LR1_EL2\0ICH_LR2_EL2\0ICH_LR3_EL2\0ICH_LR4_EL2\0ICH_LR5_EL2\0ICH_LR6_EL2\0ICH_LR7_EL2\0"; break;case 13: t="ICH_LR8_EL2\0ICH_LR9_EL2\0ICH_LR10_EL2\0ICH_LR11_EL2\0ICH_LR12_EL2\0ICH_LR13_EL2\0ICH_LR14_EL2\0ICH_LR15_EL2\0"; break;} break;case 13: if(m==0) t="?\0CONTEXTIDR_EL2\0TPIDR_EL2\0"; break;case 14: switch(m) {case 0: t="?\0?\0?\0CNTVOFF_EL2\0"; break;case 1: t="CNTHCTL_EL2\0"; break;case 2: t="CNTHP_TVAL_EL2\0CNTHP_CTL_EL2\0CNTHP_CVAL_EL2\0"; break;case 3: t="CNTHV_TVAL_EL2\0CNTHV_CTL_EL2\0CNTHV_CVAL_EL2\0"; break;} break;} break;case 5: if(n==4&&m==0) t="SPSR_EL12\0ELR_EL12\0"; break;case 6: if(n==4&&m==1) t="SP_EL2\0"; break;case 7: if(n==14&&m==2) t="CNTPS_TVAL_EL1\0CNTPS_CTL_EL1\0CNTPS_CVAL_EL1\0"; break;} break;}return t?disasm_str(t,j):NULL;}
   83e34:	f0000060 	adrp	x0, 92000 <sd_init+0x470>
   83e38:	91122000 	add	x0, x0, #0x488
   83e3c:	912ac000 	add	x0, x0, #0xab0
char *disasm_str(char*s,int n) {if(!s)return "?";while(n){s++;if(!*s){s++;n--;}}return *s?s:"?";};
   83e40:	17fffdc4 	b	83550 <disasm_str.part.0>
case 13: if(m==0) t="?\0?\0TPIDR_EL0\0TPIDRRO_EL0\0"; break;case 14: switch(m) {case 0: t="CNTFRQ_EL0\0CNTPCT_EL0\0CNTVCT_EL0\0"; break;case 2: t="CNTP_TVAL_EL0\0CNTP_CTL_EL0\0CNTP_CVAL_EL0\0"; break;case 3: t="CNTV_TVAL_EL0\0CNTV_CTL_EL0\0CNTV_CVAL_EL0\0"; break;} break;} break;case 4: switch(n) {case 0: if(m==0) t="VPIDR_EL2\0?\0?\0?\0?\0VMPIDR_EL2\0"; break;case 1: switch(m) {case 0: t="SCTLR_EL2\0ACTLR_EL2\0"; break;case 1: t="HCR_EL2\0MDCR_EL2\0CPTR_EL2\0HSTR_EL2\0?\0?\0?\0HACR_EL2\0"; break;case 2: t="ZCR_EL2\0"; break;} break;case 2: switch(m) {case 0: t="TTBR0_EL2\0?\0TCR_EL2\0"; break;case 1: t="VTTBR0_EL2\0?\0VTCR_EL2\0"; break;} break;case 3: if(m==0) t="DACR32_EL2\0"; break;case 4: switch(m) {case 0: t="SPSR_EL2\0ELR_EL2\0"; break;case 1: t="SP_EL1\0"; break;case 3: t="SPSR_irq\0SPSR_abt\0SPSR_und\0SPSR_fiq\0"; break;} break;case 5: switch(m) {case 0: t="?\0IFSR32_EL2\0"; break;case 1: t="AFSR0_EL2\0AFSR1_EL2\0"; break;case 2: t="ESR_EL2\0?\0?\0VSESR_EL2\0"; break;case 3: t="FPEXC32_EL2\0"; break;} break;case 6: if(m==0) t="FAR_EL2\0?\0?\0?\0HPFAR_EL2\0"; break;case 9: if(m==9) t="PMSCR_EL2\0"; break;case 10: switch(m) {case 2: t="MAIR_EL2\0"; break;case 3: t="AMAIR_EL2\0"; break;} break;case 12: switch(m) {case 0: t="VBAR_EL2\0RVBAR_EL2\0RMR_EL2\0"; break;case 1: t="?\0VDISR_EL2\0"; break;case 8: t="ICH_AP0R0_EL2\0ICH_AP0R1_EL2\0ICH_AP0R2_EL2\0ICH_AP0R3_EL2\0"; break;case 9: t="ICH_AP1R0_EL2\0ICH_AP1R1_EL2\0ICH_AP1R2_EL2\0ICH_AP1R3_EL2\0ICC_SRE_EL2\0"; break;case 11: t="ICH_HCR_EL2\0ICH_VTR_EL2\0ICH_MISR_EL2\0ICH_EISR_EL2\0?\0ICH_ELRSR_EL2\0?\0ICH_VMCR_EL2\0"; break;case 12: t="ICH_LR0_EL2\0ICH_LR1_EL2\0ICH_LR2_EL2\0ICH_LR3_EL2\0ICH_LR4_EL2\0ICH_LR5_EL2\0ICH_LR6_EL2\0ICH_LR7_EL2\0"; break;case 13: t="ICH_LR8_EL2\0ICH_LR9_EL2\0ICH_LR10_EL2\0ICH_LR11_EL2\0ICH_LR12_EL2\0ICH_LR13_EL2\0ICH_LR14_EL2\0ICH_LR15_EL2\0"; break;} break;case 13: if(m==0) t="?\0CONTEXTIDR_EL2\0TPIDR_EL2\0"; break;case 14: switch(m) {case 0: t="?\0?\0?\0CNTVOFF_EL2\0"; break;case 1: t="CNTHCTL_EL2\0"; break;case 2: t="CNTHP_TVAL_EL2\0CNTHP_CTL_EL2\0CNTHP_CVAL_EL2\0"; break;case 3: t="CNTHV_TVAL_EL2\0CNTHV_CTL_EL2\0CNTHV_CVAL_EL2\0"; break;} break;} break;case 5: if(n==4&&m==0) t="SPSR_EL12\0ELR_EL12\0"; break;case 6: if(n==4&&m==1) t="SP_EL2\0"; break;case 7: if(n==14&&m==2) t="CNTPS_TVAL_EL1\0CNTPS_CTL_EL1\0CNTPS_CVAL_EL1\0"; break;} break;}return t?disasm_str(t,j):NULL;}
   83e44:	f0000060 	adrp	x0, 92000 <sd_init+0x470>
   83e48:	91122000 	add	x0, x0, #0x488
   83e4c:	912e2000 	add	x0, x0, #0xb88
char *disasm_str(char*s,int n) {if(!s)return "?";while(n){s++;if(!*s){s++;n--;}}return *s?s:"?";};
   83e50:	17fffdc0 	b	83550 <disasm_str.part.0>
char *disasm_sysreg(uint8_t p,uint8_t k,uint8_t n,uint8_t m,uint8_t j) {char *t=NULL;switch(p){case 2: switch(k) {case 0: switch(n) {case 0: switch(m) {case 0: t="?\0?\0OSDTRRX_EL1\0"; break;case 2: t="MDCCINT_EL1\0?\0MDSCR_EL1\0"; break;case 3: t="?\0?\0OSDTRTX_EL1\0"; break;case 6: t="?\0?\0OSECCR_EL1\0"; break;default: { n=j; j=m; switch(n) {case 4: t="DBGBVR0_EL1\0DBGBVR1_EL1\0DBGBVR2_EL1\0DBGBVR3_EL1\0DBGBVR4_EL1\0DBGBVR5_EL1\0DBGBVR6_EL1\0DBGBVR7_EL1\0"; break;case 5: t="DBGBCR0_EL1\0DBGBCR1_EL1\0DBGBCR2_EL1\0DBGBCR3_EL1\0DBGBCR4_EL1\0DBGBCR5_EL1\0DBGBCR6_EL1\0DBGBCR7_EL1\0"; break;case 6: t="DBGWVR0_EL1\0DBGWVR1_EL1\0DBGWVR2_EL1\0DBGWVR3_EL1\0DBGWVR4_EL1\0DBGWVR5_EL1\0DBGWVR6_EL1\0DBGWVR7_EL1\0"; break;case 7: t="DBGWCR0_EL1\0DBGWCR1_EL1\0DBGWCR2_EL1\0DBGWCR3_EL1\0DBGWCR4_EL1\0DBGWCR5_EL1\0DBGWCR6_EL1\0DBGWCR7_EL1\0"; break;} break; }} break;case 1: if(m==0) t="MDRAR_EL1\0?\0?\0?\0OSLAR_EL1\0"; else if(j==4) { j=m; t="OSLSR_EL1\0?\0OSDLR_EL1\0DBGPRCR_EL1\0"; }break;case 7: if(j==6) { j=m; t="?\0?\0?\0?\0?\0?\0?\0?\0DBGCLAIMSET_EL1\0DBGCLAIMCLR_EL1\0?\0?\0?\0?\0DBGAUTHSTATUS_EL1\0"; }break;} break;case 3: if(n==0&&j==0) { j=m; t="?\0MDCCSR_EL0\0?\0?\0DBGDTR_EL0\0DBGDTRRX_EL0\0"; } break;case 4: if(n==0&&m==7) t="DBGVCR32_EL2\0"; break;} break;case 3: switch(k) {case 0: switch(n) {case 0: if(m==0) t="MIDR_EL1\0?\0?\0?\0?\0MPIDR_EL1\0REVIDR_EL1\0?\0ID_PFR0_EL1\0ID_PFR1_EL1\0ID_DFR0_EL1\0ID_AFR0_EL1\0ID_MMFR0_EL1\0ID_MMFR1_EL1\0ID_MMFR2_EL1\0ID_MMFR3_EL1\0ID_ISAR0_EL1\0ID_ISAR1_EL1\0ID_ISAR2_EL1\0ID_ISAR2_EL1\0ID_ISAR3_EL1\0ID_ISAR4_EL1\0ID_ISAR5_EL1\0ID_MMFR4_EL1\0?\0MVFR0_EL1\0MVFR1_EL1\0MVFR2_EL1\0?\0?\0?\0?\0?\0ID_AA64PFR0_EL1\0ID_AA64PFR1_EL1\0?\0?\0ID_AA64ZFR0_EL1\0?\0?\0?\0ID_AA64DFR0_EL1\0ID_AA64DFR1_EL1\0?\0?\0ID_AA64AFR0_EL1\0ID_AA64AFR1_EL1\0?\0?\0ID_AA64ISAR0_EL1\0ID_AA64ISAR1_EL1\0?\0?\0?\0?\0?\0?\0ID_AA64MMFR0_EL1\0ID_AA64MMFR1_EL1\0ID_AA64MMFR2_EL1\0"; break;case 1: switch(m) {case 0: t="SCTLR_EL1\0ACTLR_EL1\0CPACR_EL1\0"; break;case 2: t="ZCR_EL1\0"; break;} break;case 2: if(m==0) t="TTBR0_EL1\0TTBR1_EL1\0TCR_EL1\0"; break;case 4: switch(m) {case 0: t="SPSR_EL1\0ELR_EL1\0"; break;case 1: t="SP_EL0\0"; break;case 2: t="SPSel\0?\0CurrentEL\0PAN\0UAO\0"; break;case 6: t="ICC_PMR_EL1\0"; break;} break;case 5: switch(m) {case 1: t="AFSR0_EL1\0AFSR1_EL1\0"; break;case 2: t="ESR_EL1"; break;case 3: t="ERRIDR_EL1\0ERRSELR_EL1\0"; break;case 4: t="ERXFR_EL1\0ERXCTLR_EL1\0ERXSTATUS_EL1\0ERXADDR_EL1\0"; break;case 5: t="ERXMISC0_EL1\0ERXMISC1_EL1\0"; break;} break;case 6: if(m==0) t="FAR_EL1\0"; break;case 7: if(m==4) t="PAR_EL1\0"; break;case 9: switch(m) {case 9: t="PMSCR_EL1\0?\0PMSICR_EL1\0PMSIRR_EL1\0PMSFCR_EL1\0PMSEVFR_EL1\0PMSLATFR_EL1\0PMSIDR_EL1\0PMSIDR_EL1\0"; break;case 10: t="PMBLIMITR_EL1\0PMBPTR_EL1\0?\0PMBSR_EL1\0?\0?\0?\0PMBIDR_EL1\0"; break;case 14: t="?\0PMINTENSET_EL1\0PMINTENCLR_EL1\0"; break;} break;case 10: if(m==4) t="LORSA_EL1\0LOREA_EL1\0LORN_EL1\0LORC_EL1\0?\0?\0?\0LORID_EL1\0"; else if(m!=4&&j==0) { j=m; t="?\0?\0MAIR_EL1\0AMAIR_EL1\0"; }break;case 12: switch(m) {case 0: t="VBAR_EL1\0RVBAR_EL1\0RMR_EL1\0"; break;case 1: t="ISR_EL1\0DISR_EL1\0"; break;case 8: t="ICC_IAR0_EL1\0ICC_EOIR0_EL1\0ICC_HPPIR0_EL1\0ICC_BPR0_EL1\0ICC_AP0R0_EL1\0ICC_AP0R1_EL1\0ICC_AP0R2_EL1\0ICC_AP0R3_EL1\0"; break;case 9: t="ICC_AP1R0_EL1\0ICC_AP1R1_EL1\0ICC_AP1R2_EL1\0ICC_AP1R3_EL1\0"; break;case 11: t="?\0ICC_DIR_EL1\0?\0ICC_RPR_EL1\0?\0ICC_SGI1R_EL1\0ICC_ASGI1R_EL1\0ICC_SGI0R_EL1\0"; break;case 12: t="ICC_IAR1_EL1\0ICC_EOIR1_EL1\0ICC_HPPIR1_EL1\0ICC_BPR1_EL1\0ICC_CTLR_EL1\0ICC_SRE_EL1\0ICC_IGRPEN0_EL1\0ICC_IGRPEN1_EL1\0"; break;} break;case 13: if(m==0) t="?\0CONTEXTIDR_EL1\0?\0?\0TPIDR_EL1\0"; break;case 14: if(m==1) t="CNTKCTL_EL1\0"; break;} break;case 1: if(n==0&&m==0) t="CCSIDR_EL1\0CLIDR_EL1\0?\0?\0?\0?\0?\0AIDR_EL1\0"; break;case 2: if(n==0&&m==0) t="CSSELR_EL1\0"; break;case 3: switch(n) {case 0: if(m==0) t="?\0CTR_EL0\0?\0?\0?\0?\0?\0DCZID_EL0\0"; break;case 4: switch(m) {case 2: t="NZCV\0DAIF\0"; break;case 4: t="FPCR\0FPSR\0"; break;case 5: t="DSPSR_EL0\0DLR_EL0\0"; break;} break;case 9: switch(m) {case 12: t="PMCR_EL0\0PMCNTENSET_EL0\0PMCNTENCLR_EL0\0PMOVSCLR_EL0\0PMSWINC_EL0\0PMSELR_EL0\0PMCEID0_EL0\0PMCEID1_EL0\0"; break;case 13: t="PMCCNTR_EL0\0PMXEVTYPER_EL0\0PMXEVCNTR_EL0\0"; break;case 14: t="PMUSERENR_EL0\0?\0?\0PMOVSSET_EL0\0"; break;} break;
   83e54:	f0000060 	adrp	x0, 92000 <sd_init+0x470>
   83e58:	91122000 	add	x0, x0, #0x488
   83e5c:	2a0303e1 	mov	w1, w3
   83e60:	91334000 	add	x0, x0, #0xcd0
char *disasm_str(char*s,int n) {if(!s)return "?";while(n){s++;if(!*s){s++;n--;}}return *s?s:"?";};
   83e64:	17fffdbb 	b	83550 <disasm_str.part.0>
char *disasm_sysreg(uint8_t p,uint8_t k,uint8_t n,uint8_t m,uint8_t j) {char *t=NULL;switch(p){case 2: switch(k) {case 0: switch(n) {case 0: switch(m) {case 0: t="?\0?\0OSDTRRX_EL1\0"; break;case 2: t="MDCCINT_EL1\0?\0MDSCR_EL1\0"; break;case 3: t="?\0?\0OSDTRTX_EL1\0"; break;case 6: t="?\0?\0OSECCR_EL1\0"; break;default: { n=j; j=m; switch(n) {case 4: t="DBGBVR0_EL1\0DBGBVR1_EL1\0DBGBVR2_EL1\0DBGBVR3_EL1\0DBGBVR4_EL1\0DBGBVR5_EL1\0DBGBVR6_EL1\0DBGBVR7_EL1\0"; break;case 5: t="DBGBCR0_EL1\0DBGBCR1_EL1\0DBGBCR2_EL1\0DBGBCR3_EL1\0DBGBCR4_EL1\0DBGBCR5_EL1\0DBGBCR6_EL1\0DBGBCR7_EL1\0"; break;case 6: t="DBGWVR0_EL1\0DBGWVR1_EL1\0DBGWVR2_EL1\0DBGWVR3_EL1\0DBGWVR4_EL1\0DBGWVR5_EL1\0DBGWVR6_EL1\0DBGWVR7_EL1\0"; break;case 7: t="DBGWCR0_EL1\0DBGWCR1_EL1\0DBGWCR2_EL1\0DBGWCR3_EL1\0DBGWCR4_EL1\0DBGWCR5_EL1\0DBGWCR6_EL1\0DBGWCR7_EL1\0"; break;} break; }} break;case 1: if(m==0) t="MDRAR_EL1\0?\0?\0?\0OSLAR_EL1\0"; else if(j==4) { j=m; t="OSLSR_EL1\0?\0OSDLR_EL1\0DBGPRCR_EL1\0"; }break;case 7: if(j==6) { j=m; t="?\0?\0?\0?\0?\0?\0?\0?\0DBGCLAIMSET_EL1\0DBGCLAIMCLR_EL1\0?\0?\0?\0?\0DBGAUTHSTATUS_EL1\0"; }break;} break;case 3: if(n==0&&j==0) { j=m; t="?\0MDCCSR_EL0\0?\0?\0DBGDTR_EL0\0DBGDTRRX_EL0\0"; } break;case 4: if(n==0&&m==7) t="DBGVCR32_EL2\0"; break;} break;case 3: switch(k) {case 0: switch(n) {case 0: if(m==0) t="MIDR_EL1\0?\0?\0?\0?\0MPIDR_EL1\0REVIDR_EL1\0?\0ID_PFR0_EL1\0ID_PFR1_EL1\0ID_DFR0_EL1\0ID_AFR0_EL1\0ID_MMFR0_EL1\0ID_MMFR1_EL1\0ID_MMFR2_EL1\0ID_MMFR3_EL1\0ID_ISAR0_EL1\0ID_ISAR1_EL1\0ID_ISAR2_EL1\0ID_ISAR2_EL1\0ID_ISAR3_EL1\0ID_ISAR4_EL1\0ID_ISAR5_EL1\0ID_MMFR4_EL1\0?\0MVFR0_EL1\0MVFR1_EL1\0MVFR2_EL1\0?\0?\0?\0?\0?\0ID_AA64PFR0_EL1\0ID_AA64PFR1_EL1\0?\0?\0ID_AA64ZFR0_EL1\0?\0?\0?\0ID_AA64DFR0_EL1\0ID_AA64DFR1_EL1\0?\0?\0ID_AA64AFR0_EL1\0ID_AA64AFR1_EL1\0?\0?\0ID_AA64ISAR0_EL1\0ID_AA64ISAR1_EL1\0?\0?\0?\0?\0?\0?\0ID_AA64MMFR0_EL1\0ID_AA64MMFR1_EL1\0ID_AA64MMFR2_EL1\0"; break;case 1: switch(m) {case 0: t="SCTLR_EL1\0ACTLR_EL1\0CPACR_EL1\0"; break;case 2: t="ZCR_EL1\0"; break;} break;case 2: if(m==0) t="TTBR0_EL1\0TTBR1_EL1\0TCR_EL1\0"; break;case 4: switch(m) {case 0: t="SPSR_EL1\0ELR_EL1\0"; break;case 1: t="SP_EL0\0"; break;case 2: t="SPSel\0?\0CurrentEL\0PAN\0UAO\0"; break;case 6: t="ICC_PMR_EL1\0"; break;} break;case 5: switch(m) {case 1: t="AFSR0_EL1\0AFSR1_EL1\0"; break;case 2: t="ESR_EL1"; break;case 3: t="ERRIDR_EL1\0ERRSELR_EL1\0"; break;case 4: t="ERXFR_EL1\0ERXCTLR_EL1\0ERXSTATUS_EL1\0ERXADDR_EL1\0"; break;case 5: t="ERXMISC0_EL1\0ERXMISC1_EL1\0"; break;} break;case 6: if(m==0) t="FAR_EL1\0"; break;case 7: if(m==4) t="PAR_EL1\0"; break;case 9: switch(m) {case 9: t="PMSCR_EL1\0?\0PMSICR_EL1\0PMSIRR_EL1\0PMSFCR_EL1\0PMSEVFR_EL1\0PMSLATFR_EL1\0PMSIDR_EL1\0PMSIDR_EL1\0"; break;case 10: t="PMBLIMITR_EL1\0PMBPTR_EL1\0?\0PMBSR_EL1\0?\0?\0?\0PMBIDR_EL1\0"; break;case 14: t="?\0PMINTENSET_EL1\0PMINTENCLR_EL1\0"; break;} break;case 10: if(m==4) t="LORSA_EL1\0LOREA_EL1\0LORN_EL1\0LORC_EL1\0?\0?\0?\0LORID_EL1\0"; else if(m!=4&&j==0) { j=m; t="?\0?\0MAIR_EL1\0AMAIR_EL1\0"; }break;case 12: switch(m) {case 0: t="VBAR_EL1\0RVBAR_EL1\0RMR_EL1\0"; break;case 1: t="ISR_EL1\0DISR_EL1\0"; break;case 8: t="ICC_IAR0_EL1\0ICC_EOIR0_EL1\0ICC_HPPIR0_EL1\0ICC_BPR0_EL1\0ICC_AP0R0_EL1\0ICC_AP0R1_EL1\0ICC_AP0R2_EL1\0ICC_AP0R3_EL1\0"; break;case 9: t="ICC_AP1R0_EL1\0ICC_AP1R1_EL1\0ICC_AP1R2_EL1\0ICC_AP1R3_EL1\0"; break;case 11: t="?\0ICC_DIR_EL1\0?\0ICC_RPR_EL1\0?\0ICC_SGI1R_EL1\0ICC_ASGI1R_EL1\0ICC_SGI0R_EL1\0"; break;case 12: t="ICC_IAR1_EL1\0ICC_EOIR1_EL1\0ICC_HPPIR1_EL1\0ICC_BPR1_EL1\0ICC_CTLR_EL1\0ICC_SRE_EL1\0ICC_IGRPEN0_EL1\0ICC_IGRPEN1_EL1\0"; break;} break;case 13: if(m==0) t="?\0CONTEXTIDR_EL1\0?\0?\0TPIDR_EL1\0"; break;case 14: if(m==1) t="CNTKCTL_EL1\0"; break;} break;case 1: if(n==0&&m==0) t="CCSIDR_EL1\0CLIDR_EL1\0?\0?\0?\0?\0?\0AIDR_EL1\0"; break;case 2: if(n==0&&m==0) t="CSSELR_EL1\0"; break;case 3: switch(n) {case 0: if(m==0) t="?\0CTR_EL0\0?\0?\0?\0?\0?\0DCZID_EL0\0"; break;case 4: switch(m) {case 2: t="NZCV\0DAIF\0"; break;case 4: t="FPCR\0FPSR\0"; break;case 5: t="DSPSR_EL0\0DLR_EL0\0"; break;} break;case 9: switch(m) {case 12: t="PMCR_EL0\0PMCNTENSET_EL0\0PMCNTENCLR_EL0\0PMOVSCLR_EL0\0PMSWINC_EL0\0PMSELR_EL0\0PMCEID0_EL0\0PMCEID1_EL0\0"; break;case 13: t="PMCCNTR_EL0\0PMXEVTYPER_EL0\0PMXEVCNTR_EL0\0"; break;case 14: t="PMUSERENR_EL0\0?\0?\0PMOVSSET_EL0\0"; break;} break;
   83e68:	f0000060 	adrp	x0, 92000 <sd_init+0x470>
   83e6c:	91122000 	add	x0, x0, #0x488
   83e70:	91060000 	add	x0, x0, #0x180
char *disasm_str(char*s,int n) {if(!s)return "?";while(n){s++;if(!*s){s++;n--;}}return *s?s:"?";};
   83e74:	17fffdb7 	b	83550 <disasm_str.part.0>
case 13: if(m==0) t="?\0?\0TPIDR_EL0\0TPIDRRO_EL0\0"; break;case 14: switch(m) {case 0: t="CNTFRQ_EL0\0CNTPCT_EL0\0CNTVCT_EL0\0"; break;case 2: t="CNTP_TVAL_EL0\0CNTP_CTL_EL0\0CNTP_CVAL_EL0\0"; break;case 3: t="CNTV_TVAL_EL0\0CNTV_CTL_EL0\0CNTV_CVAL_EL0\0"; break;} break;} break;case 4: switch(n) {case 0: if(m==0) t="VPIDR_EL2\0?\0?\0?\0?\0VMPIDR_EL2\0"; break;case 1: switch(m) {case 0: t="SCTLR_EL2\0ACTLR_EL2\0"; break;case 1: t="HCR_EL2\0MDCR_EL2\0CPTR_EL2\0HSTR_EL2\0?\0?\0?\0HACR_EL2\0"; break;case 2: t="ZCR_EL2\0"; break;} break;case 2: switch(m) {case 0: t="TTBR0_EL2\0?\0TCR_EL2\0"; break;case 1: t="VTTBR0_EL2\0?\0VTCR_EL2\0"; break;} break;case 3: if(m==0) t="DACR32_EL2\0"; break;case 4: switch(m) {case 0: t="SPSR_EL2\0ELR_EL2\0"; break;case 1: t="SP_EL1\0"; break;case 3: t="SPSR_irq\0SPSR_abt\0SPSR_und\0SPSR_fiq\0"; break;} break;case 5: switch(m) {case 0: t="?\0IFSR32_EL2\0"; break;case 1: t="AFSR0_EL2\0AFSR1_EL2\0"; break;case 2: t="ESR_EL2\0?\0?\0VSESR_EL2\0"; break;case 3: t="FPEXC32_EL2\0"; break;} break;case 6: if(m==0) t="FAR_EL2\0?\0?\0?\0HPFAR_EL2\0"; break;case 9: if(m==9) t="PMSCR_EL2\0"; break;case 10: switch(m) {case 2: t="MAIR_EL2\0"; break;case 3: t="AMAIR_EL2\0"; break;} break;case 12: switch(m) {case 0: t="VBAR_EL2\0RVBAR_EL2\0RMR_EL2\0"; break;case 1: t="?\0VDISR_EL2\0"; break;case 8: t="ICH_AP0R0_EL2\0ICH_AP0R1_EL2\0ICH_AP0R2_EL2\0ICH_AP0R3_EL2\0"; break;case 9: t="ICH_AP1R0_EL2\0ICH_AP1R1_EL2\0ICH_AP1R2_EL2\0ICH_AP1R3_EL2\0ICC_SRE_EL2\0"; break;case 11: t="ICH_HCR_EL2\0ICH_VTR_EL2\0ICH_MISR_EL2\0ICH_EISR_EL2\0?\0ICH_ELRSR_EL2\0?\0ICH_VMCR_EL2\0"; break;case 12: t="ICH_LR0_EL2\0ICH_LR1_EL2\0ICH_LR2_EL2\0ICH_LR3_EL2\0ICH_LR4_EL2\0ICH_LR5_EL2\0ICH_LR6_EL2\0ICH_LR7_EL2\0"; break;case 13: t="ICH_LR8_EL2\0ICH_LR9_EL2\0ICH_LR10_EL2\0ICH_LR11_EL2\0ICH_LR12_EL2\0ICH_LR13_EL2\0ICH_LR14_EL2\0ICH_LR15_EL2\0"; break;} break;case 13: if(m==0) t="?\0CONTEXTIDR_EL2\0TPIDR_EL2\0"; break;case 14: switch(m) {case 0: t="?\0?\0?\0CNTVOFF_EL2\0"; break;case 1: t="CNTHCTL_EL2\0"; break;case 2: t="CNTHP_TVAL_EL2\0CNTHP_CTL_EL2\0CNTHP_CVAL_EL2\0"; break;case 3: t="CNTHV_TVAL_EL2\0CNTHV_CTL_EL2\0CNTHV_CVAL_EL2\0"; break;} break;} break;case 5: if(n==4&&m==0) t="SPSR_EL12\0ELR_EL12\0"; break;case 6: if(n==4&&m==1) t="SP_EL2\0"; break;case 7: if(n==14&&m==2) t="CNTPS_TVAL_EL1\0CNTPS_CTL_EL1\0CNTPS_CVAL_EL1\0"; break;} break;}return t?disasm_str(t,j):NULL;}
   83e78:	f0000060 	adrp	x0, 92000 <sd_init+0x470>
   83e7c:	91122000 	add	x0, x0, #0x488
   83e80:	9126e000 	add	x0, x0, #0x9b8
char *disasm_str(char*s,int n) {if(!s)return "?";while(n){s++;if(!*s){s++;n--;}}return *s?s:"?";};
   83e84:	17fffdb3 	b	83550 <disasm_str.part.0>
case 13: if(m==0) t="?\0?\0TPIDR_EL0\0TPIDRRO_EL0\0"; break;case 14: switch(m) {case 0: t="CNTFRQ_EL0\0CNTPCT_EL0\0CNTVCT_EL0\0"; break;case 2: t="CNTP_TVAL_EL0\0CNTP_CTL_EL0\0CNTP_CVAL_EL0\0"; break;case 3: t="CNTV_TVAL_EL0\0CNTV_CTL_EL0\0CNTV_CVAL_EL0\0"; break;} break;} break;case 4: switch(n) {case 0: if(m==0) t="VPIDR_EL2\0?\0?\0?\0?\0VMPIDR_EL2\0"; break;case 1: switch(m) {case 0: t="SCTLR_EL2\0ACTLR_EL2\0"; break;case 1: t="HCR_EL2\0MDCR_EL2\0CPTR_EL2\0HSTR_EL2\0?\0?\0?\0HACR_EL2\0"; break;case 2: t="ZCR_EL2\0"; break;} break;case 2: switch(m) {case 0: t="TTBR0_EL2\0?\0TCR_EL2\0"; break;case 1: t="VTTBR0_EL2\0?\0VTCR_EL2\0"; break;} break;case 3: if(m==0) t="DACR32_EL2\0"; break;case 4: switch(m) {case 0: t="SPSR_EL2\0ELR_EL2\0"; break;case 1: t="SP_EL1\0"; break;case 3: t="SPSR_irq\0SPSR_abt\0SPSR_und\0SPSR_fiq\0"; break;} break;case 5: switch(m) {case 0: t="?\0IFSR32_EL2\0"; break;case 1: t="AFSR0_EL2\0AFSR1_EL2\0"; break;case 2: t="ESR_EL2\0?\0?\0VSESR_EL2\0"; break;case 3: t="FPEXC32_EL2\0"; break;} break;case 6: if(m==0) t="FAR_EL2\0?\0?\0?\0HPFAR_EL2\0"; break;case 9: if(m==9) t="PMSCR_EL2\0"; break;case 10: switch(m) {case 2: t="MAIR_EL2\0"; break;case 3: t="AMAIR_EL2\0"; break;} break;case 12: switch(m) {case 0: t="VBAR_EL2\0RVBAR_EL2\0RMR_EL2\0"; break;case 1: t="?\0VDISR_EL2\0"; break;case 8: t="ICH_AP0R0_EL2\0ICH_AP0R1_EL2\0ICH_AP0R2_EL2\0ICH_AP0R3_EL2\0"; break;case 9: t="ICH_AP1R0_EL2\0ICH_AP1R1_EL2\0ICH_AP1R2_EL2\0ICH_AP1R3_EL2\0ICC_SRE_EL2\0"; break;case 11: t="ICH_HCR_EL2\0ICH_VTR_EL2\0ICH_MISR_EL2\0ICH_EISR_EL2\0?\0ICH_ELRSR_EL2\0?\0ICH_VMCR_EL2\0"; break;case 12: t="ICH_LR0_EL2\0ICH_LR1_EL2\0ICH_LR2_EL2\0ICH_LR3_EL2\0ICH_LR4_EL2\0ICH_LR5_EL2\0ICH_LR6_EL2\0ICH_LR7_EL2\0"; break;case 13: t="ICH_LR8_EL2\0ICH_LR9_EL2\0ICH_LR10_EL2\0ICH_LR11_EL2\0ICH_LR12_EL2\0ICH_LR13_EL2\0ICH_LR14_EL2\0ICH_LR15_EL2\0"; break;} break;case 13: if(m==0) t="?\0CONTEXTIDR_EL2\0TPIDR_EL2\0"; break;case 14: switch(m) {case 0: t="?\0?\0?\0CNTVOFF_EL2\0"; break;case 1: t="CNTHCTL_EL2\0"; break;case 2: t="CNTHP_TVAL_EL2\0CNTHP_CTL_EL2\0CNTHP_CVAL_EL2\0"; break;case 3: t="CNTHV_TVAL_EL2\0CNTHV_CTL_EL2\0CNTHV_CVAL_EL2\0"; break;} break;} break;case 5: if(n==4&&m==0) t="SPSR_EL12\0ELR_EL12\0"; break;case 6: if(n==4&&m==1) t="SP_EL2\0"; break;case 7: if(n==14&&m==2) t="CNTPS_TVAL_EL1\0CNTPS_CTL_EL1\0CNTPS_CVAL_EL1\0"; break;} break;}return t?disasm_str(t,j):NULL;}
   83e88:	f0000060 	adrp	x0, 92000 <sd_init+0x470>
   83e8c:	91122000 	add	x0, x0, #0x488
   83e90:	912c6000 	add	x0, x0, #0xb18
char *disasm_str(char*s,int n) {if(!s)return "?";while(n){s++;if(!*s){s++;n--;}}return *s?s:"?";};
   83e94:	17fffdaf 	b	83550 <disasm_str.part.0>
char *disasm_sysreg(uint8_t p,uint8_t k,uint8_t n,uint8_t m,uint8_t j) {char *t=NULL;switch(p){case 2: switch(k) {case 0: switch(n) {case 0: switch(m) {case 0: t="?\0?\0OSDTRRX_EL1\0"; break;case 2: t="MDCCINT_EL1\0?\0MDSCR_EL1\0"; break;case 3: t="?\0?\0OSDTRTX_EL1\0"; break;case 6: t="?\0?\0OSECCR_EL1\0"; break;default: { n=j; j=m; switch(n) {case 4: t="DBGBVR0_EL1\0DBGBVR1_EL1\0DBGBVR2_EL1\0DBGBVR3_EL1\0DBGBVR4_EL1\0DBGBVR5_EL1\0DBGBVR6_EL1\0DBGBVR7_EL1\0"; break;case 5: t="DBGBCR0_EL1\0DBGBCR1_EL1\0DBGBCR2_EL1\0DBGBCR3_EL1\0DBGBCR4_EL1\0DBGBCR5_EL1\0DBGBCR6_EL1\0DBGBCR7_EL1\0"; break;case 6: t="DBGWVR0_EL1\0DBGWVR1_EL1\0DBGWVR2_EL1\0DBGWVR3_EL1\0DBGWVR4_EL1\0DBGWVR5_EL1\0DBGWVR6_EL1\0DBGWVR7_EL1\0"; break;case 7: t="DBGWCR0_EL1\0DBGWCR1_EL1\0DBGWCR2_EL1\0DBGWCR3_EL1\0DBGWCR4_EL1\0DBGWCR5_EL1\0DBGWCR6_EL1\0DBGWCR7_EL1\0"; break;} break; }} break;case 1: if(m==0) t="MDRAR_EL1\0?\0?\0?\0OSLAR_EL1\0"; else if(j==4) { j=m; t="OSLSR_EL1\0?\0OSDLR_EL1\0DBGPRCR_EL1\0"; }break;case 7: if(j==6) { j=m; t="?\0?\0?\0?\0?\0?\0?\0?\0DBGCLAIMSET_EL1\0DBGCLAIMCLR_EL1\0?\0?\0?\0?\0DBGAUTHSTATUS_EL1\0"; }break;} break;case 3: if(n==0&&j==0) { j=m; t="?\0MDCCSR_EL0\0?\0?\0DBGDTR_EL0\0DBGDTRRX_EL0\0"; } break;case 4: if(n==0&&m==7) t="DBGVCR32_EL2\0"; break;} break;case 3: switch(k) {case 0: switch(n) {case 0: if(m==0) t="MIDR_EL1\0?\0?\0?\0?\0MPIDR_EL1\0REVIDR_EL1\0?\0ID_PFR0_EL1\0ID_PFR1_EL1\0ID_DFR0_EL1\0ID_AFR0_EL1\0ID_MMFR0_EL1\0ID_MMFR1_EL1\0ID_MMFR2_EL1\0ID_MMFR3_EL1\0ID_ISAR0_EL1\0ID_ISAR1_EL1\0ID_ISAR2_EL1\0ID_ISAR2_EL1\0ID_ISAR3_EL1\0ID_ISAR4_EL1\0ID_ISAR5_EL1\0ID_MMFR4_EL1\0?\0MVFR0_EL1\0MVFR1_EL1\0MVFR2_EL1\0?\0?\0?\0?\0?\0ID_AA64PFR0_EL1\0ID_AA64PFR1_EL1\0?\0?\0ID_AA64ZFR0_EL1\0?\0?\0?\0ID_AA64DFR0_EL1\0ID_AA64DFR1_EL1\0?\0?\0ID_AA64AFR0_EL1\0ID_AA64AFR1_EL1\0?\0?\0ID_AA64ISAR0_EL1\0ID_AA64ISAR1_EL1\0?\0?\0?\0?\0?\0?\0ID_AA64MMFR0_EL1\0ID_AA64MMFR1_EL1\0ID_AA64MMFR2_EL1\0"; break;case 1: switch(m) {case 0: t="SCTLR_EL1\0ACTLR_EL1\0CPACR_EL1\0"; break;case 2: t="ZCR_EL1\0"; break;} break;case 2: if(m==0) t="TTBR0_EL1\0TTBR1_EL1\0TCR_EL1\0"; break;case 4: switch(m) {case 0: t="SPSR_EL1\0ELR_EL1\0"; break;case 1: t="SP_EL0\0"; break;case 2: t="SPSel\0?\0CurrentEL\0PAN\0UAO\0"; break;case 6: t="ICC_PMR_EL1\0"; break;} break;case 5: switch(m) {case 1: t="AFSR0_EL1\0AFSR1_EL1\0"; break;case 2: t="ESR_EL1"; break;case 3: t="ERRIDR_EL1\0ERRSELR_EL1\0"; break;case 4: t="ERXFR_EL1\0ERXCTLR_EL1\0ERXSTATUS_EL1\0ERXADDR_EL1\0"; break;case 5: t="ERXMISC0_EL1\0ERXMISC1_EL1\0"; break;} break;case 6: if(m==0) t="FAR_EL1\0"; break;case 7: if(m==4) t="PAR_EL1\0"; break;case 9: switch(m) {case 9: t="PMSCR_EL1\0?\0PMSICR_EL1\0PMSIRR_EL1\0PMSFCR_EL1\0PMSEVFR_EL1\0PMSLATFR_EL1\0PMSIDR_EL1\0PMSIDR_EL1\0"; break;case 10: t="PMBLIMITR_EL1\0PMBPTR_EL1\0?\0PMBSR_EL1\0?\0?\0?\0PMBIDR_EL1\0"; break;case 14: t="?\0PMINTENSET_EL1\0PMINTENCLR_EL1\0"; break;} break;case 10: if(m==4) t="LORSA_EL1\0LOREA_EL1\0LORN_EL1\0LORC_EL1\0?\0?\0?\0LORID_EL1\0"; else if(m!=4&&j==0) { j=m; t="?\0?\0MAIR_EL1\0AMAIR_EL1\0"; }break;case 12: switch(m) {case 0: t="VBAR_EL1\0RVBAR_EL1\0RMR_EL1\0"; break;case 1: t="ISR_EL1\0DISR_EL1\0"; break;case 8: t="ICC_IAR0_EL1\0ICC_EOIR0_EL1\0ICC_HPPIR0_EL1\0ICC_BPR0_EL1\0ICC_AP0R0_EL1\0ICC_AP0R1_EL1\0ICC_AP0R2_EL1\0ICC_AP0R3_EL1\0"; break;case 9: t="ICC_AP1R0_EL1\0ICC_AP1R1_EL1\0ICC_AP1R2_EL1\0ICC_AP1R3_EL1\0"; break;case 11: t="?\0ICC_DIR_EL1\0?\0ICC_RPR_EL1\0?\0ICC_SGI1R_EL1\0ICC_ASGI1R_EL1\0ICC_SGI0R_EL1\0"; break;case 12: t="ICC_IAR1_EL1\0ICC_EOIR1_EL1\0ICC_HPPIR1_EL1\0ICC_BPR1_EL1\0ICC_CTLR_EL1\0ICC_SRE_EL1\0ICC_IGRPEN0_EL1\0ICC_IGRPEN1_EL1\0"; break;} break;case 13: if(m==0) t="?\0CONTEXTIDR_EL1\0?\0?\0TPIDR_EL1\0"; break;case 14: if(m==1) t="CNTKCTL_EL1\0"; break;} break;case 1: if(n==0&&m==0) t="CCSIDR_EL1\0CLIDR_EL1\0?\0?\0?\0?\0?\0AIDR_EL1\0"; break;case 2: if(n==0&&m==0) t="CSSELR_EL1\0"; break;case 3: switch(n) {case 0: if(m==0) t="?\0CTR_EL0\0?\0?\0?\0?\0?\0DCZID_EL0\0"; break;case 4: switch(m) {case 2: t="NZCV\0DAIF\0"; break;case 4: t="FPCR\0FPSR\0"; break;case 5: t="DSPSR_EL0\0DLR_EL0\0"; break;} break;case 9: switch(m) {case 12: t="PMCR_EL0\0PMCNTENSET_EL0\0PMCNTENCLR_EL0\0PMOVSCLR_EL0\0PMSWINC_EL0\0PMSELR_EL0\0PMCEID0_EL0\0PMCEID1_EL0\0"; break;case 13: t="PMCCNTR_EL0\0PMXEVTYPER_EL0\0PMXEVCNTR_EL0\0"; break;case 14: t="PMUSERENR_EL0\0?\0?\0PMOVSSET_EL0\0"; break;} break;
   83e98:	f0000060 	adrp	x0, 92000 <sd_init+0x470>
   83e9c:	91122000 	add	x0, x0, #0x488
   83ea0:	91112000 	add	x0, x0, #0x448
char *disasm_str(char*s,int n) {if(!s)return "?";while(n){s++;if(!*s){s++;n--;}}return *s?s:"?";};
   83ea4:	17fffdab 	b	83550 <disasm_str.part.0>
case 13: if(m==0) t="?\0?\0TPIDR_EL0\0TPIDRRO_EL0\0"; break;case 14: switch(m) {case 0: t="CNTFRQ_EL0\0CNTPCT_EL0\0CNTVCT_EL0\0"; break;case 2: t="CNTP_TVAL_EL0\0CNTP_CTL_EL0\0CNTP_CVAL_EL0\0"; break;case 3: t="CNTV_TVAL_EL0\0CNTV_CTL_EL0\0CNTV_CVAL_EL0\0"; break;} break;} break;case 4: switch(n) {case 0: if(m==0) t="VPIDR_EL2\0?\0?\0?\0?\0VMPIDR_EL2\0"; break;case 1: switch(m) {case 0: t="SCTLR_EL2\0ACTLR_EL2\0"; break;case 1: t="HCR_EL2\0MDCR_EL2\0CPTR_EL2\0HSTR_EL2\0?\0?\0?\0HACR_EL2\0"; break;case 2: t="ZCR_EL2\0"; break;} break;case 2: switch(m) {case 0: t="TTBR0_EL2\0?\0TCR_EL2\0"; break;case 1: t="VTTBR0_EL2\0?\0VTCR_EL2\0"; break;} break;case 3: if(m==0) t="DACR32_EL2\0"; break;case 4: switch(m) {case 0: t="SPSR_EL2\0ELR_EL2\0"; break;case 1: t="SP_EL1\0"; break;case 3: t="SPSR_irq\0SPSR_abt\0SPSR_und\0SPSR_fiq\0"; break;} break;case 5: switch(m) {case 0: t="?\0IFSR32_EL2\0"; break;case 1: t="AFSR0_EL2\0AFSR1_EL2\0"; break;case 2: t="ESR_EL2\0?\0?\0VSESR_EL2\0"; break;case 3: t="FPEXC32_EL2\0"; break;} break;case 6: if(m==0) t="FAR_EL2\0?\0?\0?\0HPFAR_EL2\0"; break;case 9: if(m==9) t="PMSCR_EL2\0"; break;case 10: switch(m) {case 2: t="MAIR_EL2\0"; break;case 3: t="AMAIR_EL2\0"; break;} break;case 12: switch(m) {case 0: t="VBAR_EL2\0RVBAR_EL2\0RMR_EL2\0"; break;case 1: t="?\0VDISR_EL2\0"; break;case 8: t="ICH_AP0R0_EL2\0ICH_AP0R1_EL2\0ICH_AP0R2_EL2\0ICH_AP0R3_EL2\0"; break;case 9: t="ICH_AP1R0_EL2\0ICH_AP1R1_EL2\0ICH_AP1R2_EL2\0ICH_AP1R3_EL2\0ICC_SRE_EL2\0"; break;case 11: t="ICH_HCR_EL2\0ICH_VTR_EL2\0ICH_MISR_EL2\0ICH_EISR_EL2\0?\0ICH_ELRSR_EL2\0?\0ICH_VMCR_EL2\0"; break;case 12: t="ICH_LR0_EL2\0ICH_LR1_EL2\0ICH_LR2_EL2\0ICH_LR3_EL2\0ICH_LR4_EL2\0ICH_LR5_EL2\0ICH_LR6_EL2\0ICH_LR7_EL2\0"; break;case 13: t="ICH_LR8_EL2\0ICH_LR9_EL2\0ICH_LR10_EL2\0ICH_LR11_EL2\0ICH_LR12_EL2\0ICH_LR13_EL2\0ICH_LR14_EL2\0ICH_LR15_EL2\0"; break;} break;case 13: if(m==0) t="?\0CONTEXTIDR_EL2\0TPIDR_EL2\0"; break;case 14: switch(m) {case 0: t="?\0?\0?\0CNTVOFF_EL2\0"; break;case 1: t="CNTHCTL_EL2\0"; break;case 2: t="CNTHP_TVAL_EL2\0CNTHP_CTL_EL2\0CNTHP_CVAL_EL2\0"; break;case 3: t="CNTHV_TVAL_EL2\0CNTHV_CTL_EL2\0CNTHV_CVAL_EL2\0"; break;} break;} break;case 5: if(n==4&&m==0) t="SPSR_EL12\0ELR_EL12\0"; break;case 6: if(n==4&&m==1) t="SP_EL2\0"; break;case 7: if(n==14&&m==2) t="CNTPS_TVAL_EL1\0CNTPS_CTL_EL1\0CNTPS_CVAL_EL1\0"; break;} break;}return t?disasm_str(t,j):NULL;}
   83ea8:	f0000060 	adrp	x0, 92000 <sd_init+0x470>
   83eac:	91122000 	add	x0, x0, #0x488
   83eb0:	912ee000 	add	x0, x0, #0xbb8
char *disasm_str(char*s,int n) {if(!s)return "?";while(n){s++;if(!*s){s++;n--;}}return *s?s:"?";};
   83eb4:	17fffda7 	b	83550 <disasm_str.part.0>
char *disasm_sysreg(uint8_t p,uint8_t k,uint8_t n,uint8_t m,uint8_t j) {char *t=NULL;switch(p){case 2: switch(k) {case 0: switch(n) {case 0: switch(m) {case 0: t="?\0?\0OSDTRRX_EL1\0"; break;case 2: t="MDCCINT_EL1\0?\0MDSCR_EL1\0"; break;case 3: t="?\0?\0OSDTRTX_EL1\0"; break;case 6: t="?\0?\0OSECCR_EL1\0"; break;default: { n=j; j=m; switch(n) {case 4: t="DBGBVR0_EL1\0DBGBVR1_EL1\0DBGBVR2_EL1\0DBGBVR3_EL1\0DBGBVR4_EL1\0DBGBVR5_EL1\0DBGBVR6_EL1\0DBGBVR7_EL1\0"; break;case 5: t="DBGBCR0_EL1\0DBGBCR1_EL1\0DBGBCR2_EL1\0DBGBCR3_EL1\0DBGBCR4_EL1\0DBGBCR5_EL1\0DBGBCR6_EL1\0DBGBCR7_EL1\0"; break;case 6: t="DBGWVR0_EL1\0DBGWVR1_EL1\0DBGWVR2_EL1\0DBGWVR3_EL1\0DBGWVR4_EL1\0DBGWVR5_EL1\0DBGWVR6_EL1\0DBGWVR7_EL1\0"; break;case 7: t="DBGWCR0_EL1\0DBGWCR1_EL1\0DBGWCR2_EL1\0DBGWCR3_EL1\0DBGWCR4_EL1\0DBGWCR5_EL1\0DBGWCR6_EL1\0DBGWCR7_EL1\0"; break;} break; }} break;case 1: if(m==0) t="MDRAR_EL1\0?\0?\0?\0OSLAR_EL1\0"; else if(j==4) { j=m; t="OSLSR_EL1\0?\0OSDLR_EL1\0DBGPRCR_EL1\0"; }break;case 7: if(j==6) { j=m; t="?\0?\0?\0?\0?\0?\0?\0?\0DBGCLAIMSET_EL1\0DBGCLAIMCLR_EL1\0?\0?\0?\0?\0DBGAUTHSTATUS_EL1\0"; }break;} break;case 3: if(n==0&&j==0) { j=m; t="?\0MDCCSR_EL0\0?\0?\0DBGDTR_EL0\0DBGDTRRX_EL0\0"; } break;case 4: if(n==0&&m==7) t="DBGVCR32_EL2\0"; break;} break;case 3: switch(k) {case 0: switch(n) {case 0: if(m==0) t="MIDR_EL1\0?\0?\0?\0?\0MPIDR_EL1\0REVIDR_EL1\0?\0ID_PFR0_EL1\0ID_PFR1_EL1\0ID_DFR0_EL1\0ID_AFR0_EL1\0ID_MMFR0_EL1\0ID_MMFR1_EL1\0ID_MMFR2_EL1\0ID_MMFR3_EL1\0ID_ISAR0_EL1\0ID_ISAR1_EL1\0ID_ISAR2_EL1\0ID_ISAR2_EL1\0ID_ISAR3_EL1\0ID_ISAR4_EL1\0ID_ISAR5_EL1\0ID_MMFR4_EL1\0?\0MVFR0_EL1\0MVFR1_EL1\0MVFR2_EL1\0?\0?\0?\0?\0?\0ID_AA64PFR0_EL1\0ID_AA64PFR1_EL1\0?\0?\0ID_AA64ZFR0_EL1\0?\0?\0?\0ID_AA64DFR0_EL1\0ID_AA64DFR1_EL1\0?\0?\0ID_AA64AFR0_EL1\0ID_AA64AFR1_EL1\0?\0?\0ID_AA64ISAR0_EL1\0ID_AA64ISAR1_EL1\0?\0?\0?\0?\0?\0?\0ID_AA64MMFR0_EL1\0ID_AA64MMFR1_EL1\0ID_AA64MMFR2_EL1\0"; break;case 1: switch(m) {case 0: t="SCTLR_EL1\0ACTLR_EL1\0CPACR_EL1\0"; break;case 2: t="ZCR_EL1\0"; break;} break;case 2: if(m==0) t="TTBR0_EL1\0TTBR1_EL1\0TCR_EL1\0"; break;case 4: switch(m) {case 0: t="SPSR_EL1\0ELR_EL1\0"; break;case 1: t="SP_EL0\0"; break;case 2: t="SPSel\0?\0CurrentEL\0PAN\0UAO\0"; break;case 6: t="ICC_PMR_EL1\0"; break;} break;case 5: switch(m) {case 1: t="AFSR0_EL1\0AFSR1_EL1\0"; break;case 2: t="ESR_EL1"; break;case 3: t="ERRIDR_EL1\0ERRSELR_EL1\0"; break;case 4: t="ERXFR_EL1\0ERXCTLR_EL1\0ERXSTATUS_EL1\0ERXADDR_EL1\0"; break;case 5: t="ERXMISC0_EL1\0ERXMISC1_EL1\0"; break;} break;case 6: if(m==0) t="FAR_EL1\0"; break;case 7: if(m==4) t="PAR_EL1\0"; break;case 9: switch(m) {case 9: t="PMSCR_EL1\0?\0PMSICR_EL1\0PMSIRR_EL1\0PMSFCR_EL1\0PMSEVFR_EL1\0PMSLATFR_EL1\0PMSIDR_EL1\0PMSIDR_EL1\0"; break;case 10: t="PMBLIMITR_EL1\0PMBPTR_EL1\0?\0PMBSR_EL1\0?\0?\0?\0PMBIDR_EL1\0"; break;case 14: t="?\0PMINTENSET_EL1\0PMINTENCLR_EL1\0"; break;} break;case 10: if(m==4) t="LORSA_EL1\0LOREA_EL1\0LORN_EL1\0LORC_EL1\0?\0?\0?\0LORID_EL1\0"; else if(m!=4&&j==0) { j=m; t="?\0?\0MAIR_EL1\0AMAIR_EL1\0"; }break;case 12: switch(m) {case 0: t="VBAR_EL1\0RVBAR_EL1\0RMR_EL1\0"; break;case 1: t="ISR_EL1\0DISR_EL1\0"; break;case 8: t="ICC_IAR0_EL1\0ICC_EOIR0_EL1\0ICC_HPPIR0_EL1\0ICC_BPR0_EL1\0ICC_AP0R0_EL1\0ICC_AP0R1_EL1\0ICC_AP0R2_EL1\0ICC_AP0R3_EL1\0"; break;case 9: t="ICC_AP1R0_EL1\0ICC_AP1R1_EL1\0ICC_AP1R2_EL1\0ICC_AP1R3_EL1\0"; break;case 11: t="?\0ICC_DIR_EL1\0?\0ICC_RPR_EL1\0?\0ICC_SGI1R_EL1\0ICC_ASGI1R_EL1\0ICC_SGI0R_EL1\0"; break;case 12: t="ICC_IAR1_EL1\0ICC_EOIR1_EL1\0ICC_HPPIR1_EL1\0ICC_BPR1_EL1\0ICC_CTLR_EL1\0ICC_SRE_EL1\0ICC_IGRPEN0_EL1\0ICC_IGRPEN1_EL1\0"; break;} break;case 13: if(m==0) t="?\0CONTEXTIDR_EL1\0?\0?\0TPIDR_EL1\0"; break;case 14: if(m==1) t="CNTKCTL_EL1\0"; break;} break;case 1: if(n==0&&m==0) t="CCSIDR_EL1\0CLIDR_EL1\0?\0?\0?\0?\0?\0AIDR_EL1\0"; break;case 2: if(n==0&&m==0) t="CSSELR_EL1\0"; break;case 3: switch(n) {case 0: if(m==0) t="?\0CTR_EL0\0?\0?\0?\0?\0?\0DCZID_EL0\0"; break;case 4: switch(m) {case 2: t="NZCV\0DAIF\0"; break;case 4: t="FPCR\0FPSR\0"; break;case 5: t="DSPSR_EL0\0DLR_EL0\0"; break;} break;case 9: switch(m) {case 12: t="PMCR_EL0\0PMCNTENSET_EL0\0PMCNTENCLR_EL0\0PMOVSCLR_EL0\0PMSWINC_EL0\0PMSELR_EL0\0PMCEID0_EL0\0PMCEID1_EL0\0"; break;case 13: t="PMCCNTR_EL0\0PMXEVTYPER_EL0\0PMXEVCNTR_EL0\0"; break;case 14: t="PMUSERENR_EL0\0?\0?\0PMOVSSET_EL0\0"; break;} break;
   83eb8:	f0000060 	adrp	x0, 92000 <sd_init+0x470>
   83ebc:	91122000 	add	x0, x0, #0x488
   83ec0:	91092000 	add	x0, x0, #0x248
char *disasm_str(char*s,int n) {if(!s)return "?";while(n){s++;if(!*s){s++;n--;}}return *s?s:"?";};
   83ec4:	17fffda3 	b	83550 <disasm_str.part.0>
case 13: if(m==0) t="?\0?\0TPIDR_EL0\0TPIDRRO_EL0\0"; break;case 14: switch(m) {case 0: t="CNTFRQ_EL0\0CNTPCT_EL0\0CNTVCT_EL0\0"; break;case 2: t="CNTP_TVAL_EL0\0CNTP_CTL_EL0\0CNTP_CVAL_EL0\0"; break;case 3: t="CNTV_TVAL_EL0\0CNTV_CTL_EL0\0CNTV_CVAL_EL0\0"; break;} break;} break;case 4: switch(n) {case 0: if(m==0) t="VPIDR_EL2\0?\0?\0?\0?\0VMPIDR_EL2\0"; break;case 1: switch(m) {case 0: t="SCTLR_EL2\0ACTLR_EL2\0"; break;case 1: t="HCR_EL2\0MDCR_EL2\0CPTR_EL2\0HSTR_EL2\0?\0?\0?\0HACR_EL2\0"; break;case 2: t="ZCR_EL2\0"; break;} break;case 2: switch(m) {case 0: t="TTBR0_EL2\0?\0TCR_EL2\0"; break;case 1: t="VTTBR0_EL2\0?\0VTCR_EL2\0"; break;} break;case 3: if(m==0) t="DACR32_EL2\0"; break;case 4: switch(m) {case 0: t="SPSR_EL2\0ELR_EL2\0"; break;case 1: t="SP_EL1\0"; break;case 3: t="SPSR_irq\0SPSR_abt\0SPSR_und\0SPSR_fiq\0"; break;} break;case 5: switch(m) {case 0: t="?\0IFSR32_EL2\0"; break;case 1: t="AFSR0_EL2\0AFSR1_EL2\0"; break;case 2: t="ESR_EL2\0?\0?\0VSESR_EL2\0"; break;case 3: t="FPEXC32_EL2\0"; break;} break;case 6: if(m==0) t="FAR_EL2\0?\0?\0?\0HPFAR_EL2\0"; break;case 9: if(m==9) t="PMSCR_EL2\0"; break;case 10: switch(m) {case 2: t="MAIR_EL2\0"; break;case 3: t="AMAIR_EL2\0"; break;} break;case 12: switch(m) {case 0: t="VBAR_EL2\0RVBAR_EL2\0RMR_EL2\0"; break;case 1: t="?\0VDISR_EL2\0"; break;case 8: t="ICH_AP0R0_EL2\0ICH_AP0R1_EL2\0ICH_AP0R2_EL2\0ICH_AP0R3_EL2\0"; break;case 9: t="ICH_AP1R0_EL2\0ICH_AP1R1_EL2\0ICH_AP1R2_EL2\0ICH_AP1R3_EL2\0ICC_SRE_EL2\0"; break;case 11: t="ICH_HCR_EL2\0ICH_VTR_EL2\0ICH_MISR_EL2\0ICH_EISR_EL2\0?\0ICH_ELRSR_EL2\0?\0ICH_VMCR_EL2\0"; break;case 12: t="ICH_LR0_EL2\0ICH_LR1_EL2\0ICH_LR2_EL2\0ICH_LR3_EL2\0ICH_LR4_EL2\0ICH_LR5_EL2\0ICH_LR6_EL2\0ICH_LR7_EL2\0"; break;case 13: t="ICH_LR8_EL2\0ICH_LR9_EL2\0ICH_LR10_EL2\0ICH_LR11_EL2\0ICH_LR12_EL2\0ICH_LR13_EL2\0ICH_LR14_EL2\0ICH_LR15_EL2\0"; break;} break;case 13: if(m==0) t="?\0CONTEXTIDR_EL2\0TPIDR_EL2\0"; break;case 14: switch(m) {case 0: t="?\0?\0?\0CNTVOFF_EL2\0"; break;case 1: t="CNTHCTL_EL2\0"; break;case 2: t="CNTHP_TVAL_EL2\0CNTHP_CTL_EL2\0CNTHP_CVAL_EL2\0"; break;case 3: t="CNTHV_TVAL_EL2\0CNTHV_CTL_EL2\0CNTHV_CVAL_EL2\0"; break;} break;} break;case 5: if(n==4&&m==0) t="SPSR_EL12\0ELR_EL12\0"; break;case 6: if(n==4&&m==1) t="SP_EL2\0"; break;case 7: if(n==14&&m==2) t="CNTPS_TVAL_EL1\0CNTPS_CTL_EL1\0CNTPS_CVAL_EL1\0"; break;} break;}return t?disasm_str(t,j):NULL;}
   83ec8:	f0000060 	adrp	x0, 92000 <sd_init+0x470>
   83ecc:	91122000 	add	x0, x0, #0x488
   83ed0:	912aa000 	add	x0, x0, #0xaa8
char *disasm_str(char*s,int n) {if(!s)return "?";while(n){s++;if(!*s){s++;n--;}}return *s?s:"?";};
   83ed4:	17fffd9f 	b	83550 <disasm_str.part.0>
case 13: if(m==0) t="?\0?\0TPIDR_EL0\0TPIDRRO_EL0\0"; break;case 14: switch(m) {case 0: t="CNTFRQ_EL0\0CNTPCT_EL0\0CNTVCT_EL0\0"; break;case 2: t="CNTP_TVAL_EL0\0CNTP_CTL_EL0\0CNTP_CVAL_EL0\0"; break;case 3: t="CNTV_TVAL_EL0\0CNTV_CTL_EL0\0CNTV_CVAL_EL0\0"; break;} break;} break;case 4: switch(n) {case 0: if(m==0) t="VPIDR_EL2\0?\0?\0?\0?\0VMPIDR_EL2\0"; break;case 1: switch(m) {case 0: t="SCTLR_EL2\0ACTLR_EL2\0"; break;case 1: t="HCR_EL2\0MDCR_EL2\0CPTR_EL2\0HSTR_EL2\0?\0?\0?\0HACR_EL2\0"; break;case 2: t="ZCR_EL2\0"; break;} break;case 2: switch(m) {case 0: t="TTBR0_EL2\0?\0TCR_EL2\0"; break;case 1: t="VTTBR0_EL2\0?\0VTCR_EL2\0"; break;} break;case 3: if(m==0) t="DACR32_EL2\0"; break;case 4: switch(m) {case 0: t="SPSR_EL2\0ELR_EL2\0"; break;case 1: t="SP_EL1\0"; break;case 3: t="SPSR_irq\0SPSR_abt\0SPSR_und\0SPSR_fiq\0"; break;} break;case 5: switch(m) {case 0: t="?\0IFSR32_EL2\0"; break;case 1: t="AFSR0_EL2\0AFSR1_EL2\0"; break;case 2: t="ESR_EL2\0?\0?\0VSESR_EL2\0"; break;case 3: t="FPEXC32_EL2\0"; break;} break;case 6: if(m==0) t="FAR_EL2\0?\0?\0?\0HPFAR_EL2\0"; break;case 9: if(m==9) t="PMSCR_EL2\0"; break;case 10: switch(m) {case 2: t="MAIR_EL2\0"; break;case 3: t="AMAIR_EL2\0"; break;} break;case 12: switch(m) {case 0: t="VBAR_EL2\0RVBAR_EL2\0RMR_EL2\0"; break;case 1: t="?\0VDISR_EL2\0"; break;case 8: t="ICH_AP0R0_EL2\0ICH_AP0R1_EL2\0ICH_AP0R2_EL2\0ICH_AP0R3_EL2\0"; break;case 9: t="ICH_AP1R0_EL2\0ICH_AP1R1_EL2\0ICH_AP1R2_EL2\0ICH_AP1R3_EL2\0ICC_SRE_EL2\0"; break;case 11: t="ICH_HCR_EL2\0ICH_VTR_EL2\0ICH_MISR_EL2\0ICH_EISR_EL2\0?\0ICH_ELRSR_EL2\0?\0ICH_VMCR_EL2\0"; break;case 12: t="ICH_LR0_EL2\0ICH_LR1_EL2\0ICH_LR2_EL2\0ICH_LR3_EL2\0ICH_LR4_EL2\0ICH_LR5_EL2\0ICH_LR6_EL2\0ICH_LR7_EL2\0"; break;case 13: t="ICH_LR8_EL2\0ICH_LR9_EL2\0ICH_LR10_EL2\0ICH_LR11_EL2\0ICH_LR12_EL2\0ICH_LR13_EL2\0ICH_LR14_EL2\0ICH_LR15_EL2\0"; break;} break;case 13: if(m==0) t="?\0CONTEXTIDR_EL2\0TPIDR_EL2\0"; break;case 14: switch(m) {case 0: t="?\0?\0?\0CNTVOFF_EL2\0"; break;case 1: t="CNTHCTL_EL2\0"; break;case 2: t="CNTHP_TVAL_EL2\0CNTHP_CTL_EL2\0CNTHP_CVAL_EL2\0"; break;case 3: t="CNTHV_TVAL_EL2\0CNTHV_CTL_EL2\0CNTHV_CVAL_EL2\0"; break;} break;} break;case 5: if(n==4&&m==0) t="SPSR_EL12\0ELR_EL12\0"; break;case 6: if(n==4&&m==1) t="SP_EL2\0"; break;case 7: if(n==14&&m==2) t="CNTPS_TVAL_EL1\0CNTPS_CTL_EL1\0CNTPS_CVAL_EL1\0"; break;} break;}return t?disasm_str(t,j):NULL;}
   83ed8:	f0000060 	adrp	x0, 92000 <sd_init+0x470>
   83edc:	91122000 	add	x0, x0, #0x488
   83ee0:	91020000 	add	x0, x0, #0x80
char *disasm_str(char*s,int n) {if(!s)return "?";while(n){s++;if(!*s){s++;n--;}}return *s?s:"?";};
   83ee4:	17fffd9b 	b	83550 <disasm_str.part.0>
case 13: if(m==0) t="?\0?\0TPIDR_EL0\0TPIDRRO_EL0\0"; break;case 14: switch(m) {case 0: t="CNTFRQ_EL0\0CNTPCT_EL0\0CNTVCT_EL0\0"; break;case 2: t="CNTP_TVAL_EL0\0CNTP_CTL_EL0\0CNTP_CVAL_EL0\0"; break;case 3: t="CNTV_TVAL_EL0\0CNTV_CTL_EL0\0CNTV_CVAL_EL0\0"; break;} break;} break;case 4: switch(n) {case 0: if(m==0) t="VPIDR_EL2\0?\0?\0?\0?\0VMPIDR_EL2\0"; break;case 1: switch(m) {case 0: t="SCTLR_EL2\0ACTLR_EL2\0"; break;case 1: t="HCR_EL2\0MDCR_EL2\0CPTR_EL2\0HSTR_EL2\0?\0?\0?\0HACR_EL2\0"; break;case 2: t="ZCR_EL2\0"; break;} break;case 2: switch(m) {case 0: t="TTBR0_EL2\0?\0TCR_EL2\0"; break;case 1: t="VTTBR0_EL2\0?\0VTCR_EL2\0"; break;} break;case 3: if(m==0) t="DACR32_EL2\0"; break;case 4: switch(m) {case 0: t="SPSR_EL2\0ELR_EL2\0"; break;case 1: t="SP_EL1\0"; break;case 3: t="SPSR_irq\0SPSR_abt\0SPSR_und\0SPSR_fiq\0"; break;} break;case 5: switch(m) {case 0: t="?\0IFSR32_EL2\0"; break;case 1: t="AFSR0_EL2\0AFSR1_EL2\0"; break;case 2: t="ESR_EL2\0?\0?\0VSESR_EL2\0"; break;case 3: t="FPEXC32_EL2\0"; break;} break;case 6: if(m==0) t="FAR_EL2\0?\0?\0?\0HPFAR_EL2\0"; break;case 9: if(m==9) t="PMSCR_EL2\0"; break;case 10: switch(m) {case 2: t="MAIR_EL2\0"; break;case 3: t="AMAIR_EL2\0"; break;} break;case 12: switch(m) {case 0: t="VBAR_EL2\0RVBAR_EL2\0RMR_EL2\0"; break;case 1: t="?\0VDISR_EL2\0"; break;case 8: t="ICH_AP0R0_EL2\0ICH_AP0R1_EL2\0ICH_AP0R2_EL2\0ICH_AP0R3_EL2\0"; break;case 9: t="ICH_AP1R0_EL2\0ICH_AP1R1_EL2\0ICH_AP1R2_EL2\0ICH_AP1R3_EL2\0ICC_SRE_EL2\0"; break;case 11: t="ICH_HCR_EL2\0ICH_VTR_EL2\0ICH_MISR_EL2\0ICH_EISR_EL2\0?\0ICH_ELRSR_EL2\0?\0ICH_VMCR_EL2\0"; break;case 12: t="ICH_LR0_EL2\0ICH_LR1_EL2\0ICH_LR2_EL2\0ICH_LR3_EL2\0ICH_LR4_EL2\0ICH_LR5_EL2\0ICH_LR6_EL2\0ICH_LR7_EL2\0"; break;case 13: t="ICH_LR8_EL2\0ICH_LR9_EL2\0ICH_LR10_EL2\0ICH_LR11_EL2\0ICH_LR12_EL2\0ICH_LR13_EL2\0ICH_LR14_EL2\0ICH_LR15_EL2\0"; break;} break;case 13: if(m==0) t="?\0CONTEXTIDR_EL2\0TPIDR_EL2\0"; break;case 14: switch(m) {case 0: t="?\0?\0?\0CNTVOFF_EL2\0"; break;case 1: t="CNTHCTL_EL2\0"; break;case 2: t="CNTHP_TVAL_EL2\0CNTHP_CTL_EL2\0CNTHP_CVAL_EL2\0"; break;case 3: t="CNTHV_TVAL_EL2\0CNTHV_CTL_EL2\0CNTHV_CVAL_EL2\0"; break;} break;} break;case 5: if(n==4&&m==0) t="SPSR_EL12\0ELR_EL12\0"; break;case 6: if(n==4&&m==1) t="SP_EL2\0"; break;case 7: if(n==14&&m==2) t="CNTPS_TVAL_EL1\0CNTPS_CTL_EL1\0CNTPS_CVAL_EL1\0"; break;} break;}return t?disasm_str(t,j):NULL;}
   83ee8:	f0000060 	adrp	x0, 92000 <sd_init+0x470>
   83eec:	91122000 	add	x0, x0, #0x488
   83ef0:	9101c000 	add	x0, x0, #0x70
char *disasm_str(char*s,int n) {if(!s)return "?";while(n){s++;if(!*s){s++;n--;}}return *s?s:"?";};
   83ef4:	17fffd97 	b	83550 <disasm_str.part.0>
case 13: if(m==0) t="?\0?\0TPIDR_EL0\0TPIDRRO_EL0\0"; break;case 14: switch(m) {case 0: t="CNTFRQ_EL0\0CNTPCT_EL0\0CNTVCT_EL0\0"; break;case 2: t="CNTP_TVAL_EL0\0CNTP_CTL_EL0\0CNTP_CVAL_EL0\0"; break;case 3: t="CNTV_TVAL_EL0\0CNTV_CTL_EL0\0CNTV_CVAL_EL0\0"; break;} break;} break;case 4: switch(n) {case 0: if(m==0) t="VPIDR_EL2\0?\0?\0?\0?\0VMPIDR_EL2\0"; break;case 1: switch(m) {case 0: t="SCTLR_EL2\0ACTLR_EL2\0"; break;case 1: t="HCR_EL2\0MDCR_EL2\0CPTR_EL2\0HSTR_EL2\0?\0?\0?\0HACR_EL2\0"; break;case 2: t="ZCR_EL2\0"; break;} break;case 2: switch(m) {case 0: t="TTBR0_EL2\0?\0TCR_EL2\0"; break;case 1: t="VTTBR0_EL2\0?\0VTCR_EL2\0"; break;} break;case 3: if(m==0) t="DACR32_EL2\0"; break;case 4: switch(m) {case 0: t="SPSR_EL2\0ELR_EL2\0"; break;case 1: t="SP_EL1\0"; break;case 3: t="SPSR_irq\0SPSR_abt\0SPSR_und\0SPSR_fiq\0"; break;} break;case 5: switch(m) {case 0: t="?\0IFSR32_EL2\0"; break;case 1: t="AFSR0_EL2\0AFSR1_EL2\0"; break;case 2: t="ESR_EL2\0?\0?\0VSESR_EL2\0"; break;case 3: t="FPEXC32_EL2\0"; break;} break;case 6: if(m==0) t="FAR_EL2\0?\0?\0?\0HPFAR_EL2\0"; break;case 9: if(m==9) t="PMSCR_EL2\0"; break;case 10: switch(m) {case 2: t="MAIR_EL2\0"; break;case 3: t="AMAIR_EL2\0"; break;} break;case 12: switch(m) {case 0: t="VBAR_EL2\0RVBAR_EL2\0RMR_EL2\0"; break;case 1: t="?\0VDISR_EL2\0"; break;case 8: t="ICH_AP0R0_EL2\0ICH_AP0R1_EL2\0ICH_AP0R2_EL2\0ICH_AP0R3_EL2\0"; break;case 9: t="ICH_AP1R0_EL2\0ICH_AP1R1_EL2\0ICH_AP1R2_EL2\0ICH_AP1R3_EL2\0ICC_SRE_EL2\0"; break;case 11: t="ICH_HCR_EL2\0ICH_VTR_EL2\0ICH_MISR_EL2\0ICH_EISR_EL2\0?\0ICH_ELRSR_EL2\0?\0ICH_VMCR_EL2\0"; break;case 12: t="ICH_LR0_EL2\0ICH_LR1_EL2\0ICH_LR2_EL2\0ICH_LR3_EL2\0ICH_LR4_EL2\0ICH_LR5_EL2\0ICH_LR6_EL2\0ICH_LR7_EL2\0"; break;case 13: t="ICH_LR8_EL2\0ICH_LR9_EL2\0ICH_LR10_EL2\0ICH_LR11_EL2\0ICH_LR12_EL2\0ICH_LR13_EL2\0ICH_LR14_EL2\0ICH_LR15_EL2\0"; break;} break;case 13: if(m==0) t="?\0CONTEXTIDR_EL2\0TPIDR_EL2\0"; break;case 14: switch(m) {case 0: t="?\0?\0?\0CNTVOFF_EL2\0"; break;case 1: t="CNTHCTL_EL2\0"; break;case 2: t="CNTHP_TVAL_EL2\0CNTHP_CTL_EL2\0CNTHP_CVAL_EL2\0"; break;case 3: t="CNTHV_TVAL_EL2\0CNTHV_CTL_EL2\0CNTHV_CVAL_EL2\0"; break;} break;} break;case 5: if(n==4&&m==0) t="SPSR_EL12\0ELR_EL12\0"; break;case 6: if(n==4&&m==1) t="SP_EL2\0"; break;case 7: if(n==14&&m==2) t="CNTPS_TVAL_EL1\0CNTPS_CTL_EL1\0CNTPS_CVAL_EL1\0"; break;} break;}return t?disasm_str(t,j):NULL;}
   83ef8:	f0000060 	adrp	x0, 92000 <sd_init+0x470>
   83efc:	91122000 	add	x0, x0, #0x488
   83f00:	912f2000 	add	x0, x0, #0xbc8
char *disasm_str(char*s,int n) {if(!s)return "?";while(n){s++;if(!*s){s++;n--;}}return *s?s:"?";};
   83f04:	17fffd93 	b	83550 <disasm_str.part.0>
char *disasm_sysreg(uint8_t p,uint8_t k,uint8_t n,uint8_t m,uint8_t j) {char *t=NULL;switch(p){case 2: switch(k) {case 0: switch(n) {case 0: switch(m) {case 0: t="?\0?\0OSDTRRX_EL1\0"; break;case 2: t="MDCCINT_EL1\0?\0MDSCR_EL1\0"; break;case 3: t="?\0?\0OSDTRTX_EL1\0"; break;case 6: t="?\0?\0OSECCR_EL1\0"; break;default: { n=j; j=m; switch(n) {case 4: t="DBGBVR0_EL1\0DBGBVR1_EL1\0DBGBVR2_EL1\0DBGBVR3_EL1\0DBGBVR4_EL1\0DBGBVR5_EL1\0DBGBVR6_EL1\0DBGBVR7_EL1\0"; break;case 5: t="DBGBCR0_EL1\0DBGBCR1_EL1\0DBGBCR2_EL1\0DBGBCR3_EL1\0DBGBCR4_EL1\0DBGBCR5_EL1\0DBGBCR6_EL1\0DBGBCR7_EL1\0"; break;case 6: t="DBGWVR0_EL1\0DBGWVR1_EL1\0DBGWVR2_EL1\0DBGWVR3_EL1\0DBGWVR4_EL1\0DBGWVR5_EL1\0DBGWVR6_EL1\0DBGWVR7_EL1\0"; break;case 7: t="DBGWCR0_EL1\0DBGWCR1_EL1\0DBGWCR2_EL1\0DBGWCR3_EL1\0DBGWCR4_EL1\0DBGWCR5_EL1\0DBGWCR6_EL1\0DBGWCR7_EL1\0"; break;} break; }} break;case 1: if(m==0) t="MDRAR_EL1\0?\0?\0?\0OSLAR_EL1\0"; else if(j==4) { j=m; t="OSLSR_EL1\0?\0OSDLR_EL1\0DBGPRCR_EL1\0"; }break;case 7: if(j==6) { j=m; t="?\0?\0?\0?\0?\0?\0?\0?\0DBGCLAIMSET_EL1\0DBGCLAIMCLR_EL1\0?\0?\0?\0?\0DBGAUTHSTATUS_EL1\0"; }break;} break;case 3: if(n==0&&j==0) { j=m; t="?\0MDCCSR_EL0\0?\0?\0DBGDTR_EL0\0DBGDTRRX_EL0\0"; } break;case 4: if(n==0&&m==7) t="DBGVCR32_EL2\0"; break;} break;case 3: switch(k) {case 0: switch(n) {case 0: if(m==0) t="MIDR_EL1\0?\0?\0?\0?\0MPIDR_EL1\0REVIDR_EL1\0?\0ID_PFR0_EL1\0ID_PFR1_EL1\0ID_DFR0_EL1\0ID_AFR0_EL1\0ID_MMFR0_EL1\0ID_MMFR1_EL1\0ID_MMFR2_EL1\0ID_MMFR3_EL1\0ID_ISAR0_EL1\0ID_ISAR1_EL1\0ID_ISAR2_EL1\0ID_ISAR2_EL1\0ID_ISAR3_EL1\0ID_ISAR4_EL1\0ID_ISAR5_EL1\0ID_MMFR4_EL1\0?\0MVFR0_EL1\0MVFR1_EL1\0MVFR2_EL1\0?\0?\0?\0?\0?\0ID_AA64PFR0_EL1\0ID_AA64PFR1_EL1\0?\0?\0ID_AA64ZFR0_EL1\0?\0?\0?\0ID_AA64DFR0_EL1\0ID_AA64DFR1_EL1\0?\0?\0ID_AA64AFR0_EL1\0ID_AA64AFR1_EL1\0?\0?\0ID_AA64ISAR0_EL1\0ID_AA64ISAR1_EL1\0?\0?\0?\0?\0?\0?\0ID_AA64MMFR0_EL1\0ID_AA64MMFR1_EL1\0ID_AA64MMFR2_EL1\0"; break;case 1: switch(m) {case 0: t="SCTLR_EL1\0ACTLR_EL1\0CPACR_EL1\0"; break;case 2: t="ZCR_EL1\0"; break;} break;case 2: if(m==0) t="TTBR0_EL1\0TTBR1_EL1\0TCR_EL1\0"; break;case 4: switch(m) {case 0: t="SPSR_EL1\0ELR_EL1\0"; break;case 1: t="SP_EL0\0"; break;case 2: t="SPSel\0?\0CurrentEL\0PAN\0UAO\0"; break;case 6: t="ICC_PMR_EL1\0"; break;} break;case 5: switch(m) {case 1: t="AFSR0_EL1\0AFSR1_EL1\0"; break;case 2: t="ESR_EL1"; break;case 3: t="ERRIDR_EL1\0ERRSELR_EL1\0"; break;case 4: t="ERXFR_EL1\0ERXCTLR_EL1\0ERXSTATUS_EL1\0ERXADDR_EL1\0"; break;case 5: t="ERXMISC0_EL1\0ERXMISC1_EL1\0"; break;} break;case 6: if(m==0) t="FAR_EL1\0"; break;case 7: if(m==4) t="PAR_EL1\0"; break;case 9: switch(m) {case 9: t="PMSCR_EL1\0?\0PMSICR_EL1\0PMSIRR_EL1\0PMSFCR_EL1\0PMSEVFR_EL1\0PMSLATFR_EL1\0PMSIDR_EL1\0PMSIDR_EL1\0"; break;case 10: t="PMBLIMITR_EL1\0PMBPTR_EL1\0?\0PMBSR_EL1\0?\0?\0?\0PMBIDR_EL1\0"; break;case 14: t="?\0PMINTENSET_EL1\0PMINTENCLR_EL1\0"; break;} break;case 10: if(m==4) t="LORSA_EL1\0LOREA_EL1\0LORN_EL1\0LORC_EL1\0?\0?\0?\0LORID_EL1\0"; else if(m!=4&&j==0) { j=m; t="?\0?\0MAIR_EL1\0AMAIR_EL1\0"; }break;case 12: switch(m) {case 0: t="VBAR_EL1\0RVBAR_EL1\0RMR_EL1\0"; break;case 1: t="ISR_EL1\0DISR_EL1\0"; break;case 8: t="ICC_IAR0_EL1\0ICC_EOIR0_EL1\0ICC_HPPIR0_EL1\0ICC_BPR0_EL1\0ICC_AP0R0_EL1\0ICC_AP0R1_EL1\0ICC_AP0R2_EL1\0ICC_AP0R3_EL1\0"; break;case 9: t="ICC_AP1R0_EL1\0ICC_AP1R1_EL1\0ICC_AP1R2_EL1\0ICC_AP1R3_EL1\0"; break;case 11: t="?\0ICC_DIR_EL1\0?\0ICC_RPR_EL1\0?\0ICC_SGI1R_EL1\0ICC_ASGI1R_EL1\0ICC_SGI0R_EL1\0"; break;case 12: t="ICC_IAR1_EL1\0ICC_EOIR1_EL1\0ICC_HPPIR1_EL1\0ICC_BPR1_EL1\0ICC_CTLR_EL1\0ICC_SRE_EL1\0ICC_IGRPEN0_EL1\0ICC_IGRPEN1_EL1\0"; break;} break;case 13: if(m==0) t="?\0CONTEXTIDR_EL1\0?\0?\0TPIDR_EL1\0"; break;case 14: if(m==1) t="CNTKCTL_EL1\0"; break;} break;case 1: if(n==0&&m==0) t="CCSIDR_EL1\0CLIDR_EL1\0?\0?\0?\0?\0?\0AIDR_EL1\0"; break;case 2: if(n==0&&m==0) t="CSSELR_EL1\0"; break;case 3: switch(n) {case 0: if(m==0) t="?\0CTR_EL0\0?\0?\0?\0?\0?\0DCZID_EL0\0"; break;case 4: switch(m) {case 2: t="NZCV\0DAIF\0"; break;case 4: t="FPCR\0FPSR\0"; break;case 5: t="DSPSR_EL0\0DLR_EL0\0"; break;} break;case 9: switch(m) {case 12: t="PMCR_EL0\0PMCNTENSET_EL0\0PMCNTENCLR_EL0\0PMOVSCLR_EL0\0PMSWINC_EL0\0PMSELR_EL0\0PMCEID0_EL0\0PMCEID1_EL0\0"; break;case 13: t="PMCCNTR_EL0\0PMXEVTYPER_EL0\0PMXEVCNTR_EL0\0"; break;case 14: t="PMUSERENR_EL0\0?\0?\0PMOVSSET_EL0\0"; break;} break;
   83f08:	f0000060 	adrp	x0, 92000 <sd_init+0x470>
   83f0c:	91122000 	add	x0, x0, #0x488
   83f10:	910ae000 	add	x0, x0, #0x2b8
char *disasm_str(char*s,int n) {if(!s)return "?";while(n){s++;if(!*s){s++;n--;}}return *s?s:"?";};
   83f14:	17fffd8f 	b	83550 <disasm_str.part.0>
char *disasm_sysreg(uint8_t p,uint8_t k,uint8_t n,uint8_t m,uint8_t j) {char *t=NULL;switch(p){case 2: switch(k) {case 0: switch(n) {case 0: switch(m) {case 0: t="?\0?\0OSDTRRX_EL1\0"; break;case 2: t="MDCCINT_EL1\0?\0MDSCR_EL1\0"; break;case 3: t="?\0?\0OSDTRTX_EL1\0"; break;case 6: t="?\0?\0OSECCR_EL1\0"; break;default: { n=j; j=m; switch(n) {case 4: t="DBGBVR0_EL1\0DBGBVR1_EL1\0DBGBVR2_EL1\0DBGBVR3_EL1\0DBGBVR4_EL1\0DBGBVR5_EL1\0DBGBVR6_EL1\0DBGBVR7_EL1\0"; break;case 5: t="DBGBCR0_EL1\0DBGBCR1_EL1\0DBGBCR2_EL1\0DBGBCR3_EL1\0DBGBCR4_EL1\0DBGBCR5_EL1\0DBGBCR6_EL1\0DBGBCR7_EL1\0"; break;case 6: t="DBGWVR0_EL1\0DBGWVR1_EL1\0DBGWVR2_EL1\0DBGWVR3_EL1\0DBGWVR4_EL1\0DBGWVR5_EL1\0DBGWVR6_EL1\0DBGWVR7_EL1\0"; break;case 7: t="DBGWCR0_EL1\0DBGWCR1_EL1\0DBGWCR2_EL1\0DBGWCR3_EL1\0DBGWCR4_EL1\0DBGWCR5_EL1\0DBGWCR6_EL1\0DBGWCR7_EL1\0"; break;} break; }} break;case 1: if(m==0) t="MDRAR_EL1\0?\0?\0?\0OSLAR_EL1\0"; else if(j==4) { j=m; t="OSLSR_EL1\0?\0OSDLR_EL1\0DBGPRCR_EL1\0"; }break;case 7: if(j==6) { j=m; t="?\0?\0?\0?\0?\0?\0?\0?\0DBGCLAIMSET_EL1\0DBGCLAIMCLR_EL1\0?\0?\0?\0?\0DBGAUTHSTATUS_EL1\0"; }break;} break;case 3: if(n==0&&j==0) { j=m; t="?\0MDCCSR_EL0\0?\0?\0DBGDTR_EL0\0DBGDTRRX_EL0\0"; } break;case 4: if(n==0&&m==7) t="DBGVCR32_EL2\0"; break;} break;case 3: switch(k) {case 0: switch(n) {case 0: if(m==0) t="MIDR_EL1\0?\0?\0?\0?\0MPIDR_EL1\0REVIDR_EL1\0?\0ID_PFR0_EL1\0ID_PFR1_EL1\0ID_DFR0_EL1\0ID_AFR0_EL1\0ID_MMFR0_EL1\0ID_MMFR1_EL1\0ID_MMFR2_EL1\0ID_MMFR3_EL1\0ID_ISAR0_EL1\0ID_ISAR1_EL1\0ID_ISAR2_EL1\0ID_ISAR2_EL1\0ID_ISAR3_EL1\0ID_ISAR4_EL1\0ID_ISAR5_EL1\0ID_MMFR4_EL1\0?\0MVFR0_EL1\0MVFR1_EL1\0MVFR2_EL1\0?\0?\0?\0?\0?\0ID_AA64PFR0_EL1\0ID_AA64PFR1_EL1\0?\0?\0ID_AA64ZFR0_EL1\0?\0?\0?\0ID_AA64DFR0_EL1\0ID_AA64DFR1_EL1\0?\0?\0ID_AA64AFR0_EL1\0ID_AA64AFR1_EL1\0?\0?\0ID_AA64ISAR0_EL1\0ID_AA64ISAR1_EL1\0?\0?\0?\0?\0?\0?\0ID_AA64MMFR0_EL1\0ID_AA64MMFR1_EL1\0ID_AA64MMFR2_EL1\0"; break;case 1: switch(m) {case 0: t="SCTLR_EL1\0ACTLR_EL1\0CPACR_EL1\0"; break;case 2: t="ZCR_EL1\0"; break;} break;case 2: if(m==0) t="TTBR0_EL1\0TTBR1_EL1\0TCR_EL1\0"; break;case 4: switch(m) {case 0: t="SPSR_EL1\0ELR_EL1\0"; break;case 1: t="SP_EL0\0"; break;case 2: t="SPSel\0?\0CurrentEL\0PAN\0UAO\0"; break;case 6: t="ICC_PMR_EL1\0"; break;} break;case 5: switch(m) {case 1: t="AFSR0_EL1\0AFSR1_EL1\0"; break;case 2: t="ESR_EL1"; break;case 3: t="ERRIDR_EL1\0ERRSELR_EL1\0"; break;case 4: t="ERXFR_EL1\0ERXCTLR_EL1\0ERXSTATUS_EL1\0ERXADDR_EL1\0"; break;case 5: t="ERXMISC0_EL1\0ERXMISC1_EL1\0"; break;} break;case 6: if(m==0) t="FAR_EL1\0"; break;case 7: if(m==4) t="PAR_EL1\0"; break;case 9: switch(m) {case 9: t="PMSCR_EL1\0?\0PMSICR_EL1\0PMSIRR_EL1\0PMSFCR_EL1\0PMSEVFR_EL1\0PMSLATFR_EL1\0PMSIDR_EL1\0PMSIDR_EL1\0"; break;case 10: t="PMBLIMITR_EL1\0PMBPTR_EL1\0?\0PMBSR_EL1\0?\0?\0?\0PMBIDR_EL1\0"; break;case 14: t="?\0PMINTENSET_EL1\0PMINTENCLR_EL1\0"; break;} break;case 10: if(m==4) t="LORSA_EL1\0LOREA_EL1\0LORN_EL1\0LORC_EL1\0?\0?\0?\0LORID_EL1\0"; else if(m!=4&&j==0) { j=m; t="?\0?\0MAIR_EL1\0AMAIR_EL1\0"; }break;case 12: switch(m) {case 0: t="VBAR_EL1\0RVBAR_EL1\0RMR_EL1\0"; break;case 1: t="ISR_EL1\0DISR_EL1\0"; break;case 8: t="ICC_IAR0_EL1\0ICC_EOIR0_EL1\0ICC_HPPIR0_EL1\0ICC_BPR0_EL1\0ICC_AP0R0_EL1\0ICC_AP0R1_EL1\0ICC_AP0R2_EL1\0ICC_AP0R3_EL1\0"; break;case 9: t="ICC_AP1R0_EL1\0ICC_AP1R1_EL1\0ICC_AP1R2_EL1\0ICC_AP1R3_EL1\0"; break;case 11: t="?\0ICC_DIR_EL1\0?\0ICC_RPR_EL1\0?\0ICC_SGI1R_EL1\0ICC_ASGI1R_EL1\0ICC_SGI0R_EL1\0"; break;case 12: t="ICC_IAR1_EL1\0ICC_EOIR1_EL1\0ICC_HPPIR1_EL1\0ICC_BPR1_EL1\0ICC_CTLR_EL1\0ICC_SRE_EL1\0ICC_IGRPEN0_EL1\0ICC_IGRPEN1_EL1\0"; break;} break;case 13: if(m==0) t="?\0CONTEXTIDR_EL1\0?\0?\0TPIDR_EL1\0"; break;case 14: if(m==1) t="CNTKCTL_EL1\0"; break;} break;case 1: if(n==0&&m==0) t="CCSIDR_EL1\0CLIDR_EL1\0?\0?\0?\0?\0?\0AIDR_EL1\0"; break;case 2: if(n==0&&m==0) t="CSSELR_EL1\0"; break;case 3: switch(n) {case 0: if(m==0) t="?\0CTR_EL0\0?\0?\0?\0?\0?\0DCZID_EL0\0"; break;case 4: switch(m) {case 2: t="NZCV\0DAIF\0"; break;case 4: t="FPCR\0FPSR\0"; break;case 5: t="DSPSR_EL0\0DLR_EL0\0"; break;} break;case 9: switch(m) {case 12: t="PMCR_EL0\0PMCNTENSET_EL0\0PMCNTENCLR_EL0\0PMOVSCLR_EL0\0PMSWINC_EL0\0PMSELR_EL0\0PMCEID0_EL0\0PMCEID1_EL0\0"; break;case 13: t="PMCCNTR_EL0\0PMXEVTYPER_EL0\0PMXEVCNTR_EL0\0"; break;case 14: t="PMUSERENR_EL0\0?\0?\0PMOVSSET_EL0\0"; break;} break;
   83f18:	f0000060 	adrp	x0, 92000 <sd_init+0x470>
   83f1c:	91122000 	add	x0, x0, #0x488
   83f20:	910b0000 	add	x0, x0, #0x2c0
char *disasm_str(char*s,int n) {if(!s)return "?";while(n){s++;if(!*s){s++;n--;}}return *s?s:"?";};
   83f24:	17fffd8b 	b	83550 <disasm_str.part.0>
char *disasm_sysreg(uint8_t p,uint8_t k,uint8_t n,uint8_t m,uint8_t j) {char *t=NULL;switch(p){case 2: switch(k) {case 0: switch(n) {case 0: switch(m) {case 0: t="?\0?\0OSDTRRX_EL1\0"; break;case 2: t="MDCCINT_EL1\0?\0MDSCR_EL1\0"; break;case 3: t="?\0?\0OSDTRTX_EL1\0"; break;case 6: t="?\0?\0OSECCR_EL1\0"; break;default: { n=j; j=m; switch(n) {case 4: t="DBGBVR0_EL1\0DBGBVR1_EL1\0DBGBVR2_EL1\0DBGBVR3_EL1\0DBGBVR4_EL1\0DBGBVR5_EL1\0DBGBVR6_EL1\0DBGBVR7_EL1\0"; break;case 5: t="DBGBCR0_EL1\0DBGBCR1_EL1\0DBGBCR2_EL1\0DBGBCR3_EL1\0DBGBCR4_EL1\0DBGBCR5_EL1\0DBGBCR6_EL1\0DBGBCR7_EL1\0"; break;case 6: t="DBGWVR0_EL1\0DBGWVR1_EL1\0DBGWVR2_EL1\0DBGWVR3_EL1\0DBGWVR4_EL1\0DBGWVR5_EL1\0DBGWVR6_EL1\0DBGWVR7_EL1\0"; break;case 7: t="DBGWCR0_EL1\0DBGWCR1_EL1\0DBGWCR2_EL1\0DBGWCR3_EL1\0DBGWCR4_EL1\0DBGWCR5_EL1\0DBGWCR6_EL1\0DBGWCR7_EL1\0"; break;} break; }} break;case 1: if(m==0) t="MDRAR_EL1\0?\0?\0?\0OSLAR_EL1\0"; else if(j==4) { j=m; t="OSLSR_EL1\0?\0OSDLR_EL1\0DBGPRCR_EL1\0"; }break;case 7: if(j==6) { j=m; t="?\0?\0?\0?\0?\0?\0?\0?\0DBGCLAIMSET_EL1\0DBGCLAIMCLR_EL1\0?\0?\0?\0?\0DBGAUTHSTATUS_EL1\0"; }break;} break;case 3: if(n==0&&j==0) { j=m; t="?\0MDCCSR_EL0\0?\0?\0DBGDTR_EL0\0DBGDTRRX_EL0\0"; } break;case 4: if(n==0&&m==7) t="DBGVCR32_EL2\0"; break;} break;case 3: switch(k) {case 0: switch(n) {case 0: if(m==0) t="MIDR_EL1\0?\0?\0?\0?\0MPIDR_EL1\0REVIDR_EL1\0?\0ID_PFR0_EL1\0ID_PFR1_EL1\0ID_DFR0_EL1\0ID_AFR0_EL1\0ID_MMFR0_EL1\0ID_MMFR1_EL1\0ID_MMFR2_EL1\0ID_MMFR3_EL1\0ID_ISAR0_EL1\0ID_ISAR1_EL1\0ID_ISAR2_EL1\0ID_ISAR2_EL1\0ID_ISAR3_EL1\0ID_ISAR4_EL1\0ID_ISAR5_EL1\0ID_MMFR4_EL1\0?\0MVFR0_EL1\0MVFR1_EL1\0MVFR2_EL1\0?\0?\0?\0?\0?\0ID_AA64PFR0_EL1\0ID_AA64PFR1_EL1\0?\0?\0ID_AA64ZFR0_EL1\0?\0?\0?\0ID_AA64DFR0_EL1\0ID_AA64DFR1_EL1\0?\0?\0ID_AA64AFR0_EL1\0ID_AA64AFR1_EL1\0?\0?\0ID_AA64ISAR0_EL1\0ID_AA64ISAR1_EL1\0?\0?\0?\0?\0?\0?\0ID_AA64MMFR0_EL1\0ID_AA64MMFR1_EL1\0ID_AA64MMFR2_EL1\0"; break;case 1: switch(m) {case 0: t="SCTLR_EL1\0ACTLR_EL1\0CPACR_EL1\0"; break;case 2: t="ZCR_EL1\0"; break;} break;case 2: if(m==0) t="TTBR0_EL1\0TTBR1_EL1\0TCR_EL1\0"; break;case 4: switch(m) {case 0: t="SPSR_EL1\0ELR_EL1\0"; break;case 1: t="SP_EL0\0"; break;case 2: t="SPSel\0?\0CurrentEL\0PAN\0UAO\0"; break;case 6: t="ICC_PMR_EL1\0"; break;} break;case 5: switch(m) {case 1: t="AFSR0_EL1\0AFSR1_EL1\0"; break;case 2: t="ESR_EL1"; break;case 3: t="ERRIDR_EL1\0ERRSELR_EL1\0"; break;case 4: t="ERXFR_EL1\0ERXCTLR_EL1\0ERXSTATUS_EL1\0ERXADDR_EL1\0"; break;case 5: t="ERXMISC0_EL1\0ERXMISC1_EL1\0"; break;} break;case 6: if(m==0) t="FAR_EL1\0"; break;case 7: if(m==4) t="PAR_EL1\0"; break;case 9: switch(m) {case 9: t="PMSCR_EL1\0?\0PMSICR_EL1\0PMSIRR_EL1\0PMSFCR_EL1\0PMSEVFR_EL1\0PMSLATFR_EL1\0PMSIDR_EL1\0PMSIDR_EL1\0"; break;case 10: t="PMBLIMITR_EL1\0PMBPTR_EL1\0?\0PMBSR_EL1\0?\0?\0?\0PMBIDR_EL1\0"; break;case 14: t="?\0PMINTENSET_EL1\0PMINTENCLR_EL1\0"; break;} break;case 10: if(m==4) t="LORSA_EL1\0LOREA_EL1\0LORN_EL1\0LORC_EL1\0?\0?\0?\0LORID_EL1\0"; else if(m!=4&&j==0) { j=m; t="?\0?\0MAIR_EL1\0AMAIR_EL1\0"; }break;case 12: switch(m) {case 0: t="VBAR_EL1\0RVBAR_EL1\0RMR_EL1\0"; break;case 1: t="ISR_EL1\0DISR_EL1\0"; break;case 8: t="ICC_IAR0_EL1\0ICC_EOIR0_EL1\0ICC_HPPIR0_EL1\0ICC_BPR0_EL1\0ICC_AP0R0_EL1\0ICC_AP0R1_EL1\0ICC_AP0R2_EL1\0ICC_AP0R3_EL1\0"; break;case 9: t="ICC_AP1R0_EL1\0ICC_AP1R1_EL1\0ICC_AP1R2_EL1\0ICC_AP1R3_EL1\0"; break;case 11: t="?\0ICC_DIR_EL1\0?\0ICC_RPR_EL1\0?\0ICC_SGI1R_EL1\0ICC_ASGI1R_EL1\0ICC_SGI0R_EL1\0"; break;case 12: t="ICC_IAR1_EL1\0ICC_EOIR1_EL1\0ICC_HPPIR1_EL1\0ICC_BPR1_EL1\0ICC_CTLR_EL1\0ICC_SRE_EL1\0ICC_IGRPEN0_EL1\0ICC_IGRPEN1_EL1\0"; break;} break;case 13: if(m==0) t="?\0CONTEXTIDR_EL1\0?\0?\0TPIDR_EL1\0"; break;case 14: if(m==1) t="CNTKCTL_EL1\0"; break;} break;case 1: if(n==0&&m==0) t="CCSIDR_EL1\0CLIDR_EL1\0?\0?\0?\0?\0?\0AIDR_EL1\0"; break;case 2: if(n==0&&m==0) t="CSSELR_EL1\0"; break;case 3: switch(n) {case 0: if(m==0) t="?\0CTR_EL0\0?\0?\0?\0?\0?\0DCZID_EL0\0"; break;case 4: switch(m) {case 2: t="NZCV\0DAIF\0"; break;case 4: t="FPCR\0FPSR\0"; break;case 5: t="DSPSR_EL0\0DLR_EL0\0"; break;} break;case 9: switch(m) {case 12: t="PMCR_EL0\0PMCNTENSET_EL0\0PMCNTENCLR_EL0\0PMOVSCLR_EL0\0PMSWINC_EL0\0PMSELR_EL0\0PMCEID0_EL0\0PMCEID1_EL0\0"; break;case 13: t="PMCCNTR_EL0\0PMXEVTYPER_EL0\0PMXEVCNTR_EL0\0"; break;case 14: t="PMUSERENR_EL0\0?\0?\0PMOVSSET_EL0\0"; break;} break;
   83f28:	f0000060 	adrp	x0, 92000 <sd_init+0x470>
   83f2c:	91122000 	add	x0, x0, #0x488
   83f30:	91034000 	add	x0, x0, #0xd0
char *disasm_str(char*s,int n) {if(!s)return "?";while(n){s++;if(!*s){s++;n--;}}return *s?s:"?";};
   83f34:	17fffd87 	b	83550 <disasm_str.part.0>
case 13: if(m==0) t="?\0?\0TPIDR_EL0\0TPIDRRO_EL0\0"; break;case 14: switch(m) {case 0: t="CNTFRQ_EL0\0CNTPCT_EL0\0CNTVCT_EL0\0"; break;case 2: t="CNTP_TVAL_EL0\0CNTP_CTL_EL0\0CNTP_CVAL_EL0\0"; break;case 3: t="CNTV_TVAL_EL0\0CNTV_CTL_EL0\0CNTV_CVAL_EL0\0"; break;} break;} break;case 4: switch(n) {case 0: if(m==0) t="VPIDR_EL2\0?\0?\0?\0?\0VMPIDR_EL2\0"; break;case 1: switch(m) {case 0: t="SCTLR_EL2\0ACTLR_EL2\0"; break;case 1: t="HCR_EL2\0MDCR_EL2\0CPTR_EL2\0HSTR_EL2\0?\0?\0?\0HACR_EL2\0"; break;case 2: t="ZCR_EL2\0"; break;} break;case 2: switch(m) {case 0: t="TTBR0_EL2\0?\0TCR_EL2\0"; break;case 1: t="VTTBR0_EL2\0?\0VTCR_EL2\0"; break;} break;case 3: if(m==0) t="DACR32_EL2\0"; break;case 4: switch(m) {case 0: t="SPSR_EL2\0ELR_EL2\0"; break;case 1: t="SP_EL1\0"; break;case 3: t="SPSR_irq\0SPSR_abt\0SPSR_und\0SPSR_fiq\0"; break;} break;case 5: switch(m) {case 0: t="?\0IFSR32_EL2\0"; break;case 1: t="AFSR0_EL2\0AFSR1_EL2\0"; break;case 2: t="ESR_EL2\0?\0?\0VSESR_EL2\0"; break;case 3: t="FPEXC32_EL2\0"; break;} break;case 6: if(m==0) t="FAR_EL2\0?\0?\0?\0HPFAR_EL2\0"; break;case 9: if(m==9) t="PMSCR_EL2\0"; break;case 10: switch(m) {case 2: t="MAIR_EL2\0"; break;case 3: t="AMAIR_EL2\0"; break;} break;case 12: switch(m) {case 0: t="VBAR_EL2\0RVBAR_EL2\0RMR_EL2\0"; break;case 1: t="?\0VDISR_EL2\0"; break;case 8: t="ICH_AP0R0_EL2\0ICH_AP0R1_EL2\0ICH_AP0R2_EL2\0ICH_AP0R3_EL2\0"; break;case 9: t="ICH_AP1R0_EL2\0ICH_AP1R1_EL2\0ICH_AP1R2_EL2\0ICH_AP1R3_EL2\0ICC_SRE_EL2\0"; break;case 11: t="ICH_HCR_EL2\0ICH_VTR_EL2\0ICH_MISR_EL2\0ICH_EISR_EL2\0?\0ICH_ELRSR_EL2\0?\0ICH_VMCR_EL2\0"; break;case 12: t="ICH_LR0_EL2\0ICH_LR1_EL2\0ICH_LR2_EL2\0ICH_LR3_EL2\0ICH_LR4_EL2\0ICH_LR5_EL2\0ICH_LR6_EL2\0ICH_LR7_EL2\0"; break;case 13: t="ICH_LR8_EL2\0ICH_LR9_EL2\0ICH_LR10_EL2\0ICH_LR11_EL2\0ICH_LR12_EL2\0ICH_LR13_EL2\0ICH_LR14_EL2\0ICH_LR15_EL2\0"; break;} break;case 13: if(m==0) t="?\0CONTEXTIDR_EL2\0TPIDR_EL2\0"; break;case 14: switch(m) {case 0: t="?\0?\0?\0CNTVOFF_EL2\0"; break;case 1: t="CNTHCTL_EL2\0"; break;case 2: t="CNTHP_TVAL_EL2\0CNTHP_CTL_EL2\0CNTHP_CVAL_EL2\0"; break;case 3: t="CNTHV_TVAL_EL2\0CNTHV_CTL_EL2\0CNTHV_CVAL_EL2\0"; break;} break;} break;case 5: if(n==4&&m==0) t="SPSR_EL12\0ELR_EL12\0"; break;case 6: if(n==4&&m==1) t="SP_EL2\0"; break;case 7: if(n==14&&m==2) t="CNTPS_TVAL_EL1\0CNTPS_CTL_EL1\0CNTPS_CVAL_EL1\0"; break;} break;}return t?disasm_str(t,j):NULL;}
   83f38:	f0000060 	adrp	x0, 92000 <sd_init+0x470>
   83f3c:	91122000 	add	x0, x0, #0x488
   83f40:	91246000 	add	x0, x0, #0x918
char *disasm_str(char*s,int n) {if(!s)return "?";while(n){s++;if(!*s){s++;n--;}}return *s?s:"?";};
   83f44:	17fffd83 	b	83550 <disasm_str.part.0>

0000000000083f48 <disasm_dbm>:
uint64_t disasm_dbm(int k, int j, int i) {int e=(k<<6)|(~j&0x3F),l=6;uint64_t m,r;while(l>=0 && !(e&(1<<l))){l--;}if(l<1)return -1;e=1<<l;l=e-1;j&=l;i&=l;if(j==l)return -1;m=~0ULL>>(64-(j+1));m=(m>>i)|(m<<(e-i));r=m;i=e;while(i<64){r|=(m<<i);i+=e;}return r;}
   83f48:	2a2103e4 	mvn	w4, w1
   83f4c:	528000c3 	mov	w3, #0x6                   	// #6
   83f50:	12001484 	and	w4, w4, #0x3f
   83f54:	2a001880 	orr	w0, w4, w0, lsl #6
   83f58:	1ac32804 	asr	w4, w0, w3
   83f5c:	370000c4 	tbnz	w4, #0, 83f74 <disasm_dbm+0x2c>
   83f60:	51000463 	sub	w3, w3, #0x1
   83f64:	3100047f 	cmn	w3, #0x1
   83f68:	54ffff81 	b.ne	83f58 <disasm_dbm+0x10>  // b.any
   83f6c:	92800000 	mov	x0, #0xffffffffffffffff    	// #-1
   83f70:	d65f03c0 	ret
   83f74:	34ffffc3 	cbz	w3, 83f6c <disasm_dbm+0x24>
   83f78:	52800024 	mov	w4, #0x1                   	// #1
   83f7c:	1ac32084 	lsl	w4, w4, w3
   83f80:	51000480 	sub	w0, w4, #0x1
   83f84:	0a000021 	and	w1, w1, w0
   83f88:	0a020002 	and	w2, w0, w2
   83f8c:	6b01001f 	cmp	w0, w1
   83f90:	54fffee0 	b.eq	83f6c <disasm_dbm+0x24>  // b.none
   83f94:	528007e0 	mov	w0, #0x3f                  	// #63
   83f98:	4b010000 	sub	w0, w0, w1
   83f9c:	4b020085 	sub	w5, w4, w2
   83fa0:	92800001 	mov	x1, #0xffffffffffffffff    	// #-1
   83fa4:	9ac02421 	lsr	x1, x1, x0
   83fa8:	7100187f 	cmp	w3, #0x6
   83fac:	9ac22422 	lsr	x2, x1, x2
   83fb0:	9ac52021 	lsl	x1, x1, x5
   83fb4:	aa010042 	orr	x2, x2, x1
   83fb8:	aa0203e0 	mov	x0, x2
   83fbc:	54fffda0 	b.eq	83f70 <disasm_dbm+0x28>  // b.none
   83fc0:	2a0403e1 	mov	w1, w4
   83fc4:	d503201f 	nop
   83fc8:	9ac12043 	lsl	x3, x2, x1
   83fcc:	0b040021 	add	w1, w1, w4
   83fd0:	aa030000 	orr	x0, x0, x3
   83fd4:	7100fc3f 	cmp	w1, #0x3f
   83fd8:	54ffff8d 	b.le	83fc8 <disasm_dbm+0x80>
   83fdc:	d65f03c0 	ret

0000000000083fe0 <disasm>:

/*** public API ***/
uint64_t disasm(uint64_t addr, char *str)
{
   83fe0:	d10b43ff 	sub	sp, sp, #0x2d0
   83fe4:	a9017bfd 	stp	x29, x30, [sp, #16]
   83fe8:	910043fd 	add	x29, sp, #0x10
   83fec:	a90253f3 	stp	x19, x20, [sp, #32]
   83ff0:	aa0103f3 	mov	x19, x1

	ic32=*((uint32_t*)addr);
	ic32_20=ic32>>20; ic32_15=ic32>>15; ic32_16=ic32>>16; ic32_5=ic32>>5; ic32_8=ic32>>8; ic32_22=ic32>>22; ic32_13=ic32>>13; ic32_14=ic32>>14; ic32_9=ic32>>9; ic32_10=ic32>>10; ic32_21=ic32>>21; ic32_4=ic32>>4; ic32_12=ic32>>12; ic32_24=ic32>>24; ic32_11=ic32>>11; ic32_18=ic32>>18; ic32_27=ic32>>27; ic32_28=ic32>>28; ic32_29=ic32>>29; ic32_25=ic32>>25; ic32_26=ic32>>26; ic32_23=ic32>>23; ic32_30=ic32>>30; ic32_19=ic32>>19; ic32_31=ic32>>31;

	//handle multiple NOPs at once
	if(ic32==0b11010101000000110010000000011111) {
   83ff4:	528403e1 	mov	w1, #0x201f                	// #8223
{
   83ff8:	a90673fb 	stp	x27, x28, [sp, #96]
   83ffc:	aa0003fc 	mov	x28, x0
	ic32=*((uint32_t*)addr);
   84000:	b9400000 	ldr	w0, [x0]
	uint8_t args[9]={0,0,0,0,0,0,0,0,0};
   84004:	f90163ff 	str	xzr, [sp, #704]
	if(ic32==0b11010101000000110010000000011111) {
   84008:	72baa061 	movk	w1, #0xd503, lsl #16
	uint8_t args[9]={0,0,0,0,0,0,0,0,0};
   8400c:	390b23ff 	strb	wzr, [sp, #712]
	if(ic32==0b11010101000000110010000000011111) {
   84010:	6b01001f 	cmp	w0, w1
   84014:	54011ca0 	b.eq	863a8 <disasm+0x23c8>  // b.none
		*str=0;
		return addr;
	}

	//decode instruction
	if(((ic32_8)&0b111111110000000001111100)==0b000010000000000001111100) {
   84018:	53087c03 	lsr	w3, w0, #8
   8401c:	a90463f7 	stp	x23, x24, [sp, #64]
   84020:	52800f81 	mov	w1, #0x7c                  	// #124
   84024:	a9056bf9 	stp	x25, x26, [sp, #80]
   84028:	121e547a 	and	w26, w3, #0xfffffc
   8402c:	12105b5a 	and	w26, w26, #0xffff007f
   84030:	72a00101 	movk	w1, #0x8, lsl #16
   84034:	53147c08 	lsr	w8, w0, #20
   84038:	530f7c06 	lsr	w6, w0, #15
   8403c:	53107c05 	lsr	w5, w0, #16
   84040:	53057c02 	lsr	w2, w0, #5
   84044:	6b01035f 	cmp	w26, w1
   84048:	54011360 	b.eq	862b4 <disasm+0x22d4>  // b.none
		names="stxrb\0stlxrb\0?\0?\0?\0?\0?\0?\0?\0?\0casb\0caslb\0?\0?\0casab\0casalb\0";
		op=((ic32_20)&0xe)|((ic32_15)&0x1); d=((ic32_16)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
		args[0]=disasm_arg_Wd; args[1]=disasm_arg_Wt; args[2]=disasm_arg_offs; args[3]=disasm_arg_XnS; args[4]=disasm_arg_offe; 
	} else
	if(((ic32_8)&0b111111111011111111111100)==0b000011100010000101101000) {
   8404c:	121e5464 	and	w4, w3, #0xfffffc
   84050:	52842d01 	mov	w1, #0x2168                	// #8552
   84054:	12117884 	and	w4, w4, #0xffffbfff
   84058:	72a001c1 	movk	w1, #0xe, lsl #16
	ic32_20=ic32>>20; ic32_15=ic32>>15; ic32_16=ic32>>16; ic32_5=ic32>>5; ic32_8=ic32>>8; ic32_22=ic32>>22; ic32_13=ic32>>13; ic32_14=ic32>>14; ic32_9=ic32>>9; ic32_10=ic32>>10; ic32_21=ic32>>21; ic32_4=ic32>>4; ic32_12=ic32>>12; ic32_24=ic32>>24; ic32_11=ic32>>11; ic32_18=ic32>>18; ic32_27=ic32>>27; ic32_28=ic32>>28; ic32_29=ic32>>29; ic32_25=ic32>>25; ic32_26=ic32>>26; ic32_23=ic32>>23; ic32_30=ic32>>30; ic32_19=ic32>>19; ic32_31=ic32>>31;
   8405c:	53167c07 	lsr	w7, w0, #22
	if(((ic32_8)&0b111111111011111111111100)==0b000011100010000101101000) {
   84060:	6b01009f 	cmp	w4, w1
   84064:	54011ca0 	b.eq	863f8 <disasm+0x2418>  // b.none
		names="fcvtn\0";
		z=((ic32_22)&0x1); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
		q=0;
		args[0]=disasm_arg_Vtzq2; args[1]=disasm_arg_Vnz3; 
	} else
	if(((ic32_8)&0b111111111011111111111100)==0b000011100010000111101000) {
   84068:	52843d01 	mov	w1, #0x21e8                	// #8680
   8406c:	72a001c1 	movk	w1, #0xe, lsl #16
   84070:	6b01009f 	cmp	w4, w1
   84074:	540120a0 	b.eq	86488 <disasm+0x24a8>  // b.none
		names="fcvtl\0";
		z=((ic32_22)&0x1); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
		q=0;
		args[0]=disasm_arg_Vtz3; args[1]=disasm_arg_Vnzq2; 
	} else
	if(((ic32_8)&0b111111110011111111111100)==0b000011100010000100101000) {
   84078:	121e5469 	and	w9, w3, #0xfffffc
   8407c:	52842501 	mov	w1, #0x2128                	// #8488
   84080:	12107529 	and	w9, w9, #0xffff3fff
   84084:	72a001c1 	movk	w1, #0xe, lsl #16
   84088:	6b01013f 	cmp	w9, w1
   8408c:	54011da0 	b.eq	86440 <disasm+0x2460>  // b.none
		names="xtn\0";
		z=((ic32_22)&0x3); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
		q=0;
		args[0]=disasm_arg_VtT; args[1]=disasm_arg_VnT2; 
	} else
	if(((ic32_8)&0b111111110011111111111100)==0b000011100010000100111000) {
   84090:	52842701 	mov	w1, #0x2138                	// #8504
   84094:	72a001c1 	movk	w1, #0xe, lsl #16
   84098:	6b01013f 	cmp	w9, w1
   8409c:	54012200 	b.eq	864dc <disasm+0x24fc>  // b.none
		names="shll\0";
		z=((ic32_22)&0x3); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
		q=0;
		args[0]=disasm_arg_Vtz; args[1]=disasm_arg_VnT; args[2]=disasm_arg_shift8; 
	} else
	if(((ic32_8)&0b111111110010000010011100)==0b000011100010000010010000) {
   840a0:	5284138e 	mov	w14, #0x209c                	// #8348
   840a4:	52841201 	mov	w1, #0x2090                	// #8336
   840a8:	72a01fee 	movk	w14, #0xff, lsl #16
   840ac:	0a0e006e 	and	w14, w3, w14
   840b0:	72a001c1 	movk	w1, #0xe, lsl #16
	ic32_20=ic32>>20; ic32_15=ic32>>15; ic32_16=ic32>>16; ic32_5=ic32>>5; ic32_8=ic32>>8; ic32_22=ic32>>22; ic32_13=ic32>>13; ic32_14=ic32>>14; ic32_9=ic32>>9; ic32_10=ic32>>10; ic32_21=ic32>>21; ic32_4=ic32>>4; ic32_12=ic32>>12; ic32_24=ic32>>24; ic32_11=ic32>>11; ic32_18=ic32>>18; ic32_27=ic32>>27; ic32_28=ic32>>28; ic32_29=ic32>>29; ic32_25=ic32>>25; ic32_26=ic32>>26; ic32_23=ic32>>23; ic32_30=ic32>>30; ic32_19=ic32>>19; ic32_31=ic32>>31;
   840b4:	530d7c0b 	lsr	w11, w0, #13
	if(((ic32_8)&0b111111110010000010011100)==0b000011100010000010010000) {
   840b8:	6b0101df 	cmp	w14, w1
   840bc:	54021b80 	b.eq	8842c <disasm+0x444c>  // b.none
		names="sqdmlal\0sqdmlsl\0sqdmull\0";
		op=((ic32_13)&0x3); z=((ic32_22)&0x3); m=((ic32_16)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
		q=0;
		args[0]=disasm_arg_Vtz; args[1]=disasm_arg_VnT; args[2]=disasm_arg_VmT; 
	} else
	if(((ic32_8)&0b111111111100000010110100)==0b000011110100000000100000) {
   840c0:	52981690 	mov	w16, #0xc0b4                	// #49332
   840c4:	52880401 	mov	w1, #0x4020                	// #16416
   840c8:	72a01ff0 	movk	w16, #0xff, lsl #16
   840cc:	0a100070 	and	w16, w3, w16
   840d0:	72a001e1 	movk	w1, #0xf, lsl #16
	ic32_20=ic32>>20; ic32_15=ic32>>15; ic32_16=ic32>>16; ic32_5=ic32>>5; ic32_8=ic32>>8; ic32_22=ic32>>22; ic32_13=ic32>>13; ic32_14=ic32>>14; ic32_9=ic32>>9; ic32_10=ic32>>10; ic32_21=ic32>>21; ic32_4=ic32>>4; ic32_12=ic32>>12; ic32_24=ic32>>24; ic32_11=ic32>>11; ic32_18=ic32>>18; ic32_27=ic32>>27; ic32_28=ic32>>28; ic32_29=ic32>>29; ic32_25=ic32>>25; ic32_26=ic32>>26; ic32_23=ic32>>23; ic32_30=ic32>>30; ic32_19=ic32>>19; ic32_31=ic32>>31;
   840d4:	530e7c11 	lsr	w17, w0, #14
	if(((ic32_8)&0b111111111100000010110100)==0b000011110100000000100000) {
   840d8:	6b01021f 	cmp	w16, w1
	ic32_20=ic32>>20; ic32_15=ic32>>15; ic32_16=ic32>>16; ic32_5=ic32>>5; ic32_8=ic32>>8; ic32_22=ic32>>22; ic32_13=ic32>>13; ic32_14=ic32>>14; ic32_9=ic32>>9; ic32_10=ic32>>10; ic32_21=ic32>>21; ic32_4=ic32>>4; ic32_12=ic32>>12; ic32_24=ic32>>24; ic32_11=ic32>>11; ic32_18=ic32>>18; ic32_27=ic32>>27; ic32_28=ic32>>28; ic32_29=ic32>>29; ic32_25=ic32>>25; ic32_26=ic32>>26; ic32_23=ic32>>23; ic32_30=ic32>>30; ic32_19=ic32>>19; ic32_31=ic32>>31;
   840dc:	53097c0f 	lsr	w15, w0, #9
	if(((ic32_8)&0b111111111100000010110100)==0b000011110100000000100000) {
   840e0:	54012260 	b.eq	8652c <disasm+0x254c>  // b.none
		names="smlal\0smlsl\0";
		op=((ic32_14)&0x1); j=((ic32_9)&0x4)|((ic32_20)&0x3); m=((ic32_16)&0xf); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
		z=1;q=0;
		args[0]=disasm_arg_Vtz3; args[1]=disasm_arg_VnT; args[2]=disasm_arg_VmTs; 
	} else
	if(((ic32_8)&0b111111111100000011110100)==0b000011110100000010100000) {
   840e4:	52981e92 	mov	w18, #0xc0f4                	// #49396
   840e8:	52881401 	mov	w1, #0x40a0                	// #16544
   840ec:	72a01ff2 	movk	w18, #0xff, lsl #16
   840f0:	0a120072 	and	w18, w3, w18
   840f4:	72a001e1 	movk	w1, #0xf, lsl #16
   840f8:	6b01025f 	cmp	w18, w1
   840fc:	54021c20 	b.eq	88480 <disasm+0x44a0>  // b.none
		names="smull\0";
		j=((ic32_9)&0x4)|((ic32_20)&0x3); m=((ic32_16)&0xf); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
		z=1;q=0;
		args[0]=disasm_arg_VtT; args[1]=disasm_arg_VnT; args[2]=disasm_arg_VmTs; 
	} else
	if(((ic32_8)&0b111111111100000010110100)==0b000011111000000000100000) {
   84100:	52900401 	mov	w1, #0x8020                	// #32800
	ic32_20=ic32>>20; ic32_15=ic32>>15; ic32_16=ic32>>16; ic32_5=ic32>>5; ic32_8=ic32>>8; ic32_22=ic32>>22; ic32_13=ic32>>13; ic32_14=ic32>>14; ic32_9=ic32>>9; ic32_10=ic32>>10; ic32_21=ic32>>21; ic32_4=ic32>>4; ic32_12=ic32>>12; ic32_24=ic32>>24; ic32_11=ic32>>11; ic32_18=ic32>>18; ic32_27=ic32>>27; ic32_28=ic32>>28; ic32_29=ic32>>29; ic32_25=ic32>>25; ic32_26=ic32>>26; ic32_23=ic32>>23; ic32_30=ic32>>30; ic32_19=ic32>>19; ic32_31=ic32>>31;
   84104:	530a7c14 	lsr	w20, w0, #10
	if(((ic32_8)&0b111111111100000010110100)==0b000011111000000000100000) {
   84108:	72a001e1 	movk	w1, #0xf, lsl #16
	ic32_20=ic32>>20; ic32_15=ic32>>15; ic32_16=ic32>>16; ic32_5=ic32>>5; ic32_8=ic32>>8; ic32_22=ic32>>22; ic32_13=ic32>>13; ic32_14=ic32>>14; ic32_9=ic32>>9; ic32_10=ic32>>10; ic32_21=ic32>>21; ic32_4=ic32>>4; ic32_12=ic32>>12; ic32_24=ic32>>24; ic32_11=ic32>>11; ic32_18=ic32>>18; ic32_27=ic32>>27; ic32_28=ic32>>28; ic32_29=ic32>>29; ic32_25=ic32>>25; ic32_26=ic32>>26; ic32_23=ic32>>23; ic32_30=ic32>>30; ic32_19=ic32>>19; ic32_31=ic32>>31;
   8410c:	53157c0c 	lsr	w12, w0, #21
	if(((ic32_8)&0b111111111100000010110100)==0b000011111000000000100000) {
   84110:	6b01021f 	cmp	w16, w1
   84114:	54021e40 	b.eq	884dc <disasm+0x44fc>  // b.none
		names="smlal\0smlsl\0";
		op=((ic32_14)&0x1); j=((ic32_10)&0x2)|((ic32_21)&0x1); m=((ic32_16)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
		z=2;q=0;
		args[0]=disasm_arg_Vtz3; args[1]=disasm_arg_VnT; args[2]=disasm_arg_VmTs; 
	} else
	if(((ic32_8)&0b111111111100000011110100)==0b000011111000000010100000) {
   84118:	52901401 	mov	w1, #0x80a0                	// #32928
   8411c:	72a001e1 	movk	w1, #0xf, lsl #16
   84120:	6b01025f 	cmp	w18, w1
   84124:	54022140 	b.eq	8854c <disasm+0x456c>  // b.none
		names="smull\0";
		j=((ic32_10)&0x2)|((ic32_21)&0x1); m=((ic32_16)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
		z=2;q=0;
		args[0]=disasm_arg_VtT; args[1]=disasm_arg_VnT; args[2]=disasm_arg_VmTs; 
	} else
	if(((ic32_8)&0b111111111111111111111100)==0b000111100110001001000000) {
   84128:	121e5479 	and	w25, w3, #0xfffffc
   8412c:	528c4801 	mov	w1, #0x6240                	// #25152
   84130:	72a003c1 	movk	w1, #0x1e, lsl #16
   84134:	6b01033f 	cmp	w25, w1
   84138:	54022480 	b.eq	885c8 <disasm+0x45e8>  // b.none
		names="fcvt\0";
		n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
		args[0]=disasm_arg_St; args[1]=disasm_arg_Dn; 
	} else
	if(((ic32_8)&0b111111110011111001111100)==0b000111100010001001000000) {
   8413c:	5287cf81 	mov	w1, #0x3e7c                	// #15996
   84140:	5284480a 	mov	w10, #0x2240                	// #8768
   84144:	72a01fe1 	movk	w1, #0xff, lsl #16
   84148:	0a010061 	and	w1, w3, w1
   8414c:	72a003ca 	movk	w10, #0x1e, lsl #16
   84150:	6b0a003f 	cmp	w1, w10
   84154:	540225e0 	b.eq	88610 <disasm+0x4630>  // b.none
		names="fcvt\0";
		z=((ic32_22)&0x3); k=((ic32_15)&0x3); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
		args[0]=disasm_arg_FPk5t; args[1]=disasm_arg_FPz5n; 
	} else
	if(((ic32_8)&0b111111110011100001111100)==0b000111100010000001000000) {
   84158:	52870f81 	mov	w1, #0x387c                	// #14460
   8415c:	5284080a 	mov	w10, #0x2040                	// #8256
   84160:	72a01fe1 	movk	w1, #0xff, lsl #16
   84164:	0a010061 	and	w1, w3, w1
   84168:	72a003ca 	movk	w10, #0x1e, lsl #16
   8416c:	6b0a003f 	cmp	w1, w10
   84170:	54022760 	b.eq	8865c <disasm+0x467c>  // b.none
		names="fmov\0fabs\0fneg\0fsqrt\0?\0?\0?\0?\0frintn\0frintp\0frintm\0frintz\0frinta\0?\0frintx\0frinti\0";
		op=((ic32_15)&0xf); z=((ic32_22)&0x3); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
		args[0]=disasm_arg_FPz5t; args[1]=disasm_arg_FPz5n; 
	} else
	if((ic32&0b11111111001000001111110000001111)==0b00011110001000000010000000000000) {
   84174:	529f81ea 	mov	w10, #0xfc0f                	// #64527
   84178:	52840001 	mov	w1, #0x2000                	// #8192
   8417c:	72a3c401 	movk	w1, #0x1e20, lsl #16
   84180:	72bfe40a 	movk	w10, #0xff20, lsl #16
   84184:	0a0a000a 	and	w10, w0, w10
   84188:	6b01015f 	cmp	w10, w1
	ic32_20=ic32>>20; ic32_15=ic32>>15; ic32_16=ic32>>16; ic32_5=ic32>>5; ic32_8=ic32>>8; ic32_22=ic32>>22; ic32_13=ic32>>13; ic32_14=ic32>>14; ic32_9=ic32>>9; ic32_10=ic32>>10; ic32_21=ic32>>21; ic32_4=ic32>>4; ic32_12=ic32>>12; ic32_24=ic32>>24; ic32_11=ic32>>11; ic32_18=ic32>>18; ic32_27=ic32>>27; ic32_28=ic32>>28; ic32_29=ic32>>29; ic32_25=ic32>>25; ic32_26=ic32>>26; ic32_23=ic32>>23; ic32_30=ic32>>30; ic32_19=ic32>>19; ic32_31=ic32>>31;
   8418c:	53047c01 	lsr	w1, w0, #4
	if((ic32&0b11111111001000001111110000001111)==0b00011110001000000010000000000000) {
   84190:	54022ae0 	b.eq	886ec <disasm+0x470c>  // b.none
		names="fcmp\0fcmpe\0";
		op=((ic32_4)&0x1); z=((ic32_22)&0x3); m=((ic32_16)&0x1f); n=((ic32_5)&0x1f); 
		args[0]=disasm_arg_FPz5n; args[1]=disasm_arg_FPz5m; 
	} else
	if((ic32&0b11111111001000001111110000001111)==0b00011110001000000010000000001000) {
   84194:	5284010d 	mov	w13, #0x2008                	// #8200
   84198:	72a3c40d 	movk	w13, #0x1e20, lsl #16
   8419c:	6b0d015f 	cmp	w10, w13
   841a0:	54022820 	b.eq	886a4 <disasm+0x46c4>  // b.none
		names="fcmp\0fcmpe\0";
		op=((ic32_4)&0x1); z=((ic32_22)&0x3); n=((ic32_5)&0x1f); 
		args[0]=disasm_arg_FPz5n; args[1]=disasm_arg_simd0; 
	} else
	if((ic32&0b11111111001000000001111111100000)==0b00011110001000000001000000000000) {
   841a4:	5283fc0a 	mov	w10, #0x1fe0                	// #8160
   841a8:	5282000d 	mov	w13, #0x1000                	// #4096
   841ac:	72bfe40a 	movk	w10, #0xff20, lsl #16
   841b0:	0a0a000a 	and	w10, w0, w10
   841b4:	72a3c40d 	movk	w13, #0x1e20, lsl #16
   841b8:	6b0d015f 	cmp	w10, w13
   841bc:	54022ea0 	b.eq	88790 <disasm+0x47b0>  // b.none
		names="fmov\0";
		z=((ic32_22)&0x3); j=((ic32_13)&0xff); t=((ic32)&0x1f); 
		args[0]=disasm_arg_FPz5t; args[1]=disasm_arg_jz; 
	} else
	if(((ic32_8)&0b111111110010000000001100)==0b000111100010000000000100) {
   841c0:	5284018a 	mov	w10, #0x200c                	// #8204
   841c4:	72a01fea 	movk	w10, #0xff, lsl #16
   841c8:	0a0a006a 	and	w10, w3, w10
   841cc:	2a0a03ed 	mov	w13, w10
   841d0:	5284008a 	mov	w10, #0x2004                	// #8196
   841d4:	b90077ed 	str	w13, [sp, #116]
   841d8:	72a003ca 	movk	w10, #0x1e, lsl #16
   841dc:	6b0a01bf 	cmp	w13, w10
	ic32_20=ic32>>20; ic32_15=ic32>>15; ic32_16=ic32>>16; ic32_5=ic32>>5; ic32_8=ic32>>8; ic32_22=ic32>>22; ic32_13=ic32>>13; ic32_14=ic32>>14; ic32_9=ic32>>9; ic32_10=ic32>>10; ic32_21=ic32>>21; ic32_4=ic32>>4; ic32_12=ic32>>12; ic32_24=ic32>>24; ic32_11=ic32>>11; ic32_18=ic32>>18; ic32_27=ic32>>27; ic32_28=ic32>>28; ic32_29=ic32>>29; ic32_25=ic32>>25; ic32_26=ic32>>26; ic32_23=ic32>>23; ic32_30=ic32>>30; ic32_19=ic32>>19; ic32_31=ic32>>31;
   841e0:	530c7c0a 	lsr	w10, w0, #12
	if(((ic32_8)&0b111111110010000000001100)==0b000111100010000000000100) {
   841e4:	54022aa0 	b.eq	88738 <disasm+0x4758>  // b.none
		names="ffcmp\0ffcmpe\0";
		op=((ic32_4)&0x1); z=((ic32_22)&0x3); m=((ic32_16)&0x1f); c=((ic32_12)&0xf); n=((ic32_5)&0x1f); j=((ic32)&0xf); 
		args[0]=disasm_arg_FPz5n; args[1]=disasm_arg_FPz5m; args[2]=disasm_arg_j; args[3]=disasm_arg_c; 
	} else
	if(((ic32_8)&0b111111110010000000001100)==0b000111100010000000001000) {
   841e8:	b94077ed 	ldr	w13, [sp, #116]
   841ec:	52840101 	mov	w1, #0x2008                	// #8200
   841f0:	72a003c1 	movk	w1, #0x1e, lsl #16
   841f4:	6b0101bf 	cmp	w13, w1
   841f8:	54023d80 	b.eq	889a8 <disasm+0x49c8>  // b.none
		names="fmul\0fdiv\0fadd\0fsub\0fmax\0fmin\0fmaxnm\0fminmn\0fnmul\0";
		op=((ic32_12)&0xf); z=((ic32_22)&0x3); m=((ic32_16)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
		args[0]=disasm_arg_FPz5t; args[1]=disasm_arg_FPz5n; args[2]=disasm_arg_FPz5m; 
	} else
	if(((ic32_8)&0b111111110010000000001100)==0b000111100010000000001100) {
   841fc:	b94077ed 	ldr	w13, [sp, #116]
   84200:	52840181 	mov	w1, #0x200c                	// #8204
   84204:	72a003c1 	movk	w1, #0x1e, lsl #16
   84208:	6b0101bf 	cmp	w13, w1
   8420c:	54023a20 	b.eq	88950 <disasm+0x4970>  // b.none
   84210:	a9035bf5 	stp	x21, x22, [sp, #48]
	ic32_20=ic32>>20; ic32_15=ic32>>15; ic32_16=ic32>>16; ic32_5=ic32>>5; ic32_8=ic32>>8; ic32_22=ic32>>22; ic32_13=ic32>>13; ic32_14=ic32>>14; ic32_9=ic32>>9; ic32_10=ic32>>10; ic32_21=ic32>>21; ic32_4=ic32>>4; ic32_12=ic32>>12; ic32_24=ic32>>24; ic32_11=ic32>>11; ic32_18=ic32>>18; ic32_27=ic32>>27; ic32_28=ic32>>28; ic32_29=ic32>>29; ic32_25=ic32>>25; ic32_26=ic32>>26; ic32_23=ic32>>23; ic32_30=ic32>>30; ic32_19=ic32>>19; ic32_31=ic32>>31;
   84214:	53187c16 	lsr	w22, w0, #24
		names="fcsel\0";
		z=((ic32_22)&0x3); m=((ic32_16)&0x1f); c=((ic32_12)&0xf); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
		args[0]=disasm_arg_FPz5t; args[1]=disasm_arg_FPz5n; args[2]=disasm_arg_FPz5m; args[3]=disasm_arg_c; 
	} else
	if(((ic32_24)&0b11111111)==0b00011111) {
   84218:	71007edf 	cmp	w22, #0x1f
   8421c:	54023660 	b.eq	888e8 <disasm+0x4908>  // b.none
		names="fmadd\0fmsub\0fnmadd\0fnmsub\0";
		op=((ic32_20)&0x2)|((ic32_15)&0x1); z=((ic32_22)&0x3); m=((ic32_16)&0x1f); d=((ic32_10)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
		args[0]=disasm_arg_FPz5t; args[1]=disasm_arg_FPz5n; args[2]=disasm_arg_FPz5m; args[3]=disasm_arg_FPz5t; args[4]=disasm_arg_FPz5n; args[5]=disasm_arg_FPz5d; 
	} else
	if(((ic32_8)&0b111111111111100011111100)==0b001011110000000011100100) {
   84220:	121e5461 	and	w1, w3, #0xfffffc
   84224:	2a0103ed 	mov	w13, w1
   84228:	52801c81 	mov	w1, #0xe4                  	// #228
   8422c:	121571ad 	and	w13, w13, #0xfffff8ff
   84230:	72a005e1 	movk	w1, #0x2f, lsl #16
   84234:	2a0d03f5 	mov	w21, w13
   84238:	b9008ff5 	str	w21, [sp, #140]
	ic32_20=ic32>>20; ic32_15=ic32>>15; ic32_16=ic32>>16; ic32_5=ic32>>5; ic32_8=ic32>>8; ic32_22=ic32>>22; ic32_13=ic32>>13; ic32_14=ic32>>14; ic32_9=ic32>>9; ic32_10=ic32>>10; ic32_21=ic32>>21; ic32_4=ic32>>4; ic32_12=ic32>>12; ic32_24=ic32>>24; ic32_11=ic32>>11; ic32_18=ic32>>18; ic32_27=ic32>>27; ic32_28=ic32>>28; ic32_29=ic32>>29; ic32_25=ic32>>25; ic32_26=ic32>>26; ic32_23=ic32>>23; ic32_30=ic32>>30; ic32_19=ic32>>19; ic32_31=ic32>>31;
   8423c:	530b7c0d 	lsr	w13, w0, #11
	if(((ic32_8)&0b111111111111100011111100)==0b001011110000000011100100) {
   84240:	6b0102bf 	cmp	w21, w1
   84244:	54023280 	b.eq	88894 <disasm+0x48b4>  // b.none
		names="movi\0";
		j=((ic32_11)&0xe0)|((ic32_5)&0x1f); t=((ic32)&0x1f); 
		args[0]=disasm_arg_Dt; args[1]=disasm_arg_imm64; 
	} else
	if(((ic32_8)&0b111111110010000000001100)==0b001110000010000000000000) {
   84248:	b94077e1 	ldr	w1, [sp, #116]
   8424c:	714e083f 	cmp	w1, #0x382, lsl #12
	ic32_20=ic32>>20; ic32_15=ic32>>15; ic32_16=ic32>>16; ic32_5=ic32>>5; ic32_8=ic32>>8; ic32_22=ic32>>22; ic32_13=ic32>>13; ic32_14=ic32>>14; ic32_9=ic32>>9; ic32_10=ic32>>10; ic32_21=ic32>>21; ic32_4=ic32>>4; ic32_12=ic32>>12; ic32_24=ic32>>24; ic32_11=ic32>>11; ic32_18=ic32>>18; ic32_27=ic32>>27; ic32_28=ic32>>28; ic32_29=ic32>>29; ic32_25=ic32>>25; ic32_26=ic32>>26; ic32_23=ic32>>23; ic32_30=ic32>>30; ic32_19=ic32>>19; ic32_31=ic32>>31;
   84250:	53127c01 	lsr	w1, w0, #18
   84254:	b9009be1 	str	w1, [sp, #152]
	if(((ic32_8)&0b111111110010000000001100)==0b001110000010000000000000) {
   84258:	5402b2c0 	b.eq	898b0 <disasm+0x58d0>  // b.none
		names="ldaddb\0ldclrb\0ldeorb\0ldsetb\0ldsmaxb\0ldsminb\0ldumaxb\0lduminb\0swpb\0?\0?\0?\0?\0?\0?\0?\0ldaddlb\0ldclrlb\0ldeorlb\0ldsetlb\0ldsmaxlb\0ldsminlb\0ldumaxlb\0lduminlb\0swplb\0?\0?\0?\0?\0?\0?\0?\0ldaddab\0ldclrab\0ldeorab\0ldsetab\0ldsmaxab\0ldsminab\0ldumaxab\0lduminab\0swpab\0?\0?\0?\0?\0?\0?\0?\0ldaddalb\0ldclralb\0ldeoralb\0ldsetalb\0ldsmaxalb\0ldsminalb\0ldumaxalb\0lduminalb\0swpalb\0";
		op=((ic32_18)&0x30)|((ic32_12)&0xf); d=((ic32_16)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
		args[0]=disasm_arg_Wd; args[1]=disasm_arg_Wt; args[2]=disasm_arg_offs; args[3]=disasm_arg_XnS; args[4]=disasm_arg_offe; 
	} else
	if(((ic32_8)&0b110111110011111110011100)==0b000011100010000100001000) {
   8425c:	5287f381 	mov	w1, #0x3f9c                	// #16284
   84260:	72a01be1 	movk	w1, #0xdf, lsl #16
   84264:	0a010061 	and	w1, w3, w1
   84268:	2a0103f5 	mov	w21, w1
   8426c:	52842101 	mov	w1, #0x2108                	// #8456
   84270:	b90093f5 	str	w21, [sp, #144]
   84274:	72a001c1 	movk	w1, #0xe, lsl #16
   84278:	6b0102bf 	cmp	w21, w1
	ic32_20=ic32>>20; ic32_15=ic32>>15; ic32_16=ic32>>16; ic32_5=ic32>>5; ic32_8=ic32>>8; ic32_22=ic32>>22; ic32_13=ic32>>13; ic32_14=ic32>>14; ic32_9=ic32>>9; ic32_10=ic32>>10; ic32_21=ic32>>21; ic32_4=ic32>>4; ic32_12=ic32>>12; ic32_24=ic32>>24; ic32_11=ic32>>11; ic32_18=ic32>>18; ic32_27=ic32>>27; ic32_28=ic32>>28; ic32_29=ic32>>29; ic32_25=ic32>>25; ic32_26=ic32>>26; ic32_23=ic32>>23; ic32_30=ic32>>30; ic32_19=ic32>>19; ic32_31=ic32>>31;
   8427c:	531b7c01 	lsr	w1, w0, #27
	if(((ic32_8)&0b110111110011111110011100)==0b000011100010000100001000) {
   84280:	5402aee0 	b.eq	8985c <disasm+0x587c>  // b.none
		names="?\0xtn\0sqxtn\0?\0?\0sqxtun\0uqxtn\0fcvtxn\0";
		op=((ic32_27)&0x4)|((ic32_13)&0x3); z=((ic32_22)&0x3); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
		q=0;
		args[0]=disasm_arg_VtT; args[1]=disasm_arg_VnT3; 
	} else
	if(((ic32_8)&0b110111110010000011011100)==0b000011100010000000010000) {
   84284:	52841b95 	mov	w21, #0x20dc                	// #8412
	ic32_20=ic32>>20; ic32_15=ic32>>15; ic32_16=ic32>>16; ic32_5=ic32>>5; ic32_8=ic32>>8; ic32_22=ic32>>22; ic32_13=ic32>>13; ic32_14=ic32>>14; ic32_9=ic32>>9; ic32_10=ic32>>10; ic32_21=ic32>>21; ic32_4=ic32>>4; ic32_12=ic32>>12; ic32_24=ic32>>24; ic32_11=ic32>>11; ic32_18=ic32>>18; ic32_27=ic32>>27; ic32_28=ic32>>28; ic32_29=ic32>>29; ic32_25=ic32>>25; ic32_26=ic32>>26; ic32_23=ic32>>23; ic32_30=ic32>>30; ic32_19=ic32>>19; ic32_31=ic32>>31;
   84288:	531c7c18 	lsr	w24, w0, #28
	if(((ic32_8)&0b110111110010000011011100)==0b000011100010000000010000) {
   8428c:	72a01bf5 	movk	w21, #0xdf, lsl #16
   84290:	0a150075 	and	w21, w3, w21
   84294:	2a1503f7 	mov	w23, w21
   84298:	b9007bf7 	str	w23, [sp, #120]
   8429c:	52840215 	mov	w21, #0x2010                	// #8208
   842a0:	72a001d5 	movk	w21, #0xe, lsl #16
   842a4:	6b1502ff 	cmp	w23, w21
   842a8:	5402aaa0 	b.eq	897fc <disasm+0x581c>  // b.none
		names="saddw\0ssubw\0uaddw\0usubw\0";
		op=((ic32_28)&0x2)|((ic32_13)&0x1); z=((ic32_22)&0x3); m=((ic32_16)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
		q=0;
		args[0]=disasm_arg_VtT3; args[1]=disasm_arg_VnT3; args[2]=disasm_arg_VmT; 
	} else
	if(((ic32_8)&0b110111110010000011011100)==0b000011100010000001000000) {
   842ac:	b9407bf7 	ldr	w23, [sp, #120]
   842b0:	52840815 	mov	w21, #0x2040                	// #8256
   842b4:	72a001d5 	movk	w21, #0xe, lsl #16
   842b8:	6b1502ff 	cmp	w23, w21
   842bc:	5402a700 	b.eq	8979c <disasm+0x57bc>  // b.none
		names="addhn\0subhn\0raddhn\0rsubhn\0";
		op=((ic32_28)&0x2)|((ic32_13)&0x1); z=((ic32_22)&0x3); m=((ic32_16)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
		q=0;
		args[0]=disasm_arg_VtT; args[1]=disasm_arg_VnT3; args[2]=disasm_arg_VmT3; 
	} else
	if(((ic32_8)&0b110111110010000011111100)==0b000011100010000011100000) {
   842c0:	52841f95 	mov	w21, #0x20fc                	// #8444
   842c4:	72a01bf5 	movk	w21, #0xdf, lsl #16
   842c8:	0a150075 	and	w21, w3, w21
   842cc:	2a1503f7 	mov	w23, w21
   842d0:	52841c15 	mov	w21, #0x20e0                	// #8416
   842d4:	b900a3f7 	str	w23, [sp, #160]
   842d8:	72a001d5 	movk	w21, #0xe, lsl #16
   842dc:	6b1502ff 	cmp	w23, w21
	ic32_20=ic32>>20; ic32_15=ic32>>15; ic32_16=ic32>>16; ic32_5=ic32>>5; ic32_8=ic32>>8; ic32_22=ic32>>22; ic32_13=ic32>>13; ic32_14=ic32>>14; ic32_9=ic32>>9; ic32_10=ic32>>10; ic32_21=ic32>>21; ic32_4=ic32>>4; ic32_12=ic32>>12; ic32_24=ic32>>24; ic32_11=ic32>>11; ic32_18=ic32>>18; ic32_27=ic32>>27; ic32_28=ic32>>28; ic32_29=ic32>>29; ic32_25=ic32>>25; ic32_26=ic32>>26; ic32_23=ic32>>23; ic32_30=ic32>>30; ic32_19=ic32>>19; ic32_31=ic32>>31;
   842e0:	531d7c15 	lsr	w21, w0, #29
	if(((ic32_8)&0b110111110010000011111100)==0b000011100010000011100000) {
   842e4:	5402a300 	b.eq	89744 <disasm+0x5764>  // b.none
		names="pmull\0umull\0";
		op=((ic32_29)&0x1); z=((ic32_22)&0x3); m=((ic32_16)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
		q=0;
		args[0]=disasm_arg_VtT4; args[1]=disasm_arg_VnT; args[2]=disasm_arg_VmT; 
	} else
	if(((ic32_8)&0b110111110010000000001100)==0b000011100010000000000000) {
   842e8:	52840197 	mov	w23, #0x200c                	// #8204
   842ec:	72a01bf7 	movk	w23, #0xdf, lsl #16
   842f0:	0a170077 	and	w23, w3, w23
   842f4:	b900abf7 	str	w23, [sp, #168]
   842f8:	71438aff 	cmp	w23, #0xe2, lsl #12
	ic32_20=ic32>>20; ic32_15=ic32>>15; ic32_16=ic32>>16; ic32_5=ic32>>5; ic32_8=ic32>>8; ic32_22=ic32>>22; ic32_13=ic32>>13; ic32_14=ic32>>14; ic32_9=ic32>>9; ic32_10=ic32>>10; ic32_21=ic32>>21; ic32_4=ic32>>4; ic32_12=ic32>>12; ic32_24=ic32>>24; ic32_11=ic32>>11; ic32_18=ic32>>18; ic32_27=ic32>>27; ic32_28=ic32>>28; ic32_29=ic32>>29; ic32_25=ic32>>25; ic32_26=ic32>>26; ic32_23=ic32>>23; ic32_30=ic32>>30; ic32_19=ic32>>19; ic32_31=ic32>>31;
   842fc:	53197c17 	lsr	w23, w0, #25
	if(((ic32_8)&0b110111110010000000001100)==0b000011100010000000000000) {
   84300:	54029f20 	b.eq	896e4 <disasm+0x5704>  // b.none
		names="saddl\0saddw\0ssubl\0ssubw\0addhn\0sabal\0subhn\0sabdl\0smlal\0sqdmlal\0smlsl\0sqdmlsl\0?\0sqdmull\0pmull\0?\0uaddl\0uaddw\0usubl\0usubw\0raddhn\0uabal\0rsubhn\0uabdl\0umlal\0?\0umlsl\0?\0?\0?\0umull\0";
		op=((ic32_25)&0x10)|((ic32_12)&0xf); z=((ic32_22)&0x3); m=((ic32_16)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
		q=0;
		args[0]=disasm_arg_VtT3; args[1]=disasm_arg_VnT; args[2]=disasm_arg_VmT; 
	} else
	if(((ic32_8)&0b110111111100000000100100)==0b000011110100000000100000) {
   84304:	5298049b 	mov	w27, #0xc024                	// #49188
   84308:	72a01bfb 	movk	w27, #0xdf, lsl #16
   8430c:	0a1b007b 	and	w27, w3, w27
   84310:	2a1b03fe 	mov	w30, w27
   84314:	5288041b 	mov	w27, #0x4020                	// #16416
   84318:	72a001fb 	movk	w27, #0xf, lsl #16
   8431c:	6b1b03df 	cmp	w30, w27
	ic32_20=ic32>>20; ic32_15=ic32>>15; ic32_16=ic32>>16; ic32_5=ic32>>5; ic32_8=ic32>>8; ic32_22=ic32>>22; ic32_13=ic32>>13; ic32_14=ic32>>14; ic32_9=ic32>>9; ic32_10=ic32>>10; ic32_21=ic32>>21; ic32_4=ic32>>4; ic32_12=ic32>>12; ic32_24=ic32>>24; ic32_11=ic32>>11; ic32_18=ic32>>18; ic32_27=ic32>>27; ic32_28=ic32>>28; ic32_29=ic32>>29; ic32_25=ic32>>25; ic32_26=ic32>>26; ic32_23=ic32>>23; ic32_30=ic32>>30; ic32_19=ic32>>19; ic32_31=ic32>>31;
   84320:	531a7c1b 	lsr	w27, w0, #26
	if(((ic32_8)&0b110111111100000000100100)==0b000011110100000000100000) {
   84324:	b9007ffe 	str	w30, [sp, #124]
	ic32_20=ic32>>20; ic32_15=ic32>>15; ic32_16=ic32>>16; ic32_5=ic32>>5; ic32_8=ic32>>8; ic32_22=ic32>>22; ic32_13=ic32>>13; ic32_14=ic32>>14; ic32_9=ic32>>9; ic32_10=ic32>>10; ic32_21=ic32>>21; ic32_4=ic32>>4; ic32_12=ic32>>12; ic32_24=ic32>>24; ic32_11=ic32>>11; ic32_18=ic32>>18; ic32_27=ic32>>27; ic32_28=ic32>>28; ic32_29=ic32>>29; ic32_25=ic32>>25; ic32_26=ic32>>26; ic32_23=ic32>>23; ic32_30=ic32>>30; ic32_19=ic32>>19; ic32_31=ic32>>31;
   84328:	b9008bfb 	str	w27, [sp, #136]
	if(((ic32_8)&0b110111111100000000100100)==0b000011110100000000100000) {
   8432c:	54029a40 	b.eq	89674 <disasm+0x5694>  // b.none
		names="smlal\0sqdmlal\0smlsl\0sqdmlsl\0smull\0sqdmull\0?\0?\0umlal\0?\0umlsl\0?\0umull\0";
		op=((ic32_26)&0x8)|((ic32_13)&0x6)|((ic32_12)&0x1); j=((ic32_9)&0x4)|((ic32_20)&0x3); m=((ic32_16)&0xf); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
		z=1;q=0;
		args[0]=disasm_arg_Vtz; args[1]=disasm_arg_VnT; args[2]=disasm_arg_VmTs; 
	} else
	if(((ic32_8)&0b110111111000000011100100)==0b000011110000000010000100) {
   84330:	52901c9b 	mov	w27, #0x80e4                	// #32996
   84334:	72a01bfb 	movk	w27, #0xdf, lsl #16
   84338:	0a1b007b 	and	w27, w3, w27
   8433c:	2a1b03fe 	mov	w30, w27
   84340:	b90097fe 	str	w30, [sp, #148]
   84344:	5280109b 	mov	w27, #0x84                  	// #132
   84348:	72a001fb 	movk	w27, #0xf, lsl #16
   8434c:	6b1b03df 	cmp	w30, w27
   84350:	54029640 	b.eq	89618 <disasm+0x5638>  // b.none
		names="?\0rshrn\0sqshrn\0sqrshrn\0sqshrun\0sqrshrun\0uqshrn\0uqrshrn\0";
		op=((ic32_27)&0x4)|((ic32_11)&0x3); j=((ic32_16)&0x7f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
		q=0;
		args[0]=disasm_arg_Vtj2; args[1]=disasm_arg_VnTa; args[2]=disasm_arg_shrshift; 
	} else
	if(((ic32_8)&0b110111111000000011111100)==0b000011110000000010100100) {
   84354:	52901f9b 	mov	w27, #0x80fc                	// #33020
   84358:	72a01bfb 	movk	w27, #0xdf, lsl #16
   8435c:	0a1b007b 	and	w27, w3, w27
   84360:	2a1b03fe 	mov	w30, w27
   84364:	b9008bfe 	str	w30, [sp, #136]
   84368:	5280149b 	mov	w27, #0xa4                  	// #164
   8436c:	72a001fb 	movk	w27, #0xf, lsl #16
   84370:	6b1b03df 	cmp	w30, w27
   84374:	54029280 	b.eq	895c4 <disasm+0x55e4>  // b.none
		names="sshll\0usshll\0";
		op=((ic32_29)&0x1); j=((ic32_16)&0x7f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
		q=0;
		args[0]=disasm_arg_Vtj2; args[1]=disasm_arg_VnTa; args[2]=disasm_arg_shlshift; 
	} else
	if(((ic32_8)&0b110111111100000000100100)==0b000011111000000000100000) {
   84378:	b9407ffe 	ldr	w30, [sp, #124]
   8437c:	5290041b 	mov	w27, #0x8020                	// #32800
   84380:	72a001fb 	movk	w27, #0xf, lsl #16
   84384:	6b1b03df 	cmp	w30, w27
   84388:	54028e40 	b.eq	89550 <disasm+0x5570>  // b.none
		names="smlal\0sqdmlal\0smlsl\0sqdmlsl\0smull\0sqdmull\0?\0?\0umlal\0?\0umlsl\0?\0umull\0";
		op=((ic32_26)&0x8)|((ic32_13)&0x6)|((ic32_12)&0x1); j=((ic32_10)&0x2)|((ic32_21)&0x1); m=((ic32_16)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
		z=2;q=0;
		args[0]=disasm_arg_Vtz; args[1]=disasm_arg_VnT; args[2]=disasm_arg_VmTs; 
	} else
	if(((ic32_8)&0b111111110000000001111100)==0b010010000000000001111100) {
   8438c:	52800f9b 	mov	w27, #0x7c                  	// #124
   84390:	72a0091b 	movk	w27, #0x48, lsl #16
   84394:	6b1b035f 	cmp	w26, w27
   84398:	54028aa0 	b.eq	894ec <disasm+0x550c>  // b.none
		names="stxrh\0stlxrh\0?\0?\0?\0?\0?\0?\0?\0?\0cash\0caslh\0?\0?\0casah\0casalh\0";
		op=((ic32_20)&0xe)|((ic32_15)&0x1); d=((ic32_16)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
		args[0]=disasm_arg_Wd; args[1]=disasm_arg_Wt; args[2]=disasm_arg_offs; args[3]=disasm_arg_XnS; args[4]=disasm_arg_offe; 
	} else
	if(((ic32_8)&0b111111111110000011111100)==0b010011100000000000011100) {
   8439c:	121e547a 	and	w26, w3, #0xfffffc
   843a0:	5280039b 	mov	w27, #0x1c                  	// #28
   843a4:	12136b5a 	and	w26, w26, #0xffffe0ff
   843a8:	72a009db 	movk	w27, #0x4e, lsl #16
   843ac:	6b1b035f 	cmp	w26, w27
   843b0:	54028720 	b.eq	89494 <disasm+0x54b4>  // b.none
		names="ins\0";
		j=((ic32_16)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
		args[0]=disasm_arg_Vtj; args[1]=disasm_arg_offs; args[2]=disasm_arg_FPidx; args[3]=disasm_arg_offe; args[4]=disasm_arg_R2n; 
	} else
	if(((ic32_8)&0b111111111111111111001100)==0b010011100010100001001000) {
   843b4:	121e547b 	and	w27, w3, #0xfffffc
   843b8:	5285091e 	mov	w30, #0x2848                	// #10312
   843bc:	121a777b 	and	w27, w27, #0xffffffcf
   843c0:	72a009de 	movk	w30, #0x4e, lsl #16
   843c4:	6b1e037f 	cmp	w27, w30
   843c8:	54028400 	b.eq	89448 <disasm+0x5468>  // b.none
		names="aese\0aesd\0aesmc\0aesimc\0";
		op=((ic32_12)&0x3); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
		args[0]=disasm_arg_Vt16b; args[1]=disasm_arg_Vn16b; 
	} else
	if(((ic32_8)&0b111111111011111111111100)==0b010011100010000101101000) {
   843cc:	52842d1b 	mov	w27, #0x2168                	// #8552
   843d0:	72a009db 	movk	w27, #0x4e, lsl #16
   843d4:	6b1b009f 	cmp	w4, w27
   843d8:	54028120 	b.eq	893fc <disasm+0x541c>  // b.none
		names="fcvtn2\0";
		z=((ic32_22)&0x1); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
		q=1;
		args[0]=disasm_arg_Vtzq2; args[1]=disasm_arg_Vnz3; 
	} else
	if(((ic32_8)&0b111111111011111111111100)==0b010011100010000111101000) {
   843dc:	52843d1b 	mov	w27, #0x21e8                	// #8680
   843e0:	72a009db 	movk	w27, #0x4e, lsl #16
   843e4:	6b1b009f 	cmp	w4, w27
   843e8:	54027e40 	b.eq	893b0 <disasm+0x53d0>  // b.none
		names="fcvtl2\0";
		z=((ic32_22)&0x1); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
		q=1;
		args[0]=disasm_arg_Vtz3; args[1]=disasm_arg_Vnzq2; 
	} else
	if(((ic32_8)&0b111111110011111111111100)==0b010011100010000100101000) {
   843ec:	52842504 	mov	w4, #0x2128                	// #8488
   843f0:	72a009c4 	movk	w4, #0x4e, lsl #16
   843f4:	6b04013f 	cmp	w9, w4
   843f8:	54027b60 	b.eq	89364 <disasm+0x5384>  // b.none
		names="xtn2\0";
		z=((ic32_22)&0x3); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
		q=1;
		args[0]=disasm_arg_VtT; args[1]=disasm_arg_VnT2; 
	} else
	if(((ic32_8)&0b111111110011111111111100)==0b010011100010000100111000) {
   843fc:	52842704 	mov	w4, #0x2138                	// #8504
   84400:	72a009c4 	movk	w4, #0x4e, lsl #16
   84404:	6b04013f 	cmp	w9, w4
   84408:	54030040 	b.eq	8a410 <disasm+0x6430>  // b.none
		names="shll2\0";
		z=((ic32_22)&0x3); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
		q=1;
		args[0]=disasm_arg_Vtz; args[1]=disasm_arg_VnT; args[2]=disasm_arg_shift8; 
	} else
	if(((ic32_8)&0b111111110010000010011100)==0b010011100010000010010000) {
   8440c:	52841204 	mov	w4, #0x2090                	// #8336
   84410:	72a009c4 	movk	w4, #0x4e, lsl #16
   84414:	6b0401df 	cmp	w14, w4
   84418:	5402fd00 	b.eq	8a3b8 <disasm+0x63d8>  // b.none
		names="sqdmlal2\0sqdmlsl2\0sqdmull2\0";
		op=((ic32_13)&0x3); z=((ic32_22)&0x3); m=((ic32_16)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
		q=1;
		args[0]=disasm_arg_Vtz; args[1]=disasm_arg_VnT; args[2]=disasm_arg_VmT; 
	} else
	if(((ic32_8)&0b111111111100000010110100)==0b010011110100000000100000) {
   8441c:	52880404 	mov	w4, #0x4020                	// #16416
   84420:	72a009e4 	movk	w4, #0x4f, lsl #16
   84424:	6b04021f 	cmp	w16, w4
   84428:	5402f980 	b.eq	8a358 <disasm+0x6378>  // b.none
		names="smlal2\0smlsl2\0";
		op=((ic32_14)&0x1); j=((ic32_9)&0x4)|((ic32_20)&0x3); m=((ic32_16)&0xf); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
		z=1;q=1;
		args[0]=disasm_arg_Vtz3; args[1]=disasm_arg_VnT; args[2]=disasm_arg_VmTs; 
	} else
	if(((ic32_8)&0b111111111100000011110100)==0b010011110100000010100000) {
   8442c:	52881404 	mov	w4, #0x40a0                	// #16544
   84430:	72a009e4 	movk	w4, #0x4f, lsl #16
   84434:	6b04025f 	cmp	w18, w4
   84438:	5402f600 	b.eq	8a2f8 <disasm+0x6318>  // b.none
		names="smull2\0";
		j=((ic32_9)&0x4)|((ic32_20)&0x3); m=((ic32_16)&0xf); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
		z=1;q=1;
		args[0]=disasm_arg_VtT; args[1]=disasm_arg_VnT; args[2]=disasm_arg_VmTs; 
	} else
	if(((ic32_8)&0b111111111100000010110100)==0b010011111000000000100000) {
   8443c:	52900404 	mov	w4, #0x8020                	// #32800
   84440:	72a009e4 	movk	w4, #0x4f, lsl #16
   84444:	6b04021f 	cmp	w16, w4
   84448:	5402f280 	b.eq	8a298 <disasm+0x62b8>  // b.none
		names="smlal2\0smlsl2\0";
		op=((ic32_14)&0x1); j=((ic32_10)&0x2)|((ic32_21)&0x1); m=((ic32_16)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
		z=2;q=1;
		args[0]=disasm_arg_Vtz3; args[1]=disasm_arg_VnT; args[2]=disasm_arg_VmTs; 
	} else
	if(((ic32_8)&0b111111111100000011110100)==0b010011111000000010100000) {
   8444c:	52901404 	mov	w4, #0x80a0                	// #32928
   84450:	72a009e4 	movk	w4, #0x4f, lsl #16
   84454:	6b04025f 	cmp	w18, w4
   84458:	5402ef00 	b.eq	8a238 <disasm+0x6258>  // b.none
		names="smull2\0";
		j=((ic32_10)&0x2)|((ic32_21)&0x1); m=((ic32_16)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
		z=2;q=1;
		args[0]=disasm_arg_VtT; args[1]=disasm_arg_VnT; args[2]=disasm_arg_VmTs; 
	} else
	if((ic32&0b11111111000000000000000000010000)==0b01010100000000000000000000000000) {
   8445c:	121c6c04 	and	w4, w0, #0xfffffff0
   84460:	52aa8012 	mov	w18, #0x54000000            	// #1409286144
   84464:	12083084 	and	w4, w4, #0xff00001f
	ic32_20=ic32>>20; ic32_15=ic32>>15; ic32_16=ic32>>16; ic32_5=ic32>>5; ic32_8=ic32>>8; ic32_22=ic32>>22; ic32_13=ic32>>13; ic32_14=ic32>>14; ic32_9=ic32>>9; ic32_10=ic32>>10; ic32_21=ic32>>21; ic32_4=ic32>>4; ic32_12=ic32>>12; ic32_24=ic32>>24; ic32_11=ic32>>11; ic32_18=ic32>>18; ic32_27=ic32>>27; ic32_28=ic32>>28; ic32_29=ic32>>29; ic32_25=ic32>>25; ic32_26=ic32>>26; ic32_23=ic32>>23; ic32_30=ic32>>30; ic32_19=ic32>>19; ic32_31=ic32>>31;
   84468:	53177c10 	lsr	w16, w0, #23
	if((ic32&0b11111111000000000000000000010000)==0b01010100000000000000000000000000) {
   8446c:	6b12009f 	cmp	w4, w18
   84470:	5402eb00 	b.eq	8a1d0 <disasm+0x61f0>  // b.none
		names="b.%s\0";
		i=((ic32_23)&1?(-1<<19):0)|((ic32_5)&0x7ffff); c=((ic32)&0xf); 
		args[0]=disasm_arg_labeli4; 
	} else
	if(((ic32_8)&0b111111111110000011111100)==0b010111100000000000000100) {
   84474:	52800084 	mov	w4, #0x4                   	// #4
   84478:	72a00bc4 	movk	w4, #0x5e, lsl #16
   8447c:	6b04035f 	cmp	w26, w4
   84480:	5402e7c0 	b.eq	8a178 <disasm+0x6198>  // b.none
		names="dup\0";
		j=((ic32_16)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
		args[0]=disasm_arg_FPjt; args[1]=disasm_arg_Vnj; args[2]=disasm_arg_offs; args[3]=disasm_arg_FPidx; args[4]=disasm_arg_offe; 
	} else
	if(((ic32_8)&0b111111111110000011111100)==0b010111100000000000110000) {
   84484:	52800604 	mov	w4, #0x30                  	// #48
   84488:	72a00bc4 	movk	w4, #0x5e, lsl #16
   8448c:	6b04035f 	cmp	w26, w4
   84490:	5402e480 	b.eq	8a120 <disasm+0x6140>  // b.none
		names="sha1su0\0";
		m=((ic32_16)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
		args[0]=disasm_arg_Vt4s; args[1]=disasm_arg_Vn4s; args[2]=disasm_arg_Vm4s; 
	} else
	if(((ic32_8)&0b111111111110000011001100)==0b010111100000000000000000) {
   84494:	529c1984 	mov	w4, #0xe0cc                	// #57548
   84498:	72a01fe4 	movk	w4, #0xff, lsl #16
   8449c:	0a040064 	and	w4, w3, w4
   844a0:	7157809f 	cmp	w4, #0x5e0, lsl #12
   844a4:	5402e120 	b.eq	8a0c8 <disasm+0x60e8>  // b.none
		names="sha1c\0sha1p\0sha1m\0sha1su0\0";
		op=((ic32_12)&0x3); m=((ic32_16)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
		args[0]=disasm_arg_Qt; args[1]=disasm_arg_Sn; args[2]=disasm_arg_Vm4s; 
	} else
	if(((ic32_8)&0b111111111110000011101100)==0b010111100000000001000000) {
   844a8:	529c1d84 	mov	w4, #0xe0ec                	// #57580
   844ac:	52800812 	mov	w18, #0x40                  	// #64
   844b0:	72a01fe4 	movk	w4, #0xff, lsl #16
   844b4:	0a040064 	and	w4, w3, w4
   844b8:	72a00bd2 	movk	w18, #0x5e, lsl #16
   844bc:	6b12009f 	cmp	w4, w18
   844c0:	5402dd80 	b.eq	8a070 <disasm+0x6090>  // b.none
		names="sha256h\0sha256h2\0";
		op=((ic32_12)&0x1); m=((ic32_16)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
		args[0]=disasm_arg_Qt; args[1]=disasm_arg_Qn; args[2]=disasm_arg_Vm4s; 
	} else
	if(((ic32_8)&0b111111111110000011111100)==0b010111100000000001100000) {
   844c4:	52800c04 	mov	w4, #0x60                  	// #96
   844c8:	72a00bc4 	movk	w4, #0x5e, lsl #16
   844cc:	6b04035f 	cmp	w26, w4
   844d0:	5402da40 	b.eq	8a018 <disasm+0x6038>  // b.none
		names="sha256su1\0";
		m=((ic32_16)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
		args[0]=disasm_arg_Vt4s; args[1]=disasm_arg_Vn4s; args[2]=disasm_arg_Vm4s; 
	} else
	if(((ic32_8)&0b111111111111111111111100)==0b010111100010100000001000) {
   844d4:	52850104 	mov	w4, #0x2808                	// #10248
   844d8:	72a00bc4 	movk	w4, #0x5e, lsl #16
   844dc:	6b04033f 	cmp	w25, w4
   844e0:	5402d760 	b.eq	89fcc <disasm+0x5fec>  // b.none
		names="sha1h\0";
		n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
		args[0]=disasm_arg_St; args[1]=disasm_arg_Sn; 
	} else
	if(((ic32_8)&0b111111111111111111111100)==0b010111100010100000011000) {
   844e4:	52850304 	mov	w4, #0x2818                	// #10264
   844e8:	72a00bc4 	movk	w4, #0x5e, lsl #16
   844ec:	6b04033f 	cmp	w25, w4
   844f0:	5402d480 	b.eq	89f80 <disasm+0x5fa0>  // b.none
		names="sha1su1\0";
		n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
		args[0]=disasm_arg_Vt4s; args[1]=disasm_arg_Vn4s; 
	} else
	if(((ic32_8)&0b111111111111111111111100)==0b010111100010100000101000) {
   844f4:	52850504 	mov	w4, #0x2828                	// #10280
   844f8:	72a00bc4 	movk	w4, #0x5e, lsl #16
   844fc:	6b04033f 	cmp	w25, w4
   84500:	5402d1a0 	b.eq	89f34 <disasm+0x5f54>  // b.none
		names="sha256su0\0";
		n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
		args[0]=disasm_arg_Vt4s; args[1]=disasm_arg_Vn4s; 
	} else
	if(((ic32_8)&0b111111111110000011111100)==0b010111100100000000011100) {
   84504:	52880384 	mov	w4, #0x401c                	// #16412
   84508:	72a00bc4 	movk	w4, #0x5e, lsl #16
   8450c:	6b04035f 	cmp	w26, w4
   84510:	5402ce60 	b.eq	89edc <disasm+0x5efc>  // b.none
		names="fmulx\0";
		m=((ic32_16)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
		args[0]=disasm_arg_Ht; args[1]=disasm_arg_Hn; args[2]=disasm_arg_Hm; 
	} else
	if(((ic32_8)&0b111111111110000011111100)==0b010111100100000000100100) {
   84514:	52880484 	mov	w4, #0x4024                	// #16420
   84518:	72a00bc4 	movk	w4, #0x5e, lsl #16
   8451c:	6b04035f 	cmp	w26, w4
   84520:	5402cb20 	b.eq	89e84 <disasm+0x5ea4>  // b.none
		names="fcmeq\0";
		m=((ic32_16)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
		args[0]=disasm_arg_Ht; args[1]=disasm_arg_Hn; args[2]=disasm_arg_Hm; 
	} else
	if(((ic32_8)&0b111111111010000011111100)==0b010111100010000011011100) {
   84524:	52941f84 	mov	w4, #0xa0fc                	// #41212
   84528:	72a01fe4 	movk	w4, #0xff, lsl #16
   8452c:	0a04007b 	and	w27, w3, w4
   84530:	52841b84 	mov	w4, #0x20dc                	// #8412
   84534:	72a00bc4 	movk	w4, #0x5e, lsl #16
   84538:	6b04037f 	cmp	w27, w4
   8453c:	5402c780 	b.eq	89e2c <disasm+0x5e4c>  // b.none
		names="fmulx\0";
		z=((ic32_22)&0x1); m=((ic32_16)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
		args[0]=disasm_arg_FPt; args[1]=disasm_arg_FPn; args[2]=disasm_arg_FPm; 
	} else
	if(((ic32_8)&0b111111111010000011111100)==0b010111100010000011100100) {
   84540:	52841c84 	mov	w4, #0x20e4                	// #8420
   84544:	72a00bc4 	movk	w4, #0x5e, lsl #16
   84548:	6b04037f 	cmp	w27, w4
   8454c:	5402c440 	b.eq	89dd4 <disasm+0x5df4>  // b.none
		names="fcmeq\0";
		z=((ic32_22)&0x1); m=((ic32_16)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
		args[0]=disasm_arg_FPt; args[1]=disasm_arg_FPn; args[2]=disasm_arg_FPm; 
	} else
	if(((ic32_8)&0b111111110111111111001100)==0b010111100011000011001000) {
   84550:	528ff984 	mov	w4, #0x7fcc                	// #32716
   84554:	52861912 	mov	w18, #0x30c8                	// #12488
   84558:	72a01fe4 	movk	w4, #0xff, lsl #16
   8455c:	0a040064 	and	w4, w3, w4
   84560:	72a00bd2 	movk	w18, #0x5e, lsl #16
   84564:	6b12009f 	cmp	w4, w18
   84568:	5402c0c0 	b.eq	89d80 <disasm+0x5da0>  // b.none
		names="fmaxnmp\0faddp\0?\0fmaxp\0fminnmp\0?\0?\0fminp\0";
		op=((ic32_21)&0x4)|((ic32_12)&0x3); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
		args[0]=disasm_arg_Ht; args[1]=disasm_arg_Vn2h; 
	} else
	if(((ic32_8)&0b111111110110000011111100)==0b010111100100000000111100) {
   8456c:	528c1f84 	mov	w4, #0x60fc                	// #24828
   84570:	72a01fe4 	movk	w4, #0xff, lsl #16
   84574:	0a040064 	and	w4, w3, w4
   84578:	2a0403f2 	mov	w18, w4
   8457c:	b900b3f2 	str	w18, [sp, #176]
   84580:	52880784 	mov	w4, #0x403c                	// #16444
   84584:	72a00bc4 	movk	w4, #0x5e, lsl #16
   84588:	6b04025f 	cmp	w18, w4
   8458c:	5402bce0 	b.eq	89d28 <disasm+0x5d48>  // b.none
		names="frecps\0frsqrts\0";
		op=((ic32_23)&0x1); m=((ic32_16)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
		args[0]=disasm_arg_Ht; args[1]=disasm_arg_Hn; args[2]=disasm_arg_Hm; 
	} else
	if(((ic32_8)&0b111111110011111111111100)==0b010111100011000110111000) {
   84590:	52863704 	mov	w4, #0x31b8                	// #12728
   84594:	72a00bc4 	movk	w4, #0x5e, lsl #16
   84598:	6b04013f 	cmp	w9, w4
   8459c:	5402ba00 	b.eq	89cdc <disasm+0x5cfc>  // b.none
		names="addp\0";
		z=((ic32_22)&0x3); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
		args[0]=disasm_arg_FPz3t; args[1]=disasm_arg_Vn2d; 
	} else
	if(((ic32_8)&0b111111110010000011111100)==0b010111100010000011111100) {
   845a0:	52841f84 	mov	w4, #0x20fc                	// #8444
   845a4:	52841f89 	mov	w9, #0x20fc                	// #8444
   845a8:	72a01fe4 	movk	w4, #0xff, lsl #16
   845ac:	0a040064 	and	w4, w3, w4
   845b0:	72a00bc9 	movk	w9, #0x5e, lsl #16
   845b4:	6b09009f 	cmp	w4, w9
   845b8:	5402b660 	b.eq	89c84 <disasm+0x5ca4>  // b.none
		names="frecps\0frsqrts\0";
		op=((ic32_23)&0x1); z=((ic32_22)&0x1); m=((ic32_16)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
		args[0]=disasm_arg_FPt; args[1]=disasm_arg_FPn; args[2]=disasm_arg_FPm; 
	} else
	if(((ic32_8)&0b111111110010000010011100)==0b010111100010000010010000) {
   845bc:	52841204 	mov	w4, #0x2090                	// #8336
   845c0:	72a00bc4 	movk	w4, #0x5e, lsl #16
   845c4:	6b0401df 	cmp	w14, w4
   845c8:	5402b320 	b.eq	89c2c <disasm+0x5c4c>  // b.none
		names="sqdmlal\0sqdmlsl\0sqdmull\0";
		op=((ic32_13)&0x3); z=((ic32_22)&0x3); m=((ic32_16)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
		args[0]=disasm_arg_FPz4t; args[1]=disasm_arg_FPz2n; args[2]=disasm_arg_FPz2m; 
	} else
	if(((ic32_8)&0b111111111100000011100100)==0b010111110100000011000000) {
   845cc:	52981c84 	mov	w4, #0xc0e4                	// #49380
   845d0:	72a01fe4 	movk	w4, #0xff, lsl #16
   845d4:	0a04006e 	and	w14, w3, w4
   845d8:	52881804 	mov	w4, #0x40c0                	// #16576
   845dc:	72a00be4 	movk	w4, #0x5f, lsl #16
   845e0:	6b0401df 	cmp	w14, w4
   845e4:	5402af40 	b.eq	89bcc <disasm+0x5bec>  // b.none
		names="sqdmulh\0sqrdmulh\0";
		op=((ic32_12)&0x1); j=((ic32_9)&0x4)|((ic32_20)&0x3); m=((ic32_16)&0xf); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
		z=1;
		args[0]=disasm_arg_FPz4t; args[1]=disasm_arg_FPz4n; args[2]=disasm_arg_VmTs; 
	} else
	if(((ic32_8)&0b111111111100000000110100)==0b010111110100000000110000) {
   845e8:	52980684 	mov	w4, #0xc034                	// #49204
   845ec:	72a01fe4 	movk	w4, #0xff, lsl #16
   845f0:	0a040072 	and	w18, w3, w4
   845f4:	52880604 	mov	w4, #0x4030                	// #16432
   845f8:	72a00be4 	movk	w4, #0x5f, lsl #16
   845fc:	6b04025f 	cmp	w18, w4
   84600:	5402ab60 	b.eq	89b6c <disasm+0x5b8c>  // b.none
		names="sqdmlal\0sqdmlsl\0sqdmull\0";
		op=((ic32_14)&0x3); j=((ic32_9)&0x4)|((ic32_20)&0x3); m=((ic32_16)&0xf); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
		z=1;
		args[0]=disasm_arg_FPz4t; args[1]=disasm_arg_FPz3n; args[2]=disasm_arg_VmTs; 
	} else
	if(((ic32_8)&0b111111111000000011011100)==0b010111110000000001010100) {
   84604:	52901b84 	mov	w4, #0x80dc                	// #32988
   84608:	52800a89 	mov	w9, #0x54                  	// #84
   8460c:	72a01fe4 	movk	w4, #0xff, lsl #16
   84610:	0a040064 	and	w4, w3, w4
   84614:	72a00be9 	movk	w9, #0x5f, lsl #16
   84618:	6b09009f 	cmp	w4, w9
   8461c:	5402a7e0 	b.eq	89b18 <disasm+0x5b38>  // b.none
		names="shl\0sqshl\0";
		op=((ic32_13)&0x1); j=((ic32_16)&0x7f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
		args[0]=disasm_arg_Dt; args[1]=disasm_arg_Dn; args[2]=disasm_arg_shlshift; 
	} else
	if(((ic32_8)&0b111111111100000011100100)==0b010111111000000011000000) {
   84620:	52901804 	mov	w4, #0x80c0                	// #32960
   84624:	72a00be4 	movk	w4, #0x5f, lsl #16
   84628:	6b0401df 	cmp	w14, w4
   8462c:	5402a460 	b.eq	89ab8 <disasm+0x5ad8>  // b.none
		names="sqdmulh\0sqrdmulh\0";
		op=((ic32_12)&0x1); j=((ic32_10)&0x2)|((ic32_21)&0x1); m=((ic32_16)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
		z=2;
		args[0]=disasm_arg_FPz4t; args[1]=disasm_arg_FPz4n; args[2]=disasm_arg_VmTs; 
	} else
	if(((ic32_8)&0b111111111100000000110100)==0b010111111000000000110000) {
   84630:	52900604 	mov	w4, #0x8030                	// #32816
   84634:	72a00be4 	movk	w4, #0x5f, lsl #16
   84638:	6b04025f 	cmp	w18, w4
   8463c:	5402a0e0 	b.eq	89a58 <disasm+0x5a78>  // b.none
		names="sqdmlal\0sqdmlsl\0sqdmull\0";
		op=((ic32_14)&0x3); j=((ic32_10)&0x2)|((ic32_21)&0x1); m=((ic32_16)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
		z=2;
		args[0]=disasm_arg_FPz4t; args[1]=disasm_arg_FPz3n; args[2]=disasm_arg_VmTs; 
	} else
	if(((ic32_16)&0b1111111111000000)==0b0110100011000000) {
   84640:	121a24a4 	and	w4, w5, #0xffc0
   84644:	2a0403e9 	mov	w9, w4
   84648:	b90083e9 	str	w9, [sp, #128]
   8464c:	528d1804 	mov	w4, #0x68c0                	// #26816
   84650:	6b04013f 	cmp	w9, w4
   84654:	54029ca0 	b.eq	899e8 <disasm+0x5a08>  // b.none
		names="ldpsw\0";
		i=((ic32_21)&1?(-1<<7):0)|((ic32_15)&0x7f); m=((ic32_10)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
		args[0]=disasm_arg_Xt; args[1]=disasm_arg_Xm; args[2]=disasm_arg_offs; args[3]=disasm_arg_XnS; args[4]=disasm_arg_offe; args[5]=disasm_arg_im4_opt; 
	} else
	if(((ic32_16)&0b1111111101000000)==0b0110100101000000) {
   84658:	529fe804 	mov	w4, #0xff40                	// #65344
   8465c:	0a0400a4 	and	w4, w5, w4
   84660:	528d2809 	mov	w9, #0x6940                	// #26944
   84664:	6b09009f 	cmp	w4, w9
   84668:	54029840 	b.eq	89970 <disasm+0x5990>  // b.none
		names="ldpsw\0";
		p=((ic32_23)&0x1); i=((ic32_21)&1?(-1<<7):0)|((ic32_15)&0x7f); m=((ic32_10)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
		args[0]=disasm_arg_Xt; args[1]=disasm_arg_Xm; args[2]=disasm_arg_offs; args[3]=disasm_arg_XnS; args[4]=disasm_arg_im4_opt; args[5]=disasm_arg_offe; 
	} else
	if(((ic32_8)&0b111111111110000010000100)==0b011011100000000000000100) {
   8466c:	529c1084 	mov	w4, #0xe084                	// #57476
   84670:	52800089 	mov	w9, #0x4                   	// #4
   84674:	72a01fe4 	movk	w4, #0xff, lsl #16
   84678:	0a040064 	and	w4, w3, w4
   8467c:	72a00dc9 	movk	w9, #0x6e, lsl #16
   84680:	6b09009f 	cmp	w4, w9
   84684:	54029480 	b.eq	89914 <disasm+0x5934>  // b.none
		names="ins\0";
		j=((ic32_16)&0x1f); k=((ic32_11)&0xf); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
		args[0]=disasm_arg_Vtj; args[1]=disasm_arg_offs; args[2]=disasm_arg_FPidx; args[3]=disasm_arg_offe; args[4]=disasm_arg_Vnj; args[5]=disasm_arg_offs; args[6]=disasm_arg_FPidxk; args[7]=disasm_arg_offe; 
	} else
	if(((ic32_8)&0b111111110011111111001100)==0b011011100011000011001000) {
   84688:	5287f984 	mov	w4, #0x3fcc                	// #16332
   8468c:	72a01fe4 	movk	w4, #0xff, lsl #16
   84690:	0a040072 	and	w18, w3, w4
   84694:	52861904 	mov	w4, #0x30c8                	// #12488
   84698:	72a00dc4 	movk	w4, #0x6e, lsl #16
   8469c:	6b04025f 	cmp	w18, w4
   846a0:	5405c420 	b.eq	8ff24 <disasm+0xbf44>  // b.none
		names="fmaxnmv\0?\0?\0fmaxv\0fminnmv\0?\0?\0fminv\0";
		op=((ic32_21)&0x4)|((ic32_12)&0x3); z=((ic32_22)&0x1); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
		args[0]=disasm_arg_FPt; args[1]=disasm_arg_Vn4s; 
	} else
	if(((ic32_8)&0b111111111111100011111100)==0b011011110000000011100100) {
   846a4:	b9408fe9 	ldr	w9, [sp, #140]
   846a8:	52801c84 	mov	w4, #0xe4                  	// #228
   846ac:	72a00de4 	movk	w4, #0x6f, lsl #16
   846b0:	6b04013f 	cmp	w9, w4
   846b4:	5405c0e0 	b.eq	8fed0 <disasm+0xbef0>  // b.none
		names="movi\0";
		j=((ic32_11)&0xe0)|((ic32_5)&0x1f); t=((ic32)&0x1f); 
		args[0]=disasm_arg_Vt2d; args[1]=disasm_arg_imm64; 
	} else
	if(((ic32_8)&0b111111111111100011111100)==0b011011110000000011110100) {
   846b8:	b9408fe9 	ldr	w9, [sp, #140]
   846bc:	52801e84 	mov	w4, #0xf4                  	// #244
   846c0:	72a00de4 	movk	w4, #0x6f, lsl #16
   846c4:	6b04013f 	cmp	w9, w4
   846c8:	5405bda0 	b.eq	8fe7c <disasm+0xbe9c>  // b.none
		names="fmov\0";
		j=((ic32_11)&0xe0)|((ic32_5)&0x1f); t=((ic32)&0x1f); 
		args[0]=disasm_arg_Vt2d; args[1]=disasm_arg_F64; 
	} else
	if(((ic32_8)&0b111111110010000000001100)==0b011110000010000000000000) {
   846cc:	b94077e4 	ldr	w4, [sp, #116]
   846d0:	715e089f 	cmp	w4, #0x782, lsl #12
   846d4:	5405ba00 	b.eq	8fe14 <disasm+0xbe34>  // b.none
		names="ldaddh\0ldclrh\0ldeorh\0ldseth\0ldsmaxh\0ldsminh\0ldumaxh\0lduminh\0swph\0?\0?\0?\0?\0?\0?\0?\0ldaddlh\0ldclrlh\0ldeorlh\0ldsetlh\0ldsmaxlh\0ldsminlh\0ldumaxlh\0lduminlh\0swplh\0?\0?\0?\0?\0?\0?\0?\0ldaddah\0ldclrah\0ldeorah\0ldsetah\0ldsmaxah\0ldsminah\0ldumaxah\0lduminah\0swpah\0?\0?\0?\0?\0?\0?\0?\0ldaddalh\0ldclralh\0ldeoralh\0ldsetalh\0ldsmaxalh\0ldsminalh\0ldumaxalh\0lduminalh\0swpalh\0";
		op=((ic32_18)&0x30)|((ic32_12)&0xf); d=((ic32_16)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
		args[0]=disasm_arg_Wd; args[1]=disasm_arg_Wt; args[2]=disasm_arg_offs; args[3]=disasm_arg_XnS; args[4]=disasm_arg_offe; 
	} else
	if(((ic32_8)&0b111111111101111111111100)==0b011111100001000011001000) {
   846d8:	121e5464 	and	w4, w3, #0xfffffc
   846dc:	52821909 	mov	w9, #0x10c8                	// #4296
   846e0:	12127884 	and	w4, w4, #0xffffdfff
   846e4:	72a00fc9 	movk	w9, #0x7e, lsl #16
   846e8:	6b09009f 	cmp	w4, w9
   846ec:	5405b6e0 	b.eq	8fdc8 <disasm+0xbde8>  // b.none
		names="fmaxnmp\0";
		z=((ic32_21)&0x1); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
		args[0]=disasm_arg_FPt; args[1]=disasm_arg_Vnz; 
	} else
	if(((ic32_8)&0b111111111110000011110100)==0b011111100100000000100100) {
   846f0:	529c1e84 	mov	w4, #0xe0f4                	// #57588
   846f4:	72a01fe4 	movk	w4, #0xff, lsl #16
   846f8:	0a04006e 	and	w14, w3, w4
   846fc:	52880484 	mov	w4, #0x4024                	// #16420
   84700:	72a00fc4 	movk	w4, #0x7e, lsl #16
   84704:	6b0401df 	cmp	w14, w4
   84708:	5405b340 	b.eq	8fd70 <disasm+0xbd90>  // b.none
		names="fcmge\0facge\0";
		op=((ic32_11)&0x1); m=((ic32_16)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
		args[0]=disasm_arg_Ht; args[1]=disasm_arg_Hn; args[2]=disasm_arg_Hm; 
	} else
	if(((ic32_8)&0b111111111010000011110100)==0b011111100010000011100100) {
   8470c:	52941e84 	mov	w4, #0xa0f4                	// #41204
   84710:	52841c89 	mov	w9, #0x20e4                	// #8420
   84714:	72a01fe4 	movk	w4, #0xff, lsl #16
   84718:	0a040064 	and	w4, w3, w4
   8471c:	72a00fc9 	movk	w9, #0x7e, lsl #16
   84720:	6b09009f 	cmp	w4, w9
   84724:	5405afa0 	b.eq	8fd18 <disasm+0xbd38>  // b.none
		names="fcmge\0facge\0";
		op=((ic32_11)&0x1); z=((ic32_22)&0x1); m=((ic32_16)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
		args[0]=disasm_arg_FPt; args[1]=disasm_arg_FPn; args[2]=disasm_arg_FPm; 
	} else
	if(((ic32_8)&0b111111111110000011111100)==0b011111101100000000010100) {
   84728:	52980289 	mov	w9, #0xc014                	// #49172
   8472c:	72a00fc9 	movk	w9, #0x7e, lsl #16
   84730:	6b09035f 	cmp	w26, w9
   84734:	5405ac60 	b.eq	8fcc0 <disasm+0xbce0>  // b.none
		names="fabd\0";
		m=((ic32_16)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
		args[0]=disasm_arg_Ht; args[1]=disasm_arg_Hn; args[2]=disasm_arg_Hm; 
	} else
	if(((ic32_8)&0b111111111110000011110100)==0b011111101100000000100100) {
   84738:	52980489 	mov	w9, #0xc024                	// #49188
   8473c:	72a00fc9 	movk	w9, #0x7e, lsl #16
   84740:	6b0901df 	cmp	w14, w9
   84744:	5405a920 	b.eq	8fc68 <disasm+0xbc88>  // b.none
		names="fcmgt\0facgt\0";
		op=((ic32_11)&0x1); m=((ic32_16)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
		args[0]=disasm_arg_Ht; args[1]=disasm_arg_Hn; args[2]=disasm_arg_Hm; 
	} else
	if(((ic32_8)&0b111111111010000011111100)==0b011111101010000011010100) {
   84748:	52941a89 	mov	w9, #0xa0d4                	// #41172
   8474c:	72a00fc9 	movk	w9, #0x7e, lsl #16
   84750:	6b09037f 	cmp	w27, w9
   84754:	5405a5e0 	b.eq	8fc10 <disasm+0xbc30>  // b.none
		names="fabd\0";
		z=((ic32_22)&0x1); m=((ic32_16)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
		args[0]=disasm_arg_FPt; args[1]=disasm_arg_FPn; args[2]=disasm_arg_FPm; 
	} else
	if(((ic32_8)&0b111111111010000011110100)==0b011111101010000011100100) {
   84758:	52941c89 	mov	w9, #0xa0e4                	// #41188
   8475c:	72a00fc9 	movk	w9, #0x7e, lsl #16
   84760:	6b09009f 	cmp	w4, w9
   84764:	5405a2a0 	b.eq	8fbb8 <disasm+0xbbd8>  // b.none
		names="fcmgt\0facgt\0";
		op=((ic32_11)&0x1); z=((ic32_22)&0x1); m=((ic32_16)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
		args[0]=disasm_arg_FPt; args[1]=disasm_arg_FPn; args[2]=disasm_arg_FPm; 
	} else
	if(((ic32_8)&0b111111110010000011110100)==0b011111100000000010000100) {
   84768:	52841e84 	mov	w4, #0x20f4                	// #8436
   8476c:	52801089 	mov	w9, #0x84                  	// #132
   84770:	72a01fe4 	movk	w4, #0xff, lsl #16
   84774:	0a040064 	and	w4, w3, w4
   84778:	72a00fc9 	movk	w9, #0x7e, lsl #16
   8477c:	6b09009f 	cmp	w4, w9
   84780:	54059f00 	b.eq	8fb60 <disasm+0xbb80>  // b.none
		names="sqrdmlah\0sqrdmlsh\0";
		op=((ic32_11)&0x1); z=((ic32_22)&0x3); m=((ic32_16)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
		args[0]=disasm_arg_FPz2t; args[1]=disasm_arg_FPz2n; args[2]=disasm_arg_FPz2m; 
	} else
	if(((ic32_8)&0b111111110011111111001100)==0b011111100011000011001000) {
   84784:	52861904 	mov	w4, #0x30c8                	// #12488
   84788:	72a00fc4 	movk	w4, #0x7e, lsl #16
   8478c:	6b04025f 	cmp	w18, w4
   84790:	54059be0 	b.eq	8fb0c <disasm+0xbb2c>  // b.none
		names="?\0faddp\0?\0fmaxp\0fminnmp\0?\0?\0fminp\0";
		op=((ic32_21)&0x4)|((ic32_12)&0x3); z=((ic32_22)&0x1); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
		args[0]=disasm_arg_FPt; args[1]=disasm_arg_Vnz; 
	} else
	if(((ic32_8)&0b111111111100000011010100)==0b011111110100000011010000) {
   84794:	52981a84 	mov	w4, #0xc0d4                	// #49364
   84798:	52881a09 	mov	w9, #0x40d0                	// #16592
   8479c:	72a01fe4 	movk	w4, #0xff, lsl #16
   847a0:	0a040064 	and	w4, w3, w4
   847a4:	72a00fe9 	movk	w9, #0x7f, lsl #16
   847a8:	6b09009f 	cmp	w4, w9
   847ac:	54059800 	b.eq	8faac <disasm+0xbacc>  // b.none
		names="sqrdmlah\0sqrdmlsh\0";
		op=((ic32_13)&0x1); j=((ic32_9)&0x4)|((ic32_20)&0x3); m=((ic32_16)&0xf); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
		z=1;
		args[0]=disasm_arg_FPz4t; args[1]=disasm_arg_FPz3n; args[2]=disasm_arg_VmTs; 
	} else
	if(((ic32_8)&0b111111111000000011111100)==0b011111110000000001100100) {
   847b0:	121e5469 	and	w9, w3, #0xfffffc
   847b4:	52800c8e 	mov	w14, #0x64                  	// #100
   847b8:	12116129 	and	w9, w9, #0xffff80ff
   847bc:	72a00fee 	movk	w14, #0x7f, lsl #16
   847c0:	6b0e013f 	cmp	w9, w14
   847c4:	540594a0 	b.eq	8fa58 <disasm+0xba78>  // b.none
		names="sqshlu\0";
		j=((ic32_16)&0x7f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
		args[0]=disasm_arg_Dt; args[1]=disasm_arg_Dn; args[2]=disasm_arg_shlshift; 
	} else
	if(((ic32_8)&0b111111111000000011111100)==0b011111110000000001110100) {
   847c8:	52800e8e 	mov	w14, #0x74                  	// #116
   847cc:	72a00fee 	movk	w14, #0x7f, lsl #16
   847d0:	6b0e013f 	cmp	w9, w14
   847d4:	54059180 	b.eq	8fa04 <disasm+0xba24>  // b.none
		names="uqshl\0";
		j=((ic32_16)&0x7f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
		args[0]=disasm_arg_FPjt2; args[1]=disasm_arg_FPjn2; args[2]=disasm_arg_shlshift; 
	} else
	if(((ic32_8)&0b111111111100000011010100)==0b011111111000000011010000) {
   847d8:	52901a09 	mov	w9, #0x80d0                	// #32976
   847dc:	72a00fe9 	movk	w9, #0x7f, lsl #16
   847e0:	6b09009f 	cmp	w4, w9
   847e4:	54058e00 	b.eq	8f9a4 <disasm+0xb9c4>  // b.none
		names="sqrdmlah\0sqrdmlsh\0";
		op=((ic32_13)&0x1); j=((ic32_10)&0x2)|((ic32_21)&0x1); m=((ic32_16)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
		z=2;
		args[0]=disasm_arg_FPz4t; args[1]=disasm_arg_FPz3n; args[2]=disasm_arg_VmTs; 
	} else
	if(((ic32_8)&0b110111110011111110011100)==0b010011100010000100001000) {
   847e8:	b94093e9 	ldr	w9, [sp, #144]
   847ec:	52842104 	mov	w4, #0x2108                	// #8456
   847f0:	72a009c4 	movk	w4, #0x4e, lsl #16
   847f4:	6b04013f 	cmp	w9, w4
   847f8:	54058ac0 	b.eq	8f950 <disasm+0xb970>  // b.none
		names="?\0xtn2\0sqxtn2\0?\0?\0sqxtun2\0uqxtn2\0fcvtxn2\0";
		op=((ic32_27)&0x4)|((ic32_13)&0x3); z=((ic32_22)&0x3); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
		q=1;
		args[0]=disasm_arg_VtT; args[1]=disasm_arg_VnT3; 
	} else
	if(((ic32_8)&0b110111110010000011011100)==0b010011100010000000010000) {
   847fc:	b9407be9 	ldr	w9, [sp, #120]
   84800:	52840204 	mov	w4, #0x2010                	// #8208
   84804:	72a009c4 	movk	w4, #0x4e, lsl #16
   84808:	6b04013f 	cmp	w9, w4
   8480c:	54058720 	b.eq	8f8f0 <disasm+0xb910>  // b.none
		names="saddw2\0ssubw2\0uaddw2\0usubw2\0";
		op=((ic32_28)&0x2)|((ic32_13)&0x1); z=((ic32_22)&0x3); m=((ic32_16)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
		q=1;
		args[0]=disasm_arg_VtT3; args[1]=disasm_arg_VnT3; args[2]=disasm_arg_VmT; 
	} else
	if(((ic32_8)&0b110111110010000011011100)==0b010011100010000001000000) {
   84810:	b9407be9 	ldr	w9, [sp, #120]
   84814:	52840804 	mov	w4, #0x2040                	// #8256
   84818:	72a009c4 	movk	w4, #0x4e, lsl #16
   8481c:	6b04013f 	cmp	w9, w4
   84820:	54058380 	b.eq	8f890 <disasm+0xb8b0>  // b.none
		names="addhn2\0subhn2\0raddhn2\0rsubhn2\0";
		op=((ic32_28)&0x2)|((ic32_13)&0x1); z=((ic32_22)&0x3); m=((ic32_16)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
		q=1;
		args[0]=disasm_arg_VtT; args[1]=disasm_arg_VnT3; args[2]=disasm_arg_VmT3; 
	} else
	if(((ic32_8)&0b110111110010000011111100)==0b010011100010000011100000) {
   84824:	b940a3e9 	ldr	w9, [sp, #160]
   84828:	52841c04 	mov	w4, #0x20e0                	// #8416
   8482c:	72a009c4 	movk	w4, #0x4e, lsl #16
   84830:	6b04013f 	cmp	w9, w4
   84834:	54058020 	b.eq	8f838 <disasm+0xb858>  // b.none
		names="pmull2\0umull2\0";
		op=((ic32_29)&0x1); z=((ic32_22)&0x3); m=((ic32_16)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
		q=1;
		args[0]=disasm_arg_VtT4; args[1]=disasm_arg_VnT; args[2]=disasm_arg_VmT; 
	} else
	if(((ic32_8)&0b110111110010000000001100)==0b010011100010000000000000) {
   84838:	b940abe4 	ldr	w4, [sp, #168]
   8483c:	7153889f 	cmp	w4, #0x4e2, lsl #12
   84840:	54057cc0 	b.eq	8f7d8 <disasm+0xb7f8>  // b.none
		names="saddl2\0saddw2\0ssubl2\0ssubw2\0addhn2\0sabal2\0subhn2\0sabdl2\0smlal2\0sqdmlal2\0smlsl2\0sqdmlsl2\0?\0sqdmull2\0pmull2\0?\0uaddl2\0uaddw2\0usubl2\0usubw2\0raddhn2\0uabal2\0rsubhn2\0uabdl2\0umlal2\0?\0umlsl2\0?\0?\0?\0umull2\0";
		op=((ic32_25)&0x10)|((ic32_12)&0xf); z=((ic32_22)&0x3); m=((ic32_16)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
		q=1;
		args[0]=disasm_arg_VtT3; args[1]=disasm_arg_VnT; args[2]=disasm_arg_VmT; 
	} else
	if(((ic32_8)&0b110111111100000000100100)==0b010011110100000000100000) {
   84844:	b9407fe9 	ldr	w9, [sp, #124]
   84848:	52880404 	mov	w4, #0x4020                	// #16416
   8484c:	72a009e4 	movk	w4, #0x4f, lsl #16
   84850:	6b04013f 	cmp	w9, w4
   84854:	54057880 	b.eq	8f764 <disasm+0xb784>  // b.none
		names="smlal2\0sqdmlal2\0smlsl2\0sqdmlsl2\0smull2\0sqdmull2\0?\0?\0umlal2\0?\0umlsl2\0?\0umull2\0";
		op=((ic32_26)&0x8)|((ic32_13)&0x6)|((ic32_12)&0x1); j=((ic32_9)&0x4)|((ic32_20)&0x3); m=((ic32_16)&0xf); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
		z=1;q=1;
		args[0]=disasm_arg_Vtz; args[1]=disasm_arg_VnT; args[2]=disasm_arg_VmTs; 
	} else
	if(((ic32_8)&0b110111111000000011100100)==0b010011110000000010000100) {
   84858:	b94097e9 	ldr	w9, [sp, #148]
   8485c:	52801084 	mov	w4, #0x84                  	// #132
   84860:	72a009e4 	movk	w4, #0x4f, lsl #16
   84864:	6b04013f 	cmp	w9, w4
   84868:	54057500 	b.eq	8f708 <disasm+0xb728>  // b.none
		names="?\0rshrn2\0sqshrn2\0sqrshrn2\0sqshrun2\0sqrshrun2\0uqshrn2\0uqrshrn2\0";
		op=((ic32_27)&0x4)|((ic32_11)&0x3); j=((ic32_16)&0x7f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
		q=1;
		args[0]=disasm_arg_Vtj2; args[1]=disasm_arg_VnTa; args[2]=disasm_arg_shrshift; 
	} else
	if(((ic32_8)&0b110111111000000011111100)==0b010011110000000010100100) {
   8486c:	b9408be9 	ldr	w9, [sp, #136]
   84870:	52801484 	mov	w4, #0xa4                  	// #164
   84874:	72a009e4 	movk	w4, #0x4f, lsl #16
   84878:	6b04013f 	cmp	w9, w4
   8487c:	540571c0 	b.eq	8f6b4 <disasm+0xb6d4>  // b.none
		names="sshll2\0usshll2\0";
		op=((ic32_29)&0x1); j=((ic32_16)&0x7f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
		q=1;
		args[0]=disasm_arg_Vtj2; args[1]=disasm_arg_VnTa; args[2]=disasm_arg_shlshift; 
	} else
	if(((ic32_8)&0b110111111100000000100100)==0b010011111000000000100000) {
   84880:	b9407fe9 	ldr	w9, [sp, #124]
   84884:	52900404 	mov	w4, #0x8020                	// #32800
   84888:	72a009e4 	movk	w4, #0x4f, lsl #16
   8488c:	6b04013f 	cmp	w9, w4
   84890:	54056d80 	b.eq	8f640 <disasm+0xb660>  // b.none
		names="smlal2\0sqdmlal2\0smlsl2\0sqdmlsl2\0smull2\0sqdmull2\0?\0?\0umlal2\0?\0umlsl2\0?\0umull2\0";
		op=((ic32_26)&0x8)|((ic32_13)&0x6)|((ic32_12)&0x1); j=((ic32_10)&0x2)|((ic32_21)&0x1); m=((ic32_16)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
		z=2;q=1;
		args[0]=disasm_arg_Vtz; args[1]=disasm_arg_VnT; args[2]=disasm_arg_VmTs; 
	} else
	if(((ic32_8)&0b110111111111111111001100)==0b010111101111100011001000) {
   84894:	529ff984 	mov	w4, #0xffcc                	// #65484
   84898:	529f1909 	mov	w9, #0xf8c8                	// #63688
   8489c:	72a01be4 	movk	w4, #0xdf, lsl #16
   848a0:	0a040064 	and	w4, w3, w4
   848a4:	72a00bc9 	movk	w9, #0x5e, lsl #16
   848a8:	6b09009f 	cmp	w4, w9
   848ac:	540569c0 	b.eq	8f5e4 <disasm+0xb604>  // b.none
		names="fcmgt\0fcmeq\0fcmlt\0?\0fcmge\0fcmle\0";
		op=((ic32_27)&0x4)|((ic32_12)&0x3); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
		args[0]=disasm_arg_Ht; args[1]=disasm_arg_Hn; args[2]=disasm_arg_simd0; 
	} else
	if(((ic32_8)&0b110111111011111111001100)==0b010111101010000011001000) {
   848b0:	5297f984 	mov	w4, #0xbfcc                	// #49100
   848b4:	52941909 	mov	w9, #0xa0c8                	// #41160
   848b8:	72a01be4 	movk	w4, #0xdf, lsl #16
   848bc:	0a040064 	and	w4, w3, w4
   848c0:	72a00bc9 	movk	w9, #0x5e, lsl #16
   848c4:	6b09009f 	cmp	w4, w9
   848c8:	54056600 	b.eq	8f588 <disasm+0xb5a8>  // b.none
		names="fcmgt\0fcmeq\0fcmlt\0?\0fcmge\0fcmle\0";
		op=((ic32_27)&0x4)|((ic32_12)&0x3); z=((ic32_22)&0x1); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
		args[0]=disasm_arg_FPt; args[1]=disasm_arg_FPn; args[2]=disasm_arg_simd0; 
	} else
	if(((ic32_8)&0b110111110111111110001100)==0b010111100111100110001000) {
   848cc:	528ff184 	mov	w4, #0x7f8c                	// #32652
   848d0:	528f3109 	mov	w9, #0x7988                	// #31112
   848d4:	72a01be4 	movk	w4, #0xdf, lsl #16
   848d8:	0a040064 	and	w4, w3, w4
   848dc:	72a00bc9 	movk	w9, #0x5e, lsl #16
   848e0:	6b09009f 	cmp	w4, w9
   848e4:	54056240 	b.eq	8f52c <disasm+0xb54c>  // b.none
		names="?\0?\0fcvtns\0fcvtms\0fcvtas\0scvtf\0?\0?\0?\0?\0fcvtps\0fcvtzs\0?\0frecpe\0?\0frecpx\0?\0?\0fcvtnu\0fcvtmu\0fcvtau\0ucvtf\0?\0?\0?\0?\0fcvtpu\0fcvtzu\0?\0frsqrte\0";
		op=((ic32_25)&0x10)|((ic32_20)&0x8)|((ic32_12)&0x7); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
		args[0]=disasm_arg_Ht; args[1]=disasm_arg_Hn; 
	} else
	if(((ic32_8)&0b110111110011111111001100)==0b010111100010000010001000) {
   848e8:	5287f984 	mov	w4, #0x3fcc                	// #16332
   848ec:	52841109 	mov	w9, #0x2088                	// #8328
   848f0:	72a01be4 	movk	w4, #0xdf, lsl #16
   848f4:	0a040064 	and	w4, w3, w4
   848f8:	72a00bc9 	movk	w9, #0x5e, lsl #16
   848fc:	6b09009f 	cmp	w4, w9
   84900:	54055e80 	b.eq	8f4d0 <disasm+0xb4f0>  // b.none
		names="cmgt\0cmeq\0cmlt\0abs\0cmge\0cmle\0?\0neg\0";
		op=((ic32_27)&0x4)|((ic32_12)&0x3); z=((ic32_22)&0x3); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
		args[0]=disasm_arg_FPz3t; args[1]=disasm_arg_FPz3n; args[2]=disasm_arg_simd0; 
	} else
	if(((ic32_8)&0b110111110011111100111100)==0b010111100010000000111000) {
   84904:	5287e784 	mov	w4, #0x3f3c                	// #16188
   84908:	52840709 	mov	w9, #0x2038                	// #8248
   8490c:	72a01be4 	movk	w4, #0xdf, lsl #16
   84910:	0a040064 	and	w4, w3, w4
   84914:	72a00bc9 	movk	w9, #0x5e, lsl #16
   84918:	6b09009f 	cmp	w4, w9
   8491c:	54055b00 	b.eq	8f47c <disasm+0xb49c>  // b.none
		names="suqadd\0sqabs\0abs\0?\0usqadd\0sqneg\0neg\0";
		op=((ic32_27)&0x4)|((ic32_14)&0x3); z=((ic32_22)&0x3); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
		args[0]=disasm_arg_FPz3t; args[1]=disasm_arg_FPz3n; 
	} else
	if(((ic32_8)&0b110111110011111110011100)==0b010111100010000100001000) {
   84920:	b94093e9 	ldr	w9, [sp, #144]
   84924:	52842104 	mov	w4, #0x2108                	// #8456
   84928:	72a00bc4 	movk	w4, #0x5e, lsl #16
   8492c:	6b04013f 	cmp	w9, w4
   84930:	540557c0 	b.eq	8f428 <disasm+0xb448>  // b.none
		names="?\0?\0sqxtn\0?\0?\0sqxtun\0uqxtn\0fcvtxn\0";
		op=((ic32_27)&0x4)|((ic32_13)&0x3); z=((ic32_22)&0x3); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
		args[0]=disasm_arg_FPz3t; args[1]=disasm_arg_FPz4n; 
	} else
	if(((ic32_8)&0b110111110011111110001100)==0b010111100010000110001000) {
   84934:	5287f184 	mov	w4, #0x3f8c                	// #16268
   84938:	52843109 	mov	w9, #0x2188                	// #8584
   8493c:	72a01be4 	movk	w4, #0xdf, lsl #16
   84940:	0a040064 	and	w4, w3, w4
   84944:	72a00bc9 	movk	w9, #0x5e, lsl #16
   84948:	6b09009f 	cmp	w4, w9
   8494c:	54055400 	b.eq	8f3cc <disasm+0xb3ec>  // b.none
		names="?\0?\0fcvtns\0fcvtms\0fcvtas\0scvtf\0?\0?\0?\0?\0fcvtps\0fcvtzs\0?\0frecpe\0?\0frecpx\0?\0?\0fcvtnu\0fcvtmu\0fcvtau\0ucvtf\0?\0?\0?\0?\0fcvtpu\0fcvtzu\0?\0frsqrte\0";
		op=((ic32_25)&0x10)|((ic32_20)&0x8)|((ic32_12)&0x7); z=((ic32_22)&0x1); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
		args[0]=disasm_arg_FPt; args[1]=disasm_arg_FPn; 
	} else
	if(((ic32_8)&0b110111110010000000000100)==0b010111100010000000000100) {
   84950:	52840084 	mov	w4, #0x2004                	// #8196
   84954:	52840089 	mov	w9, #0x2004                	// #8196
   84958:	72a01be4 	movk	w4, #0xdf, lsl #16
   8495c:	0a040064 	and	w4, w3, w4
   84960:	72a00bc9 	movk	w9, #0x5e, lsl #16
   84964:	6b09009f 	cmp	w4, w9
   84968:	54055020 	b.eq	8f36c <disasm+0xb38c>  // b.none
		names="?\0sqadd\0?\0?\0?\0sqsub\0cmgt\0cmge\0sshl\0sqshl\0srshl\0sqrshl\0?\0?\0?\0?\0add\0cmtst\0?\0?\0?\0?\0sqdmulh\0?\0?\0?\0?\0?\0?\0?\0?\0?\0?\0uqadd\0?\0?\0?\0uqsub\0cmhi\0cmhs\0ushl\0uqshl\0urshl\0uqrshl\0?\0?\0?\0?\0sub\0cmeq\0?\0?\0?\0?\0sqrdmulh\0";
		op=((ic32_24)&0x20)|((ic32_11)&0x1f); z=((ic32_22)&0x3); m=((ic32_16)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
		args[0]=disasm_arg_FPz3t; args[1]=disasm_arg_FPz3n; args[2]=disasm_arg_FPz3m; 
	} else
	if(((ic32_8)&0b110111111100000000110100)==0b010111110000000000010000) {
   8496c:	52980684 	mov	w4, #0xc034                	// #49204
   84970:	52800209 	mov	w9, #0x10                  	// #16
   84974:	72a01be4 	movk	w4, #0xdf, lsl #16
   84978:	0a040064 	and	w4, w3, w4
   8497c:	72a00be9 	movk	w9, #0x5f, lsl #16
   84980:	6b09009f 	cmp	w4, w9
   84984:	54054c00 	b.eq	8f304 <disasm+0xb324>  // b.none
		names="fmla\0fmls\0fmul\0?\0?\0?\0fmulx\0";
		op=((ic32_27)&0x4)|((ic32_14)&0x3); j=((ic32_9)&0x4)|((ic32_20)&0x3); m=((ic32_16)&0xf); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
		args[0]=disasm_arg_Ht; args[1]=disasm_arg_Hn; args[2]=disasm_arg_VmHs; 
	} else
	if(((ic32_8)&0b110111111000000010001100)==0b010111110000000000000100) {
   84988:	52901189 	mov	w9, #0x808c                	// #32908
   8498c:	5280008e 	mov	w14, #0x4                   	// #4
   84990:	72a01be9 	movk	w9, #0xdf, lsl #16
   84994:	0a090069 	and	w9, w3, w9
   84998:	72a00bee 	movk	w14, #0x5f, lsl #16
   8499c:	6b0e013f 	cmp	w9, w14
   849a0:	54054820 	b.eq	8f2a4 <disasm+0xb2c4>  // b.none
		names="sshr\0ssra\0srshr\0srsra\0?\0shl\0?\0sqshl\0ushr\0usra\0urshr\0ursra\0sri\0sli\0sqshlu\0uqshl\0";
		op=((ic32_26)&0x8)|((ic32_12)&0x7); j=((ic32_16)&0x7f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
		args[0]=disasm_arg_Dt; args[1]=disasm_arg_Dn; args[2]=disasm_arg_shrshift; 
	} else
	if(((ic32_8)&0b110111111000000011100100)==0b010111110000000010000100) {
   849a4:	b94097ee 	ldr	w14, [sp, #148]
   849a8:	52801089 	mov	w9, #0x84                  	// #132
   849ac:	72a00be9 	movk	w9, #0x5f, lsl #16
   849b0:	6b0901df 	cmp	w14, w9
   849b4:	540544a0 	b.eq	8f248 <disasm+0xb268>  // b.none
		names="?\0?\0sqshrn\0sqrshrn\0sqshrun\0sqrshrun\0uqshrn\0uqrshrn\0";
		op=((ic32_27)&0x4)|((ic32_11)&0x3); j=((ic32_16)&0x7f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
		args[0]=disasm_arg_FPjt; args[1]=disasm_arg_FPnj; args[2]=disasm_arg_shrshift; 
	} else
	if(((ic32_8)&0b110111111000000011111100)==0b010111110000000011100100) {
   849b8:	b9408bee 	ldr	w14, [sp, #136]
   849bc:	52801c89 	mov	w9, #0xe4                  	// #228
   849c0:	72a00be9 	movk	w9, #0x5f, lsl #16
   849c4:	6b0901df 	cmp	w14, w9
   849c8:	54054160 	b.eq	8f1f4 <disasm+0xb214>  // b.none
		names="scvtf\0ucvtf\0";
		op=((ic32_29)&0x1); j=((ic32_16)&0x7f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
		args[0]=disasm_arg_FPjt2; args[1]=disasm_arg_FPjn2; args[2]=disasm_arg_shrshift; 
	} else
	if(((ic32_8)&0b110111111000000011111100)==0b010111110000000011111100) {
   849cc:	b9408bee 	ldr	w14, [sp, #136]
   849d0:	52801f89 	mov	w9, #0xfc                  	// #252
   849d4:	72a00be9 	movk	w9, #0x5f, lsl #16
   849d8:	6b0901df 	cmp	w14, w9
   849dc:	54053e20 	b.eq	8f1a0 <disasm+0xb1c0>  // b.none
		names="fcvtzs\0fcvtzu\0";
		op=((ic32_29)&0x1); j=((ic32_16)&0x7f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
		args[0]=disasm_arg_FPjt; args[1]=disasm_arg_FPjn2; args[2]=disasm_arg_shrshift; 
	} else
	if(((ic32_8)&0b110111111100000000110100)==0b010111111000000000010000) {
   849e0:	52900209 	mov	w9, #0x8010                	// #32784
   849e4:	72a00be9 	movk	w9, #0x5f, lsl #16
   849e8:	6b09009f 	cmp	w4, w9
   849ec:	54053a60 	b.eq	8f138 <disasm+0xb158>  // b.none
		names="fmla\0fmls\0fmul\0sqrdmulh\0?\0?\0fmulx\0sqrdmlah\0";
		op=((ic32_27)&0x4)|((ic32_14)&0x3); j=((ic32_10)&0x2)|((ic32_21)&0x1); m=((ic32_16)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
		z=0;
		args[0]=disasm_arg_FPt; args[1]=disasm_arg_FPn; args[2]=disasm_arg_VmTs2; 
	} else
	if(((ic32_8)&0b110111111110000000110100)==0b010111111100000000010000) {
   849f0:	529c0684 	mov	w4, #0xe034                	// #57396
   849f4:	52980209 	mov	w9, #0xc010                	// #49168
   849f8:	72a01be4 	movk	w4, #0xdf, lsl #16
   849fc:	0a040064 	and	w4, w3, w4
   84a00:	72a00be9 	movk	w9, #0x5f, lsl #16
   84a04:	6b09009f 	cmp	w4, w9
   84a08:	54053680 	b.eq	8f0d8 <disasm+0xb0f8>  // b.none
		names="fmla\0fmls\0fmul\0?\0?\0?\0fmulx\0";
		op=((ic32_27)&0x4)|((ic32_14)&0x3); j=((ic32_11)&0x1); m=((ic32_16)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
		z=1;
		args[0]=disasm_arg_FPt; args[1]=disasm_arg_FPn; args[2]=disasm_arg_VmTs2; 
	} else
	if(((ic32_8)&0b101111111010000001111100)==0b000010000010000001111100) {
   84a0c:	52940f84 	mov	w4, #0xa07c                	// #41084
   84a10:	72a017e4 	movk	w4, #0xbf, lsl #16
   84a14:	0a040064 	and	w4, w3, w4
   84a18:	2a0403e9 	mov	w9, w4
   84a1c:	52840f84 	mov	w4, #0x207c                	// #8316
   84a20:	b9007fe9 	str	w9, [sp, #124]
   84a24:	72a00104 	movk	w4, #0x8, lsl #16
   84a28:	6b04013f 	cmp	w9, w4
	ic32_20=ic32>>20; ic32_15=ic32>>15; ic32_16=ic32>>16; ic32_5=ic32>>5; ic32_8=ic32>>8; ic32_22=ic32>>22; ic32_13=ic32>>13; ic32_14=ic32>>14; ic32_9=ic32>>9; ic32_10=ic32>>10; ic32_21=ic32>>21; ic32_4=ic32>>4; ic32_12=ic32>>12; ic32_24=ic32>>24; ic32_11=ic32>>11; ic32_18=ic32>>18; ic32_27=ic32>>27; ic32_28=ic32>>28; ic32_29=ic32>>29; ic32_25=ic32>>25; ic32_26=ic32>>26; ic32_23=ic32>>23; ic32_30=ic32>>30; ic32_19=ic32>>19; ic32_31=ic32>>31;
   84a2c:	531e7c04 	lsr	w4, w0, #30
	if(((ic32_8)&0b101111111010000001111100)==0b000010000010000001111100) {
   84a30:	540531e0 	b.eq	8f06c <disasm+0xb08c>  // b.none
		names="casp\0caspl\0caspa\0caspal\0";
		op=((ic32_21)&0x2)|((ic32_15)&0x1); s=((ic32_30)&0x1); d=((ic32_16)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
		args[0]=disasm_arg_Rd; args[1]=disasm_arg_Rd1; args[2]=disasm_arg_Rt; args[3]=disasm_arg_Rt1; args[4]=disasm_arg_offs; args[5]=disasm_arg_XnS; args[6]=disasm_arg_offe; 
	} else
	if(((ic32_8)&0b101111110011111101111100)==0b000010000001111101111100) {
   84a34:	5287ef89 	mov	w9, #0x3f7c                	// #16252
   84a38:	72a017e9 	movk	w9, #0xbf, lsl #16
   84a3c:	0a090069 	and	w9, w3, w9
   84a40:	2a0903ee 	mov	w14, w9
   84a44:	b9008bee 	str	w14, [sp, #136]
   84a48:	5283ef89 	mov	w9, #0x1f7c                	// #8060
   84a4c:	72a00109 	movk	w9, #0x8, lsl #16
   84a50:	6b0901df 	cmp	w14, w9
   84a54:	54052dc0 	b.eq	8f00c <disasm+0xb02c>  // b.none
		names="?\0?\0ldxrb\0ldaxrb\0stllrb\0stlrb\0ldlarb\0ldarb\0?\0?\0ldxrh\0ldaxrh\0stllrh\0stlrh\0ldlarh\0ldarh\0";
		op=((ic32_27)&0x8)|((ic32_21)&0x6)|((ic32_15)&0x1); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
		args[0]=disasm_arg_Wt; args[1]=disasm_arg_offs; args[2]=disasm_arg_XnS; args[3]=disasm_arg_offe; 
	} else
	if(((ic32_8)&0b101111111011111111010000)==0b000011000000000000000000) {
   84a58:	5297fa09 	mov	w9, #0xbfd0                	// #49104
   84a5c:	72a017e9 	movk	w9, #0xbf, lsl #16
   84a60:	0a090069 	and	w9, w3, w9
   84a64:	7143013f 	cmp	w9, #0xc0, lsl #12
   84a68:	540529e0 	b.eq	8efa4 <disasm+0xafc4>  // b.none
		names="st4\0st1\0ld4\0ld1\0";
		op=((ic32_21)&0x2)|((ic32_13)&0x1); q=((ic32_30)&0x1); z=((ic32_10)&0x3); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
		args[0]=disasm_arg_VtT; args[1]=disasm_arg_Vt2T; args[2]=disasm_arg_Vt3T; args[3]=disasm_arg_Vt4T; args[4]=disasm_arg_offs; args[5]=disasm_arg_XnS; args[6]=disasm_arg_offe; 
	} else
	if(((ic32_8)&0b101111111011111111110000)==0b000011000000000001110000) {
   84a6c:	5297fe0e 	mov	w14, #0xbff0                	// #49136
   84a70:	52800e12 	mov	w18, #0x70                  	// #112
   84a74:	72a017ee 	movk	w14, #0xbf, lsl #16
   84a78:	0a0e006e 	and	w14, w3, w14
   84a7c:	72a00192 	movk	w18, #0xc, lsl #16
   84a80:	6b1201df 	cmp	w14, w18
   84a84:	54052680 	b.eq	8ef54 <disasm+0xaf74>  // b.none
		names="st1\0ld1\0";
		op=((ic32_22)&0x1); q=((ic32_30)&0x1); z=((ic32_10)&0x3); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
		args[0]=disasm_arg_VtT; args[1]=disasm_arg_offs; args[2]=disasm_arg_XnS; args[3]=disasm_arg_offe; 
	} else
	if(((ic32_8)&0b101111111011111111010000)==0b000011000000000001000000) {
   84a88:	52800812 	mov	w18, #0x40                  	// #64
   84a8c:	72a00192 	movk	w18, #0xc, lsl #16
   84a90:	6b12013f 	cmp	w9, w18
   84a94:	54052300 	b.eq	8eef4 <disasm+0xaf14>  // b.none
		names="st3\0st1\0ld3\0ld1\0";
		op=((ic32_21)&0x2)|((ic32_13)&0x1); q=((ic32_30)&0x1); z=((ic32_10)&0x3); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
		args[0]=disasm_arg_VtT; args[1]=disasm_arg_Vt2T; args[2]=disasm_arg_Vt3T; args[3]=disasm_arg_offs; args[4]=disasm_arg_XnS; args[5]=disasm_arg_offe; 
	} else
	if(((ic32_8)&0b101111111011111111010000)==0b000011000000000010000000) {
   84a98:	52801012 	mov	w18, #0x80                  	// #128
   84a9c:	72a00192 	movk	w18, #0xc, lsl #16
   84aa0:	6b12013f 	cmp	w9, w18
   84aa4:	54051f80 	b.eq	8ee94 <disasm+0xaeb4>  // b.none
		names="st2\0st1\0ld2\0ld1\0";
		op=((ic32_21)&0x2)|((ic32_13)&0x1); q=((ic32_30)&0x1); z=((ic32_10)&0x3); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
		args[0]=disasm_arg_VtT; args[1]=disasm_arg_Vt2T; args[2]=disasm_arg_offs; args[3]=disasm_arg_XnS; args[4]=disasm_arg_offe; 
	} else
	if(((ic32_8)&0b101111111011111111010000)==0b000011001001111100000000) {
   84aa8:	5293e012 	mov	w18, #0x9f00                	// #40704
   84aac:	72a00192 	movk	w18, #0xc, lsl #16
   84ab0:	6b12013f 	cmp	w9, w18
   84ab4:	54051c00 	b.eq	8ee34 <disasm+0xae54>  // b.none
		names="st4\0st1\0ld4\0ld1\0";
		op=((ic32_21)&0x2)|((ic32_13)&0x1); q=((ic32_30)&0x1); z=((ic32_10)&0x3); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
		args[0]=disasm_arg_VtT; args[1]=disasm_arg_Vt2T; args[2]=disasm_arg_Vt3T; args[3]=disasm_arg_Vt4T; args[4]=disasm_arg_offs; args[5]=disasm_arg_XnS; args[6]=disasm_arg_offe; args[7]=disasm_arg_Qi; 
	} else
	if(((ic32_8)&0b101111111011111111110000)==0b000011001001111101110000) {
   84ab8:	5293ee12 	mov	w18, #0x9f70                	// #40816
   84abc:	72a00192 	movk	w18, #0xc, lsl #16
   84ac0:	6b1201df 	cmp	w14, w18
   84ac4:	540518c0 	b.eq	8eddc <disasm+0xadfc>  // b.none
		names="st1\0ld1\0";
		op=((ic32_22)&0x1); q=((ic32_30)&0x1); z=((ic32_10)&0x3); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
		args[0]=disasm_arg_VtT; args[1]=disasm_arg_offs; args[2]=disasm_arg_XnS; args[3]=disasm_arg_offe; args[4]=disasm_arg_Qi1; 
	} else
	if(((ic32_8)&0b101111111011111111010000)==0b000011001001111101000000) {
   84ac8:	5293e80e 	mov	w14, #0x9f40                	// #40768
   84acc:	72a0018e 	movk	w14, #0xc, lsl #16
   84ad0:	6b0e013f 	cmp	w9, w14
   84ad4:	54051500 	b.eq	8ed74 <disasm+0xad94>  // b.none
		names="st3\0st1\0ld3\0ld1\0";
		op=((ic32_21)&0x2)|((ic32_13)&0x1); q=((ic32_30)&0x1); z=((ic32_10)&0x3); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
		args[0]=disasm_arg_VtT; args[1]=disasm_arg_Vt2T; args[2]=disasm_arg_Vt3T; args[3]=disasm_arg_offs; args[4]=disasm_arg_XnS; args[5]=disasm_arg_offe; args[6]=disasm_arg_Qi3; 
	} else
	if(((ic32_8)&0b101111111011111111010000)==0b000011001001111110000000) {
   84ad8:	5293f00e 	mov	w14, #0x9f80                	// #40832
   84adc:	72a0018e 	movk	w14, #0xc, lsl #16
   84ae0:	6b0e013f 	cmp	w9, w14
   84ae4:	54051180 	b.eq	8ed14 <disasm+0xad34>  // b.none
		names="st2\0st1\0ld2\0ld1\0";
		op=((ic32_21)&0x2)|((ic32_13)&0x1); q=((ic32_30)&0x1); z=((ic32_10)&0x3); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
		args[0]=disasm_arg_VtT; args[1]=disasm_arg_Vt2T; args[2]=disasm_arg_offs; args[3]=disasm_arg_XnS; args[4]=disasm_arg_offe; args[5]=disasm_arg_Qi2; 
	} else
	if(((ic32_8)&0b101111111010000011010000)==0b000011001000000000000000) {
   84ae8:	52941a09 	mov	w9, #0xa0d0                	// #41168
   84aec:	72a017e9 	movk	w9, #0xbf, lsl #16
   84af0:	0a090069 	and	w9, w3, w9
   84af4:	7143213f 	cmp	w9, #0xc8, lsl #12
   84af8:	54050dc0 	b.eq	8ecb0 <disasm+0xacd0>  // b.none
		names="st4\0st1\0ld4\0ld1\0";
		op=((ic32_21)&0x2)|((ic32_13)&0x1); q=((ic32_30)&0x1); m=((ic32_16)&0x1f); z=((ic32_10)&0x3); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
		args[0]=disasm_arg_VtT; args[1]=disasm_arg_Vt2T; args[2]=disasm_arg_Vt3T; args[3]=disasm_arg_Vt4T; args[4]=disasm_arg_offs; args[5]=disasm_arg_XnS; args[6]=disasm_arg_offe; args[7]=disasm_arg_Xm; 
	} else
	if(((ic32_8)&0b101111111010000011110000)==0b000011001000000001110000) {
   84afc:	52941e0e 	mov	w14, #0xa0f0                	// #41200
   84b00:	52900e12 	mov	w18, #0x8070                	// #32880
   84b04:	72a017ee 	movk	w14, #0xbf, lsl #16
   84b08:	0a0e006e 	and	w14, w3, w14
   84b0c:	72a00192 	movk	w18, #0xc, lsl #16
   84b10:	6b1201df 	cmp	w14, w18
   84b14:	54050a00 	b.eq	8ec54 <disasm+0xac74>  // b.none
		names="st1\0ld1\0";
		op=((ic32_22)&0x1); q=((ic32_30)&0x1); m=((ic32_16)&0x1f); z=((ic32_10)&0x3); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
		args[0]=disasm_arg_VtT; args[1]=disasm_arg_offs; args[2]=disasm_arg_XnS; args[3]=disasm_arg_offe; args[4]=disasm_arg_Xm; 
	} else
	if(((ic32_8)&0b101111111010000011010000)==0b000011001000000001000000) {
   84b18:	5290080e 	mov	w14, #0x8040                	// #32832
   84b1c:	72a0018e 	movk	w14, #0xc, lsl #16
   84b20:	6b0e013f 	cmp	w9, w14
   84b24:	54050620 	b.eq	8ebe8 <disasm+0xac08>  // b.none
		names="st3\0st1\0ld3\0ld1\0";
		op=((ic32_21)&0x2)|((ic32_13)&0x1); q=((ic32_30)&0x1); m=((ic32_16)&0x1f); z=((ic32_10)&0x3); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
		args[0]=disasm_arg_VtT; args[1]=disasm_arg_Vt2T; args[2]=disasm_arg_Vt3T; args[3]=disasm_arg_offs; args[4]=disasm_arg_XnS; args[5]=disasm_arg_offe; args[6]=disasm_arg_Xm; 
	} else
	if(((ic32_8)&0b101111111010000011010000)==0b000011001000000010000000) {
   84b28:	5290100e 	mov	w14, #0x8080                	// #32896
   84b2c:	72a0018e 	movk	w14, #0xc, lsl #16
   84b30:	6b0e013f 	cmp	w9, w14
   84b34:	54050280 	b.eq	8eb84 <disasm+0xaba4>  // b.none
		names="st2\0st1\0ld2\0ld1\0";
		op=((ic32_21)&0x2)|((ic32_13)&0x1); q=((ic32_30)&0x1); m=((ic32_16)&0x1f); z=((ic32_10)&0x3); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
		args[0]=disasm_arg_VtT; args[1]=disasm_arg_Vt2T; args[2]=disasm_arg_offs; args[3]=disasm_arg_XnS; args[4]=disasm_arg_offe; args[5]=disasm_arg_Xm; 
	} else
	if(((ic32_8)&0b101111111111111111110000)==0b000011010100000011000000) {
   84b38:	121c4c72 	and	w18, w3, #0xfffff0
   84b3c:	52881809 	mov	w9, #0x40c0                	// #16576
   84b40:	12097a52 	and	w18, w18, #0xffbfffff
   84b44:	72a001a9 	movk	w9, #0xd, lsl #16
   84b48:	6b09025f 	cmp	w18, w9
   84b4c:	5404ff40 	b.eq	8eb34 <disasm+0xab54>  // b.none
		names="ld1r\0";
		q=((ic32_30)&0x1); z=((ic32_10)&0x3); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
		args[0]=disasm_arg_VtT; args[1]=disasm_arg_offs; args[2]=disasm_arg_XnS; args[3]=disasm_arg_offe; 
	} else
	if(((ic32_8)&0b101111111111111111110000)==0b000011010100000011100000) {
   84b50:	52881c09 	mov	w9, #0x40e0                	// #16608
   84b54:	72a001a9 	movk	w9, #0xd, lsl #16
   84b58:	6b09025f 	cmp	w18, w9
   84b5c:	5404fc00 	b.eq	8eadc <disasm+0xaafc>  // b.none
		names="ld3r\0";
		q=((ic32_30)&0x1); z=((ic32_10)&0x3); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
		args[0]=disasm_arg_VtT; args[1]=disasm_arg_Vt2T; args[2]=disasm_arg_Vt3T; args[3]=disasm_arg_offs; args[4]=disasm_arg_XnS; args[5]=disasm_arg_offe; 
	} else
	if(((ic32_8)&0b101111111111111111110000)==0b000011010110000011000000) {
   84b60:	528c1809 	mov	w9, #0x60c0                	// #24768
   84b64:	72a001a9 	movk	w9, #0xd, lsl #16
   84b68:	6b09025f 	cmp	w18, w9
   84b6c:	5404f8c0 	b.eq	8ea84 <disasm+0xaaa4>  // b.none
		names="ld2r\0";
		q=((ic32_30)&0x1); z=((ic32_10)&0x3); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
		args[0]=disasm_arg_VtT; args[1]=disasm_arg_Vt2T; args[2]=disasm_arg_offs; args[3]=disasm_arg_XnS; args[4]=disasm_arg_offe; 
	} else
	if(((ic32_8)&0b101111111111111111110000)==0b000011010110000011100000) {
   84b70:	528c1c09 	mov	w9, #0x60e0                	// #24800
   84b74:	72a001a9 	movk	w9, #0xd, lsl #16
   84b78:	6b09025f 	cmp	w18, w9
   84b7c:	5404f540 	b.eq	8ea24 <disasm+0xaa44>  // b.none
		names="ld4r\0";
		q=((ic32_30)&0x1); z=((ic32_10)&0x3); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
		args[0]=disasm_arg_VtT; args[1]=disasm_arg_Vt2T; args[2]=disasm_arg_Vt3T; args[3]=disasm_arg_Vt4T; args[4]=disasm_arg_offs; args[5]=disasm_arg_XnS; args[6]=disasm_arg_offe; 
	} else
	if(((ic32_8)&0b101111111011111111100000)==0b000011010000000000000000) {
   84b80:	5297fc09 	mov	w9, #0xbfe0                	// #49120
   84b84:	72a017e9 	movk	w9, #0xbf, lsl #16
   84b88:	0a090069 	and	w9, w3, w9
   84b8c:	7143413f 	cmp	w9, #0xd0, lsl #12
   84b90:	5404f220 	b.eq	8e9d4 <disasm+0xa9f4>  // b.none
		names="st1\0ld1\0";
		op=((ic32_22)&0x1); q=((ic32_30)&0x1); s=((ic32_12)&0x1); z=((ic32_10)&0x3); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
		args[0]=disasm_arg_VtB; args[1]=disasm_arg_offs; args[2]=disasm_arg_XnS; args[3]=disasm_arg_offe; 
	} else
	if(((ic32_8)&0b101111111011111111100000)==0b000011010000000000100000) {
   84b94:	5280040e 	mov	w14, #0x20                  	// #32
   84b98:	72a001ae 	movk	w14, #0xd, lsl #16
   84b9c:	6b0e013f 	cmp	w9, w14
   84ba0:	5404ef20 	b.eq	8e984 <disasm+0xa9a4>  // b.none
		names="st3\0ld3\0";
		op=((ic32_22)&0x1); q=((ic32_30)&0x1); s=((ic32_12)&0x1); z=((ic32_10)&0x3); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
		args[0]=disasm_arg_Vt3B; args[1]=disasm_arg_offs; args[2]=disasm_arg_XnS; args[3]=disasm_arg_offe; 
	} else
	if(((ic32_8)&0b101111111011111111100000)==0b000011010000000001000000) {
   84ba4:	5280080e 	mov	w14, #0x40                  	// #64
   84ba8:	72a001ae 	movk	w14, #0xd, lsl #16
   84bac:	6b0e013f 	cmp	w9, w14
   84bb0:	5404ec20 	b.eq	8e934 <disasm+0xa954>  // b.none
		names="st1\0ld1\0";
		op=((ic32_22)&0x1); q=((ic32_30)&0x1); s=((ic32_12)&0x1); z=((ic32_10)&0x3); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
		args[0]=disasm_arg_VtH; args[1]=disasm_arg_offs; args[2]=disasm_arg_XnS; args[3]=disasm_arg_offe; 
	} else
	if(((ic32_8)&0b101111111011111111100000)==0b000011010000000001100000) {
   84bb4:	52800c0e 	mov	w14, #0x60                  	// #96
   84bb8:	72a001ae 	movk	w14, #0xd, lsl #16
   84bbc:	6b0e013f 	cmp	w9, w14
   84bc0:	5404e920 	b.eq	8e8e4 <disasm+0xa904>  // b.none
		names="st3\0ld3\0";
		op=((ic32_22)&0x1); q=((ic32_30)&0x1); s=((ic32_12)&0x1); z=((ic32_10)&0x3); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
		args[0]=disasm_arg_Vt3H; args[1]=disasm_arg_offs; args[2]=disasm_arg_XnS; args[3]=disasm_arg_offe; 
	} else
	if(((ic32_8)&0b101111111011111111111100)==0b000011010000000010000100) {
   84bc4:	5297ff8e 	mov	w14, #0xbffc                	// #49148
   84bc8:	5280109a 	mov	w26, #0x84                  	// #132
   84bcc:	72a017ee 	movk	w14, #0xbf, lsl #16
   84bd0:	0a0e006e 	and	w14, w3, w14
   84bd4:	72a001ba 	movk	w26, #0xd, lsl #16
   84bd8:	6b1a01df 	cmp	w14, w26
   84bdc:	5404e5c0 	b.eq	8e894 <disasm+0xa8b4>  // b.none
		names="st1\0ld1\0";
		op=((ic32_22)&0x1); q=((ic32_30)&0x1); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
		args[0]=disasm_arg_VtD; args[1]=disasm_arg_offs; args[2]=disasm_arg_XnS; args[3]=disasm_arg_offe; 
	} else
	if(((ic32_8)&0b101111111011111111101100)==0b000011010000000010000000) {
   84be0:	5297fd9a 	mov	w26, #0xbfec                	// #49132
   84be4:	5280101b 	mov	w27, #0x80                  	// #128
   84be8:	72a017fa 	movk	w26, #0xbf, lsl #16
   84bec:	0a1a007a 	and	w26, w3, w26
   84bf0:	72a001bb 	movk	w27, #0xd, lsl #16
   84bf4:	6b1b035f 	cmp	w26, w27
   84bf8:	5404e260 	b.eq	8e844 <disasm+0xa864>  // b.none
		names="st1\0ld1\0";
		op=((ic32_22)&0x1); q=((ic32_30)&0x1); s=((ic32_12)&0x1); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
		args[0]=disasm_arg_VtS; args[1]=disasm_arg_offs; args[2]=disasm_arg_XnS; args[3]=disasm_arg_offe; 
	} else
	if(((ic32_8)&0b101111111011111111111100)==0b000011010000000010100100) {
   84bfc:	5280149b 	mov	w27, #0xa4                  	// #164
   84c00:	72a001bb 	movk	w27, #0xd, lsl #16
   84c04:	6b1b01df 	cmp	w14, w27
   84c08:	5404df60 	b.eq	8e7f4 <disasm+0xa814>  // b.none
		names="st3\0ld3\0";
		op=((ic32_22)&0x1); q=((ic32_30)&0x1); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
		args[0]=disasm_arg_Vt3D; args[1]=disasm_arg_offs; args[2]=disasm_arg_XnS; args[3]=disasm_arg_offe; 
	} else
	if(((ic32_8)&0b101111111011111111101100)==0b000011010000000010100000) {
   84c0c:	5280141b 	mov	w27, #0xa0                  	// #160
   84c10:	72a001bb 	movk	w27, #0xd, lsl #16
   84c14:	6b1b035f 	cmp	w26, w27
   84c18:	5404dc60 	b.eq	8e7a4 <disasm+0xa7c4>  // b.none
		names="st3\0ld3\0";
		op=((ic32_22)&0x1); q=((ic32_30)&0x1); s=((ic32_12)&0x1); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
		args[0]=disasm_arg_Vt3S; args[1]=disasm_arg_offs; args[2]=disasm_arg_XnS; args[3]=disasm_arg_offe; 
	} else
	if(((ic32_8)&0b101111111011111111100000)==0b000011010010000000000000) {
   84c1c:	7143493f 	cmp	w9, #0xd2, lsl #12
   84c20:	5404d9a0 	b.eq	8e754 <disasm+0xa774>  // b.none
		names="st2\0ld2\0";
		op=((ic32_22)&0x1); q=((ic32_30)&0x1); s=((ic32_12)&0x1); z=((ic32_10)&0x3); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
		args[0]=disasm_arg_Vt2B; args[1]=disasm_arg_offs; args[2]=disasm_arg_XnS; args[3]=disasm_arg_offe; 
	} else
	if(((ic32_8)&0b101111111011111111100000)==0b000011010010000000100000) {
   84c24:	5284041b 	mov	w27, #0x2020                	// #8224
   84c28:	72a001bb 	movk	w27, #0xd, lsl #16
   84c2c:	6b1b013f 	cmp	w9, w27
   84c30:	5404d6a0 	b.eq	8e704 <disasm+0xa724>  // b.none
		names="st4\0ld4\0";
		op=((ic32_22)&0x1); q=((ic32_30)&0x1); s=((ic32_12)&0x1); z=((ic32_10)&0x3); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
		args[0]=disasm_arg_Vt4B; args[1]=disasm_arg_offs; args[2]=disasm_arg_XnS; args[3]=disasm_arg_offe; 
	} else
	if(((ic32_8)&0b101111111011111111100000)==0b000011010010000001000000) {
   84c34:	5284081b 	mov	w27, #0x2040                	// #8256
   84c38:	72a001bb 	movk	w27, #0xd, lsl #16
   84c3c:	6b1b013f 	cmp	w9, w27
   84c40:	5404d3a0 	b.eq	8e6b4 <disasm+0xa6d4>  // b.none
		names="st2\0ld2\0";
		op=((ic32_22)&0x1); q=((ic32_30)&0x1); s=((ic32_12)&0x1); z=((ic32_10)&0x3); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
		args[0]=disasm_arg_Vt2H; args[1]=disasm_arg_offs; args[2]=disasm_arg_XnS; args[3]=disasm_arg_offe; 
	} else
	if(((ic32_8)&0b101111111011111111100000)==0b000011010010000001100000) {
   84c44:	52840c1b 	mov	w27, #0x2060                	// #8288
   84c48:	72a001bb 	movk	w27, #0xd, lsl #16
   84c4c:	6b1b013f 	cmp	w9, w27
   84c50:	5404d0a0 	b.eq	8e664 <disasm+0xa684>  // b.none
		names="st4\0ld4\0";
		op=((ic32_22)&0x1); q=((ic32_30)&0x1); s=((ic32_12)&0x1); z=((ic32_10)&0x3); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
		args[0]=disasm_arg_Vt4H; args[1]=disasm_arg_offs; args[2]=disasm_arg_XnS; args[3]=disasm_arg_offe; 
	} else
	if(((ic32_8)&0b101111111011111111111100)==0b000011010010000010000100) {
   84c54:	5284109b 	mov	w27, #0x2084                	// #8324
   84c58:	72a001bb 	movk	w27, #0xd, lsl #16
   84c5c:	6b1b01df 	cmp	w14, w27
   84c60:	5404cda0 	b.eq	8e614 <disasm+0xa634>  // b.none
		names="st2\0ld2\0";
		op=((ic32_22)&0x1); q=((ic32_30)&0x1); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
		args[0]=disasm_arg_Vt2D; args[1]=disasm_arg_offs; args[2]=disasm_arg_XnS; args[3]=disasm_arg_offe; 
	} else
	if(((ic32_8)&0b101111111011111111101100)==0b000011010010000010000000) {
   84c64:	5284101b 	mov	w27, #0x2080                	// #8320
   84c68:	72a001bb 	movk	w27, #0xd, lsl #16
   84c6c:	6b1b035f 	cmp	w26, w27
   84c70:	5404caa0 	b.eq	8e5c4 <disasm+0xa5e4>  // b.none
		names="st2\0ld2\0";
		op=((ic32_22)&0x1); q=((ic32_30)&0x1); s=((ic32_12)&0x1); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
		args[0]=disasm_arg_Vt2S; args[1]=disasm_arg_offs; args[2]=disasm_arg_XnS; args[3]=disasm_arg_offe; 
	} else
	if(((ic32_8)&0b101111111011111111111100)==0b000011010010000010100100) {
   84c74:	5284149b 	mov	w27, #0x20a4                	// #8356
   84c78:	72a001bb 	movk	w27, #0xd, lsl #16
   84c7c:	6b1b01df 	cmp	w14, w27
   84c80:	5404c7a0 	b.eq	8e574 <disasm+0xa594>  // b.none
		names="st4\0ld4\0";
		op=((ic32_22)&0x1); q=((ic32_30)&0x1); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
		args[0]=disasm_arg_Vt4D; args[1]=disasm_arg_offs; args[2]=disasm_arg_XnS; args[3]=disasm_arg_offe; 
	} else
	if(((ic32_8)&0b101111111011111111101100)==0b000011010010000010100000) {
   84c84:	5284141b 	mov	w27, #0x20a0                	// #8352
   84c88:	72a001bb 	movk	w27, #0xd, lsl #16
   84c8c:	6b1b035f 	cmp	w26, w27
   84c90:	5404c4a0 	b.eq	8e524 <disasm+0xa544>  // b.none
		names="st4\0ld4\0";
		op=((ic32_22)&0x1); q=((ic32_30)&0x1); s=((ic32_12)&0x1); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
		args[0]=disasm_arg_Vt4S; args[1]=disasm_arg_offs; args[2]=disasm_arg_XnS; args[3]=disasm_arg_offe; 
	} else
	if(((ic32_8)&0b101111111111111111110000)==0b000011011101111111000000) {
   84c94:	529bf81b 	mov	w27, #0xdfc0                	// #57280
   84c98:	72a001bb 	movk	w27, #0xd, lsl #16
   84c9c:	6b1b025f 	cmp	w18, w27
   84ca0:	5404c160 	b.eq	8e4cc <disasm+0xa4ec>  // b.none
		names="ld1r\0";
		q=((ic32_30)&0x1); z=((ic32_10)&0x3); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
		args[0]=disasm_arg_VtT; args[1]=disasm_arg_offs; args[2]=disasm_arg_XnS; args[3]=disasm_arg_offe; args[4]=disasm_arg_z; 
	} else
	if(((ic32_8)&0b101111111111111111110000)==0b000011011101111111100000) {
   84ca4:	529bfc1b 	mov	w27, #0xdfe0                	// #57312
   84ca8:	72a001bb 	movk	w27, #0xd, lsl #16
   84cac:	6b1b025f 	cmp	w18, w27
   84cb0:	5404bde0 	b.eq	8e46c <disasm+0xa48c>  // b.none
		names="ld3r\0";
		q=((ic32_30)&0x1); z=((ic32_10)&0x3); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
		args[0]=disasm_arg_VtT; args[1]=disasm_arg_Vt2T; args[2]=disasm_arg_Vt3T; args[3]=disasm_arg_offs; args[4]=disasm_arg_XnS; args[5]=disasm_arg_offe; args[6]=disasm_arg_z3; 
	} else
	if(((ic32_8)&0b101111111110000011110000)==0b000011011100000011000000) {
   84cb4:	529c1e1b 	mov	w27, #0xe0f0                	// #57584
   84cb8:	5298181e 	mov	w30, #0xc0c0                	// #49344
   84cbc:	72a017fb 	movk	w27, #0xbf, lsl #16
   84cc0:	0a1b007b 	and	w27, w3, w27
   84cc4:	72a001be 	movk	w30, #0xd, lsl #16
   84cc8:	6b1e037f 	cmp	w27, w30
   84ccc:	5404ba20 	b.eq	8e410 <disasm+0xa430>  // b.none
		names="ld1r\0";
		q=((ic32_30)&0x1); m=((ic32_16)&0x1f); z=((ic32_10)&0x3); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
		args[0]=disasm_arg_VtT; args[1]=disasm_arg_offs; args[2]=disasm_arg_XnS; args[3]=disasm_arg_offe; args[4]=disasm_arg_Xm; 
	} else
	if(((ic32_8)&0b101111111110000011110000)==0b000011011100000011100000) {
   84cd0:	52981c1e 	mov	w30, #0xc0e0                	// #49376
   84cd4:	72a001be 	movk	w30, #0xd, lsl #16
   84cd8:	6b1e037f 	cmp	w27, w30
   84cdc:	5404b680 	b.eq	8e3ac <disasm+0xa3cc>  // b.none
		names="ld3r\0";
		q=((ic32_30)&0x1); m=((ic32_16)&0x1f); z=((ic32_10)&0x3); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
		args[0]=disasm_arg_VtT; args[1]=disasm_arg_Vt2T; args[2]=disasm_arg_Vt3T; args[3]=disasm_arg_offs; args[4]=disasm_arg_XnS; args[5]=disasm_arg_offe; args[6]=disasm_arg_Xm; 
	} else
	if(((ic32_8)&0b101111111111111111110000)==0b000011011111111111000000) {
   84ce0:	529ff81e 	mov	w30, #0xffc0                	// #65472
   84ce4:	72a001be 	movk	w30, #0xd, lsl #16
   84ce8:	6b1e025f 	cmp	w18, w30
   84cec:	5404b340 	b.eq	8e354 <disasm+0xa374>  // b.none
		names="ld2r\0";
		q=((ic32_30)&0x1); z=((ic32_10)&0x3); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
		args[0]=disasm_arg_VtT; args[1]=disasm_arg_Vt2T; args[2]=disasm_arg_offs; args[3]=disasm_arg_XnS; args[4]=disasm_arg_offe; args[5]=disasm_arg_z2; 
	} else
	if(((ic32_8)&0b101111111111111111110000)==0b000011011111111111100000) {
   84cf0:	529ffc1e 	mov	w30, #0xffe0                	// #65504
   84cf4:	72a001be 	movk	w30, #0xd, lsl #16
   84cf8:	6b1e025f 	cmp	w18, w30
   84cfc:	5404b000 	b.eq	8e2fc <disasm+0xa31c>  // b.none
		names="ld4r\0";
		q=((ic32_30)&0x1); z=((ic32_10)&0x3); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
		args[0]=disasm_arg_VtT; args[1]=disasm_arg_Vt2T; args[2]=disasm_arg_Vt3T; args[3]=disasm_arg_Vt4T; args[4]=disasm_arg_offs; args[5]=disasm_arg_XnS; args[6]=disasm_arg_offe; args[7]=disasm_arg_z4; 
	} else
	if(((ic32_8)&0b101111111110000011110000)==0b000011011110000011000000) {
   84d00:	529c1812 	mov	w18, #0xe0c0                	// #57536
   84d04:	72a001b2 	movk	w18, #0xd, lsl #16
   84d08:	6b12037f 	cmp	w27, w18
   84d0c:	5404aca0 	b.eq	8e2a0 <disasm+0xa2c0>  // b.none
		names="ld2r\0";
		q=((ic32_30)&0x1); m=((ic32_16)&0x1f); z=((ic32_10)&0x3); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
		args[0]=disasm_arg_VtT; args[1]=disasm_arg_Vt2T; args[2]=disasm_arg_offs; args[3]=disasm_arg_XnS; args[4]=disasm_arg_offe; args[5]=disasm_arg_Xm; 
	} else
	if(((ic32_8)&0b101111111110000011110000)==0b000011011110000011100000) {
   84d10:	529c1c12 	mov	w18, #0xe0e0                	// #57568
   84d14:	72a001b2 	movk	w18, #0xd, lsl #16
   84d18:	6b12037f 	cmp	w27, w18
   84d1c:	5404a940 	b.eq	8e244 <disasm+0xa264>  // b.none
		names="ld4r\0";
		q=((ic32_30)&0x1); m=((ic32_16)&0x1f); z=((ic32_10)&0x3); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
		args[0]=disasm_arg_VtT; args[1]=disasm_arg_Vt2T; args[2]=disasm_arg_Vt3T; args[3]=disasm_arg_Vt4T; args[4]=disasm_arg_offs; args[5]=disasm_arg_XnS; args[6]=disasm_arg_offe; args[7]=disasm_arg_Xm; 
	} else
	if(((ic32_8)&0b101111111011111111100000)==0b000011011001111100000000) {
   84d20:	5293e012 	mov	w18, #0x9f00                	// #40704
   84d24:	72a001b2 	movk	w18, #0xd, lsl #16
   84d28:	6b12013f 	cmp	w9, w18
   84d2c:	5404a600 	b.eq	8e1ec <disasm+0xa20c>  // b.none
		names="st1\0ld1\0";
		op=((ic32_22)&0x1); q=((ic32_30)&0x1); s=((ic32_12)&0x1); z=((ic32_10)&0x3); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
		args[0]=disasm_arg_VtB; args[1]=disasm_arg_offs; args[2]=disasm_arg_XnS; args[3]=disasm_arg_offe; args[4]=disasm_arg_i1; 
	} else
	if(((ic32_8)&0b101111111011111111100000)==0b000011011001111100100000) {
   84d30:	5293e412 	mov	w18, #0x9f20                	// #40736
   84d34:	72a001b2 	movk	w18, #0xd, lsl #16
   84d38:	6b12013f 	cmp	w9, w18
   84d3c:	5404a2c0 	b.eq	8e194 <disasm+0xa1b4>  // b.none
		names="st3\0ld3\0";
		op=((ic32_22)&0x1); q=((ic32_30)&0x1); s=((ic32_12)&0x1); z=((ic32_10)&0x3); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
		args[0]=disasm_arg_Vt3B; args[1]=disasm_arg_offs; args[2]=disasm_arg_XnS; args[3]=disasm_arg_offe; args[4]=disasm_arg_i3; 
	} else
	if(((ic32_8)&0b101111111011111111100000)==0b000011011001111101000000) {
   84d40:	5293e812 	mov	w18, #0x9f40                	// #40768
   84d44:	72a001b2 	movk	w18, #0xd, lsl #16
   84d48:	6b12013f 	cmp	w9, w18
   84d4c:	54049f80 	b.eq	8e13c <disasm+0xa15c>  // b.none
		names="st1\0ld1\0";
		op=((ic32_22)&0x1); q=((ic32_30)&0x1); s=((ic32_12)&0x1); z=((ic32_10)&0x3); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
		args[0]=disasm_arg_VtH; args[1]=disasm_arg_offs; args[2]=disasm_arg_XnS; args[3]=disasm_arg_offe; args[4]=disasm_arg_i2; 
	} else
	if(((ic32_8)&0b101111111011111111100000)==0b000011011001111101100000) {
   84d50:	5293ec12 	mov	w18, #0x9f60                	// #40800
   84d54:	72a001b2 	movk	w18, #0xd, lsl #16
   84d58:	6b12013f 	cmp	w9, w18
   84d5c:	54049c40 	b.eq	8e0e4 <disasm+0xa104>  // b.none
		names="st3\0ld3\0";
		op=((ic32_22)&0x1); q=((ic32_30)&0x1); s=((ic32_12)&0x1); z=((ic32_10)&0x3); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
		args[0]=disasm_arg_Vt3H; args[1]=disasm_arg_offs; args[2]=disasm_arg_XnS; args[3]=disasm_arg_offe; args[4]=disasm_arg_i6; 
	} else
	if(((ic32_8)&0b101111111011111111111100)==0b000011011001111110000100) {
   84d60:	5293f092 	mov	w18, #0x9f84                	// #40836
   84d64:	72a001b2 	movk	w18, #0xd, lsl #16
   84d68:	6b1201df 	cmp	w14, w18
   84d6c:	54049900 	b.eq	8e08c <disasm+0xa0ac>  // b.none
		names="st1\0ld1\0";
		op=((ic32_22)&0x1); q=((ic32_30)&0x1); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
		args[0]=disasm_arg_VtD; args[1]=disasm_arg_offs; args[2]=disasm_arg_XnS; args[3]=disasm_arg_offe; args[4]=disasm_arg_i8; 
	} else
	if(((ic32_8)&0b101111111011111111101100)==0b000011011001111110000000) {
   84d70:	5293f012 	mov	w18, #0x9f80                	// #40832
   84d74:	72a001b2 	movk	w18, #0xd, lsl #16
   84d78:	6b12035f 	cmp	w26, w18
   84d7c:	540495c0 	b.eq	8e034 <disasm+0xa054>  // b.none
		names="st1\0ld1\0";
		op=((ic32_22)&0x1); q=((ic32_30)&0x1); s=((ic32_12)&0x1); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
		args[0]=disasm_arg_VtS; args[1]=disasm_arg_offs; args[2]=disasm_arg_XnS; args[3]=disasm_arg_offe; args[4]=disasm_arg_i4; 
	} else
	if(((ic32_8)&0b101111111011111111111100)==0b000011011001111110100100) {
   84d80:	5293f492 	mov	w18, #0x9fa4                	// #40868
   84d84:	72a001b2 	movk	w18, #0xd, lsl #16
   84d88:	6b1201df 	cmp	w14, w18
   84d8c:	54049280 	b.eq	8dfdc <disasm+0x9ffc>  // b.none
		names="st3\0ld3\0";
		op=((ic32_22)&0x1); q=((ic32_30)&0x1); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
		args[0]=disasm_arg_Vt3D; args[1]=disasm_arg_offs; args[2]=disasm_arg_XnS; args[3]=disasm_arg_offe; args[4]=disasm_arg_i24; 
	} else
	if(((ic32_8)&0b101111111011111111101100)==0b000011011001111110100000) {
   84d90:	5293f412 	mov	w18, #0x9fa0                	// #40864
   84d94:	72a001b2 	movk	w18, #0xd, lsl #16
   84d98:	6b12035f 	cmp	w26, w18
   84d9c:	54048f40 	b.eq	8df84 <disasm+0x9fa4>  // b.none
		names="st3\0ld3\0";
		op=((ic32_22)&0x1); q=((ic32_30)&0x1); s=((ic32_12)&0x1); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
		args[0]=disasm_arg_Vt3S; args[1]=disasm_arg_offs; args[2]=disasm_arg_XnS; args[3]=disasm_arg_offe; args[4]=disasm_arg_i12; 
	} else
	if(((ic32_8)&0b101111111010000011100000)==0b000011011000000000000000) {
   84da0:	52941c12 	mov	w18, #0xa0e0                	// #41184
   84da4:	72a017f2 	movk	w18, #0xbf, lsl #16
   84da8:	0a120072 	and	w18, w3, w18
   84dac:	7143625f 	cmp	w18, #0xd8, lsl #12
   84db0:	54048bc0 	b.eq	8df28 <disasm+0x9f48>  // b.none
		names="st1\0ld1\0";
		op=((ic32_22)&0x1); q=((ic32_30)&0x1); m=((ic32_16)&0x1f); s=((ic32_12)&0x1); z=((ic32_10)&0x3); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
		args[0]=disasm_arg_VtB; args[1]=disasm_arg_offs; args[2]=disasm_arg_XnS; args[3]=disasm_arg_offe; args[4]=disasm_arg_Xm; 
	} else
	if(((ic32_8)&0b101111111010000011100000)==0b000011011000000000100000) {
   84db4:	5290041b 	mov	w27, #0x8020                	// #32800
   84db8:	72a001bb 	movk	w27, #0xd, lsl #16
   84dbc:	6b1b025f 	cmp	w18, w27
   84dc0:	54048860 	b.eq	8decc <disasm+0x9eec>  // b.none
		names="st3\0ld3\0";
		op=((ic32_22)&0x1); q=((ic32_30)&0x1); m=((ic32_16)&0x1f); s=((ic32_12)&0x1); z=((ic32_10)&0x3); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
		args[0]=disasm_arg_Vt3B; args[1]=disasm_arg_offs; args[2]=disasm_arg_XnS; args[3]=disasm_arg_offe; args[4]=disasm_arg_Xm; 
	} else
	if(((ic32_8)&0b101111111010000011100000)==0b000011011000000001000000) {
   84dc4:	5290081b 	mov	w27, #0x8040                	// #32832
   84dc8:	72a001bb 	movk	w27, #0xd, lsl #16
   84dcc:	6b1b025f 	cmp	w18, w27
   84dd0:	54048500 	b.eq	8de70 <disasm+0x9e90>  // b.none
		names="st1\0ld1\0";
		op=((ic32_22)&0x1); q=((ic32_30)&0x1); m=((ic32_16)&0x1f); s=((ic32_12)&0x1); z=((ic32_10)&0x3); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
		args[0]=disasm_arg_VtH; args[1]=disasm_arg_offs; args[2]=disasm_arg_XnS; args[3]=disasm_arg_offe; args[4]=disasm_arg_Xm; 
	} else
	if(((ic32_8)&0b101111111010000011100000)==0b000011011000000001100000) {
   84dd4:	52900c1b 	mov	w27, #0x8060                	// #32864
   84dd8:	72a001bb 	movk	w27, #0xd, lsl #16
   84ddc:	6b1b025f 	cmp	w18, w27
   84de0:	540481a0 	b.eq	8de14 <disasm+0x9e34>  // b.none
		names="st3\0ld3\0";
		op=((ic32_22)&0x1); q=((ic32_30)&0x1); m=((ic32_16)&0x1f); s=((ic32_12)&0x1); z=((ic32_10)&0x3); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
		args[0]=disasm_arg_Vt3H; args[1]=disasm_arg_offs; args[2]=disasm_arg_XnS; args[3]=disasm_arg_offe; args[4]=disasm_arg_Xm; 
	} else
	if(((ic32_8)&0b101111111010000011111100)==0b000011011000000010000100) {
   84de4:	52941f9b 	mov	w27, #0xa0fc                	// #41212
   84de8:	72a017fb 	movk	w27, #0xbf, lsl #16
   84dec:	0a1b007b 	and	w27, w3, w27
   84df0:	2a1b03fe 	mov	w30, w27
   84df4:	b90077fe 	str	w30, [sp, #116]
   84df8:	5290109b 	mov	w27, #0x8084                	// #32900
   84dfc:	72a001bb 	movk	w27, #0xd, lsl #16
   84e00:	6b1b03df 	cmp	w30, w27
   84e04:	54047da0 	b.eq	8ddb8 <disasm+0x9dd8>  // b.none
		names="st1\0ld1\0";
		op=((ic32_22)&0x1); q=((ic32_30)&0x1); m=((ic32_16)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
		args[0]=disasm_arg_VtD; args[1]=disasm_arg_offs; args[2]=disasm_arg_XnS; args[3]=disasm_arg_offe; args[4]=disasm_arg_Xm; 
	} else
	if(((ic32_8)&0b101111111010000011101100)==0b000011011000000010000000) {
   84e08:	52941d9b 	mov	w27, #0xa0ec                	// #41196
   84e0c:	5290101e 	mov	w30, #0x8080                	// #32896
   84e10:	72a017fb 	movk	w27, #0xbf, lsl #16
   84e14:	0a1b007b 	and	w27, w3, w27
   84e18:	b9007bfb 	str	w27, [sp, #120]
   84e1c:	72a001be 	movk	w30, #0xd, lsl #16
   84e20:	6b1e037f 	cmp	w27, w30
   84e24:	540479c0 	b.eq	8dd5c <disasm+0x9d7c>  // b.none
		names="st1\0ld1\0";
		op=((ic32_22)&0x1); q=((ic32_30)&0x1); m=((ic32_16)&0x1f); s=((ic32_12)&0x1); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
		args[0]=disasm_arg_VtS; args[1]=disasm_arg_offs; args[2]=disasm_arg_XnS; args[3]=disasm_arg_offe; args[4]=disasm_arg_Xm; 
	} else
	if(((ic32_8)&0b101111111010000011111100)==0b000011011000000010100100) {
   84e28:	b94077fe 	ldr	w30, [sp, #116]
   84e2c:	5290149b 	mov	w27, #0x80a4                	// #32932
   84e30:	72a001bb 	movk	w27, #0xd, lsl #16
   84e34:	6b1b03df 	cmp	w30, w27
   84e38:	54047640 	b.eq	8dd00 <disasm+0x9d20>  // b.none
		names="st3\0ld3\0";
		op=((ic32_22)&0x1); q=((ic32_30)&0x1); m=((ic32_16)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
		args[0]=disasm_arg_Vt3D; args[1]=disasm_arg_offs; args[2]=disasm_arg_XnS; args[3]=disasm_arg_offe; args[4]=disasm_arg_Xm; 
	} else
	if(((ic32_8)&0b101111111010000011101100)==0b000011011000000010100000) {
   84e3c:	b9407bfe 	ldr	w30, [sp, #120]
   84e40:	5290141b 	mov	w27, #0x80a0                	// #32928
   84e44:	72a001bb 	movk	w27, #0xd, lsl #16
   84e48:	6b1b03df 	cmp	w30, w27
   84e4c:	540472c0 	b.eq	8dca4 <disasm+0x9cc4>  // b.none
		names="st3\0ld3\0";
		op=((ic32_22)&0x1); q=((ic32_30)&0x1); m=((ic32_16)&0x1f); s=((ic32_12)&0x1); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
		args[0]=disasm_arg_Vt3S; args[1]=disasm_arg_offs; args[2]=disasm_arg_XnS; args[3]=disasm_arg_offe; args[4]=disasm_arg_Xm; 
	} else
	if(((ic32_8)&0b101111111011111111100000)==0b000011011011111100000000) {
   84e50:	5297e01b 	mov	w27, #0xbf00                	// #48896
   84e54:	72a001bb 	movk	w27, #0xd, lsl #16
   84e58:	6b1b013f 	cmp	w9, w27
   84e5c:	54046f80 	b.eq	8dc4c <disasm+0x9c6c>  // b.none
		names="st2\0ld2\0";
		op=((ic32_22)&0x1); q=((ic32_30)&0x1); s=((ic32_12)&0x1); z=((ic32_10)&0x3); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
		args[0]=disasm_arg_Vt2B; args[1]=disasm_arg_offs; args[2]=disasm_arg_XnS; args[3]=disasm_arg_offe; args[4]=disasm_arg_i2; 
	} else
	if(((ic32_8)&0b101111111011111111100000)==0b000011011011111100100000) {
   84e60:	5297e41b 	mov	w27, #0xbf20                	// #48928
   84e64:	72a001bb 	movk	w27, #0xd, lsl #16
   84e68:	6b1b013f 	cmp	w9, w27
   84e6c:	54046c40 	b.eq	8dbf4 <disasm+0x9c14>  // b.none
		names="st4\0ld4\0";
		op=((ic32_22)&0x1); q=((ic32_30)&0x1); s=((ic32_12)&0x1); z=((ic32_10)&0x3); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
		args[0]=disasm_arg_Vt4B; args[1]=disasm_arg_offs; args[2]=disasm_arg_XnS; args[3]=disasm_arg_offe; args[4]=disasm_arg_i4; 
	} else
	if(((ic32_8)&0b101111111011111111100000)==0b000011011011111101000000) {
   84e70:	5297e81b 	mov	w27, #0xbf40                	// #48960
   84e74:	72a001bb 	movk	w27, #0xd, lsl #16
   84e78:	6b1b013f 	cmp	w9, w27
   84e7c:	54046900 	b.eq	8db9c <disasm+0x9bbc>  // b.none
		names="st2\0ld2\0";
		op=((ic32_22)&0x1); q=((ic32_30)&0x1); s=((ic32_12)&0x1); z=((ic32_10)&0x3); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
		args[0]=disasm_arg_Vt2H; args[1]=disasm_arg_offs; args[2]=disasm_arg_XnS; args[3]=disasm_arg_offe; args[4]=disasm_arg_i4; 
	} else
	if(((ic32_8)&0b101111111011111111100000)==0b000011011011111101100000) {
   84e80:	5297ec1b 	mov	w27, #0xbf60                	// #48992
   84e84:	72a001bb 	movk	w27, #0xd, lsl #16
   84e88:	6b1b013f 	cmp	w9, w27
   84e8c:	540465c0 	b.eq	8db44 <disasm+0x9b64>  // b.none
		names="st4\0ld4\0";
		op=((ic32_22)&0x1); q=((ic32_30)&0x1); s=((ic32_12)&0x1); z=((ic32_10)&0x3); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
		args[0]=disasm_arg_Vt4H; args[1]=disasm_arg_offs; args[2]=disasm_arg_XnS; args[3]=disasm_arg_offe; args[4]=disasm_arg_i8; 
	} else
	if(((ic32_8)&0b101111111011111111111100)==0b000011011011111110000100) {
   84e90:	5297f089 	mov	w9, #0xbf84                	// #49028
   84e94:	72a001a9 	movk	w9, #0xd, lsl #16
   84e98:	6b0901df 	cmp	w14, w9
   84e9c:	54046280 	b.eq	8daec <disasm+0x9b0c>  // b.none
		names="st2\0ld2\0";
		op=((ic32_22)&0x1); q=((ic32_30)&0x1); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
		args[0]=disasm_arg_Vt2D; args[1]=disasm_arg_offs; args[2]=disasm_arg_XnS; args[3]=disasm_arg_offe; args[4]=disasm_arg_i16; 
	} else
	if(((ic32_8)&0b101111111011111111101100)==0b000011011011111110000000) {
   84ea0:	5297f009 	mov	w9, #0xbf80                	// #49024
   84ea4:	72a001a9 	movk	w9, #0xd, lsl #16
   84ea8:	6b09035f 	cmp	w26, w9
   84eac:	54045f40 	b.eq	8da94 <disasm+0x9ab4>  // b.none
		names="st2\0ld2\0";
		op=((ic32_22)&0x1); q=((ic32_30)&0x1); s=((ic32_12)&0x1); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
		args[0]=disasm_arg_Vt2S; args[1]=disasm_arg_offs; args[2]=disasm_arg_XnS; args[3]=disasm_arg_offe; args[4]=disasm_arg_i8; 
	} else
	if(((ic32_8)&0b101111111011111111111100)==0b000011011011111110100100) {
   84eb0:	5297f489 	mov	w9, #0xbfa4                	// #49060
   84eb4:	72a001a9 	movk	w9, #0xd, lsl #16
   84eb8:	6b0901df 	cmp	w14, w9
   84ebc:	54045c00 	b.eq	8da3c <disasm+0x9a5c>  // b.none
		names="st4\0ld4\0";
		op=((ic32_22)&0x1); q=((ic32_30)&0x1); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
		args[0]=disasm_arg_Vt4D; args[1]=disasm_arg_offs; args[2]=disasm_arg_XnS; args[3]=disasm_arg_offe; args[4]=disasm_arg_i32; 
	} else
	if(((ic32_8)&0b101111111011111111101100)==0b000011011011111110100000) {
   84ec0:	5297f409 	mov	w9, #0xbfa0                	// #49056
   84ec4:	72a001a9 	movk	w9, #0xd, lsl #16
   84ec8:	6b09035f 	cmp	w26, w9
   84ecc:	540458c0 	b.eq	8d9e4 <disasm+0x9a04>  // b.none
		names="st4\0ld4\0";
		op=((ic32_22)&0x1); q=((ic32_30)&0x1); s=((ic32_12)&0x1); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
		args[0]=disasm_arg_Vt4S; args[1]=disasm_arg_offs; args[2]=disasm_arg_XnS; args[3]=disasm_arg_offe; args[4]=disasm_arg_i16; 
	} else
	if(((ic32_8)&0b101111111010000011100000)==0b000011011010000000000000) {
   84ed0:	71436a5f 	cmp	w18, #0xda, lsl #12
   84ed4:	540455a0 	b.eq	8d988 <disasm+0x99a8>  // b.none
		names="st2\0ld2\0";
		op=((ic32_22)&0x1); q=((ic32_30)&0x1); m=((ic32_16)&0x1f); s=((ic32_12)&0x1); z=((ic32_10)&0x3); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
		args[0]=disasm_arg_Vt2B; args[1]=disasm_arg_offs; args[2]=disasm_arg_XnS; args[3]=disasm_arg_offe; args[4]=disasm_arg_Xm; 
	} else
	if(((ic32_8)&0b101111111010000011100000)==0b000011011010000000100000) {
   84ed8:	52940409 	mov	w9, #0xa020                	// #40992
   84edc:	72a001a9 	movk	w9, #0xd, lsl #16
   84ee0:	6b09025f 	cmp	w18, w9
   84ee4:	54045240 	b.eq	8d92c <disasm+0x994c>  // b.none
		names="st4\0ld4\0";
		op=((ic32_22)&0x1); q=((ic32_30)&0x1); m=((ic32_16)&0x1f); s=((ic32_12)&0x1); z=((ic32_10)&0x3); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
		args[0]=disasm_arg_Vt4B; args[1]=disasm_arg_offs; args[2]=disasm_arg_XnS; args[3]=disasm_arg_offe; args[4]=disasm_arg_Xm; 
	} else
	if(((ic32_8)&0b101111111010000011100000)==0b000011011010000001000000) {
   84ee8:	52940809 	mov	w9, #0xa040                	// #41024
   84eec:	72a001a9 	movk	w9, #0xd, lsl #16
   84ef0:	6b09025f 	cmp	w18, w9
   84ef4:	54044ee0 	b.eq	8d8d0 <disasm+0x98f0>  // b.none
		names="st2\0ld2\0";
		op=((ic32_22)&0x1); q=((ic32_30)&0x1); m=((ic32_16)&0x1f); s=((ic32_12)&0x1); z=((ic32_10)&0x3); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
		args[0]=disasm_arg_Vt2H; args[1]=disasm_arg_offs; args[2]=disasm_arg_XnS; args[3]=disasm_arg_offe; args[4]=disasm_arg_Xm; 
	} else
	if(((ic32_8)&0b101111111010000011100000)==0b000011011010000001100000) {
   84ef8:	52940c09 	mov	w9, #0xa060                	// #41056
   84efc:	72a001a9 	movk	w9, #0xd, lsl #16
   84f00:	6b09025f 	cmp	w18, w9
   84f04:	54044b80 	b.eq	8d874 <disasm+0x9894>  // b.none
		names="st4\0ld4\0";
		op=((ic32_22)&0x1); q=((ic32_30)&0x1); m=((ic32_16)&0x1f); s=((ic32_12)&0x1); z=((ic32_10)&0x3); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
		args[0]=disasm_arg_Vt4H; args[1]=disasm_arg_offs; args[2]=disasm_arg_XnS; args[3]=disasm_arg_offe; args[4]=disasm_arg_Xm; 
	} else
	if(((ic32_8)&0b101111111010000011111100)==0b000011011010000010000100) {
   84f08:	b94077f2 	ldr	w18, [sp, #116]
   84f0c:	52941089 	mov	w9, #0xa084                	// #41092
   84f10:	72a001a9 	movk	w9, #0xd, lsl #16
   84f14:	6b09025f 	cmp	w18, w9
   84f18:	54044800 	b.eq	8d818 <disasm+0x9838>  // b.none
		names="st2\0ld2\0";
		op=((ic32_22)&0x1); q=((ic32_30)&0x1); m=((ic32_16)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
		args[0]=disasm_arg_Vt2D; args[1]=disasm_arg_offs; args[2]=disasm_arg_XnS; args[3]=disasm_arg_offe; args[4]=disasm_arg_Xm; 
	} else
	if(((ic32_8)&0b101111111010000011101100)==0b000011011010000010000000) {
   84f1c:	b9407bf2 	ldr	w18, [sp, #120]
   84f20:	52941009 	mov	w9, #0xa080                	// #41088
   84f24:	72a001a9 	movk	w9, #0xd, lsl #16
   84f28:	6b09025f 	cmp	w18, w9
   84f2c:	54044480 	b.eq	8d7bc <disasm+0x97dc>  // b.none
		names="st2\0ld2\0";
		op=((ic32_22)&0x1); q=((ic32_30)&0x1); m=((ic32_16)&0x1f); s=((ic32_12)&0x1); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
		args[0]=disasm_arg_Vt2S; args[1]=disasm_arg_offs; args[2]=disasm_arg_XnS; args[3]=disasm_arg_offe; args[4]=disasm_arg_Xm; 
	} else
	if(((ic32_8)&0b101111111010000011111100)==0b000011011010000010100100) {
   84f30:	b94077f2 	ldr	w18, [sp, #116]
   84f34:	52941489 	mov	w9, #0xa0a4                	// #41124
   84f38:	72a001a9 	movk	w9, #0xd, lsl #16
   84f3c:	6b09025f 	cmp	w18, w9
   84f40:	54044100 	b.eq	8d760 <disasm+0x9780>  // b.none
		names="st4\0ld4\0";
		op=((ic32_22)&0x1); q=((ic32_30)&0x1); m=((ic32_16)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
		args[0]=disasm_arg_Vt4D; args[1]=disasm_arg_offs; args[2]=disasm_arg_XnS; args[3]=disasm_arg_offe; args[4]=disasm_arg_Xm; 
	} else
	if(((ic32_8)&0b101111111010000011101100)==0b000011011010000010100000) {
   84f44:	b9407bf2 	ldr	w18, [sp, #120]
   84f48:	52941409 	mov	w9, #0xa0a0                	// #41120
   84f4c:	72a001a9 	movk	w9, #0xd, lsl #16
   84f50:	6b09025f 	cmp	w18, w9
   84f54:	54043d80 	b.eq	8d704 <disasm+0x9724>  // b.none
		names="st4\0ld4\0";
		op=((ic32_22)&0x1); q=((ic32_30)&0x1); m=((ic32_16)&0x1f); s=((ic32_12)&0x1); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
		args[0]=disasm_arg_Vt4S; args[1]=disasm_arg_offs; args[2]=disasm_arg_XnS; args[3]=disasm_arg_offe; args[4]=disasm_arg_Xm; 
	} else
	if(((ic32_8)&0b101111111110000011111100)==0b000011100000000000000100) {
   84f58:	529c1f9b 	mov	w27, #0xe0fc                	// #57596
   84f5c:	52800089 	mov	w9, #0x4                   	// #4
   84f60:	72a017fb 	movk	w27, #0xbf, lsl #16
   84f64:	0a1b007b 	and	w27, w3, w27
   84f68:	72a001c9 	movk	w9, #0xe, lsl #16
   84f6c:	6b09037f 	cmp	w27, w9
   84f70:	540439e0 	b.eq	8d6ac <disasm+0x96cc>  // b.none
		names="dup\0";
		q=((ic32_30)&0x1); j=((ic32_16)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
		args[0]=disasm_arg_Vtjq; args[1]=disasm_arg_Vnj; args[2]=disasm_arg_offs; args[3]=disasm_arg_FPidx; args[4]=disasm_arg_offe; 
	} else
	if(((ic32_8)&0b101111111110000011101100)==0b000011100000000000000000) {
   84f74:	529c1d89 	mov	w9, #0xe0ec                	// #57580
   84f78:	72a017e9 	movk	w9, #0xbf, lsl #16
   84f7c:	0a090069 	and	w9, w3, w9
   84f80:	7143813f 	cmp	w9, #0xe0, lsl #12
   84f84:	54043680 	b.eq	8d654 <disasm+0x9674>  // b.none
		names="tbl\0tbx\0";
		op=((ic32_12)&0x1); q=((ic32_30)&0x1); m=((ic32_16)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
		z=0;
		args[0]=disasm_arg_VtT; args[1]=disasm_arg_Vn116b; args[2]=disasm_arg_VmT; 
	} else
	if(((ic32_8)&0b101111111110000011101100)==0b000011100000000000100000) {
   84f88:	52800412 	mov	w18, #0x20                  	// #32
   84f8c:	72a001d2 	movk	w18, #0xe, lsl #16
   84f90:	6b12013f 	cmp	w9, w18
   84f94:	54043340 	b.eq	8d5fc <disasm+0x961c>  // b.none
		names="tbl\0tbx\0";
		op=((ic32_12)&0x1); q=((ic32_30)&0x1); m=((ic32_16)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
		z=0;
		args[0]=disasm_arg_VtT; args[1]=disasm_arg_Vn216b; args[2]=disasm_arg_VmT; 
	} else
	if(((ic32_8)&0b101111111110000011101100)==0b000011100000000000101100) {
   84f98:	52800592 	mov	w18, #0x2c                  	// #44
   84f9c:	72a001d2 	movk	w18, #0xe, lsl #16
   84fa0:	6b12013f 	cmp	w9, w18
   84fa4:	54043000 	b.eq	8d5a4 <disasm+0x95c4>  // b.none
		names="smov\0umov\0";
		op=((ic32_12)&0x1); s=((ic32_30)&0x1); j=((ic32_16)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
		args[0]=disasm_arg_Rt; args[1]=disasm_arg_Vnj; args[2]=disasm_arg_offs; args[3]=disasm_arg_FPidx; args[4]=disasm_arg_offe; 
	} else
	if(((ic32_8)&0b101111111110000011101100)==0b000011100000000001000000) {
   84fa8:	52800812 	mov	w18, #0x40                  	// #64
   84fac:	72a001d2 	movk	w18, #0xe, lsl #16
   84fb0:	6b12013f 	cmp	w9, w18
   84fb4:	54042cc0 	b.eq	8d54c <disasm+0x956c>  // b.none
		names="tbl\0tbx\0";
		op=((ic32_12)&0x1); q=((ic32_30)&0x1); m=((ic32_16)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
		z=0;
		args[0]=disasm_arg_VtT; args[1]=disasm_arg_Vn316b; args[2]=disasm_arg_VmT; 
	} else
	if(((ic32_8)&0b101111111110000011101100)==0b000011100000000001100000) {
   84fb8:	52800c12 	mov	w18, #0x60                  	// #96
   84fbc:	72a001d2 	movk	w18, #0xe, lsl #16
   84fc0:	6b12013f 	cmp	w9, w18
   84fc4:	54042980 	b.eq	8d4f4 <disasm+0x9514>  // b.none
		names="tbl\0tbx\0";
		op=((ic32_12)&0x1); q=((ic32_30)&0x1); m=((ic32_16)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
		z=0;
		args[0]=disasm_arg_VtT; args[1]=disasm_arg_Vn416b; args[2]=disasm_arg_VmT; 
	} else
	if(((ic32_8)&0b101111111110000011111100)==0b000011100100000000011100) {
   84fc8:	52880389 	mov	w9, #0x401c                	// #16412
   84fcc:	72a001c9 	movk	w9, #0xe, lsl #16
   84fd0:	6b09037f 	cmp	w27, w9
   84fd4:	54042640 	b.eq	8d49c <disasm+0x94bc>  // b.none
		names="fmulx\0";
		q=((ic32_30)&0x1); m=((ic32_16)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
		args[0]=disasm_arg_VtH1; args[1]=disasm_arg_VnH1; args[2]=disasm_arg_VmH1; 
	} else
	if(((ic32_8)&0b101111111110000011111100)==0b000011100100000000100100) {
   84fd8:	52880489 	mov	w9, #0x4024                	// #16420
   84fdc:	72a001c9 	movk	w9, #0xe, lsl #16
   84fe0:	6b09037f 	cmp	w27, w9
   84fe4:	54042300 	b.eq	8d444 <disasm+0x9464>  // b.none
		names="fcmeq\0";
		q=((ic32_30)&0x1); m=((ic32_16)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
		args[0]=disasm_arg_VtH1; args[1]=disasm_arg_VnH1; args[2]=disasm_arg_VmH1; 
	} else
	if(((ic32_8)&0b101111111111111111101100)==0b000011100111100110001000) {
   84fe8:	529ffd89 	mov	w9, #0xffec                	// #65516
   84fec:	72a017e9 	movk	w9, #0xbf, lsl #16
   84ff0:	0a090069 	and	w9, w3, w9
   84ff4:	2a0903f2 	mov	w18, w9
   84ff8:	b9007bf2 	str	w18, [sp, #120]
   84ffc:	528f3109 	mov	w9, #0x7988                	// #31112
   85000:	72a001c9 	movk	w9, #0xe, lsl #16
   85004:	6b09025f 	cmp	w18, w9
   85008:	54041f80 	b.eq	8d3f8 <disasm+0x9418>  // b.none
		names="frintn\0frintm\0";
		op=((ic32_12)&0x1); q=((ic32_30)&0x1); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
		z=1;
		args[0]=disasm_arg_VtT; args[1]=disasm_arg_VnT; 
	} else
	if(((ic32_8)&0b101111111111111111111100)==0b000011100111100111111000) {
   8500c:	121e5469 	and	w9, w3, #0xfffffc
   85010:	528f3f12 	mov	w18, #0x79f8                	// #31224
   85014:	12097929 	and	w9, w9, #0xffbfffff
   85018:	72a001d2 	movk	w18, #0xe, lsl #16
   8501c:	6b12013f 	cmp	w9, w18
   85020:	54041c60 	b.eq	8d3ac <disasm+0x93cc>  // b.none
		names="fabs\0";
		q=((ic32_30)&0x1); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
		z=1;
		args[0]=disasm_arg_VtT; args[1]=disasm_arg_VnT; 
	} else
	if(((ic32_8)&0b101111111010000011111100)==0b000011100010000000011100) {
   85024:	b94077fa 	ldr	w26, [sp, #116]
   85028:	52840392 	mov	w18, #0x201c                	// #8220
   8502c:	72a001d2 	movk	w18, #0xe, lsl #16
   85030:	6b12035f 	cmp	w26, w18
   85034:	54041900 	b.eq	8d354 <disasm+0x9374>  // b.none
		names="fmulx\0";
		q=((ic32_30)&0x1); z=((ic32_22)&0x1); m=((ic32_16)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
		args[0]=disasm_arg_Vtzq; args[1]=disasm_arg_Vnzq; args[2]=disasm_arg_Vmzq; 
	} else
	if(((ic32_8)&0b101111111111111111101100)==0b000011101111100110001000) {
   85038:	b9407bfa 	ldr	w26, [sp, #120]
   8503c:	529f3112 	mov	w18, #0xf988                	// #63880
   85040:	72a001d2 	movk	w18, #0xe, lsl #16
   85044:	6b12035f 	cmp	w26, w18
   85048:	54041600 	b.eq	8d308 <disasm+0x9328>  // b.none
		names="frintp\0frintz\0";
		op=((ic32_12)&0x1); q=((ic32_30)&0x1); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
		z=1;
		args[0]=disasm_arg_VtT; args[1]=disasm_arg_VnT; 
	} else
	if(((ic32_8)&0b101111110111111111001100)==0b000011100011000011001000) {
   8504c:	528ff992 	mov	w18, #0x7fcc                	// #32716
   85050:	5286191a 	mov	w26, #0x30c8                	// #12488
   85054:	72a017f2 	movk	w18, #0xbf, lsl #16
   85058:	0a120072 	and	w18, w3, w18
   8505c:	72a001da 	movk	w26, #0xe, lsl #16
   85060:	6b1a025f 	cmp	w18, w26
   85064:	54041280 	b.eq	8d2b4 <disasm+0x92d4>  // b.none
		names="fmaxnmv\0?\0?\0fmaxv\0fminnmv\0?\0?\0fminv\0";
		op=((ic32_21)&0x4)|((ic32_12)&0x3); q=((ic32_30)&0x1); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
		z=0;
		args[0]=disasm_arg_Ht; args[1]=disasm_arg_Vnzq2; 
	} else
	if(((ic32_8)&0b101111110110000011111100)==0b000011100100000000111100) {
   85068:	528c1f92 	mov	w18, #0x60fc                	// #24828
   8506c:	5288079a 	mov	w26, #0x403c                	// #16444
   85070:	72a017f2 	movk	w18, #0xbf, lsl #16
   85074:	0a120072 	and	w18, w3, w18
   85078:	72a001da 	movk	w26, #0xe, lsl #16
   8507c:	6b1a025f 	cmp	w18, w26
   85080:	54040ee0 	b.eq	8d25c <disasm+0x927c>  // b.none
		names="frecps\0frsqrts\0";
		op=((ic32_23)&0x1); q=((ic32_30)&0x1); m=((ic32_16)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
		args[0]=disasm_arg_VtH1; args[1]=disasm_arg_VnH1; args[2]=disasm_arg_VmH1; 
	} else
	if(((ic32_8)&0b101111110000000010000000)==0b000011100000000000000000) {
   85084:	52801012 	mov	w18, #0x80                  	// #128
   85088:	72a017f2 	movk	w18, #0xbf, lsl #16
   8508c:	0a120072 	and	w18, w3, w18
   85090:	7143825f 	cmp	w18, #0xe0, lsl #12
   85094:	54040b40 	b.eq	8d1fc <disasm+0x921c>  // b.none
		names="?\0?\0?\0?\0?\0?\0uzp1\0?\0?\0?\0trn1\0?\0?\0?\0zip1\0?\0?\0?\0?\0?\0?\0?\0uzp2\0?\0?\0?\0trn2\0?\0?\0?\0zip2\0?\0?\0shadd\0?\0sqadd\0?\0srhadd\0?\0?\0?\0?\0?\0sqsub\0?\0cmgt\0?\0cmge\0?\0sshl\0?\0sqshl\0?\0srshl\0?\0sqrshl\0?\0smax\0?\0smin\0?\0sabd\0?\0saba\0";
		op=((ic32_16)&0x20)|((ic32_10)&0x1f); q=((ic32_30)&0x1); z=((ic32_22)&0x3); m=((ic32_16)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
		args[0]=disasm_arg_VtT; args[1]=disasm_arg_VnT; args[2]=disasm_arg_VmT; 
	} else
	if(((ic32_8)&0b101111111111100011111100)==0b000011110000000011100100) {
   85098:	529f1f92 	mov	w18, #0xf8fc                	// #63740
   8509c:	52801c9a 	mov	w26, #0xe4                  	// #228
   850a0:	72a017f2 	movk	w18, #0xbf, lsl #16
   850a4:	0a120072 	and	w18, w3, w18
   850a8:	72a001fa 	movk	w26, #0xf, lsl #16
   850ac:	6b1a025f 	cmp	w18, w26
   850b0:	540407c0 	b.eq	8d1a8 <disasm+0x91c8>  // b.none
		names="movi\0";
		q=((ic32_30)&0x1); j=((ic32_11)&0xe0)|((ic32_5)&0x1f); t=((ic32)&0x1f); 
		z=0;
		args[0]=disasm_arg_VtT; args[1]=disasm_arg_imm8; 
	} else
	if(((ic32_8)&0b101111111111100011111100)==0b000011110000000011110100) {
   850b4:	52801e9a 	mov	w26, #0xf4                  	// #244
   850b8:	72a001fa 	movk	w26, #0xf, lsl #16
   850bc:	6b1a025f 	cmp	w18, w26
   850c0:	540404a0 	b.eq	8d154 <disasm+0x9174>  // b.none
		names="fmov\0";
		q=((ic32_30)&0x1); j=((ic32_11)&0xe0)|((ic32_5)&0x1f); t=((ic32)&0x1f); 
		z=2;
		args[0]=disasm_arg_VtT; args[1]=disasm_arg_F32; 
	} else
	if(((ic32_8)&0b101111111111100011111100)==0b000011110000000011111100) {
   850c4:	52801f9a 	mov	w26, #0xfc                  	// #252
   850c8:	72a001fa 	movk	w26, #0xf, lsl #16
   850cc:	6b1a025f 	cmp	w18, w26
   850d0:	54040180 	b.eq	8d100 <disasm+0x9120>  // b.none
		names="fmov\0";
		q=((ic32_30)&0x1); j=((ic32_11)&0xe0)|((ic32_5)&0x1f); t=((ic32)&0x1f); 
		z=1;
		args[0]=disasm_arg_VtT; args[1]=disasm_arg_F16; 
	} else
	if(((ic32_8)&0b101111111100000010100100)==0b000011110100000010000000) {
   850d4:	52981492 	mov	w18, #0xc0a4                	// #49316
   850d8:	72a017f2 	movk	w18, #0xbf, lsl #16
   850dc:	0a12007a 	and	w26, w3, w18
   850e0:	52881012 	mov	w18, #0x4080                	// #16512
   850e4:	72a001f2 	movk	w18, #0xf, lsl #16
   850e8:	6b12035f 	cmp	w26, w18
   850ec:	5403fd60 	b.eq	8d098 <disasm+0x90b8>  // b.none
		names="mul\0?\0sqdmulh\0sqrdmulh\0";
		op=((ic32_13)&0x2)|((ic32_12)&0x1); j=((ic32_9)&0x4)|((ic32_20)&0x3); q=((ic32_30)&0x1); m=((ic32_16)&0xf); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
		z=1;
		args[0]=disasm_arg_VtT; args[1]=disasm_arg_VnT; args[2]=disasm_arg_VmTs; 
	} else
	if(((ic32_8)&0b101111111000000011001100)==0b000011110000000000000100) {
   850f0:	52901992 	mov	w18, #0x80cc                	// #32972
   850f4:	5280009e 	mov	w30, #0x4                   	// #4
   850f8:	72a017f2 	movk	w18, #0xbf, lsl #16
   850fc:	0a120072 	and	w18, w3, w18
   85100:	72a001fe 	movk	w30, #0xf, lsl #16
   85104:	6b1e025f 	cmp	w18, w30
   85108:	5403f9e0 	b.eq	8d044 <disasm+0x9064>  // b.none
		names="sshr\0ssra\0srshr\0srsra\0";
		op=((ic32_12)&0x3); q=((ic32_30)&0x1); j=((ic32_16)&0x7f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
		args[0]=disasm_arg_Vtj2; args[1]=disasm_arg_Vnj2; args[2]=disasm_arg_shrshift; 
	} else
	if(((ic32_8)&0b101111111000000011111100)==0b000011110000000011100100) {
   8510c:	52901f92 	mov	w18, #0x80fc                	// #33020
   85110:	52801c9e 	mov	w30, #0xe4                  	// #228
   85114:	72a017f2 	movk	w18, #0xbf, lsl #16
   85118:	0a120072 	and	w18, w3, w18
   8511c:	b90077f2 	str	w18, [sp, #116]
   85120:	72a001fe 	movk	w30, #0xf, lsl #16
   85124:	6b1e025f 	cmp	w18, w30
   85128:	5403f640 	b.eq	8cff0 <disasm+0x9010>  // b.none
		names="scvtf\0";
		q=((ic32_30)&0x1); j=((ic32_16)&0x7f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
		args[0]=disasm_arg_Vtj2; args[1]=disasm_arg_Vnj2; args[2]=disasm_arg_shrshift; 
	} else
	if(((ic32_8)&0b101111111000000011111100)==0b000011110000000011111100) {
   8512c:	b94077f2 	ldr	w18, [sp, #116]
   85130:	52801f9e 	mov	w30, #0xfc                  	// #252
   85134:	72a001fe 	movk	w30, #0xf, lsl #16
   85138:	6b1e025f 	cmp	w18, w30
   8513c:	5403f300 	b.eq	8cf9c <disasm+0x8fbc>  // b.none
		names="fcvtzs\0";
		q=((ic32_30)&0x1); j=((ic32_16)&0x7f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
		args[0]=disasm_arg_Vtj2; args[1]=disasm_arg_Vnj2; args[2]=disasm_arg_shrshift; 
	} else
	if(((ic32_8)&0b101111111100000010100100)==0b000011111000000010000000) {
   85140:	52901012 	mov	w18, #0x8080                	// #32896
   85144:	72a001f2 	movk	w18, #0xf, lsl #16
   85148:	6b12035f 	cmp	w26, w18
   8514c:	5403ef40 	b.eq	8cf34 <disasm+0x8f54>  // b.none
		names="mul\0fmul\0sqdmulh\0sqrdmulh\0";
		op=((ic32_13)&0x2)|((ic32_12)&0x1); j=((ic32_10)&0x2)|((ic32_21)&0x1); q=((ic32_30)&0x1); m=((ic32_16)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
		z=2;
		args[0]=disasm_arg_VtT; args[1]=disasm_arg_VnT; args[2]=disasm_arg_VmTs; 
	} else
	if(((ic32_24)&0b10111111)==0b00011000) {
   85150:	528017f2 	mov	w18, #0xbf                  	// #191
   85154:	0a1202d2 	and	w18, w22, w18
   85158:	7100625f 	cmp	w18, #0x18
   8515c:	5403ebc0 	b.eq	8ced4 <disasm+0x8ef4>  // b.none
		names="ldr\0";
		s=((ic32_30)&0x1); i=((ic32_23)&1?(-1<<19):0)|((ic32_5)&0x7ffff); t=((ic32)&0x1f); 
		args[0]=disasm_arg_Rt; args[1]=disasm_arg_labeli4; 
	} else
	if(((ic32_8)&0b101111111110000011111100)==0b000111100000000000001100) {
   85160:	52800192 	mov	w18, #0xc                   	// #12
   85164:	72a003d2 	movk	w18, #0x1e, lsl #16
   85168:	6b12037f 	cmp	w27, w18
   8516c:	5403e8e0 	b.eq	8ce88 <disasm+0x8ea8>  // b.none
		names="dup\0";
		q=((ic32_30)&0x1); j=((ic32_16)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
		s=q;
		args[0]=disasm_arg_Vtjq; args[1]=disasm_arg_Rn; 
	} else
	if(((ic32_8)&0b101111111110000010000100)==0b001011100000000000000000) {
   85170:	529c1092 	mov	w18, #0xe084                	// #57476
   85174:	72a017f2 	movk	w18, #0xbf, lsl #16
   85178:	0a120072 	and	w18, w3, w18
   8517c:	714b825f 	cmp	w18, #0x2e0, lsl #12
   85180:	5403e500 	b.eq	8ce20 <disasm+0x8e40>  // b.none
		names="ext\0";
		q=((ic32_30)&0x1); m=((ic32_16)&0x1f); i=((ic32_14)&1?(-1<<4):0)|((ic32_11)&0xf); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
		z=0;
		args[0]=disasm_arg_VtT; args[1]=disasm_arg_VnT; args[2]=disasm_arg_VmT; args[3]=disasm_arg_i; 
	} else
	if(((ic32_8)&0b101111111110000011110100)==0b001011100100000000100100) {
   85184:	529c1e92 	mov	w18, #0xe0f4                	// #57588
   85188:	5288049a 	mov	w26, #0x4024                	// #16420
   8518c:	72a017f2 	movk	w18, #0xbf, lsl #16
   85190:	0a120072 	and	w18, w3, w18
   85194:	72a005da 	movk	w26, #0x2e, lsl #16
   85198:	6b1a025f 	cmp	w18, w26
   8519c:	5403e160 	b.eq	8cdc8 <disasm+0x8de8>  // b.none
		names="fcmge\0facge\0";
		op=((ic32_11)&0x1); q=((ic32_30)&0x1); m=((ic32_16)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
		args[0]=disasm_arg_VtH1; args[1]=disasm_arg_VnH1; args[2]=disasm_arg_VmH1; 
	} else
	if(((ic32_8)&0b101111111111111111111100)==0b001011100111100110011000) {
   851a0:	528f331a 	mov	w26, #0x7998                	// #31128
   851a4:	72a005da 	movk	w26, #0x2e, lsl #16
   851a8:	6b1a013f 	cmp	w9, w26
   851ac:	5403de80 	b.eq	8cd7c <disasm+0x8d9c>  // b.none
		names="frintx\0";
		q=((ic32_30)&0x1); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
		z=1;
		args[0]=disasm_arg_VtT; args[1]=disasm_arg_VnT; 
	} else
	if(((ic32_8)&0b101111111011111111111100)==0b001011100010000001011000) {
   851b0:	52840b1a 	mov	w26, #0x2058                	// #8280
   851b4:	72a005da 	movk	w26, #0x2e, lsl #16
   851b8:	6b1a01df 	cmp	w14, w26
   851bc:	5403dba0 	b.eq	8cd30 <disasm+0x8d50>  // b.none
		names="not\0rbit\0";
		op=((ic32_22)&0x1); q=((ic32_30)&0x1); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
		z=0;
		args[0]=disasm_arg_VtT; args[1]=disasm_arg_VnT; 
	} else
	if(((ic32_8)&0b101111111110000011111100)==0b001011101100000000010100) {
   851c0:	5298028e 	mov	w14, #0xc014                	// #49172
   851c4:	72a005ce 	movk	w14, #0x2e, lsl #16
   851c8:	6b0e037f 	cmp	w27, w14
   851cc:	5403d860 	b.eq	8ccd8 <disasm+0x8cf8>  // b.none
		names="fabd\0";
		q=((ic32_30)&0x1); m=((ic32_16)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
		args[0]=disasm_arg_VtH1; args[1]=disasm_arg_VnH1; args[2]=disasm_arg_VmH1; 
	} else
	if(((ic32_8)&0b101111111110000011110100)==0b001011101100000000100100) {
   851d0:	5298048e 	mov	w14, #0xc024                	// #49188
   851d4:	72a005ce 	movk	w14, #0x2e, lsl #16
   851d8:	6b0e025f 	cmp	w18, w14
   851dc:	5403d520 	b.eq	8cc80 <disasm+0x8ca0>  // b.none
		names="fcmgt\0facgt\0";
		op=((ic32_11)&0x1); q=((ic32_30)&0x1); m=((ic32_16)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
		args[0]=disasm_arg_VtH1; args[1]=disasm_arg_VnH1; args[2]=disasm_arg_VmH1; 
	} else
	if(((ic32_8)&0b101111111111111111111100)==0b001011101111100011111000) {
   851e0:	529f1f0e 	mov	w14, #0xf8f8                	// #63736
   851e4:	72a005ce 	movk	w14, #0x2e, lsl #16
   851e8:	6b0e013f 	cmp	w9, w14
   851ec:	5403d240 	b.eq	8cc34 <disasm+0x8c54>  // b.none
		names="fneg\0";
		q=((ic32_30)&0x1); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
		z=1;
		args[0]=disasm_arg_VtT; args[1]=disasm_arg_VnT; 
	} else
	if(((ic32_8)&0b101111111111111111101100)==0b001011101111100110001000) {
   851f0:	b9407bf2 	ldr	w18, [sp, #120]
   851f4:	529f310e 	mov	w14, #0xf988                	// #63880
   851f8:	72a005ce 	movk	w14, #0x2e, lsl #16
   851fc:	6b0e025f 	cmp	w18, w14
   85200:	5403cf40 	b.eq	8cbe8 <disasm+0x8c08>  // b.none
		names="frinta\0frinti\0";
		op=((ic32_12)&0x1); q=((ic32_30)&0x1); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
		z=1;
		args[0]=disasm_arg_VtT; args[1]=disasm_arg_VnT; 
	} else
	if(((ic32_8)&0b101111111111111111111100)==0b001011101111100111111000) {
   85204:	529f3f0e 	mov	w14, #0xf9f8                	// #63992
   85208:	72a005ce 	movk	w14, #0x2e, lsl #16
   8520c:	6b0e013f 	cmp	w9, w14
   85210:	5403cc60 	b.eq	8cb9c <disasm+0x8bbc>  // b.none
		names="fsqrt\0";
		q=((ic32_30)&0x1); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
		z=1;
		args[0]=disasm_arg_VtT; args[1]=disasm_arg_VnT; 
	} else
	if(((ic32_8)&0b101111110010000000000100)==0b001011100010000000000100) {
   85214:	5284009a 	mov	w26, #0x2004                	// #8196
   85218:	52840089 	mov	w9, #0x2004                	// #8196
   8521c:	72a017fa 	movk	w26, #0xbf, lsl #16
   85220:	0a1a007a 	and	w26, w3, w26
   85224:	72a005c9 	movk	w9, #0x2e, lsl #16
   85228:	6b09035f 	cmp	w26, w9
   8522c:	5403c8c0 	b.eq	8cb44 <disasm+0x8b64>  // b.none
		names="uhadd\0uqadd\0urhadd\0?\0uhsub\0uqsub\0cmhi\0cmhs\0ushl\0uqshl\0urshl\0uqrshl\0umax\0umin\0uabd\0uaba\0sub\0cmeq\0mls\0pmul\0umaxp\0uminp\0cqrdmulh\0";
		op=((ic32_11)&0x1f); q=((ic32_30)&0x1); z=((ic32_22)&0x3); m=((ic32_16)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
		args[0]=disasm_arg_VtT; args[1]=disasm_arg_VnT; args[2]=disasm_arg_VmT; 
	} else
	if(((ic32_8)&0b101111111100000011010100)==0b001011110100000011010000) {
   85230:	52981a89 	mov	w9, #0xc0d4                	// #49364
   85234:	52881a0e 	mov	w14, #0x40d0                	// #16592
   85238:	72a017e9 	movk	w9, #0xbf, lsl #16
   8523c:	0a090069 	and	w9, w3, w9
   85240:	72a005ee 	movk	w14, #0x2f, lsl #16
   85244:	6b0e013f 	cmp	w9, w14
   85248:	5403c4e0 	b.eq	8cae4 <disasm+0x8b04>  // b.none
		names="sqrdmlah\0sqrdmlsh\0";
		op=((ic32_13)&0x1); j=((ic32_9)&0x4)|((ic32_20)&0x3); q=((ic32_30)&0x1); m=((ic32_16)&0xf); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
		z=1;
		args[0]=disasm_arg_Vtz; args[1]=disasm_arg_VnT; args[2]=disasm_arg_VmTs; 
	} else
	if(((ic32_8)&0b101111111000000011111100)==0b001011110000000011111100) {
   8524c:	b94077f2 	ldr	w18, [sp, #116]
   85250:	52801f8e 	mov	w14, #0xfc                  	// #252
   85254:	72a005ee 	movk	w14, #0x2f, lsl #16
   85258:	6b0e025f 	cmp	w18, w14
   8525c:	5403c1a0 	b.eq	8ca90 <disasm+0x8ab0>  // b.none
		names="fcvtzu\0";
		q=((ic32_30)&0x1); j=((ic32_16)&0x7f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
		args[0]=disasm_arg_Vtj2; args[1]=disasm_arg_Vnj2; args[2]=disasm_arg_shrshift; 
	} else
	if(((ic32_8)&0b101111111000000000001100)==0b001011110000000000000100) {
   85260:	5290018e 	mov	w14, #0x800c                	// #32780
   85264:	52800092 	mov	w18, #0x4                   	// #4
   85268:	72a017ee 	movk	w14, #0xbf, lsl #16
   8526c:	0a0e006e 	and	w14, w3, w14
   85270:	72a005f2 	movk	w18, #0x2f, lsl #16
   85274:	6b1201df 	cmp	w14, w18
   85278:	5403be20 	b.eq	8ca3c <disasm+0x8a5c>  // b.none
		names="ushr\0usra\0urshr\0ursra\0sri\0sli\0sqshlu\0uqshl\0?\0?\0?\0?\0?\0?\0ucvtf\0";
		op=((ic32_12)&0xf); q=((ic32_30)&0x1); j=((ic32_16)&0x7f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
		args[0]=disasm_arg_Vtj2; args[1]=disasm_arg_Vnj2; args[2]=disasm_arg_shrshift; 
	} else
	if(((ic32_8)&0b101111111100000011010100)==0b001011111000000011010000) {
   8527c:	52901a0e 	mov	w14, #0x80d0                	// #32976
   85280:	72a005ee 	movk	w14, #0x2f, lsl #16
   85284:	6b0e013f 	cmp	w9, w14
   85288:	5403baa0 	b.eq	8c9dc <disasm+0x89fc>  // b.none
		names="sqrdmlah\0sqrdmlsh\0";
		op=((ic32_13)&0x1); j=((ic32_10)&0x2)|((ic32_21)&0x1); q=((ic32_30)&0x1); m=((ic32_16)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
		z=2;
		args[0]=disasm_arg_Vtz; args[1]=disasm_arg_VnT; args[2]=disasm_arg_VmTs; 
	} else
	if(((ic32_8)&0b101111110000000010110100)==0b001011110000000000000000) {
   8528c:	52801689 	mov	w9, #0xb4                  	// #180
   85290:	72a017e9 	movk	w9, #0xbf, lsl #16
   85294:	0a090069 	and	w9, w3, w9
   85298:	714bc13f 	cmp	w9, #0x2f0, lsl #12
   8529c:	5403b700 	b.eq	8c97c <disasm+0x899c>  // b.none
		names="mla\0mls\0";
		op=((ic32_14)&0x1); j=((ic32_10)&0x2)|((ic32_21)&0x1); q=((ic32_30)&0x1); z=((ic32_22)&0x3); m=((ic32_16)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
		args[0]=disasm_arg_VtT; args[1]=disasm_arg_VnT; args[2]=disasm_arg_VmTs; 
	} else
	if(((ic32_8)&0b101111111010000000001100)==0b001110000000000000000100) {
   852a0:	52940189 	mov	w9, #0xa00c                	// #40972
   852a4:	52800092 	mov	w18, #0x4                   	// #4
   852a8:	72a017e9 	movk	w9, #0xbf, lsl #16
   852ac:	0a090069 	and	w9, w3, w9
   852b0:	72a00712 	movk	w18, #0x38, lsl #16
   852b4:	6b12013f 	cmp	w9, w18
   852b8:	5403b280 	b.eq	8c908 <disasm+0x8928>  // b.none
		names="strb\0ldrb\0strh\0ldrh\0";
		op=((ic32_29)&0x2)|((ic32_22)&0x1); i=((ic32_20)&1?(-1<<9):0)|((ic32_12)&0x1ff); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
		args[0]=disasm_arg_Wt; args[1]=disasm_arg_offs; args[2]=disasm_arg_XnS; args[3]=disasm_arg_offe; args[4]=disasm_arg_i_opt; 
	} else
	if(((ic32_8)&0b101111111010000000000100)==0b001110000000000000000100) {
   852bc:	5294008e 	mov	w14, #0xa004                	// #40964
   852c0:	72a017ee 	movk	w14, #0xbf, lsl #16
   852c4:	0a0e006e 	and	w14, w3, w14
   852c8:	6b1201df 	cmp	w14, w18
   852cc:	5403ae20 	b.eq	8c890 <disasm+0x88b0>  // b.none
		names="strb\0ldrb\0strh\0ldrh\0";
		op=((ic32_29)&0x2)|((ic32_22)&0x1); i=((ic32_20)&1?(-1<<9):0)|((ic32_12)&0x1ff); p=((ic32_11)&0x1); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
		args[0]=disasm_arg_Wt; args[1]=disasm_arg_offs; args[2]=disasm_arg_XnS; args[3]=disasm_arg_i_opt; args[4]=disasm_arg_offe; 
	} else
	if(((ic32_8)&0b101111111010000000001100)==0b001110000010000000001000) {
   852d0:	52840112 	mov	w18, #0x2008                	// #8200
   852d4:	72a00712 	movk	w18, #0x38, lsl #16
   852d8:	6b12013f 	cmp	w9, w18
   852dc:	5403aa40 	b.eq	8c824 <disasm+0x8844>  // b.none
		names="strb\0ldrb\0strh\0ldrh\0";
		op=((ic32_29)&0x2)|((ic32_22)&0x1); m=((ic32_16)&0x1f); o=((ic32_13)&0x7); j=((ic32_12)&0x1); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
		args[0]=disasm_arg_Wt; args[1]=disasm_arg_offs; args[2]=disasm_arg_XnS; args[3]=disasm_arg_Rom; args[4]=disasm_arg_amountj; args[5]=disasm_arg_offe; 
	} else
	if(((ic32_8)&0b101111111010000000001100)==0b001110001000000000000100) {
   852e0:	52900092 	mov	w18, #0x8004                	// #32772
   852e4:	72a00712 	movk	w18, #0x38, lsl #16
   852e8:	6b12013f 	cmp	w9, w18
   852ec:	5403a660 	b.eq	8c7b8 <disasm+0x87d8>  // b.none
		names="ldrsb\0ldrsh\0";
		op=((ic32_30)&0x1); s=((ic32_22)&0x1); i=((ic32_20)&1?(-1<<9):0)|((ic32_12)&0x1ff); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
		args[0]=disasm_arg_nRt; args[1]=disasm_arg_offs; args[2]=disasm_arg_XnS; args[3]=disasm_arg_offe; args[4]=disasm_arg_i_opt; 
	} else
	if(((ic32_8)&0b101111111010000000000100)==0b001110001000000000000000) {
   852f0:	714e21df 	cmp	w14, #0x388, lsl #12
   852f4:	5403a280 	b.eq	8c744 <disasm+0x8764>  // b.none
		names="ldursb\0?\0ldursh\0ldtrsh\0";
		op=((ic32_29)&0x2)|((ic32_11)&0x1); s=((ic32_22)&0x1); i=((ic32_20)&1?(-1<<9):0)|((ic32_12)&0x1ff); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
		args[0]=disasm_arg_nRt; args[1]=disasm_arg_offs; args[2]=disasm_arg_XnS; args[3]=disasm_arg_i_opt; args[4]=disasm_arg_offe; 
	} else
	if(((ic32_8)&0b101111111010000000000100)==0b001110001000000000000100) {
   852f8:	52900092 	mov	w18, #0x8004                	// #32772
   852fc:	72a00712 	movk	w18, #0x38, lsl #16
   85300:	6b1201df 	cmp	w14, w18
   85304:	54039e80 	b.eq	8c6d4 <disasm+0x86f4>  // b.none
		names="ldrsb\0ldrsh\0";
		op=((ic32_30)&0x1); s=((ic32_22)&0x1); i=((ic32_20)&1?(-1<<9):0)|((ic32_12)&0x1ff); p=((ic32_11)&0x1); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
		args[0]=disasm_arg_nRt; args[1]=disasm_arg_offs; args[2]=disasm_arg_XnS; args[3]=disasm_arg_i_opt; args[4]=disasm_arg_offe; 
	} else
	if(((ic32_8)&0b101111111010000000001100)==0b001110001010000000001000) {
   85308:	52940112 	mov	w18, #0xa008                	// #40968
   8530c:	72a00712 	movk	w18, #0x38, lsl #16
   85310:	6b12013f 	cmp	w9, w18
   85314:	54039ae0 	b.eq	8c670 <disasm+0x8690>  // b.none
		names="ldrsb\0ldrsh\0";
		op=((ic32_30)&0x1); s=((ic32_22)&0x1); m=((ic32_16)&0x1f); o=((ic32_13)&0x7); j=((ic32_12)&0x1); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
		args[0]=disasm_arg_nRt; args[1]=disasm_arg_offs; args[2]=disasm_arg_XnS; args[3]=disasm_arg_Rom; args[4]=disasm_arg_amountj; args[5]=disasm_arg_offe; 
	} else
	if(((ic32_8)&0b101111110010000000000100)==0b001110000000000000000000) {
   85318:	714e035f 	cmp	w26, #0x380, lsl #12
   8531c:	540396c0 	b.eq	8c5f4 <disasm+0x8614>  // b.none
		names="sturb\0sttrb\0ldurb\0ldtrb\0?\0ldtrsb\0?\0ldtrsb\0sturh\0sttrh\0ldurh\0ldtrh\0";
		op=((ic32_27)&0x8)|((ic32_21)&0x6)|((ic32_11)&0x1); i=((ic32_20)&1?(-1<<9):0)|((ic32_12)&0x1ff); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
		args[0]=disasm_arg_Wt; args[1]=disasm_arg_offs; args[2]=disasm_arg_XnS; args[3]=disasm_arg_i_opt; args[4]=disasm_arg_offe; 
	} else
	if(((ic32_16)&0b1011111110000000)==0b0011100100000000) {
   85320:	5297f012 	mov	w18, #0xbf80                	// #49024
   85324:	0a1200b2 	and	w18, w5, w18
   85328:	2a1203fa 	mov	w26, w18
   8532c:	2a1203fe 	mov	w30, w18
   85330:	52872012 	mov	w18, #0x3900                	// #14592
   85334:	6b12035f 	cmp	w26, w18
   85338:	540392e0 	b.eq	8c594 <disasm+0x85b4>  // b.none
		names="strb\0ldrb\0strh\0ldrh\0";
		op=((ic32_29)&0x2)|((ic32_22)&0x1); j=((ic32_10)&0xfff); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
		args[0]=disasm_arg_Wt; args[1]=disasm_arg_offs; args[2]=disasm_arg_XnS; args[3]=disasm_arg_j_opt; args[4]=disasm_arg_offe; 
	} else
	if(((ic32_16)&0b1011111110000000)==0b0011100110000000) {
   8533c:	52873012 	mov	w18, #0x3980                	// #14720
   85340:	6b12035f 	cmp	w26, w18
   85344:	54038fc0 	b.eq	8c53c <disasm+0x855c>  // b.none
		names="ldrsb\0ldrsh\0";
		op=((ic32_30)&0x1); s=((ic32_22)&0x1); j=((ic32_10)&0xfff); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
		args[0]=disasm_arg_nRt; args[1]=disasm_arg_offs; args[2]=disasm_arg_XnS; args[3]=disasm_arg_j_opt; args[4]=disasm_arg_offe; 
	} else
	if(((ic32_8)&0b100111111111111111001100)==0b000011101111100011001000) {
   85348:	529ff992 	mov	w18, #0xffcc                	// #65484
   8534c:	529f191a 	mov	w26, #0xf8c8                	// #63688
   85350:	72a013f2 	movk	w18, #0x9f, lsl #16
   85354:	0a120072 	and	w18, w3, w18
   85358:	72a001da 	movk	w26, #0xe, lsl #16
   8535c:	6b1a025f 	cmp	w18, w26
   85360:	54038c00 	b.eq	8c4e0 <disasm+0x8500>  // b.none
		names="fcmgt\0fcmeq\0fcmlt\0?\0fcmge\0fcmle\0?\0fneg\0";
		op=((ic32_27)&0x4)|((ic32_12)&0x3); q=((ic32_30)&0x1); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
		args[0]=disasm_arg_VtH1; args[1]=disasm_arg_VnH1; args[2]=disasm_arg_simd0; 
	} else
	if(((ic32_8)&0b100111111011111111001100)==0b000011101010000011001000) {
   85364:	5297f992 	mov	w18, #0xbfcc                	// #49100
   85368:	5294191a 	mov	w26, #0xa0c8                	// #41160
   8536c:	72a013f2 	movk	w18, #0x9f, lsl #16
   85370:	0a120072 	and	w18, w3, w18
   85374:	72a001da 	movk	w26, #0xe, lsl #16
   85378:	6b1a025f 	cmp	w18, w26
   8537c:	54038840 	b.eq	8c484 <disasm+0x84a4>  // b.none
		names="fcmgt\0fcmeq\0fcmlt\0?\0fcmge\0fcmle\0?\0fneg\0";
		op=((ic32_27)&0x4)|((ic32_12)&0x3); q=((ic32_30)&0x1); z=((ic32_22)&0x1); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
		args[0]=disasm_arg_Vtzq; args[1]=disasm_arg_Vnzq; args[2]=disasm_arg_simd0; 
	} else
	if(((ic32_8)&0b100111110110000011000100)==0b000011100100000000000100) {
   85380:	528c1892 	mov	w18, #0x60c4                	// #24772
   85384:	5288009a 	mov	w26, #0x4004                	// #16388
   85388:	72a013f2 	movk	w18, #0x9f, lsl #16
   8538c:	0a120072 	and	w18, w3, w18
   85390:	72a001da 	movk	w26, #0xe, lsl #16
   85394:	6b1a025f 	cmp	w18, w26
   85398:	54038420 	b.eq	8c41c <disasm+0x843c>  // b.none
		names="fmaxnm\0fmla\0fadd\0fmulx\0fcmeq\0?\0fmax\0frecps\0fminnm\0fmls\0fsub\0?\0?\0?\0fmin\0frsqrts\0fmaxnmp\0?\0faddp\0fmul\0fcmge\0facge\0fmaxp\0fdiv\0fminnmp\0?\0fabd\0?\0fcmgt\0facgt\0fminp\0";
		op=((ic32_25)&0x10)|((ic32_20)&0x8)|((ic32_11)&0x7); q=((ic32_30)&0x1); m=((ic32_16)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
		z=1;
		args[0]=disasm_arg_VtT; args[1]=disasm_arg_VnT; args[2]=disasm_arg_VmT; 
	} else
	if(((ic32_8)&0b100111110111111110001100)==0b000011100111100110001000) {
   8539c:	528ff192 	mov	w18, #0x7f8c                	// #32652
   853a0:	528f311a 	mov	w26, #0x7988                	// #31112
   853a4:	72a013f2 	movk	w18, #0x9f, lsl #16
   853a8:	0a120072 	and	w18, w3, w18
   853ac:	72a001da 	movk	w26, #0xe, lsl #16
   853b0:	6b1a025f 	cmp	w18, w26
   853b4:	54038060 	b.eq	8c3c0 <disasm+0x83e0>  // b.none
		names="frintn\0frintm\0fcvtns\0fcvtms\0fcvtas\0scvtf\0?\0fabs\0frintp\0frintz\0fcvtps\0fcvtzs\0?\0frecpe\0?\0frecpx\0?\0frintx\0fcvtnu\0fcvtmu\0fcvtau\0ucvtf\0?\0?\0frinta\0frinti\0fcvtpu\0fcvtzu\0?\0frsqrte\0?\0fsqrt\0";
		op=((ic32_25)&0x10)|((ic32_20)&0x8)|((ic32_12)&0x7); q=((ic32_30)&0x1); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
		args[0]=disasm_arg_VtH1; args[1]=disasm_arg_VnH1; 
	} else
	if(((ic32_8)&0b100111110010000011111100)==0b000011100000000010010100) {
   853b8:	52841f92 	mov	w18, #0x20fc                	// #8444
   853bc:	72a013f2 	movk	w18, #0x9f, lsl #16
   853c0:	0a120072 	and	w18, w3, w18
   853c4:	2a1203fa 	mov	w26, w18
   853c8:	b90077fa 	str	w26, [sp, #116]
   853cc:	52801292 	mov	w18, #0x94                  	// #148
   853d0:	72a001d2 	movk	w18, #0xe, lsl #16
   853d4:	6b12035f 	cmp	w26, w18
   853d8:	54037c80 	b.eq	8c368 <disasm+0x8388>  // b.none
		names="sdot\0udot\0";
		op=((ic32_29)&0x1); q=((ic32_30)&0x1); z=((ic32_22)&0x3); m=((ic32_16)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
		args[0]=disasm_arg_VtT; args[1]=disasm_arg_Vnzq; args[2]=disasm_arg_Vmzq; 
	} else
	if(((ic32_8)&0b100111110011111110111100)==0b000011100010000000101000) {
   853dc:	5287f792 	mov	w18, #0x3fbc                	// #16316
   853e0:	5284051a 	mov	w26, #0x2028                	// #8232
   853e4:	72a013f2 	movk	w18, #0x9f, lsl #16
   853e8:	0a120072 	and	w18, w3, w18
   853ec:	72a001da 	movk	w26, #0xe, lsl #16
   853f0:	6b1a025f 	cmp	w18, w26
   853f4:	54037900 	b.eq	8c314 <disasm+0x8334>  // b.none
		names="saddlp\0sadalp\0uaddlp\0uadalp\0";
		op=((ic32_28)&0x2)|((ic32_14)&0x1); q=((ic32_30)&0x1); z=((ic32_22)&0x3); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
		args[0]=disasm_arg_Vtzq2; args[1]=disasm_arg_VnT; 
	} else
	if(((ic32_8)&0b100111110011111111001100)==0b000011100010000010001000) {
   853f8:	5287f992 	mov	w18, #0x3fcc                	// #16332
   853fc:	5284111b 	mov	w27, #0x2088                	// #8328
   85400:	72a013f2 	movk	w18, #0x9f, lsl #16
   85404:	0a120072 	and	w18, w3, w18
   85408:	72a001db 	movk	w27, #0xe, lsl #16
   8540c:	6b1b025f 	cmp	w18, w27
   85410:	54037540 	b.eq	8c2b8 <disasm+0x82d8>  // b.none
		names="cmgt\0cmeq\0cmlt\0abs\0cmge\0cmle\0?\0neg\0";
		op=((ic32_27)&0x4)|((ic32_12)&0x3); q=((ic32_30)&0x1); z=((ic32_22)&0x3); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
		args[0]=disasm_arg_VtT; args[1]=disasm_arg_VnT; args[2]=disasm_arg_simd0; 
	} else
	if(((ic32_8)&0b100111110011111100001100)==0b000011100010000000001000) {
   85414:	5287e192 	mov	w18, #0x3f0c                	// #16140
   85418:	5284011a 	mov	w26, #0x2008                	// #8200
   8541c:	72a013f2 	movk	w18, #0x9f, lsl #16
   85420:	0a120072 	and	w18, w3, w18
   85424:	72a001da 	movk	w26, #0xe, lsl #16
   85428:	6b1a025f 	cmp	w18, w26
   8542c:	540371c0 	b.eq	8c264 <disasm+0x8284>  // b.none
		names="rev64\0rev16\0saddlp\0suqadd\0cls\0cnt\0sadalp\0sqabs\0cmgt\0cmeq\0cmlt\0abs\0?\0?\0?\0?\0rev32\0?\0uaddlp\0usqadd\0clz\0?\0uadalp\0sqneg\0cmge\0cmle\0?\0neg\0";
		op=((ic32_25)&0x10)|((ic32_12)&0xf); q=((ic32_30)&0x1); z=((ic32_22)&0x3); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
		args[0]=disasm_arg_VtT; args[1]=disasm_arg_VnT; 
	} else
	if(((ic32_8)&0b100111110011111010001100)==0b000011100010000010001000) {
   85430:	5287d192 	mov	w18, #0x3e8c                	// #16012
   85434:	72a013f2 	movk	w18, #0x9f, lsl #16
   85438:	0a120072 	and	w18, w3, w18
   8543c:	6b1b025f 	cmp	w18, w27
	ic32_20=ic32>>20; ic32_15=ic32>>15; ic32_16=ic32>>16; ic32_5=ic32>>5; ic32_8=ic32>>8; ic32_22=ic32>>22; ic32_13=ic32>>13; ic32_14=ic32>>14; ic32_9=ic32>>9; ic32_10=ic32>>10; ic32_21=ic32>>21; ic32_4=ic32>>4; ic32_12=ic32>>12; ic32_24=ic32>>24; ic32_11=ic32>>11; ic32_18=ic32>>18; ic32_27=ic32>>27; ic32_28=ic32>>28; ic32_29=ic32>>29; ic32_25=ic32>>25; ic32_26=ic32>>26; ic32_23=ic32>>23; ic32_30=ic32>>30; ic32_19=ic32>>19; ic32_31=ic32>>31;
   85440:	53137c1b 	lsr	w27, w0, #19
	if(((ic32_8)&0b100111110011111010001100)==0b000011100010000010001000) {
   85444:	54036de0 	b.eq	8c200 <disasm+0x8220>  // b.none
		names="?\0?\0?\0?\0?\0?\0?\0?\0frintn\0frintm\0fcvtns\0fcvtms\0fcvtas\0scvtf\0?\0fabs\0?\0?\0?\0?\0fcmgt\0fcmeq\0fcmlt\0?\0frintp\0frintz\0fcvtps\0fcvtzs\0urecpe\0frecpe\0?\0frecpx\0?\0?\0?\0?\0?\0?\0?\0?\0?\0frintx\0fcvtnu\0fcvtmu\0fcvtau\0ucvtf\0?\0?\0?\0?\0?\0?\0fcmge\0fcmle\0?\0fneg\0frinta\0frinti\0fcvtpu\0fcvtzu\0?\0frsqrte\0?\0fsqrt\0";
		op=((ic32_24)&0x20)|((ic32_19)&0x10)|((ic32_13)&0x8)|((ic32_12)&0x7); q=((ic32_30)&0x1); z=((ic32_22)&0x1); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
		args[0]=disasm_arg_Vtzq; args[1]=disasm_arg_Vnzq; 
	} else
	if(((ic32_8)&0b100111110011111111111100)==0b000011100011000000111000) {
   85448:	5287ff92 	mov	w18, #0x3ffc                	// #16380
   8544c:	5286071a 	mov	w26, #0x3038                	// #12344
   85450:	72a013f2 	movk	w18, #0x9f, lsl #16
   85454:	0a120072 	and	w18, w3, w18
   85458:	72a001da 	movk	w26, #0xe, lsl #16
   8545c:	6b1a025f 	cmp	w18, w26
   85460:	54036aa0 	b.eq	8c1b4 <disasm+0x81d4>  // b.none
		names="saddlv\0uaddlv\0";
		op=((ic32_29)&0x1); q=((ic32_30)&0x1); z=((ic32_22)&0x3); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
		args[0]=disasm_arg_FPz4t; args[1]=disasm_arg_VnT; 
	} else
	if(((ic32_8)&0b100111110011111011101100)==0b000011100011000010101000) {
   85464:	5287dd92 	mov	w18, #0x3eec                	// #16108
   85468:	5286151a 	mov	w26, #0x30a8                	// #12456
   8546c:	72a013f2 	movk	w18, #0x9f, lsl #16
   85470:	0a120072 	and	w18, w3, w18
   85474:	72a001da 	movk	w26, #0xe, lsl #16
   85478:	6b1a025f 	cmp	w18, w26
   8547c:	540366e0 	b.eq	8c158 <disasm+0x8178>  // b.none
		names="smaxv\0?\0sminv\0addv\0umaxv\0?\0uminv\0";
		op=((ic32_27)&0x4)|((ic32_15)&0x2)|((ic32_12)&0x1); q=((ic32_30)&0x1); z=((ic32_22)&0x3); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
		args[0]=disasm_arg_FPz3t; args[1]=disasm_arg_VnT; 
	} else
	if(((ic32_8)&0b100111110010000011111100)==0b000011100010000000011100) {
   85480:	b94077fa 	ldr	w26, [sp, #116]
   85484:	52840392 	mov	w18, #0x201c                	// #8220
   85488:	72a001d2 	movk	w18, #0xe, lsl #16
   8548c:	6b12035f 	cmp	w26, w18
   85490:	54036340 	b.eq	8c0f8 <disasm+0x8118>  // b.none
		names="and\0bic\0orr\0orn\0eor\0bsl\0bit\0bif\0";
		op=((ic32_27)&0x4)|((ic32_22)&0x3); q=((ic32_30)&0x1); m=((ic32_16)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
		z=0;
		args[0]=disasm_arg_VtT; args[1]=disasm_arg_VnT; args[2]=disasm_arg_VmT; 
	} else
	if(((ic32_8)&0b100111110010000011000100)==0b000011100010000011000100) {
   85494:	52841892 	mov	w18, #0x20c4                	// #8388
   85498:	5284189a 	mov	w26, #0x20c4                	// #8388
   8549c:	72a013f2 	movk	w18, #0x9f, lsl #16
   854a0:	0a120072 	and	w18, w3, w18
   854a4:	72a001da 	movk	w26, #0xe, lsl #16
   854a8:	6b1a025f 	cmp	w18, w26
   854ac:	54035f20 	b.eq	8c090 <disasm+0x80b0>  // b.none
		names="fmaxnm\0fmla\0fadd\0?\0fcmeq\0?\0fmax\0frecps\0fminnm\0fmls\0fsub\0?\0?\0?\0fmin\0frsqrts\0fmaxnmp\0?\0faddp\0fmul\0fcmge\0facge\0fmaxp\0fdiv\0fminnmp\0?\0fabd\0?\0fcmgt\0facgt\0fminp\0";
		op=((ic32_25)&0x10)|((ic32_20)&0x8)|((ic32_11)&0x7); q=((ic32_30)&0x1); z=((ic32_22)&0x1); m=((ic32_16)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
		args[0]=disasm_arg_Vtzq; args[1]=disasm_arg_Vnzq; args[2]=disasm_arg_Vmzq; 
	} else
	if(((ic32_8)&0b100111110000000011000100)==0b000011100000000010000100) {
   854b0:	52801892 	mov	w18, #0xc4                  	// #196
   854b4:	5280109a 	mov	w26, #0x84                  	// #132
   854b8:	72a013f2 	movk	w18, #0x9f, lsl #16
   854bc:	0a120072 	and	w18, w3, w18
   854c0:	72a001da 	movk	w26, #0xe, lsl #16
   854c4:	6b1a025f 	cmp	w18, w26
   854c8:	54035ae0 	b.eq	8c024 <disasm+0x8044>  // b.none
		names="?\0?\0sdot\0?\0?\0?\0?\0?\0add\0cmtst\0mla\0mul\0smaxp\0sminp\0sqdmulh\0addp\0sqrdmlah\0sqrdmlsh\0udot\0?\0?\0?\0?\0?\0sub\0cmeq\0mls\0pmul\0umaxp\0uminp\0cqrdmulh\0";
		op=((ic32_25)&0x10)|((ic32_18)&0x8)|((ic32_11)&0x7); q=((ic32_30)&0x1); z=((ic32_22)&0x3); m=((ic32_16)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
		args[0]=disasm_arg_VtT; args[1]=disasm_arg_VnT; args[2]=disasm_arg_VmT; 
	} else
	if(((ic32_8)&0b100111111111100010001100)==0b000011110000000000000100) {
   854cc:	529f1192 	mov	w18, #0xf88c                	// #63628
   854d0:	5280009a 	mov	w26, #0x4                   	// #4
   854d4:	72a013f2 	movk	w18, #0x9f, lsl #16
   854d8:	0a120072 	and	w18, w3, w18
   854dc:	72a001fa 	movk	w26, #0xf, lsl #16
   854e0:	6b1a025f 	cmp	w18, w26
   854e4:	540356c0 	b.eq	8bfbc <disasm+0x7fdc>  // b.none
		names="movi\0orr\0mvni\0bic\0";
		op=((ic32_28)&0x2)|((ic32_12)&0x1); q=((ic32_30)&0x1); j=((ic32_11)&0xe0)|((ic32_5)&0x1f); k=((ic32_13)&0x3); t=((ic32)&0x1f); 
		z=2;
		args[0]=disasm_arg_VtT; args[1]=disasm_arg_imm8; args[2]=disasm_arg_amountk_opt; 
	} else
	if(((ic32_8)&0b100111111111100011001100)==0b000011110000000010000100) {
   854e8:	529f1992 	mov	w18, #0xf8cc                	// #63692
   854ec:	5280109a 	mov	w26, #0x84                  	// #132
   854f0:	72a013f2 	movk	w18, #0x9f, lsl #16
   854f4:	0a120072 	and	w18, w3, w18
   854f8:	72a001fa 	movk	w26, #0xf, lsl #16
   854fc:	6b1a025f 	cmp	w18, w26
   85500:	540352a0 	b.eq	8bf54 <disasm+0x7f74>  // b.none
		names="movi\0orr\0mvni\0bic\0";
		op=((ic32_28)&0x2)|((ic32_12)&0x1); q=((ic32_30)&0x1); j=((ic32_11)&0xe0)|((ic32_5)&0x1f); k=((ic32_13)&0x1); t=((ic32)&0x1f); 
		z=1;
		args[0]=disasm_arg_VtT; args[1]=disasm_arg_imm8; args[2]=disasm_arg_amountk_opt; 
	} else
	if(((ic32_8)&0b100111111111100011101100)==0b000011110000000011000100) {
   85504:	529f1d92 	mov	w18, #0xf8ec                	// #63724
   85508:	52801898 	mov	w24, #0xc4                  	// #196
   8550c:	72a013f2 	movk	w18, #0x9f, lsl #16
   85510:	0a120072 	and	w18, w3, w18
   85514:	72a001f8 	movk	w24, #0xf, lsl #16
   85518:	6b18025f 	cmp	w18, w24
   8551c:	54034ec0 	b.eq	8bef4 <disasm+0x7f14>  // b.none
		names="movi\0mvni\0";
		op=((ic32_29)&0x1); q=((ic32_30)&0x1); j=((ic32_11)&0xe0)|((ic32_5)&0x1f); k=((ic32_12)&0x1); t=((ic32)&0x1f); 
		z=2;
		args[0]=disasm_arg_VtT; args[1]=disasm_arg_imm8; args[2]=disasm_arg_amountk2_opt; 
	} else
	if(((ic32_8)&0b100111111100000000110100)==0b000011110000000000010000) {
   85520:	52980692 	mov	w18, #0xc034                	// #49204
   85524:	72a013f2 	movk	w18, #0x9f, lsl #16
   85528:	0a12007a 	and	w26, w3, w18
   8552c:	52800212 	mov	w18, #0x10                  	// #16
   85530:	72a001f2 	movk	w18, #0xf, lsl #16
   85534:	6b12035f 	cmp	w26, w18
   85538:	54034aa0 	b.eq	8be8c <disasm+0x7eac>  // b.none
		names="fmla\0fmls\0fmul\0?\0?\0?\0fmulx\0";
		op=((ic32_27)&0x4)|((ic32_14)&0x3); j=((ic32_9)&0x4)|((ic32_20)&0x3); q=((ic32_30)&0x1); m=((ic32_16)&0xf); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
		args[0]=disasm_arg_VtH1; args[1]=disasm_arg_VnH1; args[2]=disasm_arg_VmHs; 
	} else
	if(((ic32_8)&0b100111111000000011001100)==0b000011110000000001000100) {
   8553c:	52901992 	mov	w18, #0x80cc                	// #32972
   85540:	52800898 	mov	w24, #0x44                  	// #68
   85544:	72a013f2 	movk	w18, #0x9f, lsl #16
   85548:	0a120072 	and	w18, w3, w18
   8554c:	72a001f8 	movk	w24, #0xf, lsl #16
   85550:	6b18025f 	cmp	w18, w24
   85554:	540346e0 	b.eq	8be30 <disasm+0x7e50>  // b.none
		names="?\0shl\0?\0sqshl\0sri\0sli\0sqshlu\0uqshl\0";
		op=((ic32_27)&0x4)|((ic32_12)&0x3); q=((ic32_30)&0x1); j=((ic32_16)&0x7f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
		args[0]=disasm_arg_Vtj2; args[1]=disasm_arg_Vnj2; args[2]=disasm_arg_shlshift; 
	} else
	if(((ic32_8)&0b100111111100000011110100)==0b000011111000000011100000) {
   85558:	52981e92 	mov	w18, #0xc0f4                	// #49396
   8555c:	52901c18 	mov	w24, #0x80e0                	// #32992
   85560:	72a013f2 	movk	w18, #0x9f, lsl #16
   85564:	0a120072 	and	w18, w3, w18
   85568:	72a001f8 	movk	w24, #0xf, lsl #16
   8556c:	6b18025f 	cmp	w18, w24
   85570:	54034300 	b.eq	8bdd0 <disasm+0x7df0>  // b.none
		names="sdot\0udot\0";
		op=((ic32_29)&0x1); j=((ic32_10)&0x2)|((ic32_21)&0x1); q=((ic32_30)&0x1); m=((ic32_16)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
		z=0;
		args[0]=disasm_arg_Vtzq; args[1]=disasm_arg_VnT; args[2]=disasm_arg_VmTs4b; 
	} else
	if(((ic32_8)&0b100111111100000000110100)==0b000011111000000000010000) {
   85574:	52900212 	mov	w18, #0x8010                	// #32784
   85578:	72a001f2 	movk	w18, #0xf, lsl #16
   8557c:	6b12035f 	cmp	w26, w18
   85580:	54033f40 	b.eq	8bd68 <disasm+0x7d88>  // b.none
		names="fmla\0fmls\0fmul\0sqrdmulh\0?\0?\0fmulx\0sqrdmlah\0";
		op=((ic32_27)&0x4)|((ic32_14)&0x3); j=((ic32_10)&0x2)|((ic32_21)&0x1); q=((ic32_30)&0x1); m=((ic32_16)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
		z=0;
		args[0]=disasm_arg_Vtzq; args[1]=disasm_arg_Vnzq; args[2]=disasm_arg_VmTs2; 
	} else
	if(((ic32_8)&0b100111111110000000110100)==0b000011111100000000010000) {
   85584:	529c0692 	mov	w18, #0xe034                	// #57396
   85588:	52980218 	mov	w24, #0xc010                	// #49168
   8558c:	72a013f2 	movk	w18, #0x9f, lsl #16
   85590:	0a120072 	and	w18, w3, w18
   85594:	72a001f8 	movk	w24, #0xf, lsl #16
   85598:	6b18025f 	cmp	w18, w24
   8559c:	54033b60 	b.eq	8bd08 <disasm+0x7d28>  // b.none
		names="fmla\0fmls\0fmul\0?\0?\0?\0fmulx\0";
		op=((ic32_27)&0x4)|((ic32_14)&0x3); j=((ic32_11)&0x1); q=((ic32_30)&0x1); m=((ic32_16)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
		z=1;
		args[0]=disasm_arg_Vtzq; args[1]=disasm_arg_Vnzq; args[2]=disasm_arg_VmTs2; 
	} else
	if(((ic32_8)&0b111111111110000001111100)==0b100010000000000001111100) {
   855a0:	121e5472 	and	w18, w3, #0xfffffc
   855a4:	52800f98 	mov	w24, #0x7c                  	// #124
   855a8:	12136652 	and	w18, w18, #0xffffe07f
   855ac:	72a01118 	movk	w24, #0x88, lsl #16
   855b0:	6b18025f 	cmp	w18, w24
   855b4:	540337c0 	b.eq	8bcac <disasm+0x7ccc>  // b.none
		names="stxr\0stlxr\0";
		op=((ic32_15)&0x1); d=((ic32_16)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
		args[0]=disasm_arg_Wd; args[1]=disasm_arg_Wt; args[2]=disasm_arg_offs; args[3]=disasm_arg_XnS; args[4]=disasm_arg_offe; 
	} else
	if(((ic32_24)&0b11111111)==0b10011000) {
   855b8:	710262df 	cmp	w22, #0x98
   855bc:	54033480 	b.eq	8bc4c <disasm+0x7c6c>  // b.none
		names="ldrsw\0";
		i=((ic32_23)&1?(-1<<19):0)|((ic32_5)&0x7ffff); t=((ic32)&0x1f); 
		args[0]=disasm_arg_Xt; args[1]=disasm_arg_labeli4; 
	} else
	if(((ic32_8)&0b111111110110000001111100)==0b100110110010000001111100) {
   855c0:	528c0f92 	mov	w18, #0x607c                	// #24700
   855c4:	52840f98 	mov	w24, #0x207c                	// #8316
   855c8:	72a01ff2 	movk	w18, #0xff, lsl #16
   855cc:	0a120072 	and	w18, w3, w18
   855d0:	72a01378 	movk	w24, #0x9b, lsl #16
   855d4:	6b18025f 	cmp	w18, w24
   855d8:	540330a0 	b.eq	8bbec <disasm+0x7c0c>  // b.none
		names="smull\0smnegl\0umull\0umnegl\0";
		op=((ic32_22)&0x2)|((ic32_15)&0x1); m=((ic32_16)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
		args[0]=disasm_arg_Xt; args[1]=disasm_arg_Wn; args[2]=disasm_arg_Wm; 
	} else
	if(((ic32_16)&0b1111111101100000)==0b1001101100100000) {
   855dc:	529fec12 	mov	w18, #0xff60                	// #65376
   855e0:	0a1200b2 	and	w18, w5, w18
   855e4:	52936418 	mov	w24, #0x9b20                	// #39712
   855e8:	6b18025f 	cmp	w18, w24
   855ec:	54032d00 	b.eq	8bb8c <disasm+0x7bac>  // b.none
		names="smaddl\0smsubl\0umaddl\0umsubl\0";
		op=((ic32_22)&0x2)|((ic32_15)&0x1); m=((ic32_16)&0x1f); d=((ic32_10)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
		args[0]=disasm_arg_Xt; args[1]=disasm_arg_Wn; args[2]=disasm_arg_Wm; args[3]=disasm_arg_Xd; 
	} else
	if(((ic32_8)&0b111111110110000011111100)==0b100110110100000001111100) {
   855f0:	b940b3f8 	ldr	w24, [sp, #176]
   855f4:	52880f92 	mov	w18, #0x407c                	// #16508
   855f8:	72a01372 	movk	w18, #0x9b, lsl #16
   855fc:	6b12031f 	cmp	w24, w18
   85600:	540329a0 	b.eq	8bb34 <disasm+0x7b54>  // b.none
		names="smulh\0umulh\0";
		op=((ic32_23)&0x1); m=((ic32_16)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
		args[0]=disasm_arg_Xt; args[1]=disasm_arg_Xn; args[2]=disasm_arg_Xm; 
	} else
	if(((ic32_8)&0b111111111110000000001100)==0b101110001000000000000100) {
   85604:	121e5472 	and	w18, w3, #0xfffffc
   85608:	5290009a 	mov	w26, #0x8004                	// #32772
   8560c:	12135a52 	and	w18, w18, #0xffffe00f
   85610:	72a0171a 	movk	w26, #0xb8, lsl #16
   85614:	6b1a025f 	cmp	w18, w26
   85618:	54032580 	b.eq	8bac8 <disasm+0x7ae8>  // b.none
		names="ldrsw\0";
		i=((ic32_20)&1?(-1<<9):0)|((ic32_12)&0x1ff); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
		args[0]=disasm_arg_Xt; args[1]=disasm_arg_offs; args[2]=disasm_arg_XnS; args[3]=disasm_arg_offe; args[4]=disasm_arg_i_opt; 
	} else
	if(((ic32_8)&0b111111111110000000000100)==0b101110001000000000000100) {
   8561c:	121e5478 	and	w24, w3, #0xfffffc
   85620:	12135718 	and	w24, w24, #0xffffe007
   85624:	6b1a031f 	cmp	w24, w26
   85628:	54032180 	b.eq	8ba58 <disasm+0x7a78>  // b.none
		names="ldrsw\0";
		i=((ic32_20)&1?(-1<<9):0)|((ic32_12)&0x1ff); p=((ic32_11)&0x1); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
		args[0]=disasm_arg_Xt; args[1]=disasm_arg_offs; args[2]=disasm_arg_XnS; args[3]=disasm_arg_i_opt; args[4]=disasm_arg_offe; 
	} else
	if(((ic32_8)&0b111111111110000000001100)==0b101110001010000000001000) {
   8562c:	52940118 	mov	w24, #0xa008                	// #40968
   85630:	72a01718 	movk	w24, #0xb8, lsl #16
   85634:	6b18025f 	cmp	w18, w24
   85638:	54031de0 	b.eq	8b9f4 <disasm+0x7a14>  // b.none
		names="ldrsw\0";
		m=((ic32_16)&0x1f); o=((ic32_13)&0x7); j=((ic32_12)&0x1); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
		args[0]=disasm_arg_Xt; args[1]=disasm_arg_offs; args[2]=disasm_arg_XnS; args[3]=disasm_arg_Rom; args[4]=disasm_arg_amountj2; args[5]=disasm_arg_offe; 
	} else
	if(((ic32_16)&0b1111111111000000)==0b1011100110000000) {
   8563c:	b94083fa 	ldr	w26, [sp, #128]
   85640:	52973018 	mov	w24, #0xb980                	// #47488
   85644:	6b18035f 	cmp	w26, w24
   85648:	54031aa0 	b.eq	8b99c <disasm+0x79bc>  // b.none
		names="ldrsw\0";
		j=((ic32_10)&0xfff); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
		args[0]=disasm_arg_Xt; args[1]=disasm_arg_offs; args[2]=disasm_arg_XnS; args[3]=disasm_arg_j_opt; args[4]=disasm_arg_offe; 
	} else
	if(((ic32_8)&0b111111111100000010000000)==0b110011100000000000000000) {
   8564c:	12194078 	and	w24, w3, #0xffff80
   85650:	12126718 	and	w24, w24, #0xffffc0ff
   85654:	7173831f 	cmp	w24, #0xce0, lsl #12
   85658:	54031760 	b.eq	8b944 <disasm+0x7964>  // b.none
		names="eor3\0bcax\0";
		op=((ic32_21)&0x1); m=((ic32_16)&0x1f); d=((ic32_10)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
		args[0]=disasm_arg_Vt16b; args[1]=disasm_arg_Vn16b; args[2]=disasm_arg_Vm16b; args[3]=disasm_arg_Vd16b; 
	} else
	if(((ic32_8)&0b111111111110000010000000)==0b110011100100000000000000) {
   8565c:	12194078 	and	w24, w3, #0xffff80
   85660:	12136b18 	and	w24, w24, #0xffffe0ff
   85664:	7173931f 	cmp	w24, #0xce4, lsl #12
   85668:	54031420 	b.eq	8b8ec <disasm+0x790c>  // b.none
		names="sm3ss1\0";
		m=((ic32_16)&0x1f); d=((ic32_10)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
		args[0]=disasm_arg_Vt4s; args[1]=disasm_arg_Vn4s; args[2]=disasm_arg_Vm4s; args[3]=disasm_arg_Vd4s; 
	} else
	if(((ic32_8)&0b111111111110000011000000)==0b110011100100000010000000) {
   8566c:	121a4478 	and	w24, w3, #0xffffc0
   85670:	5288101a 	mov	w26, #0x4080                	// #16512
   85674:	12136b18 	and	w24, w24, #0xffffe0ff
   85678:	72a019da 	movk	w26, #0xce, lsl #16
   8567c:	6b1a031f 	cmp	w24, w26
   85680:	540310a0 	b.eq	8b894 <disasm+0x78b4>  // b.none
		names="sm3tt1a\0sm3tt1b\0sm3tt2a\0sm3tt2b\0";
		op=((ic32_10)&0x3); m=((ic32_16)&0x1f); j=((ic32_12)&0x3); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
		z=0;
		args[0]=disasm_arg_Vt4s; args[1]=disasm_arg_Vn4s; args[2]=disasm_arg_VmTs; 
	} else
	if(((ic32_8)&0b111111111110000011111000)==0b110011100110000010000000) {
   85684:	121d5078 	and	w24, w3, #0xfffff8
   85688:	528c101a 	mov	w26, #0x6080                	// #24704
   8568c:	12136b18 	and	w24, w24, #0xffffe0ff
   85690:	72a019da 	movk	w26, #0xce, lsl #16
   85694:	6b1a031f 	cmp	w24, w26
   85698:	54030d20 	b.eq	8b83c <disasm+0x785c>  // b.none
		names="sha512h\0sha512h2\0";
		op=((ic32_10)&0x1); m=((ic32_16)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
		args[0]=disasm_arg_Qt; args[1]=disasm_arg_Qn; args[2]=disasm_arg_Vm2d; 
	} else
	if(((ic32_8)&0b111111111110000011111000)==0b110011100110000010001000) {
   8569c:	528c111a 	mov	w26, #0x6088                	// #24712
   856a0:	72a019da 	movk	w26, #0xce, lsl #16
   856a4:	6b1a031f 	cmp	w24, w26
   856a8:	540309e0 	b.eq	8b7e4 <disasm+0x7804>  // b.none
		names="sha512su1\0rax1\0";
		op=((ic32_10)&0x1); m=((ic32_16)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
		args[0]=disasm_arg_Vt2d; args[1]=disasm_arg_Vn2d; args[2]=disasm_arg_Vm2d; 
	} else
	if(((ic32_8)&0b111111111110000011110000)==0b110011100110000011000000) {
   856ac:	121c4c78 	and	w24, w3, #0xfffff0
   856b0:	528c181a 	mov	w26, #0x60c0                	// #24768
   856b4:	12136b18 	and	w24, w24, #0xffffe0ff
   856b8:	72a019da 	movk	w26, #0xce, lsl #16
   856bc:	6b1a031f 	cmp	w24, w26
   856c0:	54030660 	b.eq	8b78c <disasm+0x77ac>  // b.none
		names="sm3partw1\0sm3partw2\0sm4ekey\0";
		op=((ic32_10)&0x3); m=((ic32_16)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
		args[0]=disasm_arg_Vt4s; args[1]=disasm_arg_Vn4s; args[2]=disasm_arg_Vm4s; 
	} else
	if(((ic32_8)&0b111111111111111111111100)==0b110011101100000010000000) {
   856c4:	52981018 	mov	w24, #0xc080                	// #49280
   856c8:	72a019d8 	movk	w24, #0xce, lsl #16
   856cc:	6b18033f 	cmp	w25, w24
   856d0:	54030380 	b.eq	8b740 <disasm+0x7760>  // b.none
		names="sha512su0\0";
		n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
		args[0]=disasm_arg_Vt2d; args[1]=disasm_arg_Vn2d; 
	} else
	if(((ic32_8)&0b111111111111111111111100)==0b110011101100000010000100) {
   856d4:	52981098 	mov	w24, #0xc084                	// #49284
   856d8:	72a019d8 	movk	w24, #0xce, lsl #16
   856dc:	6b18033f 	cmp	w25, w24
   856e0:	540300a0 	b.eq	8b6f4 <disasm+0x7714>  // b.none
		names="sm4e\0";
		n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
		args[0]=disasm_arg_Vt4s; args[1]=disasm_arg_Vn4s; 
	} else
	if(((ic32_16)&0b1111111111000000)==0b1101010000000000) {
   856e4:	b94083f9 	ldr	w25, [sp, #128]
   856e8:	529a8018 	mov	w24, #0xd400                	// #54272
   856ec:	6b18033f 	cmp	w25, w24
   856f0:	5402fce0 	b.eq	8b68c <disasm+0x76ac>  // b.none
		names="?\0svc\0hvc\0smc\0brk\0";
		op=((ic32_19)&0x4)|((ic32)&0x3); i=((ic32_20)&1?(-1<<16):0)|((ic32_5)&0xffff); 
		args[0]=disasm_arg_i; 
	} else
	if((ic32&0b11111111111000000000000000000011)==0b11010100010000000000000000000000) {
   856f4:	120b3019 	and	w25, w0, #0xffe00003
   856f8:	52ba8818 	mov	w24, #0xd4400000            	// #-734003200
   856fc:	6b18033f 	cmp	w25, w24
   85700:	5402fa40 	b.eq	8b648 <disasm+0x7668>  // b.none
		names="hlt\0";
	} else
	if(((ic32_16)&0b1111111111100000)==0b1101010010100000) {
   85704:	121b28ba 	and	w26, w5, #0xffe0
   85708:	529a9418 	mov	w24, #0xd4a0                	// #54432
   8570c:	6b18035f 	cmp	w26, w24
   85710:	5402f6c0 	b.eq	8b5e8 <disasm+0x7608>  // b.none
		names="?\0dcsp1\0dcps2\0dcps3\0";
		op=((ic32)&0x3); i=((ic32_20)&1?(-1<<16):0)|((ic32_5)&0xffff); 
		args[0]=disasm_arg_i_opt; 
	} else
	if((ic32&0b11111111111111111111110100011111)==0b11010101000000110010000000011111) {
   85714:	12805c18 	mov	w24, #0xfffffd1f            	// #-737
   85718:	528403f9 	mov	w25, #0x201f                	// #8223
   8571c:	0a180018 	and	w24, w0, w24
   85720:	72baa079 	movk	w25, #0xd503, lsl #16
   85724:	6b19031f 	cmp	w24, w25
   85728:	5402f380 	b.eq	8b598 <disasm+0x75b8>  // b.none
		names="nop\0yield\0wfe\0wfi\0sev\0sevl\0?\0?\0esb\0psc\0";
		op=((ic32>>6)&0x8)|((ic32_5)&0x7); 
	} else
	if((ic32&0b11111111111111111111000011111111)==0b11010101000000110011000001011111) {
   8572c:	12146c19 	and	w25, w0, #0xfffff0ff
   85730:	52860bf8 	mov	w24, #0x305f                	// #12383
   85734:	72baa078 	movk	w24, #0xd503, lsl #16
   85738:	6b18033f 	cmp	w25, w24
   8573c:	5402efe0 	b.eq	8b538 <disasm+0x7558>  // b.none
		names="clrex\0";
		i=((ic32_11)&1?(-1<<4):0)|((ic32_8)&0xf); 
		args[0]=disasm_arg_i_opt; 
	} else
	if((ic32&0b11111111111111111111000010011111)==0b11010101000000110011000010011111) {
   85740:	1281ec18 	mov	w24, #0xfffff09f            	// #-3937
   85744:	528613f9 	mov	w25, #0x309f                	// #12447
   85748:	0a180018 	and	w24, w0, w24
   8574c:	72baa079 	movk	w25, #0xd503, lsl #16
   85750:	6b19031f 	cmp	w24, w25
   85754:	5402ecc0 	b.eq	8b4ec <disasm+0x750c>  // b.none
		names="dsb\0dmb\0?\0isb\0";
		op=((ic32_5)&0x3); j=((ic32_8)&0xf); 
		args[0]=disasm_arg_sh; 
	} else
	if((ic32&0b11111111111110001111000000011111)==0b11010101000000000100000000011111) {
   85758:	529e03f8 	mov	w24, #0xf01f                	// #61471
   8575c:	528803f9 	mov	w25, #0x401f                	// #16415
   85760:	72bfff18 	movk	w24, #0xfff8, lsl #16
   85764:	0a180018 	and	w24, w0, w24
   85768:	72baa019 	movk	w25, #0xd500, lsl #16
   8576c:	6b19031f 	cmp	w24, w25
   85770:	5402e8c0 	b.eq	8b488 <disasm+0x74a8>  // b.none
		names="msr\0";
		i=((ic32_11)&1?(-1<<4):0)|((ic32_8)&0xf); p=((ic32_5)&0x7); 
		args[0]=disasm_arg_pstate; args[1]=disasm_arg_i; 
	} else
	if((ic32&0b11111111111111111111111110000000)==0b11010101000010000111011000000000) {
   85774:	12196018 	and	w24, w0, #0xffffff80
   85778:	528ec019 	mov	w25, #0x7600                	// #30208
   8577c:	72baa119 	movk	w25, #0xd508, lsl #16
   85780:	6b19031f 	cmp	w24, w25
   85784:	5402e5a0 	b.eq	8b438 <disasm+0x7458>  // b.none
		names="dc\0";
		d=((ic32_5)&0x3); t=((ic32)&0x1f); 
		args[0]=disasm_arg_dc0; args[1]=disasm_arg_Xt; 
	} else
	if((ic32&0b11111111111111111111111110000000)==0b11010101000010000111100000000000) {
   85788:	528f0019 	mov	w25, #0x7800                	// #30720
   8578c:	72baa119 	movk	w25, #0xd508, lsl #16
   85790:	6b19031f 	cmp	w24, w25
   85794:	5402e2a0 	b.eq	8b3e8 <disasm+0x7408>  // b.none
		names="at\0";
		a=((ic32_5)&0x3); t=((ic32)&0x1f); 
		args[0]=disasm_arg_a0; args[1]=disasm_arg_Xt; 
	} else
	if(((ic32_8)&0b111111111111111111111111)==0b110101010000100001111001) {
   85798:	52810f38 	mov	w24, #0x879                 	// #2169
   8579c:	72a01ab8 	movk	w24, #0xd5, lsl #16
   857a0:	6b18007f 	cmp	w3, w24
   857a4:	5402dfa0 	b.eq	8b398 <disasm+0x73b8>  // b.none
		names="at\0";
		a=((ic32_5)&0x7); t=((ic32)&0x1f); 
		args[0]=disasm_arg_a1; args[1]=disasm_arg_Xt; 
	} else
	if((ic32&0b11111111111111111111101111100000)==0b11010101000010000111101001000000) {
   857a8:	128083f8 	mov	w24, #0xfffffbe0            	// #-1056
   857ac:	528f4819 	mov	w25, #0x7a40                	// #31296
   857b0:	0a180018 	and	w24, w0, w24
   857b4:	72baa119 	movk	w25, #0xd508, lsl #16
   857b8:	6b19031f 	cmp	w24, w25
   857bc:	5402dc60 	b.eq	8b348 <disasm+0x7368>  // b.none
		names="dc\0";
		d=((ic32_10)&0x1); t=((ic32)&0x1f); 
		args[0]=disasm_arg_dc1; args[1]=disasm_arg_Xt; 
	} else
	if((ic32&0b11111111111111111111111111100000)==0b11010101000010110111010000100000) {
   857c0:	121b6819 	and	w25, w0, #0xffffffe0
   857c4:	528e8418 	mov	w24, #0x7420                	// #29728
   857c8:	72baa178 	movk	w24, #0xd50b, lsl #16
   857cc:	6b18033f 	cmp	w25, w24
   857d0:	5402d960 	b.eq	8b2fc <disasm+0x731c>  // b.none
		names="dc\0";
		t=((ic32)&0x1f); 
		args[0]=disasm_arg_ZVA; args[1]=disasm_arg_Xt; 
	} else
	if((ic32&0b11111111111111111111101011100000)==0b11010101000010110111101000100000) {
   857d4:	1280a3f8 	mov	w24, #0xfffffae0            	// #-1312
   857d8:	528f4419 	mov	w25, #0x7a20                	// #31264
   857dc:	0a180018 	and	w24, w0, w24
   857e0:	72baa179 	movk	w25, #0xd50b, lsl #16
   857e4:	6b19031f 	cmp	w24, w25
   857e8:	5402d5e0 	b.eq	8b2a4 <disasm+0x72c4>  // b.none
		names="dc\0";
		d=((ic32_9)&0x2)|((ic32_8)&0x1); t=((ic32)&0x1f); 
		args[0]=disasm_arg_dc2; args[1]=disasm_arg_Xt; 
	} else
	if((ic32&0b11111111111111001111101111000000)==0b11010101000010000111000100000000) {
   857ec:	529f7818 	mov	w24, #0xfbc0                	// #64448
   857f0:	528e2019 	mov	w25, #0x7100                	// #28928
   857f4:	72bfff98 	movk	w24, #0xfffc, lsl #16
   857f8:	0a180018 	and	w24, w0, w24
   857fc:	72baa119 	movk	w25, #0xd508, lsl #16
   85800:	6b19031f 	cmp	w24, w25
   85804:	5402d240 	b.eq	8b24c <disasm+0x726c>  // b.none
		names="ic\0";
		c=((ic32_15)&0x2)|((ic32_10)&0x1); t=((ic32)&0x1f); 
		args[0]=disasm_arg_ic; args[1]=disasm_arg_Xt_opt; 
	} else
	if((ic32&0b11111111111111111111101101100000)==0b11010101000011001000000000100000) {
   85808:	128093f8 	mov	w24, #0xfffffb60            	// #-1184
   8580c:	52900419 	mov	w25, #0x8020                	// #32800
   85810:	0a180018 	and	w24, w0, w24
   85814:	72baa199 	movk	w25, #0xd50c, lsl #16
   85818:	6b19031f 	cmp	w24, w25
   8581c:	5402cee0 	b.eq	8b1f8 <disasm+0x7218>  // b.none
		names="tlbi\0";
		n=((ic32_9)&0x2)|((ic32>>7)&0x1); t=((ic32)&0x1f); 
		args[0]=disasm_arg_tl1; args[1]=disasm_arg_Xt_opt; 
	} else
	if((ic32&0b11111111111111111111101101000000)==0b11010101000011101000001100000000) {
   85820:	128097ef 	mov	w15, #0xfffffb40            	// #-1216
   85824:	52906018 	mov	w24, #0x8300                	// #33536
   85828:	0a0f000f 	and	w15, w0, w15
   8582c:	72baa1d8 	movk	w24, #0xd50e, lsl #16
   85830:	6b1801ff 	cmp	w15, w24
   85834:	5402cb20 	b.eq	8b198 <disasm+0x71b8>  // b.none
		names="tlbi\0";
		n=((ic32_8)&0x4)|((ic32>>6)&0x2)|((ic32_5)&0x1); t=((ic32)&0x1f); 
		args[0]=disasm_arg_tl2; args[1]=disasm_arg_Xt_opt; 
	} else
	if(((ic32_8)&0b111111111111110111111111)==0b110101010000110001111000) {
   85838:	12005c6f 	and	w15, w3, #0xffffff
   8583c:	52818f18 	mov	w24, #0xc78                 	// #3192
   85840:	121679ef 	and	w15, w15, #0xfffffdff
   85844:	72a01ab8 	movk	w24, #0xd5, lsl #16
   85848:	6b1801ff 	cmp	w15, w24
   8584c:	5402c7a0 	b.eq	8b140 <disasm+0x7160>  // b.none
		names="at\0";
		a=((ic32_14)&0x8)|((ic32_5)&0x7); t=((ic32)&0x1f); 
		args[0]=disasm_arg_a2; args[1]=disasm_arg_Xt; 
	} else
	if(((ic32_8)&0b111111111111101111111011)==0b110101010000100010000011) {
   85850:	529f7f6f 	mov	w15, #0xfbfb                	// #64507
   85854:	52811078 	mov	w24, #0x883                 	// #2179
   85858:	72a01fef 	movk	w15, #0xff, lsl #16
   8585c:	0a0f006f 	and	w15, w3, w15
   85860:	72a01ab8 	movk	w24, #0xd5, lsl #16
   85864:	6b1801ff 	cmp	w15, w24
   85868:	5402c3c0 	b.eq	8b0e0 <disasm+0x7100>  // b.none
		names="tlbi\0";
		n=((ic32_14)&0x10)|((ic32>>7)&0x8)|((ic32_5)&0x7); t=((ic32)&0x1f); 
		args[0]=disasm_arg_tl0; args[1]=disasm_arg_Xt_opt; 
	} else
	if(((ic32_16)&0b1111111111100000)==0b1101010100000000) {
   8586c:	529aa00f 	mov	w15, #0xd500                	// #54528
   85870:	6b0f035f 	cmp	w26, w15
   85874:	5402c080 	b.eq	8b084 <disasm+0x70a4>  // b.none
		names="msr\0";
		p=((ic32_19)&0x3); k=((ic32_16)&0x7); n=((ic32_12)&0xf); m=((ic32_8)&0xf); j=((ic32_5)&0x7); t=((ic32)&0x1f); 
		args[0]=disasm_arg_sysreg; args[1]=disasm_arg_Xt; 
	} else
	if(((ic32_16)&0b1111111111111000)==0b1101010100101000) {
   85878:	121d30b1 	and	w17, w5, #0xfff8
   8587c:	529aa50f 	mov	w15, #0xd528                	// #54568
   85880:	6b0f023f 	cmp	w17, w15
   85884:	5402bc60 	b.eq	8b010 <disasm+0x7030>  // b.none
		names="sysl\0";
		i=((ic32_18)&1?(-1<<3):0)|((ic32_16)&0x7); n=((ic32_12)&0xf); m=((ic32_8)&0xf); j=((ic32_5)&0x7); t=((ic32)&0x1f); 
		args[0]=disasm_arg_Xt; args[1]=disasm_arg_i; args[2]=disasm_arg_Cn; args[3]=disasm_arg_Cm; args[4]=disasm_arg_j; 
	} else
	if(((ic32_16)&0b1111111111100000)==0b1101010100100000) {
   85888:	529aa40f 	mov	w15, #0xd520                	// #54560
   8588c:	6b0f035f 	cmp	w26, w15
   85890:	5402b920 	b.eq	8afb4 <disasm+0x6fd4>  // b.none
		names="mrs\0";
		p=((ic32_19)&0x3); k=((ic32_16)&0x7); n=((ic32_12)&0xf); m=((ic32_8)&0xf); j=((ic32_5)&0x7); t=((ic32)&0x1f); 
		args[0]=disasm_arg_Xt; args[1]=disasm_arg_sysreg; 
	} else
	if((ic32&0b11111111100111111111110000011111)==0b11010110000111110000000000000000) {
   85894:	529f83ef 	mov	w15, #0xfc1f                	// #64543
   85898:	52bac3f1 	mov	w17, #0xd61f0000            	// #-702611456
   8589c:	72bff3ef 	movk	w15, #0xff9f, lsl #16
   858a0:	0a0f000f 	and	w15, w0, w15
   858a4:	6b1101ff 	cmp	w15, w17
   858a8:	5402b600 	b.eq	8af68 <disasm+0x6f88>  // b.none
		names="br\0blr\0ret\0";
		op=((ic32_21)&0x3); n=((ic32_5)&0x1f); 
		args[0]=disasm_arg_Xn; 
	} else
	if((ic32&0b11111111110111111111111111111111)==0b11010110100111110000001111100000) {
   858ac:	120a7811 	and	w17, w0, #0xffdfffff
   858b0:	52807c0f 	mov	w15, #0x3e0                 	// #992
   858b4:	72bad3ef 	movk	w15, #0xd69f, lsl #16
   858b8:	6b0f023f 	cmp	w17, w15
   858bc:	5402b340 	b.eq	8af24 <disasm+0x6f44>  // b.none
		names="eret\0drps\0";
		op=((ic32_21)&0x1); 
	} else
	if(((ic32_24)&0b11111111)==0b11011000) {
   858c0:	710362df 	cmp	w22, #0xd8
   858c4:	5402b000 	b.eq	8aec4 <disasm+0x6ee4>  // b.none
		names="prfm\0";
		i=((ic32_23)&1?(-1<<19):0)|((ic32_5)&0x7ffff); t=((ic32)&0x1f); 
		args[0]=disasm_arg_prf_op; args[1]=disasm_arg_labeli4; 
	} else
	if(((ic32_8)&0b111111111110000000001100)==0b111110001000000000000000) {
   858c8:	717e225f 	cmp	w18, #0xf88, lsl #12
   858cc:	5402ac60 	b.eq	8ae58 <disasm+0x6e78>  // b.none
		names="prfum\0";
		i=((ic32_20)&1?(-1<<9):0)|((ic32_12)&0x1ff); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
		args[0]=disasm_arg_prf_op; args[1]=disasm_arg_offs; args[2]=disasm_arg_XnS; args[3]=disasm_arg_i_opt; args[4]=disasm_arg_offe; 
	} else
	if(((ic32_8)&0b111111111110000000001100)==0b111110001010000000001000) {
   858d0:	5294010f 	mov	w15, #0xa008                	// #40968
   858d4:	72a01f0f 	movk	w15, #0xf8, lsl #16
   858d8:	6b0f025f 	cmp	w18, w15
   858dc:	5402a8c0 	b.eq	8adf4 <disasm+0x6e14>  // b.none
		names="prfm\0";
		m=((ic32_16)&0x1f); o=((ic32_13)&0x7); j=((ic32_12)&0x1); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
		args[0]=disasm_arg_prf_op; args[1]=disasm_arg_offs; args[2]=disasm_arg_XnS; args[3]=disasm_arg_Rom; args[4]=disasm_arg_amountj3; args[5]=disasm_arg_offe; 
	} else
	if(((ic32_16)&0b1111111111000000)==0b1111100110000000) {
   858e0:	b94083f1 	ldr	w17, [sp, #128]
   858e4:	529f300f 	mov	w15, #0xf980                	// #63872
   858e8:	6b0f023f 	cmp	w17, w15
   858ec:	5402a580 	b.eq	8ad9c <disasm+0x6dbc>  // b.none
		names="prfm\0";
		j=((ic32_10)&0xfff); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
		args[0]=disasm_arg_prf_op; args[1]=disasm_arg_offs; args[2]=disasm_arg_XnS; args[3]=disasm_arg_j_opt; args[4]=disasm_arg_offe; 
	} else
	if(((ic32_16)&0b1011111111100000)==0b1000100000100000) {
   858f0:	5297fc0f 	mov	w15, #0xbfe0                	// #49120
   858f4:	0a0f00af 	and	w15, w5, w15
   858f8:	52910411 	mov	w17, #0x8820                	// #34848
   858fc:	6b1101ff 	cmp	w15, w17
   85900:	5402a1c0 	b.eq	8ad38 <disasm+0x6d58>  // b.none
		names="stxp\0stlxp\0";
		op=((ic32_15)&0x1); s=((ic32_30)&0x1); d=((ic32_16)&0x1f); m=((ic32_10)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
		args[0]=disasm_arg_Wd; args[1]=disasm_arg_Rt; args[2]=disasm_arg_Rm; args[3]=disasm_arg_offs; args[4]=disasm_arg_XnS; args[5]=disasm_arg_offe; 
	} else
	if(((ic32_16)&0b1011111111111111)==0b1000100001111111) {
   85904:	5297ffef 	mov	w15, #0xbfff                	// #49151
   85908:	0a0f00af 	and	w15, w5, w15
   8590c:	52910ff1 	mov	w17, #0x887f                	// #34943
   85910:	6b1101ff 	cmp	w15, w17
   85914:	54029e40 	b.eq	8acdc <disasm+0x6cfc>  // b.none
		names="ldxp\0ldaxp\0";
		op=((ic32_15)&0x1); s=((ic32_30)&0x1); m=((ic32_10)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
		args[0]=disasm_arg_Rt; args[1]=disasm_arg_Rm; args[2]=disasm_arg_offs; args[3]=disasm_arg_XnS; args[4]=disasm_arg_offe; 
	} else
	if(((ic32_8)&0b101111111010000001111100)==0b100010000010000001111100) {
   85918:	b9407ff1 	ldr	w17, [sp, #124]
   8591c:	52840f8f 	mov	w15, #0x207c                	// #8316
   85920:	72a0110f 	movk	w15, #0x88, lsl #16
   85924:	6b0f023f 	cmp	w17, w15
   85928:	54029a80 	b.eq	8ac78 <disasm+0x6c98>  // b.none
		names="cas\0casl\0casa\0casal\0";
		op=((ic32_21)&0x2)|((ic32_15)&0x1); s=((ic32_30)&0x1); d=((ic32_16)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
		args[0]=disasm_arg_Rd; args[1]=disasm_arg_Rt; args[2]=disasm_arg_offs; args[3]=disasm_arg_XnS; args[4]=disasm_arg_offe; 
	} else
	if(((ic32_8)&0b101111110011111101111100)==0b100010000001111101111100) {
   8592c:	b9408bf1 	ldr	w17, [sp, #136]
   85930:	5283ef8f 	mov	w15, #0x1f7c                	// #8060
   85934:	72a0110f 	movk	w15, #0x88, lsl #16
   85938:	6b0f023f 	cmp	w17, w15
   8593c:	54029720 	b.eq	8ac20 <disasm+0x6c40>  // b.none
		names="?\0?\0ldxr\0ldaxr\0stllr\0stlr\0ldlar\0ldar\0";
		op=((ic32_21)&0x6)|((ic32_15)&0x1); s=((ic32_30)&0x1); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
		args[0]=disasm_arg_Rt; args[1]=disasm_arg_offs; args[2]=disasm_arg_XnS; args[3]=disasm_arg_offe; 
	} else
	if(((ic32_8)&0b101111111010000000001100)==0b101110000000000000000100) {
   85940:	5280008f 	mov	w15, #0x4                   	// #4
   85944:	72a0170f 	movk	w15, #0xb8, lsl #16
   85948:	6b0f013f 	cmp	w9, w15
   8594c:	54029340 	b.eq	8abb4 <disasm+0x6bd4>  // b.none
		names="str\0ldr\0";
		op=((ic32_22)&0x1); s=((ic32_30)&0x1); i=((ic32_20)&1?(-1<<9):0)|((ic32_12)&0x1ff); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
		args[0]=disasm_arg_Rt; args[1]=disasm_arg_offs; args[2]=disasm_arg_XnS; args[3]=disasm_arg_offe; args[4]=disasm_arg_i_opt; 
	} else
	if(((ic32_8)&0b101111111010000000000100)==0b101110000000000000000000) {
   85950:	716e01df 	cmp	w14, #0xb80, lsl #12
   85954:	54028f60 	b.eq	8ab40 <disasm+0x6b60>  // b.none
		names="stur\0sttr\0ldur\0ldtr\0";
		op=((ic32_21)&0x2)|((ic32_11)&0x1); s=((ic32_30)&0x1); i=((ic32_20)&1?(-1<<9):0)|((ic32_12)&0x1ff); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
		args[0]=disasm_arg_Rt; args[1]=disasm_arg_offs; args[2]=disasm_arg_XnS; args[3]=disasm_arg_i_opt; args[4]=disasm_arg_offe; 
	} else
	if(((ic32_8)&0b101111111010000000000100)==0b101110000000000000000100) {
   85958:	6b0f01df 	cmp	w14, w15
   8595c:	54028ba0 	b.eq	8aad0 <disasm+0x6af0>  // b.none
		names="str\0ldr\0";
		op=((ic32_22)&0x1); s=((ic32_30)&0x1); i=((ic32_20)&1?(-1<<9):0)|((ic32_12)&0x1ff); p=((ic32_11)&0x1); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
		args[0]=disasm_arg_Rt; args[1]=disasm_arg_offs; args[2]=disasm_arg_XnS; args[3]=disasm_arg_i_opt; args[4]=disasm_arg_offe; 
	} else
	if(((ic32_8)&0b101111111010000000001100)==0b101110000010000000001000) {
   85960:	5284010e 	mov	w14, #0x2008                	// #8200
   85964:	72a0170e 	movk	w14, #0xb8, lsl #16
   85968:	6b0e013f 	cmp	w9, w14
   8596c:	54028800 	b.eq	8aa6c <disasm+0x6a8c>  // b.none
		names="str\0ldr\0";
		op=((ic32_22)&0x1); s=((ic32_30)&0x1); m=((ic32_16)&0x1f); o=((ic32_13)&0x7); j=((ic32_12)&0x1); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
		args[0]=disasm_arg_Rt; args[1]=disasm_arg_offs; args[2]=disasm_arg_XnS; args[3]=disasm_arg_Rom; args[4]=disasm_arg_amountjs; args[5]=disasm_arg_offe; 
	} else
	if(((ic32_8)&0b101111110010000000001100)==0b101110000010000000000000) {
   85970:	52840189 	mov	w9, #0x200c                	// #8204
   85974:	72a017e9 	movk	w9, #0xbf, lsl #16
   85978:	0a090069 	and	w9, w3, w9
   8597c:	716e093f 	cmp	w9, #0xb82, lsl #12
   85980:	54028420 	b.eq	8aa04 <disasm+0x6a24>  // b.none
		names="ldadd\0ldclr\0ldeor\0ldset\0ldsmax\0ldsmin\0ldumax\0ldumin\0swp\0?\0?\0?\0?\0?\0?\0?\0ldaddl\0ldclrl\0ldeorl\0ldsetl\0ldsmaxl\0ldsminl\0ldumaxl\0lduminl\0swpl\0?\0?\0?\0?\0?\0?\0?\0ldadda\0ldclra\0ldeora\0ldseta\0ldsmaxa\0ldsmina\0ldumaxa\0ldumina\0swpa\0?\0?\0?\0?\0?\0?\0?\0ldaddal\0ldclral\0ldeoral\0ldsetal\0ldsmaxal\0ldsminal\0ldumaxal\0lduminal\0swpal\0";
		op=((ic32_18)&0x30)|((ic32_12)&0xf); s=((ic32_30)&0x1); d=((ic32_16)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
		args[0]=disasm_arg_Rd; args[1]=disasm_arg_Rt; args[2]=disasm_arg_offs; args[3]=disasm_arg_XnS; args[4]=disasm_arg_offe; 
	} else
	if(((ic32_16)&0b1011111110000000)==0b1011100100000000) {
   85984:	52972009 	mov	w9, #0xb900                	// #47360
   85988:	6b0903df 	cmp	w30, w9
   8598c:	54028100 	b.eq	8a9ac <disasm+0x69cc>  // b.none
		names="str\0ldr\0";
		op=((ic32_22)&0x1); s=((ic32_30)&0x1); j=((ic32_10)&0xfff); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
		args[0]=disasm_arg_Rt; args[1]=disasm_arg_offs; args[2]=disasm_arg_XnS; args[3]=disasm_arg_j_opt; args[4]=disasm_arg_offe; 
	} else
	if(((ic32_16)&0b0111111110100000)==0b0001001110000000) {
   85990:	528ff409 	mov	w9, #0x7fa0                	// #32672
   85994:	0a0900a9 	and	w9, w5, w9
   85998:	5282700e 	mov	w14, #0x1380                	// #4992
   8599c:	6b0e013f 	cmp	w9, w14
	ic32_20=ic32>>20; ic32_15=ic32>>15; ic32_16=ic32>>16; ic32_5=ic32>>5; ic32_8=ic32>>8; ic32_22=ic32>>22; ic32_13=ic32>>13; ic32_14=ic32>>14; ic32_9=ic32>>9; ic32_10=ic32>>10; ic32_21=ic32>>21; ic32_4=ic32>>4; ic32_12=ic32>>12; ic32_24=ic32>>24; ic32_11=ic32>>11; ic32_18=ic32>>18; ic32_27=ic32>>27; ic32_28=ic32>>28; ic32_29=ic32>>29; ic32_25=ic32>>25; ic32_26=ic32>>26; ic32_23=ic32>>23; ic32_30=ic32>>30; ic32_19=ic32>>19; ic32_31=ic32>>31;
   859a0:	531f7c09 	lsr	w9, w0, #31
	if(((ic32_16)&0b0111111110100000)==0b0001001110000000) {
   859a4:	54027d00 	b.eq	8a944 <disasm+0x6964>  // b.none
		names="extr\0";
		s=((ic32_31)&0x1); m=((ic32_16)&0x1f); i=((ic32_15)&1?(-1<<6):0)|((ic32_10)&0x3f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
		args[0]=disasm_arg_Rt; args[1]=disasm_arg_Rn; args[2]=disasm_arg_Rm; args[3]=disasm_arg_i; 
	} else
	if(((ic32_24)&0b01111100)==0b00010100) {
   859a8:	121e12ce 	and	w14, w22, #0x7c
   859ac:	710051df 	cmp	w14, #0x14
   859b0:	540279a0 	b.eq	8a8e4 <disasm+0x6904>  // b.none
		names="b\0bl\0";
		op=((ic32_31)&0x1); i=((ic32_25)&1?(-1<<26):0)|((ic32)&0x3ffffff); 
		args[0]=disasm_arg_labeli4; 
	} else
	if(((ic32_8)&0b011111111110000011111100)==0b000110100000000000000000) {
   859b4:	121e506e 	and	w14, w3, #0x7ffffc
   859b8:	121369ce 	and	w14, w14, #0xffffe0ff
   859bc:	714681df 	cmp	w14, #0x1a0, lsl #12
   859c0:	54027660 	b.eq	8a88c <disasm+0x68ac>  // b.none
		names="adc\0";
		s=((ic32_31)&0x1); m=((ic32_16)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
		args[0]=disasm_arg_Rt; args[1]=disasm_arg_Rn; args[2]=disasm_arg_Rm; 
	} else
	if(((ic32_8)&0b011111111110000010000000)==0b000110101100000000000000) {
   859c4:	12193c6e 	and	w14, w3, #0x7fff80
   859c8:	121369ce 	and	w14, w14, #0xffffe0ff
   859cc:	7146b1df 	cmp	w14, #0x1ac, lsl #12
   859d0:	54027320 	b.eq	8a834 <disasm+0x6854>  // b.none
		names="?\0?\0udiv\0sdiv\0?\0?\0?\0?\0lslv\0lsrv\0asrv\0rorv\0?\0?\0?\0?\0crc32b\0crc32h\0crc32w\0crc32x\0crc32cb\0crc32ch\0crc32cw\0crc32cx\0";
		op=((ic32_10)&0x1f); s=((ic32_31)&0x1); m=((ic32_16)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
		args[0]=disasm_arg_Rt; args[1]=disasm_arg_Rn; args[2]=disasm_arg_Rm; 
	} else
	if(((ic32_8)&0b011111111110000001111100)==0b000110110000000001111100) {
   859d4:	121e506e 	and	w14, w3, #0x7ffffc
   859d8:	52800f8f 	mov	w15, #0x7c                  	// #124
   859dc:	121365ce 	and	w14, w14, #0xffffe07f
   859e0:	72a0036f 	movk	w15, #0x1b, lsl #16
   859e4:	6b0f01df 	cmp	w14, w15
   859e8:	54026fa0 	b.eq	8a7dc <disasm+0x67fc>  // b.none
		names="mul\0mneg\0";
		op=((ic32_15)&0x1); s=((ic32_31)&0x1); m=((ic32_16)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
		args[0]=disasm_arg_Rt; args[1]=disasm_arg_Rn; args[2]=disasm_arg_Rm; 
	} else
	if(((ic32_16)&0b0111111111100000)==0b0001101100000000) {
   859ec:	121b24af 	and	w15, w5, #0x7fe0
   859f0:	5283600e 	mov	w14, #0x1b00                	// #6912
   859f4:	6b0e01ff 	cmp	w15, w14
   859f8:	54026c60 	b.eq	8a784 <disasm+0x67a4>  // b.none
		names="madd\0msub\0";
		op=((ic32_15)&0x1); s=((ic32_31)&0x1); m=((ic32_16)&0x1f); d=((ic32_10)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
		args[0]=disasm_arg_Rt; args[1]=disasm_arg_Rn; args[2]=disasm_arg_Rm; args[3]=disasm_arg_Rd; 
	} else
	if(((ic32_8)&0b011111111111111111111100)==0b000111101010111000000000) {
   859fc:	121e506e 	and	w14, w3, #0x7ffffc
   85a00:	5295c00f 	mov	w15, #0xae00                	// #44544
   85a04:	72a003cf 	movk	w15, #0x1e, lsl #16
   85a08:	6b0f01df 	cmp	w14, w15
   85a0c:	54026960 	b.eq	8a738 <disasm+0x6758>  // b.none
		names="fmov\0";
		s=((ic32_31)&0x1); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
		args[0]=disasm_arg_Rt; args[1]=disasm_arg_Vn1d; 
	} else
	if(((ic32_8)&0b011111111111111111111100)==0b000111101010111100000000) {
   85a10:	5295e00f 	mov	w15, #0xaf00                	// #44800
   85a14:	72a003cf 	movk	w15, #0x1e, lsl #16
   85a18:	6b0f01df 	cmp	w14, w15
   85a1c:	54026680 	b.eq	8a6ec <disasm+0x670c>  // b.none
		names="fmov\0";
		s=((ic32_31)&0x1); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
		args[0]=disasm_arg_Vt1d; args[1]=disasm_arg_Rn; 
	} else
	if(((ic32_16)&0b0111111100111110)==0b0001111000000010) {
   85a20:	528fe7ce 	mov	w14, #0x7f3e                	// #32574
   85a24:	0a0e00ae 	and	w14, w5, w14
   85a28:	5283c04f 	mov	w15, #0x1e02                	// #7682
   85a2c:	6b0f01df 	cmp	w14, w15
   85a30:	54026340 	b.eq	8a698 <disasm+0x66b8>  // b.none
		names="scvtf\0ucvtf\0";
		op=((ic32_16)&0x1); s=((ic32_31)&0x1); z=((ic32_22)&0x3); j=((ic32_10)&0x3f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
		args[0]=disasm_arg_FPz5t; args[1]=disasm_arg_Rn; args[2]=disasm_arg_fbits; 
	} else
	if(((ic32_16)&0b0111111100111110)==0b0001111000011000) {
   85a34:	5283c30f 	mov	w15, #0x1e18                	// #7704
   85a38:	6b0f01df 	cmp	w14, w15
   85a3c:	54026040 	b.eq	8a644 <disasm+0x6664>  // b.none
		names="fcvtzs\0fcvtzu\0";
		op=((ic32_16)&0x1); s=((ic32_31)&0x1); z=((ic32_22)&0x3); j=((ic32_10)&0x3f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
		args[0]=disasm_arg_Rt; args[1]=disasm_arg_FPz5n; args[2]=disasm_arg_fbits; 
	} else
	if(((ic32_8)&0b011111110011101011111100)==0b000111100010001000000000) {
   85a40:	52875f8e 	mov	w14, #0x3afc                	// #15100
   85a44:	5284400f 	mov	w15, #0x2200                	// #8704
   85a48:	72a00fee 	movk	w14, #0x7f, lsl #16
   85a4c:	0a0e006e 	and	w14, w3, w14
   85a50:	72a003cf 	movk	w15, #0x1e, lsl #16
   85a54:	6b0f01df 	cmp	w14, w15
   85a58:	54025ca0 	b.eq	8a5ec <disasm+0x660c>  // b.none
		names="scvtf\0ucvtf\0fmov\0fmov\0";
		op=((ic32>>17)&0x2)|((ic32_16)&0x1); s=((ic32_31)&0x1); z=((ic32_22)&0x3); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
		args[0]=disasm_arg_FPz5t; args[1]=disasm_arg_Rn; 
	} else
	if(((ic32_8)&0b011111110011000011111100)==0b000111100010000000000000) {
   85a5c:	52861f8e 	mov	w14, #0x30fc                	// #12540
   85a60:	72a00fee 	movk	w14, #0x7f, lsl #16
   85a64:	0a0e006e 	and	w14, w3, w14
   85a68:	714789df 	cmp	w14, #0x1e2, lsl #12
   85a6c:	540259a0 	b.eq	8a5a0 <disasm+0x65c0>  // b.none
		names="fcvtns\0fcvtnu\0scvtf\0ucvtf\0fcvtas\0fcvtau\0fmov\0fmov\0fcvtns\0fcvtnu\0";
		op=((ic32_16)&0xf); s=((ic32_31)&0x1); z=((ic32_22)&0x3); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
		args[0]=disasm_arg_Rt; args[1]=disasm_arg_FPz5n; 
	} else
	if(((ic32_8)&0b011111110011111011111100)==0b000111100011000000000000) {
   85a70:	5287df8e 	mov	w14, #0x3efc                	// #16124
   85a74:	72a00fee 	movk	w14, #0x7f, lsl #16
   85a78:	0a0e006e 	and	w14, w3, w14
   85a7c:	71478ddf 	cmp	w14, #0x1e3, lsl #12
   85a80:	540256a0 	b.eq	8a554 <disasm+0x6574>  // b.none
		names="fcvtms\0fcvtmu\0";
		op=((ic32_16)&0x1); s=((ic32_31)&0x1); z=((ic32_22)&0x3); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
		args[0]=disasm_arg_Rt; args[1]=disasm_arg_FPz5n; 
	} else
	if(((ic32_16)&0b0111111110000000)==0b0010100010000000) {
   85a84:	12191caf 	and	w15, w5, #0x7f80
   85a88:	5285100e 	mov	w14, #0x2880                	// #10368
   85a8c:	6b0e01ff 	cmp	w15, w14
   85a90:	540252a0 	b.eq	8a4e4 <disasm+0x6504>  // b.none
		names="stp\0ldp\0";
		op=((ic32_22)&0x1); s=((ic32_31)&0x1); i=((ic32_21)&1?(-1<<7):0)|((ic32_15)&0x7f); m=((ic32_10)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
		args[0]=disasm_arg_Rt; args[1]=disasm_arg_Rm; args[2]=disasm_arg_offs; args[3]=disasm_arg_XnS; args[4]=disasm_arg_offe; args[5]=disasm_arg_is4_opt; 
	} else
	if(((ic32_24)&0b01111110)==0b00101000) {
   85a94:	121f16ce 	and	w14, w22, #0x7e
   85a98:	7100a1df 	cmp	w14, #0x28
   85a9c:	54024e40 	b.eq	8a464 <disasm+0x6484>  // b.none
		names="stnp\0ldnp\0stp\0ldp\0";
		op=((ic32_23)&0x2)|((ic32_22)&0x1); s=((ic32_31)&0x1); p=((ic32_23)&0x1); i=((ic32_21)&1?(-1<<7):0)|((ic32_15)&0x7f); m=((ic32_10)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
		args[0]=disasm_arg_Rt; args[1]=disasm_arg_Rm; args[2]=disasm_arg_offs; args[3]=disasm_arg_XnS; args[4]=disasm_arg_is4_opt; args[5]=disasm_arg_offe; 
	} else
	if(((ic32_24)&0b01111110)==0b00110100) {
   85aa0:	7100d1df 	cmp	w14, #0x34
   85aa4:	5401c300 	b.eq	89304 <disasm+0x5324>  // b.none
		names="cbz\0cbnz\0";
		op=((ic32_24)&0x1); s=((ic32_31)&0x1); i=((ic32_23)&1?(-1<<19):0)|((ic32_5)&0x7ffff); t=((ic32)&0x1f); 
		args[0]=disasm_arg_Rt; args[1]=disasm_arg_labeli4; 
	} else
	if(((ic32_24)&0b01111110)==0b00110110) {
   85aa8:	7100d9df 	cmp	w14, #0x36
   85aac:	5401bee0 	b.eq	89288 <disasm+0x52a8>  // b.none
		names="tbz\0tbnz\0";
		op=((ic32_24)&0x1); b=((ic32_26)&0x20)|((ic32_19)&0x1f); i=((ic32_18)&1?(-1<<14):0)|((ic32_5)&0x3fff); t=((ic32)&0x1f); 
		args[0]=disasm_arg_Xt; args[1]=disasm_arg_b; args[2]=disasm_arg_labeli4; 
	} else
	if(((ic32_8)&0b011111111110000000000100)==0b001110001000000000000000) {
   85ab0:	121e506e 	and	w14, w3, #0x7ffffc
   85ab4:	121355ce 	and	w14, w14, #0xffffe007
   85ab8:	714e21df 	cmp	w14, #0x388, lsl #12
   85abc:	5401bac0 	b.eq	89214 <disasm+0x5234>  // b.none
		names="?\0ldtrsb\0ldursw\0ldtrsw\0";
		op=((ic32_30)&0x2)|((ic32_11)&0x1); i=((ic32_20)&1?(-1<<9):0)|((ic32_12)&0x1ff); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
		args[0]=disasm_arg_Xt; args[1]=disasm_arg_offs; args[2]=disasm_arg_XnS; args[3]=disasm_arg_i_opt; args[4]=disasm_arg_offe; 
	} else
	if((ic32&0b01111111111000001111111111100000)==0b01011010000000000000001111100000) {
   85ac0:	121b640e 	and	w14, w0, #0x7fffffe0
   85ac4:	52807c0f 	mov	w15, #0x3e0                 	// #992
   85ac8:	120b69ce 	and	w14, w14, #0xffe0ffff
   85acc:	72ab400f 	movk	w15, #0x5a00, lsl #16
   85ad0:	6b0f01df 	cmp	w14, w15
   85ad4:	5401b780 	b.eq	891c4 <disasm+0x51e4>  // b.none
		names="ngc\0";
		s=((ic32_31)&0x1); m=((ic32_16)&0x1f); t=((ic32)&0x1f); 
		args[0]=disasm_arg_Rt; args[1]=disasm_arg_Rm; 
	} else
	if(((ic32_8)&0b011111111111111111111000)==0b010110101100000000001000) {
   85ad8:	121d4c6f 	and	w15, w3, #0x7ffff8
   85adc:	5298010e 	mov	w14, #0xc008                	// #49160
   85ae0:	72a00b4e 	movk	w14, #0x5a, lsl #16
   85ae4:	6b0e01ff 	cmp	w15, w14
   85ae8:	5401b480 	b.eq	89178 <disasm+0x5198>  // b.none
		names="rev\0";
		s=((ic32_31)&0x1); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
		args[0]=disasm_arg_Rt; args[1]=disasm_arg_Rn; 
	} else
	if(((ic32_8)&0b011111111111111111101000)==0b010110101100000000000000) {
   85aec:	121d4c6e 	and	w14, w3, #0x7ffff8
   85af0:	121b79ce 	and	w14, w14, #0xffffffef
   85af4:	7156b1df 	cmp	w14, #0x5ac, lsl #12
   85af8:	5401b160 	b.eq	89124 <disasm+0x5144>  // b.none
		names="rbit\0rev16\0clz\0cls\0";
		op=((ic32_11)&0x2)|((ic32_10)&0x1); s=((ic32_31)&0x1); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
		args[0]=disasm_arg_Rt; args[1]=disasm_arg_Rn; 
	} else
	if(((ic32_8)&0b001111111110000000001000)==0b000110101000000000000000) {
   85afc:	121d486e 	and	w14, w3, #0x3ffff8
   85b00:	121359ce 	and	w14, w14, #0xffffe00f
   85b04:	7146a1df 	cmp	w14, #0x1a8, lsl #12
   85b08:	5401adc0 	b.eq	890c0 <disasm+0x50e0>  // b.none
		names="csel\0csinc\0csinv\0csneg\0";
		op=((ic32_29)&0x2)|((ic32_10)&0x1); s=((ic32_31)&0x1); m=((ic32_16)&0x1f); c=((ic32_12)&0xf); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
		args[0]=disasm_arg_Rt; args[1]=disasm_arg_Rn; args[2]=disasm_arg_Rm; args[3]=disasm_arg_c; 
	} else
	if(((ic32_24)&0b00111111)==0b00011100) {
   85b0c:	120016cf 	and	w15, w22, #0x3f
   85b10:	710071ff 	cmp	w15, #0x1c
   85b14:	5401aa60 	b.eq	89060 <disasm+0x5080>  // b.none
		names="ldr\0";
		z=((ic32_30)&0x3); i=((ic32_23)&1?(-1<<19):0)|((ic32_5)&0x7ffff); t=((ic32)&0x1f); 
		args[0]=disasm_arg_FPt; args[1]=disasm_arg_labeli4; 
	} else
	if((ic32&0b00111111111000000000000000011111)==0b00101011001000000000000000011111) {
   85b18:	1200740e 	and	w14, w0, #0x3fffffff
   85b1c:	528003f1 	mov	w17, #0x1f                  	// #31
   85b20:	120b3dce 	and	w14, w14, #0xffe0001f
   85b24:	72a56411 	movk	w17, #0x2b20, lsl #16
   85b28:	6b1101df 	cmp	w14, w17
   85b2c:	5401a6a0 	b.eq	89000 <disasm+0x5020>  // b.none
		names="cmn\0cmp\0";
		op=((ic32_30)&0x1); s=((ic32_31)&0x1); m=((ic32_16)&0x1f); o=((ic32_13)&0x7); j=((ic32_10)&0x7); n=((ic32_5)&0x1f); 
		args[0]=disasm_arg_RnS; args[1]=disasm_arg_Rsom; args[2]=disasm_arg_exts; 
	} else
	if(((ic32_16)&0b0011111110000000)==0b0010110010000000) {
   85b30:	121918b1 	and	w17, w5, #0x3f80
   85b34:	5285900e 	mov	w14, #0x2c80                	// #11392
   85b38:	6b0e023f 	cmp	w17, w14
   85b3c:	5401a2a0 	b.eq	88f90 <disasm+0x4fb0>  // b.none
		names="stp\0ldp\0";
		op=((ic32_22)&0x1); z=((ic32_30)&0x3); i=((ic32_21)&1?(-1<<7):0)|((ic32_15)&0x7f); m=((ic32_10)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
		args[0]=disasm_arg_FPt; args[1]=disasm_arg_FPm; args[2]=disasm_arg_offs; args[3]=disasm_arg_XnS; args[4]=disasm_arg_offe; args[5]=disasm_arg_iz4_opt; 
	} else
	if(((ic32_24)&0b00111110)==0b00101100) {
   85b40:	121f12ce 	and	w14, w22, #0x3e
   85b44:	7100b1df 	cmp	w14, #0x2c
   85b48:	54019e40 	b.eq	88f10 <disasm+0x4f30>  // b.none
		names="stnp\0ldnp\0stp\0ldp\0";
		op=((ic32_23)&0x2)|((ic32_22)&0x1); z=((ic32_30)&0x3); p=((ic32_23)&0x1); i=((ic32_21)&1?(-1<<7):0)|((ic32_15)&0x7f); m=((ic32_10)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
		args[0]=disasm_arg_FPt; args[1]=disasm_arg_FPm; args[2]=disasm_arg_offs; args[3]=disasm_arg_XnS; args[4]=disasm_arg_iz4_opt; args[5]=disasm_arg_offe; 
	} else
	if((ic32&0b00111111111000000000110000010000)==0b00111010010000000000000000000000) {
   85b4c:	52818206 	mov	w6, #0xc10                 	// #3088
   85b50:	52a7480e 	mov	w14, #0x3a400000            	// #977272832
   85b54:	72a7fc06 	movk	w6, #0x3fe0, lsl #16
   85b58:	0a060006 	and	w6, w0, w6
   85b5c:	6b0e00df 	cmp	w6, w14
   85b60:	54019aa0 	b.eq	88eb4 <disasm+0x4ed4>  // b.none
		names="ccmn\0ccmp\0";
		op=((ic32_30)&0x1); s=((ic32_31)&0x1); m=((ic32_16)&0x1f); c=((ic32_12)&0xf); n=((ic32_5)&0x1f); j=((ic32)&0xf); 
		args[0]=disasm_arg_Rn; args[1]=disasm_arg_Rm; args[2]=disasm_arg_j; args[3]=disasm_arg_c; 
	} else
	if((ic32&0b00111111111000000000110000010000)==0b00111010010000000000100000000000) {
   85b64:	5281000e 	mov	w14, #0x800                 	// #2048
   85b68:	72a7480e 	movk	w14, #0x3a40, lsl #16
   85b6c:	6b0e00df 	cmp	w6, w14
   85b70:	54019740 	b.eq	88e58 <disasm+0x4e78>  // b.none
		names="ccmn\0ccmp\0";
		op=((ic32_30)&0x1); s=((ic32_31)&0x1); b=((ic32_16)&0x1f); c=((ic32_12)&0xf); n=((ic32_5)&0x1f); j=((ic32)&0xf); 
		args[0]=disasm_arg_Rn; args[1]=disasm_arg_b; args[2]=disasm_arg_j; args[3]=disasm_arg_c; 
	} else
	if(((ic32_8)&0b001111110010000000001100)==0b001111000000000000000000) {
   85b74:	52840186 	mov	w6, #0x200c                	// #8204
   85b78:	72a007e6 	movk	w6, #0x3f, lsl #16
   85b7c:	0a060066 	and	w6, w3, w6
   85b80:	714f00df 	cmp	w6, #0x3c0, lsl #12
   85b84:	54019340 	b.eq	88dec <disasm+0x4e0c>  // b.none
		names="stur\0ldur\0";
		op=((ic32_22)&0x1); z=((ic32_30)&0x3); s=((ic32_23)&0x1); i=((ic32_20)&1?(-1<<9):0)|((ic32_12)&0x1ff); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
		args[0]=disasm_arg_FPst; args[1]=disasm_arg_offs; args[2]=disasm_arg_XnS; args[3]=disasm_arg_i_opt; args[4]=disasm_arg_offe; 
	} else
	if(((ic32_8)&0b001111110010000000001100)==0b001111000000000000000100) {
   85b88:	52800091 	mov	w17, #0x4                   	// #4
   85b8c:	72a00791 	movk	w17, #0x3c, lsl #16
   85b90:	6b1100df 	cmp	w6, w17
   85b94:	54018f60 	b.eq	88d80 <disasm+0x4da0>  // b.none
		names="str\0ldr\0";
		op=((ic32_22)&0x1); z=((ic32_30)&0x3); s=((ic32_23)&0x1); i=((ic32_20)&1?(-1<<9):0)|((ic32_12)&0x1ff); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
		args[0]=disasm_arg_FPst; args[1]=disasm_arg_offs; args[2]=disasm_arg_XnS; args[3]=disasm_arg_offe; args[4]=disasm_arg_i_opt; 
	} else
	if(((ic32_8)&0b001111110010000000000100)==0b001111000000000000000100) {
   85b98:	5284008e 	mov	w14, #0x2004                	// #8196
   85b9c:	72a007ee 	movk	w14, #0x3f, lsl #16
   85ba0:	0a0e006e 	and	w14, w3, w14
   85ba4:	6b1101df 	cmp	w14, w17
   85ba8:	54018b40 	b.eq	88d10 <disasm+0x4d30>  // b.none
		names="str\0ldr\0";
		op=((ic32_22)&0x1); z=((ic32_30)&0x3); s=((ic32_23)&0x1); i=((ic32_20)&1?(-1<<9):0)|((ic32_12)&0x1ff); p=((ic32_11)&0x1); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
		args[0]=disasm_arg_FPst; args[1]=disasm_arg_offs; args[2]=disasm_arg_XnS; args[3]=disasm_arg_i_opt; args[4]=disasm_arg_offe; 
	} else
	if(((ic32_8)&0b001111110010000000001100)==0b001111000010000000001000) {
   85bac:	5284010d 	mov	w13, #0x2008                	// #8200
   85bb0:	72a0078d 	movk	w13, #0x3c, lsl #16
   85bb4:	6b0d00df 	cmp	w6, w13
   85bb8:	540187a0 	b.eq	88cac <disasm+0x4ccc>  // b.none
		names="str\0ldr\0";
		op=((ic32_22)&0x1); z=((ic32_30)&0x3); s=((ic32_23)&0x1); m=((ic32_16)&0x1f); o=((ic32_13)&0x7); j=((ic32_12)&0x1); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
		args[0]=disasm_arg_FPst; args[1]=disasm_arg_offs; args[2]=disasm_arg_XnS; args[3]=disasm_arg_Rom; args[4]=disasm_arg_amountz; args[5]=disasm_arg_offe; 
	} else
	if(((ic32_24)&0b00111111)==0b00111101) {
   85bbc:	7100f5ff 	cmp	w15, #0x3d
   85bc0:	540184a0 	b.eq	88c54 <disasm+0x4c74>  // b.none
		names="str\0ldr\0";
		op=((ic32_22)&0x1); z=((ic32_30)&0x3); s=((ic32_23)&0x1); j=((ic32_10)&0xfff); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
		args[0]=disasm_arg_FPst; args[1]=disasm_arg_offs; args[2]=disasm_arg_XnS; args[3]=disasm_arg_j_opt; args[4]=disasm_arg_offe; 
	} else
	if(((ic32_16)&0b0001111111100000)==0b0000101100100000) {
   85bc4:	121b1ca4 	and	w4, w5, #0x1fe0
   85bc8:	712c809f 	cmp	w4, #0xb20
   85bcc:	54018160 	b.eq	88bf8 <disasm+0x4c18>  // b.none
		names="add\0adds\0sub\0subs\0";
		op=((ic32_29)&0x3); s=((ic32_31)&0x1); m=((ic32_16)&0x1f); o=((ic32_13)&0x7); j=((ic32_10)&0x7); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
		args[0]=disasm_arg_RtS; args[1]=disasm_arg_RnS; args[2]=disasm_arg_Rsom; args[3]=disasm_arg_exts; 
	} else
	if(((ic32_24)&0b00011110)==0b00001010) {
   85bd0:	121f0ec4 	and	w4, w22, #0x1e
   85bd4:	7100289f 	cmp	w4, #0xa
   85bd8:	54017de0 	b.eq	88b94 <disasm+0x4bb4>  // b.none
		names="and\0bic\0add\0?\0orr\0orn\0adds\0?\0eor\0eon\0sub\0?\0ands\0bics\0subs\0";
		op=((ic32_27)&0xc)|((ic32_23)&0x2)|((ic32_21)&0x1); s=((ic32_31)&0x1); z=((ic32_22)&0x3); m=((ic32_16)&0x1f); j=((ic32_10)&0x3f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
		args[0]=disasm_arg_Rt; args[1]=disasm_arg_Rn; args[2]=disasm_arg_Rm; args[3]=disasm_arg_shiftj_opt; 
	} else
	if(((ic32_24)&0b00011111)==0b00010000) {
   85bdc:	120012d6 	and	w22, w22, #0x1f
   85be0:	710042df 	cmp	w22, #0x10
   85be4:	54017a80 	b.eq	88b34 <disasm+0x4b54>  // b.none
		names="adr\0adrp\0";
		op=((ic32_31)&0x1); j=((ic32_29)&0x3); i=((ic32_23)&1?(-1<<19):0)|((ic32_5)&0x7ffff); t=((ic32)&0x1f); 
		args[0]=disasm_arg_Xt; args[1]=disasm_arg_labelij1; 
	} else
	if(((ic32_24)&0b00011111)==0b00010001) {
   85be8:	710046df 	cmp	w22, #0x11
   85bec:	54017720 	b.eq	88ad0 <disasm+0x4af0>  // b.none
		names="add\0adds\0sub\0subs\0";
		op=((ic32_29)&0x3); s=((ic32_31)&0x1); j=((ic32_22)&0x3); i=((ic32_21)&1?(-1<<12):0)|((ic32_10)&0xfff); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
		args[0]=disasm_arg_RtS; args[1]=disasm_arg_RnS; args[2]=disasm_arg_i; args[3]=disasm_arg_j12_opt; 
	} else
	if(((ic32_16)&0b0001111110000000)==0b0001001000000000) {
   85bf0:	121914a1 	and	w1, w5, #0x1f80
   85bf4:	52824004 	mov	w4, #0x1200                	// #4608
   85bf8:	6b04003f 	cmp	w1, w4
   85bfc:	54017340 	b.eq	88a64 <disasm+0x4a84>  // b.none
		names="and\0orr\0eor\0ands\0";
		op=((ic32_29)&0x3); s=((ic32_31)&0x1); k=((ic32_22)&0x1); i=((ic32_21)&1?(-1<<6):0)|((ic32_16)&0x3f); j=((ic32_10)&0x3f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
		args[0]=disasm_arg_RtS; args[1]=disasm_arg_Rn; args[2]=disasm_arg_ib; 
	} else
	if(((ic32_16)&0b0001111110000000)==0b0001001010000000) {
   85c00:	52825004 	mov	w4, #0x1280                	// #4736
   85c04:	6b04003f 	cmp	w1, w4
   85c08:	54016fa0 	b.eq	889fc <disasm+0x4a1c>  // b.none
		names="movn\0?\0movz\0movk\0";
		op=((ic32_29)&0x3); s=((ic32_31)&0x1); j=((ic32_21)&0x3); i=((ic32_20)&1?(-1<<16):0)|((ic32_5)&0xffff); t=((ic32)&0x1f); 
		args[0]=disasm_arg_Rt; args[1]=disasm_arg_i; args[2]=disasm_arg_j16_opt; 
	} else
	if(((ic32_16)&0b0001111110000000)==0b0001001100000000) {
   85c0c:	52826004 	mov	w4, #0x1300                	// #4864
   85c10:	6b04003f 	cmp	w1, w4
   85c14:	540160e0 	b.eq	88830 <disasm+0x4850>  // b.none
		names="sbfm\0bfm\0ubfm\0";
		op=((ic32_29)&0x3); s=((ic32_31)&0x1); i=((ic32_21)&1?(-1<<6):0)|((ic32_16)&0x3f); j=((ic32_10)&0x3f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
		args[0]=disasm_arg_Rt; args[1]=disasm_arg_Rn; args[2]=disasm_arg_i; args[3]=disasm_arg_j; 
	} else
	if(((ic32_8)&0b000111111110000011111100)==0b000110100000000000000000) {
   85c18:	121e4863 	and	w3, w3, #0x1ffffc
   85c1c:	12136863 	and	w3, w3, #0xffffe0ff
   85c20:	7146807f 	cmp	w3, #0x1a0, lsl #12
   85c24:	54015da0 	b.eq	887d8 <disasm+0x47f8>  // b.none
	uint32_t i=0;
   85c28:	a9435bf5 	ldp	x21, x22, [sp, #48]
		names="adc\0adcs\0sbc\0sbcs\0";
		op=((ic32_29)&0x3); s=((ic32_31)&0x1); m=((ic32_16)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
		args[0]=disasm_arg_Rt; args[1]=disasm_arg_Rn; args[2]=disasm_arg_Rm; 
	} else
		names=NULL;
   85c2c:	d2800000 	mov	x0, #0x0                   	// #0
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   85c30:	52800017 	mov	w23, #0x0                   	// #0
   85c34:	52800018 	mov	w24, #0x0                   	// #0
   85c38:	52800019 	mov	w25, #0x0                   	// #0
   85c3c:	5280001b 	mov	w27, #0x0                   	// #0
   85c40:	5280001a 	mov	w26, #0x0                   	// #0
	uint16_t op=0, om=0, j=0;
   85c44:	52800014 	mov	w20, #0x0                   	// #0
   85c48:	52800001 	mov	w1, #0x0                   	// #0
	uint32_t i=0;
   85c4c:	290effff 	stp	wzr, wzr, [sp, #116]
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   85c50:	290fffff 	stp	wzr, wzr, [sp, #124]
   85c54:	29117fff 	stp	wzr, wzr, [sp, #136]
   85c58:	29127fff 	stp	wzr, wzr, [sp, #144]
   85c5c:	b9009bff 	str	wzr, [sp, #152]

	if(str!=NULL) {
   85c60:	b4003933 	cbz	x19, 86384 <disasm+0x23a4>
char *disasm_str(char*s,int n) {if(!s)return "?";while(n){s++;if(!*s){s++;n--;}}return *s?s:"?";};
   85c64:	a9035bf5 	stp	x21, x22, [sp, #48]
   85c68:	b4004340 	cbz	x0, 864d0 <disasm+0x24f0>
   85c6c:	97fff639 	bl	83550 <disasm_str.part.0>
   85c70:	aa0003e4 	mov	x4, x0
   85c74:	b9408fe1 	ldr	w1, [sp, #140]
   85c78:	f0000060 	adrp	x0, 94000 <sd_init+0x2470>
   85c7c:	911a2000 	add	x0, x0, #0x688
   85c80:	f9005be0 	str	x0, [sp, #176]
   85c84:	9129e000 	add	x0, x0, #0xa78
   85c88:	97fff632 	bl	83550 <disasm_str.part.0>
		str+=sprintf(str,disasm_str(names,op),disasm_str(conds,c));
   85c8c:	aa0003e2 	mov	x2, x0
   85c90:	aa0403e1 	mov	x1, x4
   85c94:	aa1303e0 	mov	x0, x19
   85c98:	97fff05c 	bl	81e08 <sprintf>
		if(str-olds<10)om=10-(str-olds);else om=1;for(op=0;op<om;op++) *str++=' ';
   85c9c:	7100281f 	cmp	w0, #0xa
   85ca0:	52800142 	mov	w2, #0xa                   	// #10
   85ca4:	4b000042 	sub	w2, w2, w0
   85ca8:	12003c42 	and	w2, w2, #0xffff
		str+=sprintf(str,disasm_str(names,op),disasm_str(conds,c));
   85cac:	8b204273 	add	x19, x19, w0, uxtw
		if(str-olds<10)om=10-(str-olds);else om=1;for(op=0;op<om;op++) *str++=' ';
   85cb0:	1a9f3442 	csinc	w2, w2, wzr, cc  // cc = lo, ul, last
		str+=sprintf(str,disasm_str(names,op),disasm_str(conds,c));
   85cb4:	aa1303e0 	mov	x0, x19
		if(str-olds<10)om=10-(str-olds);else om=1;for(op=0;op<om;op++) *str++=' ';
   85cb8:	52800403 	mov	w3, #0x20                  	// #32
   85cbc:	8b222261 	add	x1, x19, w2, uxth
   85cc0:	38001403 	strb	w3, [x0], #1
   85cc4:	eb00003f 	cmp	x1, x0
   85cc8:	54ffffc1 	b.ne	85cc0 <disasm+0x1ce0>  // b.any
   85ccc:	721a0284 	ands	w4, w20, #0x40
   85cd0:	90000080 	adrp	x0, 95000 <sd_init+0x3470>
   85cd4:	5280080e 	mov	w14, #0x40                  	// #64
   85cd8:	91118003 	add	x3, x0, #0x460
   85cdc:	1a8e13e1 	csel	w1, wzr, w14, ne  // ne = any
   85ce0:	90000080 	adrp	x0, 95000 <sd_init+0x3470>
   85ce4:	710002ff 	cmp	w23, #0x0
   85ce8:	9111c000 	add	x0, x0, #0x470
   85cec:	1219028c 	and	w12, w20, #0x80
   85cf0:	f9014be0 	str	x0, [sp, #656]
   85cf4:	9a800060 	csel	x0, x3, x0, eq  // eq = none
				case disasm_arg_FPz5n: str+=sprintf(str,"%c%d", z==1?'d':(z==0?'s':'h'), n); break;
				case disasm_arg_Vn1d: str+=sprintf(str,"V%d.1d[n]", n); break;
				case disasm_arg_Vt1d: str+=sprintf(str,"V%d.1d[1]", t); break;
				case disasm_arg_FPk5t: str+=sprintf(str,"%c%d", k==1?'d':(k==0?'s':'h'), t); break;
				case disasm_arg_FPz5m: str+=sprintf(str,"%c%d", z==1?'d':(z==0?'s':'h'), m); break;
				case disasm_arg_jz: str+=sprintf(str,z==3?"#0x02x%02x":(z==0?"#0x02x%02x0000":"#0x02x%02x%06x"), z==3?(j&128)|(j&64?0:64)|(j&64?32:0)|(j&64?16:0)|((j>>2)&0xF):(j&128)|(j&64?0:64)|(j&64?32:0)|(j&64?16:0)|(j&64?8:0)|(j&64?4:0)|(j&64?2:0)|(j&(z==0?32:64)?1:0),z==3?(j&3)<<6:(z==0?(j&0x1f)<<3:(j&64?128:0)|(j&64?64:0)|(j&0x3f)), 0); break;
   85cf8:	7100009f 	cmp	w4, #0x0
   85cfc:	f90147e3 	str	x3, [sp, #648]
   85d00:	1a9f07e3 	cset	w3, ne  // ne = any
   85d04:	7100019f 	cmp	w12, #0x0
   85d08:	b900a3e3 	str	w3, [sp, #160]
   85d0c:	121b0283 	and	w3, w20, #0x20
   85d10:	f9014fe0 	str	x0, [sp, #664]
   85d14:	52801fe0 	mov	w0, #0xff                  	// #255
   85d18:	1a9f1005 	csel	w5, w0, wzr, ne  // ne = any
   85d1c:	7100009f 	cmp	w4, #0x0
   85d20:	90000086 	adrp	x6, 95000 <sd_init+0x3470>
   85d24:	1a9f1004 	csel	w4, w0, wzr, ne  // ne = any
   85d28:	7100007f 	cmp	w3, #0x0
   85d2c:	b9026fe4 	str	w4, [sp, #620]
   85d30:	1a9f1004 	csel	w4, w0, wzr, ne  // ne = any
   85d34:	f27c029f 	tst	x20, #0x10
   85d38:	b90273e4 	str	w4, [sp, #624]
   85d3c:	1a9f1004 	csel	w4, w0, wzr, ne  // ne = any
   85d40:	f27d029f 	tst	x20, #0x8
   85d44:	b90277e4 	str	w4, [sp, #628]
   85d48:	1a9f1004 	csel	w4, w0, wzr, ne  // ne = any
   85d4c:	f27e029f 	tst	x20, #0x4
   85d50:	b9027be4 	str	w4, [sp, #632]
   85d54:	1a9f1004 	csel	w4, w0, wzr, ne  // ne = any
   85d58:	f27f029f 	tst	x20, #0x2
   85d5c:	b9027fe4 	str	w4, [sp, #636]
   85d60:	1a9f1004 	csel	w4, w0, wzr, ne  // ne = any
   85d64:	b94077e3 	ldr	w3, [sp, #116]
   85d68:	9131e0c6 	add	x6, x6, #0xc78
   85d6c:	b90283e4 	str	w4, [sp, #640]
   85d70:	72000284 	ands	w4, w20, #0x1
   85d74:	1a9f1000 	csel	w0, w0, wzr, ne  // ne = any
   85d78:	7100007f 	cmp	w3, #0x0
   85d7c:	b90287e0 	str	w0, [sp, #644]
   85d80:	90000080 	adrp	x0, 95000 <sd_init+0x3470>
   85d84:	91120000 	add	x0, x0, #0x480
   85d88:	90000089 	adrp	x9, 95000 <sd_init+0x3470>
   85d8c:	9a8000c0 	csel	x0, x6, x0, eq  // eq = none
   85d90:	91122129 	add	x9, x9, #0x488
   85d94:	f90133e0 	str	x0, [sp, #608]
   85d98:	9a8900c0 	csel	x0, x6, x9, eq  // eq = none
   85d9c:	710002ff 	cmp	w23, #0x0
   85da0:	5280007e 	mov	w30, #0x3                   	// #3
   85da4:	5280010d 	mov	w13, #0x8                   	// #8
   85da8:	f9012fe0 	str	x0, [sp, #600]
   85dac:	1a9e11a0 	csel	w0, w13, w30, ne  // ne = any
   85db0:	71007f3f 	cmp	w25, #0x1f
   85db4:	b90077e3 	str	w3, [sp, #116]
   85db8:	90000083 	adrp	x3, 95000 <sd_init+0x3470>
   85dbc:	91124063 	add	x3, x3, #0x490
   85dc0:	b900f7e4 	str	w4, [sp, #244]
   85dc4:	90000084 	adrp	x4, 95000 <sd_init+0x3470>
   85dc8:	9112608f 	add	x15, x4, #0x498
   85dcc:	b90257e0 	str	w0, [sp, #596]
   85dd0:	12000e80 	and	w0, w20, #0xf
   85dd4:	9a8f0064 	csel	x4, x3, x15, eq  // eq = none
   85dd8:	6b0d001f 	cmp	w0, w13
   85ddc:	52800f0b 	mov	w11, #0x78                  	// #120
   85de0:	52800eea 	mov	w10, #0x77                  	// #119
   85de4:	1a8a0160 	csel	w0, w11, w10, eq  // eq = none
   85de8:	710006ff 	cmp	w23, #0x1
   85dec:	f9009fe4 	str	x4, [sp, #312]
   85df0:	52800c84 	mov	w4, #0x64                  	// #100
   85df4:	b90253e0 	str	w0, [sp, #592]
   85df8:	52800e60 	mov	w0, #0x73                  	// #115
   85dfc:	b9026be5 	str	w5, [sp, #616]
   85e00:	1a800085 	csel	w5, w4, w0, eq  // eq = none
   85e04:	b9408bf1 	ldr	w17, [sp, #136]
   85e08:	90000088 	adrp	x8, 95000 <sd_init+0x3470>
   85e0c:	b9024fe5 	str	w5, [sp, #588]
   85e10:	52800d05 	mov	w5, #0x68                  	// #104
   85e14:	1a8000a5 	csel	w5, w5, w0, eq  // eq = none
   85e18:	710002ff 	cmp	w23, #0x0
   85e1c:	b9407ff5 	ldr	w21, [sp, #124]
   85e20:	1a801080 	csel	w0, w4, w0, ne  // ne = any
   85e24:	7100031f 	cmp	w24, #0x0
   85e28:	91128108 	add	x8, x8, #0x4a0
   85e2c:	90000084 	adrp	x4, 95000 <sd_init+0x3470>
   85e30:	9112a084 	add	x4, x4, #0x4a8
   85e34:	b9024be0 	str	w0, [sp, #584]
   85e38:	52800080 	mov	w0, #0x4                   	// #4
   85e3c:	1a8011a0 	csel	w0, w13, w0, ne  // ne = any
   85e40:	71007e3f 	cmp	w17, #0x1f
   85e44:	90000087 	adrp	x7, 95000 <sd_init+0x3470>
   85e48:	9112c0e7 	add	x7, x7, #0x4b0
   85e4c:	b90107e5 	str	w5, [sp, #260]
   85e50:	90000085 	adrp	x5, 95000 <sd_init+0x3470>
   85e54:	9112e0a5 	add	x5, x5, #0x4b8
   85e58:	b9011be0 	str	w0, [sp, #280]
   85e5c:	9a840100 	csel	x0, x8, x4, eq  // eq = none
   85e60:	71007ebf 	cmp	w21, #0x1f
   85e64:	f90123e0 	str	x0, [sp, #576]
   85e68:	9a8500e0 	csel	x0, x7, x5, eq  // eq = none
   85e6c:	71007f3f 	cmp	w25, #0x1f
   85e70:	aa0f03f0 	mov	x16, x15
   85e74:	f9011fe0 	str	x0, [sp, #568]
   85e78:	9a8500e0 	csel	x0, x7, x5, eq  // eq = none
   85e7c:	71007ebf 	cmp	w21, #0x1f
   85e80:	f9011be0 	str	x0, [sp, #560]
   85e84:	9a900060 	csel	x0, x3, x16, eq  // eq = none
   85e88:	7100029f 	cmp	w20, #0x0
   85e8c:	f9008be0 	str	x0, [sp, #272]
   85e90:	90000080 	adrp	x0, 95000 <sd_init+0x3470>
   85e94:	91130000 	add	x0, x0, #0x4c0
   85e98:	f90077e0 	str	x0, [sp, #232]
   85e9c:	9a8000c0 	csel	x0, x6, x0, eq  // eq = none
   85ea0:	f90117e0 	str	x0, [sp, #552]
   85ea4:	1a9f13c0 	csel	w0, w30, wzr, ne  // ne = any
   85ea8:	b90227e0 	str	w0, [sp, #548]
   85eac:	52800040 	mov	w0, #0x2                   	// #2
   85eb0:	1a9f1012 	csel	w18, w0, wzr, ne  // ne = any
   85eb4:	b90223f2 	str	w18, [sp, #544]
   85eb8:	9000008f 	adrp	x15, 95000 <sd_init+0x3470>
   85ebc:	f94043f2 	ldr	x18, [sp, #128]
   85ec0:	51000442 	sub	w2, w2, #0x1
   85ec4:	b9407bf6 	ldr	w22, [sp, #120]
   85ec8:	92403c42 	and	x2, x2, #0xffff
   85ecc:	91000442 	add	x2, x2, #0x1
   85ed0:	f90057f0 	str	x16, [sp, #168]
   85ed4:	f240025f 	tst	x18, #0x1
   85ed8:	8b020273 	add	x19, x19, x2
   85edc:	1a8a1172 	csel	w18, w11, w10, ne  // ne = any
   85ee0:	7100029f 	cmp	w20, #0x0
   85ee4:	b9021ff2 	str	w18, [sp, #540]
   85ee8:	911321f2 	add	x18, x15, #0x4c8
   85eec:	f9005ff2 	str	x18, [sp, #184]
   85ef0:	9a9200d2 	csel	x18, x6, x18, eq  // eq = none
   85ef4:	71007f5f 	cmp	w26, #0x1f
   85ef8:	f9010bf2 	str	x18, [sp, #528]
   85efc:	9a900072 	csel	x18, x3, x16, eq  // eq = none
   85f00:	7100037f 	cmp	w27, #0x0
   85f04:	f9009bf2 	str	x18, [sp, #304]
   85f08:	1a8b1152 	csel	w18, w10, w11, ne  // ne = any
   85f0c:	b9021bf2 	str	w18, [sp, #536]
   85f10:	710002df 	cmp	w22, #0x0
   85f14:	f9405ff2 	ldr	x18, [sp, #184]
   85f18:	5280020f 	mov	w15, #0x10                  	// #16
				case disasm_arg_z4: str+=sprintf(str,"#%d", 4<<z); break;
   85f1c:	52800082 	mov	w2, #0x4                   	// #4
   85f20:	9a9200d2 	csel	x18, x6, x18, eq  // eq = none
   85f24:	71007f5f 	cmp	w26, #0x1f
   85f28:	f9007ff2 	str	x18, [sp, #248]
   85f2c:	9a8500f2 	csel	x18, x7, x5, eq  // eq = none
   85f30:	71007e3f 	cmp	w17, #0x1f
   85f34:	1ad72042 	lsl	w2, w2, w23
   85f38:	9a8500e5 	csel	x5, x7, x5, eq  // eq = none
   85f3c:	71007b5f 	cmp	w26, #0x1e
   85f40:	f90103e5 	str	x5, [sp, #512]
   85f44:	9a900065 	csel	x5, x3, x16, eq  // eq = none
   85f48:	7100037f 	cmp	w27, #0x0
   85f4c:	f900ffe5 	str	x5, [sp, #504]
   85f50:	1a8a1165 	csel	w5, w11, w10, ne  // ne = any
   85f54:	71007a3f 	cmp	w17, #0x1e
   85f58:	b900f3e5 	str	w5, [sp, #240]
   85f5c:	9a900065 	csel	x5, x3, x16, eq  // eq = none
   85f60:	71007e3f 	cmp	w17, #0x1f
   85f64:	f900fbe5 	str	x5, [sp, #496]
   85f68:	9a900065 	csel	x5, x3, x16, eq  // eq = none
   85f6c:	7100031f 	cmp	w24, #0x0
   85f70:	f900f7e5 	str	x5, [sp, #488]
   85f74:	1a8d11e5 	csel	w5, w15, w13, ne  // ne = any
   85f78:	52800403 	mov	w3, #0x20                  	// #32
   85f7c:	b901e7e5 	str	w5, [sp, #484]
   85f80:	1a8f1065 	csel	w5, w3, w15, ne  // ne = any
   85f84:	52800607 	mov	w7, #0x30                  	// #48
   85f88:	b901e3e5 	str	w5, [sp, #480]
   85f8c:	52800305 	mov	w5, #0x18                  	// #24
   85f90:	1a8510e5 	csel	w5, w7, w5, ne  // ne = any
   85f94:	71007ebf 	cmp	w21, #0x1f
   85f98:	9a840107 	csel	x7, x8, x4, eq  // eq = none
   85f9c:	7100031f 	cmp	w24, #0x0
   85fa0:	f900ebe7 	str	x7, [sp, #464]
   85fa4:	1a8311c7 	csel	w7, w14, w3, ne  // ne = any
   85fa8:	b901dbe7 	str	w7, [sp, #472]
   85fac:	90000083 	adrp	x3, 95000 <sd_init+0x3470>
   85fb0:	b94093e7 	ldr	w7, [sp, #144]
   85fb4:	91136063 	add	x3, x3, #0x4d8
   85fb8:	b901dfe5 	str	w5, [sp, #476]
   85fbc:	90000085 	adrp	x5, 95000 <sd_init+0x3470>
   85fc0:	710000ff 	cmp	w7, #0x0
   85fc4:	911340a5 	add	x5, x5, #0x4d0
   85fc8:	9a8610a5 	csel	x5, x5, x6, ne  // ne = any
   85fcc:	71007f3f 	cmp	w25, #0x1f
				case disasm_arg_jz: str+=sprintf(str,z==3?"#0x02x%02x":(z==0?"#0x02x%02x0000":"#0x02x%02x%06x"), z==3?(j&128)|(j&64?0:64)|(j&64?32:0)|(j&64?16:0)|((j>>2)&0xF):(j&128)|(j&64?0:64)|(j&64?32:0)|(j&64?16:0)|(j&64?8:0)|(j&64?4:0)|(j&64?2:0)|(j&(z==0?32:64)?1:0),z==3?(j&3)<<6:(z==0?(j&0x1f)<<3:(j&64?128:0)|(j&64?64:0)|(j&0x3f)), 0); break;
   85fd0:	13037e8d 	asr	w13, w20, #3
   85fd4:	9a840067 	csel	x7, x3, x4, eq  // eq = none
   85fd8:	9a84010b 	csel	x11, x8, x4, eq  // eq = none
   85fdc:	71007f5f 	cmp	w26, #0x1f
   85fe0:	f900e7e5 	str	x5, [sp, #456]
   85fe4:	13017e85 	asr	w5, w20, #1
   85fe8:	b90197e5 	str	w5, [sp, #404]
   85fec:	aa1003ea 	mov	x10, x16
   85ff0:	a91b9feb 	stp	x11, x7, [sp, #440]
   85ff4:	13027e87 	asr	w7, w20, #2
   85ff8:	121b00ab 	and	w11, w5, #0x20
   85ffc:	121d01a5 	and	w5, w13, #0x8
   86000:	b902abed 	str	w13, [sp, #680]
   86004:	9a8400cd 	csel	x13, x6, x4, eq  // eq = none
   86008:	7100029f 	cmp	w20, #0x0
   8600c:	9a8900c6 	csel	x6, x6, x9, eq  // eq = none
   86010:	f0000075 	adrp	x21, 95000 <sd_init+0x3470>
   86014:	71007f3f 	cmp	w25, #0x1f
   86018:	911382b5 	add	x21, x21, #0x4e0
   8601c:	b902a7e7 	str	w7, [sp, #676]
   86020:	0a0f00e7 	and	w7, w7, w15
   86024:	2a070170 	orr	w16, w11, w7
   86028:	9a8a02a9 	csel	x9, x21, x10, eq  // eq = none
   8602c:	13047e8e 	asr	w14, w20, #4
   86030:	d342168b 	ubfx	x11, x20, #2, #4
   86034:	71007f5f 	cmp	w26, #0x1f
   86038:	f90097e6 	str	x6, [sp, #296]
   8603c:	f90107f2 	str	x18, [sp, #520]
   86040:	121e01c3 	and	w3, w14, #0x4
   86044:	b902afee 	str	w14, [sp, #684]
   86048:	2a0b018b 	orr	w11, w12, w11
   8604c:	a91ab7e9 	stp	x9, x13, [sp, #424]
   86050:	2a0300a5 	orr	w5, w5, w3
   86054:	2a10016b 	orr	w11, w11, w16
				case disasm_arg_z4: str+=sprintf(str,"#%d", 4<<z); break;
   86058:	b90177e2 	str	w2, [sp, #372]
   8605c:	9a840102 	csel	x2, x8, x4, eq  // eq = none
				case disasm_arg_jz: str+=sprintf(str,z==3?"#0x02x%02x":(z==0?"#0x02x%02x0000":"#0x02x%02x%06x"), z==3?(j&128)|(j&64?0:64)|(j&64?32:0)|(j&64?16:0)|((j>>2)&0xF):(j&128)|(j&64?0:64)|(j&64?32:0)|(j&64?16:0)|(j&64?8:0)|(j&64?4:0)|(j&64?2:0)|(j&(z==0?32:64)?1:0),z==3?(j&3)<<6:(z==0?(j&0x1f)<<3:(j&64?128:0)|(j&64?64:0)|(j&0x3f)), 0); break;
   86060:	13057e83 	asr	w3, w20, #5
   86064:	f900cfe2 	str	x2, [sp, #408]
				case disasm_arg_z3: str+=sprintf(str,"#%d", 3<<z); break;
   86068:	1ad723c2 	lsl	w2, w30, w23
   8606c:	2a010189 	orr	w9, w12, w1
				case disasm_arg_jz: str+=sprintf(str,z==3?"#0x02x%02x":(z==0?"#0x02x%02x0000":"#0x02x%02x%06x"), z==3?(j&128)|(j&64?0:64)|(j&64?32:0)|(j&64?16:0)|((j>>2)&0xF):(j&128)|(j&64?0:64)|(j&64?32:0)|(j&64?16:0)|(j&64?8:0)|(j&64?4:0)|(j&64?2:0)|(j&(z==0?32:64)?1:0),z==3?(j&3)<<6:(z==0?(j&0x1f)<<3:(j&64?128:0)|(j&64?64:0)|(j&0x3f)), 0); break;
   86070:	0a000071 	and	w17, w3, w0
				case disasm_arg_F32: str+=sprintf(str,"#0x02x%02x0000", (j&128)|(j&64?0:64)|(j&64?32:0)|(j&64?16:0)|(j&64?8:0)|(j&64?4:0)|(j&64?2:0)|(j&32?1:0), (j&0x1f)<<3); break;
   86074:	0a1e0063 	and	w3, w3, w30
				case disasm_arg_z3: str+=sprintf(str,"#%d", 3<<z); break;
   86078:	b9016fe2 	str	w2, [sp, #364]
				case disasm_arg_jz: str+=sprintf(str,z==3?"#0x02x%02x":(z==0?"#0x02x%02x0000":"#0x02x%02x%06x"), z==3?(j&128)|(j&64?0:64)|(j&64?32:0)|(j&64?16:0)|((j>>2)&0xF):(j&128)|(j&64?0:64)|(j&64?32:0)|(j&64?16:0)|(j&64?8:0)|(j&64?4:0)|(j&64?2:0)|(j&(z==0?32:64)?1:0),z==3?(j&3)<<6:(z==0?(j&0x1f)<<3:(j&64?128:0)|(j&64?64:0)|(j&0x3f)), 0); break;
   8607c:	2a010162 	orr	w2, w11, w1
   86080:	2a1000a5 	orr	w5, w5, w16
				case disasm_arg_F32: str+=sprintf(str,"#0x02x%02x0000", (j&128)|(j&64?0:64)|(j&64?32:0)|(j&64?16:0)|(j&64?8:0)|(j&64?4:0)|(j&64?2:0)|(j&32?1:0), (j&0x1f)<<3); break;
   86084:	2a090063 	orr	w3, w3, w9
				case disasm_arg_jz: str+=sprintf(str,z==3?"#0x02x%02x":(z==0?"#0x02x%02x0000":"#0x02x%02x%06x"), z==3?(j&128)|(j&64?0:64)|(j&64?32:0)|(j&64?16:0)|((j>>2)&0xF):(j&128)|(j&64?0:64)|(j&64?32:0)|(j&64?16:0)|(j&64?8:0)|(j&64?4:0)|(j&64?2:0)|(j&(z==0?32:64)?1:0),z==3?(j&3)<<6:(z==0?(j&0x1f)<<3:(j&64?128:0)|(j&64?64:0)|(j&0x3f)), 0); break;
   86088:	b90147e2 	str	w2, [sp, #324]
				case disasm_arg_z2: str+=sprintf(str,"#%d", 2<<z); break;
   8608c:	1ad72002 	lsl	w2, w0, w23
				case disasm_arg_jz: str+=sprintf(str,z==3?"#0x02x%02x":(z==0?"#0x02x%02x0000":"#0x02x%02x%06x"), z==3?(j&128)|(j&64?0:64)|(j&64?32:0)|(j&64?16:0)|((j>>2)&0xF):(j&128)|(j&64?0:64)|(j&64?32:0)|(j&64?16:0)|(j&64?8:0)|(j&64?4:0)|(j&64?2:0)|(j&(z==0?32:64)?1:0),z==3?(j&3)<<6:(z==0?(j&0x1f)<<3:(j&64?128:0)|(j&64?64:0)|(j&0x3f)), 0); break;
   86090:	2a05022d 	orr	w13, w17, w5
				case disasm_arg_z2: str+=sprintf(str,"#%d", 2<<z); break;
   86094:	b90173e2 	str	w2, [sp, #368]
				case disasm_arg_F32: str+=sprintf(str,"#0x02x%02x0000", (j&128)|(j&64?0:64)|(j&64?32:0)|(j&64?16:0)|(j&64?8:0)|(j&64?4:0)|(j&64?2:0)|(j&32?1:0), (j&0x1f)<<3); break;
   86098:	2a050062 	orr	w2, w3, w5
				case disasm_arg_jz: str+=sprintf(str,z==3?"#0x02x%02x":(z==0?"#0x02x%02x0000":"#0x02x%02x%06x"), z==3?(j&128)|(j&64?0:64)|(j&64?32:0)|(j&64?16:0)|((j>>2)&0xF):(j&128)|(j&64?0:64)|(j&64?32:0)|(j&64?16:0)|(j&64?8:0)|(j&64?4:0)|(j&64?2:0)|(j&(z==0?32:64)?1:0),z==3?(j&3)<<6:(z==0?(j&0x1f)<<3:(j&64?128:0)|(j&64?64:0)|(j&0x3f)), 0); break;
   8609c:	b940a3e3 	ldr	w3, [sp, #160]
   860a0:	d3451690 	ubfx	x16, x20, #5, #1
   860a4:	2a0901ad 	orr	w13, w13, w9
				case disasm_arg_im4_opt: str+=sprintf(str,!i?"":"#0x%x", i<<2); break;
   860a8:	531e76cc 	lsl	w12, w22, #2
				case disasm_arg_Vnzq2: str+=sprintf(str,"%s", "V%d.%s", n, disasm_str(quantum,2+(z*2)+q)); break;
   860ac:	110006e7 	add	w7, w23, #0x1
				case disasm_arg_jz: str+=sprintf(str,z==3?"#0x02x%02x":(z==0?"#0x02x%02x0000":"#0x02x%02x%06x"), z==3?(j&128)|(j&64?0:64)|(j&64?32:0)|(j&64?16:0)|((j>>2)&0xF):(j&128)|(j&64?0:64)|(j&64?32:0)|(j&64?16:0)|(j&64?8:0)|(j&64?4:0)|(j&64?2:0)|(j&(z==0?32:64)?1:0),z==3?(j&3)<<6:(z==0?(j&0x1f)<<3:(j&64?128:0)|(j&64?64:0)|(j&0x3f)), 0); break;
   860b0:	f90067f0 	str	x16, [sp, #200]
				case disasm_arg_F64: str+=sprintf(str,"#0x02x%02x%06x", (j&128)|(j&64?0:64)|(j&64?32:0)|(j&64?16:0)|(j&64?8:0)|(j&64?4:0)|(j&64?2:0)|(j&64?1:0), (j&64?128:0)|(j&64?64:0)|(j&0x3f), 0); break;
   860b4:	d3461a92 	ubfx	x18, x20, #6, #1
				case disasm_arg_im4_opt: str+=sprintf(str,!i?"":"#0x%x", i<<2); break;
   860b8:	b9007bf6 	str	w22, [sp, #120]
   860bc:	2a0c03f6 	mov	w22, w12
				case disasm_arg_F32: str+=sprintf(str,"#0x02x%02x0000", (j&128)|(j&64?0:64)|(j&64?32:0)|(j&64?16:0)|(j&64?8:0)|(j&64?4:0)|(j&64?2:0)|(j&32?1:0), (j&0x1f)<<3); break;
   860c0:	b9018fe2 	str	w2, [sp, #396]
				case disasm_arg_jz: str+=sprintf(str,z==3?"#0x02x%02x":(z==0?"#0x02x%02x0000":"#0x02x%02x%06x"), z==3?(j&128)|(j&64?0:64)|(j&64?32:0)|(j&64?16:0)|((j>>2)&0xF):(j&128)|(j&64?0:64)|(j&64?32:0)|(j&64?16:0)|(j&64?8:0)|(j&64?4:0)|(j&64?2:0)|(j&(z==0?32:64)?1:0),z==3?(j&3)<<6:(z==0?(j&0x1f)<<3:(j&64?128:0)|(j&64?64:0)|(j&0x3f)), 0); break;
   860c4:	2a0d0062 	orr	w2, w3, w13
   860c8:	f94057ec 	ldr	x12, [sp, #168]
				case disasm_arg_Vnzq2: str+=sprintf(str,"%s", "V%d.%s", n, disasm_str(quantum,2+(z*2)+q)); break;
   860cc:	531f78e7 	lsl	w7, w7, #1
				case disasm_arg_jz: str+=sprintf(str,z==3?"#0x02x%02x":(z==0?"#0x02x%02x0000":"#0x02x%02x%06x"), z==3?(j&128)|(j&64?0:64)|(j&64?32:0)|(j&64?16:0)|((j>>2)&0xF):(j&128)|(j&64?0:64)|(j&64?32:0)|(j&64?16:0)|(j&64?8:0)|(j&64?4:0)|(j&64?2:0)|(j&(z==0?32:64)?1:0),z==3?(j&3)<<6:(z==0?(j&0x1f)<<3:(j&64?128:0)|(j&64?64:0)|(j&0x3f)), 0); break;
   860d0:	b902b3e2 	str	w2, [sp, #688]
				case disasm_arg_Vtz: str+=sprintf(str,"%s", "V%d.%s", t, disasm_str(quantum,4+(z*2))); break;
   860d4:	0b0000f0 	add	w16, w7, w0
				case disasm_arg_jz: str+=sprintf(str,z==3?"#0x02x%02x":(z==0?"#0x02x%02x0000":"#0x02x%02x%06x"), z==3?(j&128)|(j&64?0:64)|(j&64?32:0)|(j&64?16:0)|((j>>2)&0xF):(j&128)|(j&64?0:64)|(j&64?32:0)|(j&64?16:0)|(j&64?8:0)|(j&64?4:0)|(j&64?2:0)|(j&(z==0?32:64)?1:0),z==3?(j&3)<<6:(z==0?(j&0x1f)<<3:(j&64?128:0)|(j&64?64:0)|(j&0x3f)), 0); break;
   860d8:	b940cbe2 	ldr	w2, [sp, #200]
   860dc:	531f7a86 	lsl	w6, w20, #1
				case disasm_arg_Vtz: str+=sprintf(str,"%s", "V%d.%s", t, disasm_str(quantum,4+(z*2))); break;
   860e0:	b900c7f0 	str	w16, [sp, #196]
   860e4:	9a8c02b5 	csel	x21, x21, x12, eq  // eq = none
				case disasm_arg_jz: str+=sprintf(str,z==3?"#0x02x%02x":(z==0?"#0x02x%02x0000":"#0x02x%02x%06x"), z==3?(j&128)|(j&64?0:64)|(j&64?32:0)|(j&64?16:0)|((j>>2)&0xF):(j&128)|(j&64?0:64)|(j&64?32:0)|(j&64?16:0)|(j&64?8:0)|(j&64?4:0)|(j&64?2:0)|(j&(z==0?32:64)?1:0),z==3?(j&3)<<6:(z==0?(j&0x1f)<<3:(j&64?128:0)|(j&64?64:0)|(j&0x3f)), 0); break;
   860e8:	2a0d0042 	orr	w2, w2, w13
				case disasm_arg_F64: str+=sprintf(str,"#0x02x%02x%06x", (j&128)|(j&64?0:64)|(j&64?32:0)|(j&64?16:0)|(j&64?8:0)|(j&64?4:0)|(j&64?2:0)|(j&64?1:0), (j&64?128:0)|(j&64?64:0)|(j&0x3f), 0); break;
   860ec:	2a09022c 	orr	w12, w17, w9
   860f0:	2a050252 	orr	w18, w18, w5
				case disasm_arg_j12_opt: str+=sprintf(str,!j?"":"lsl #%d", j*12); break;
   860f4:	0b1400ce 	add	w14, w6, w20
				case disasm_arg_Vmzq: str+=sprintf(str,"%s", "V%d.%s", m, disasm_str(quantum,4+(z*2)+q)); break;
   860f8:	b940c7e1 	ldr	w1, [sp, #196]
				case disasm_arg_Vt4H: str+=sprintf(str,"V%d.h V%d.h V%d.h V%d.h[%d]", t, (t+1)&0x1f, (t+2)&0x1f, (t+3)&0x1f, (q<<3)|(s<<2)|z); break;
   860fc:	531e776a 	lsl	w10, w27, #2
				case disasm_arg_j12_opt: str+=sprintf(str,!j?"":"lsl #%d", j*12); break;
   86100:	b900e3ee 	str	w14, [sp, #224]
				case disasm_arg_jz: str+=sprintf(str,z==3?"#0x02x%02x":(z==0?"#0x02x%02x0000":"#0x02x%02x%06x"), z==3?(j&128)|(j&64?0:64)|(j&64?32:0)|(j&64?16:0)|((j>>2)&0xF):(j&128)|(j&64?0:64)|(j&64?32:0)|(j&64?16:0)|(j&64?8:0)|(j&64?4:0)|(j&64?2:0)|(j&(z==0?32:64)?1:0),z==3?(j&3)<<6:(z==0?(j&0x1f)<<3:(j&64?128:0)|(j&64?64:0)|(j&0x3f)), 0); break;
   86104:	12001a91 	and	w17, w20, #0x7f
   86108:	b902b7e2 	str	w2, [sp, #692]
				case disasm_arg_F64: str+=sprintf(str,"#0x02x%02x%06x", (j&128)|(j&64?0:64)|(j&64?32:0)|(j&64?16:0)|(j&64?8:0)|(j&64?4:0)|(j&64?2:0)|(j&64?1:0), (j&64?128:0)|(j&64?64:0)|(j&0x3f), 0); break;
   8610c:	2a0c0242 	orr	w2, w18, w12
   86110:	b90193e2 	str	w2, [sp, #400]
				case disasm_arg_Vnzq2: str+=sprintf(str,"%s", "V%d.%s", n, disasm_str(quantum,2+(z*2)+q)); break;
   86114:	0b070302 	add	w2, w24, w7
   86118:	b90127e2 	str	w2, [sp, #292]
				case disasm_arg_Vmzq: str+=sprintf(str,"%s", "V%d.%s", m, disasm_str(quantum,4+(z*2)+q)); break;
   8611c:	0b010302 	add	w2, w24, w1
				case disasm_arg_j12_opt: str+=sprintf(str,!j?"":"lsl #%d", j*12); break;
   86120:	b940e3e1 	ldr	w1, [sp, #224]
				case disasm_arg_Vt4H: str+=sprintf(str,"V%d.h V%d.h V%d.h V%d.h[%d]", t, (t+1)&0x1f, (t+2)&0x1f, (t+3)&0x1f, (q<<3)|(s<<2)|z); break;
   86124:	2a180d4a 	orr	w10, w10, w24, lsl #3
   86128:	f900d3f5 	str	x21, [sp, #416]
				case disasm_arg_labelij1: str+=sprintf(str,"0x%x", (int)iaddr+(i<<2)+j); break;
   8612c:	0b1402d5 	add	w21, w22, w20
   86130:	b900e7f5 	str	w21, [sp, #228]
				case disasm_arg_jz: str+=sprintf(str,z==3?"#0x02x%02x":(z==0?"#0x02x%02x0000":"#0x02x%02x%06x"), z==3?(j&128)|(j&64?0:64)|(j&64?32:0)|(j&64?16:0)|((j>>2)&0xF):(j&128)|(j&64?0:64)|(j&64?32:0)|(j&64?16:0)|(j&64?8:0)|(j&64?4:0)|(j&64?2:0)|(j&(z==0?32:64)?1:0),z==3?(j&3)<<6:(z==0?(j&0x1f)<<3:(j&64?128:0)|(j&64?64:0)|(j&0x3f)), 0); break;
   86134:	121900c6 	and	w6, w6, #0x80
				case disasm_arg_amountk2_opt: str+=sprintf(str,!k?"":"msl #%d", 1<<(k*3)); break;
   86138:	b94077ef 	ldr	w15, [sp, #116]
   8613c:	52800030 	mov	w16, #0x1                   	// #1
				case disasm_arg_Vmzq: str+=sprintf(str,"%s", "V%d.%s", m, disasm_str(quantum,4+(z*2)+q)); break;
   86140:	b9010be2 	str	w2, [sp, #264]
				case disasm_arg_j12_opt: str+=sprintf(str,!j?"":"lsl #%d", j*12); break;
   86144:	531e7422 	lsl	w2, w1, #2
				case disasm_arg_labelij1: str+=sprintf(str,"0x%x", (int)iaddr+(i<<2)+j); break;
   86148:	b940e7e1 	ldr	w1, [sp, #228]
				case disasm_arg_VmT3: str+=sprintf(str,"%s", "V%d.%s", m, disasm_str(quantum,(z<<1)+3)); break;
   8614c:	531f7ae9 	lsl	w9, w23, #1
				case disasm_arg_labelij1: str+=sprintf(str,"0x%x", (int)iaddr+(i<<2)+j); break;
   86150:	b900c3f6 	str	w22, [sp, #192]
				case disasm_arg_amountk2_opt: str+=sprintf(str,!k?"":"msl #%d", 1<<(k*3)); break;
   86154:	0b0f05ef 	add	w15, w15, w15, lsl #1
				case disasm_arg_labelij1: str+=sprintf(str,"0x%x", (int)iaddr+(i<<2)+j); break;
   86158:	0b1c0021 	add	w1, w1, w28
				case disasm_arg_prf_op: str+=sprintf(str,"%s", "%s L%d %s", disasm_str(prf_typ,(t>>3)&3), ((t>>1)&3)+1, disasm_str(prf_pol,t&1)); break;
   8615c:	d3410b56 	ubfx	x22, x26, #1, #2
				case disasm_arg_amountk2_opt: str+=sprintf(str,!k?"":"msl #%d", 1<<(k*3)); break;
   86160:	b900d7ef 	str	w15, [sp, #212]
				case disasm_arg_shift8: str+=sprintf(str,"#%d", 1<<(z+3)); break;
   86164:	0b1e02ef 	add	w15, w23, w30
   86168:	b900d3ef 	str	w15, [sp, #208]
				case disasm_arg_is4_opt: str+=sprintf(str,!i?"":"#0x%x", i<<(2+s)); break;
   8616c:	0b00036e 	add	w14, w27, w0
				case disasm_arg_prf_op: str+=sprintf(str,"%s", "%s L%d %s", disasm_str(prf_typ,(t>>3)&3), ((t>>1)&3)+1, disasm_str(prf_pol,t&1)); break;
   86170:	f9006ff6 	str	x22, [sp, #216]
				case disasm_arg_Vtz: str+=sprintf(str,"%s", "V%d.%s", t, disasm_str(quantum,4+(z*2))); break;
   86174:	0b0002ef 	add	w15, w23, w0
				case disasm_arg_labelij1: str+=sprintf(str,"0x%x", (int)iaddr+(i<<2)+j); break;
   86178:	b9015fe1 	str	w1, [sp, #348]
				case disasm_arg_Vt4H: str+=sprintf(str,"V%d.h V%d.h V%d.h V%d.h[%d]", t, (t+1)&0x1f, (t+2)&0x1f, (t+3)&0x1f, (q<<3)|(s<<2)|z); break;
   8617c:	2a170141 	orr	w1, w10, w23
   86180:	b900cbe1 	str	w1, [sp, #200]
				case disasm_arg_labelij1: str+=sprintf(str,"0x%x", (int)iaddr+(i<<2)+j); break;
   86184:	910b03f5 	add	x21, sp, #0x2c0
				case disasm_arg_j12_opt: str+=sprintf(str,!j?"":"lsl #%d", j*12); break;
   86188:	b902a3e2 	str	w2, [sp, #672]
				case disasm_arg_jz: str+=sprintf(str,z==3?"#0x02x%02x":(z==0?"#0x02x%02x0000":"#0x02x%02x%06x"), z==3?(j&128)|(j&64?0:64)|(j&64?32:0)|(j&64?16:0)|((j>>2)&0xF):(j&128)|(j&64?0:64)|(j&64?32:0)|(j&64?16:0)|(j&64?8:0)|(j&64?4:0)|(j&64?2:0)|(j&(z==0?32:64)?1:0),z==3?(j&3)<<6:(z==0?(j&0x1f)<<3:(j&64?128:0)|(j&64?64:0)|(j&0x3f)), 0); break;
   8618c:	2a1100c2 	orr	w2, w6, w17
   86190:	b9015be2 	str	w2, [sp, #344]
			if(op&&args[op-1]!=disasm_arg_offs&&args[op]!=disasm_arg_offe) { *str++=','; *str++=' '; }
   86194:	12003ea2 	and	w2, w21, #0xffff
				case disasm_arg_labeli4: str+=sprintf(str,"0x%x", (int)iaddr+(i<<2)); break;
   86198:	b940c3ec 	ldr	w12, [sp, #192]
   8619c:	910026b6 	add	x22, x21, #0x9
				case disasm_arg_iz4_opt: str+=sprintf(str,!i?"":"#0x%x", i<<(2+z)); break;
   861a0:	b9407be0 	ldr	w0, [sp, #120]
				case disasm_arg_labeli4: str+=sprintf(str,"0x%x", (int)iaddr+(i<<2)); break;
   861a4:	0b1c0181 	add	w1, w12, w28
   861a8:	b90167e1 	str	w1, [sp, #356]
				case disasm_arg_amountk2_opt: str+=sprintf(str,!k?"":"msl #%d", 1<<(k*3)); break;
   861ac:	394353e1 	ldrb	w1, [sp, #212]
   861b0:	b900e7fb 	str	w27, [sp, #228]
   861b4:	1ac12201 	lsl	w1, w16, w1
   861b8:	b90143e1 	str	w1, [sp, #320]
				case disasm_arg_VmT3: str+=sprintf(str,"%s", "V%d.%s", m, disasm_str(quantum,(z<<1)+3)); break;
   861bc:	0b1e0121 	add	w1, w9, w30
   861c0:	b9010fe1 	str	w1, [sp, #268]
				case disasm_arg_shift8: str+=sprintf(str,"#%d", 1<<(z+3)); break;
   861c4:	394343e1 	ldrb	w1, [sp, #208]
   861c8:	1ac12201 	lsl	w1, w16, w1
   861cc:	b9018be1 	str	w1, [sp, #392]
				case disasm_arg_Vnz3: str+=sprintf(str,"%s", "V%d.%s", n, disasm_str(quantum,(z<<1)+6)); break;
   861d0:	11001921 	add	w1, w9, #0x6
   861d4:	b90123e1 	str	w1, [sp, #288]
				case disasm_arg_z: str+=sprintf(str,"#%d", 1<<z); break;
   861d8:	1ad72201 	lsl	w1, w16, w23
   861dc:	b9016be1 	str	w1, [sp, #360]
				case disasm_arg_VmT: str+=sprintf(str,"%s", "V%d.%s", m, disasm_str(quantum,(z<<1)|q)); break;
   861e0:	2a090301 	orr	w1, w24, w9
   861e4:	b900e3e1 	str	w1, [sp, #224]
				case disasm_arg_iz4_opt: str+=sprintf(str,!i?"":"#0x%x", i<<(2+z)); break;
   861e8:	1acf2001 	lsl	w1, w0, w15
   861ec:	b90187e1 	str	w1, [sp, #388]
				case disasm_arg_is4_opt: str+=sprintf(str,!i?"":"#0x%x", i<<(2+s)); break;
   861f0:	1ace2000 	lsl	w0, w0, w14
   861f4:	b90183e0 	str	w0, [sp, #384]
				case disasm_arg_jz: str+=sprintf(str,z==3?"#0x02x%02x":(z==0?"#0x02x%02x0000":"#0x02x%02x%06x"), z==3?(j&128)|(j&64?0:64)|(j&64?32:0)|(j&64?16:0)|((j>>2)&0xF):(j&128)|(j&64?0:64)|(j&64?32:0)|(j&64?16:0)|(j&64?8:0)|(j&64?4:0)|(j&64?2:0)|(j&(z==0?32:64)?1:0),z==3?(j&3)<<6:(z==0?(j&0x1f)<<3:(j&64?128:0)|(j&64?64:0)|(j&0x3f)), 0); break;
   861f8:	f0000060 	adrp	x0, 95000 <sd_init+0x3470>
   861fc:	91110000 	add	x0, x0, #0x440
   86200:	f900abe0 	str	x0, [sp, #336]
   86204:	531a0680 	ubfiz	w0, w20, #6, #2
   86208:	b9014be0 	str	w0, [sp, #328]
   8620c:	531d1280 	ubfiz	w0, w20, #3, #5
   86210:	b9014fe0 	str	w0, [sp, #332]
				case disasm_arg_FPjn2: str+=sprintf(str,"%c%d", (j>>3)==1?'b':((j>>4)==1?'h':((j>>5)==1?'s':'d')), n); break;
   86214:	53037e80 	lsr	w0, w20, #3
   86218:	b900d7e0 	str	w0, [sp, #212]
   8621c:	53047e80 	lsr	w0, w20, #4
				case disasm_arg_prf_op: str+=sprintf(str,"%s", "%s L%d %s", disasm_str(prf_typ,(t>>3)&3), ((t>>1)&3)+1, disasm_str(prf_pol,t&1)); break;
   86220:	b940dbe1 	ldr	w1, [sp, #216]
				case disasm_arg_FPjn2: str+=sprintf(str,"%c%d", (j>>3)==1?'b':((j>>4)==1?'h':((j>>5)==1?'s':'d')), n); break;
   86224:	b900dbe0 	str	w0, [sp, #216]
   86228:	53057e80 	lsr	w0, w20, #5
   8622c:	b9011fe0 	str	w0, [sp, #284]
				case disasm_arg_prf_op: str+=sprintf(str,"%s", "%s L%d %s", disasm_str(prf_typ,(t>>3)&3), ((t>>1)&3)+1, disasm_str(prf_pol,t&1)); break;
   86230:	53037f40 	lsr	w0, w26, #3
   86234:	b9017be0 	str	w0, [sp, #376]
				case disasm_arg_Vt4S: str+=sprintf(str,"V%d.s V%d.s V%d.s V%d.s[%d]", t, (t+1)&0x1f, (t+2)&0x1f, (t+3)&0x1f, (q<<1)|s); break;
   86238:	2a180760 	orr	w0, w27, w24, lsl #1
				case disasm_arg_prf_op: str+=sprintf(str,"%s", "%s L%d %s", disasm_str(prf_typ,(t>>3)&3), ((t>>1)&3)+1, disasm_str(prf_pol,t&1)); break;
   8623c:	0b100021 	add	w1, w1, w16
   86240:	aa1503fb 	mov	x27, x21
   86244:	2a1403f5 	mov	w21, w20
				case disasm_arg_Vt4S: str+=sprintf(str,"V%d.s V%d.s V%d.s V%d.s[%d]", t, (t+1)&0x1f, (t+2)&0x1f, (t+3)&0x1f, (q<<1)|s); break;
   86248:	b90103e0 	str	w0, [sp, #256]
				case disasm_arg_j16_opt: str+=sprintf(str,!j?"":"lsl #%d", j*16); break;
   8624c:	531c6e80 	lsl	w0, w20, #4
   86250:	2a0203f4 	mov	w20, w2
   86254:	b90163e0 	str	w0, [sp, #352]
				case disasm_arg_prf_op: str+=sprintf(str,"%s", "%s L%d %s", disasm_str(prf_typ,(t>>3)&3), ((t>>1)&3)+1, disasm_str(prf_pol,t&1)); break;
   86258:	b9017fe1 	str	w1, [sp, #380]
			switch(args[op]) {
   8625c:	90000061 	adrp	x1, 92000 <sd_init+0x470>
   86260:	910c2021 	add	x1, x1, #0x308
   86264:	f90053e1 	str	x1, [sp, #160]
		for(op=0;op<sizeof(args) && args[op]!=disasm_arg_NONE;op++) {
   86268:	39400360 	ldrb	w0, [x27]
   8626c:	34000880 	cbz	w0, 8637c <disasm+0x239c>
			if(op&&args[op-1]!=disasm_arg_offs&&args[op]!=disasm_arg_offe) { *str++=','; *str++=' '; }
   86270:	6b3b229f 	cmp	w20, w27, uxth
   86274:	54000100 	b.eq	86294 <disasm+0x22b4>  // b.none
   86278:	385ff362 	ldurb	w2, [x27, #-1]
   8627c:	52800561 	mov	w1, #0x2b                  	// #43
   86280:	7100a45f 	cmp	w2, #0x29
   86284:	7a411004 	ccmp	w0, w1, #0x4, ne  // ne = any
   86288:	54000060 	b.eq	86294 <disasm+0x22b4>  // b.none
   8628c:	52840581 	mov	w1, #0x202c                	// #8236
   86290:	78002661 	strh	w1, [x19], #2
			switch(args[op]) {
   86294:	51000c00 	sub	w0, w0, #0x3
   86298:	7102fc1f 	cmp	w0, #0xbf
   8629c:	54000628 	b.hi	86360 <disasm+0x2380>  // b.pmore
   862a0:	f94053e1 	ldr	x1, [sp, #160]
   862a4:	78605820 	ldrh	w0, [x1, w0, uxtw #1]
   862a8:	10000061 	adr	x1, 862b4 <disasm+0x22d4>
   862ac:	8b20a820 	add	x0, x1, w0, sxth #2
   862b0:	d61f0000 	br	x0
		names="stxrb\0stlxrb\0?\0?\0?\0?\0?\0?\0?\0?\0casb\0caslb\0?\0?\0casab\0casalb\0";
   862b4:	90000063 	adrp	x3, 92000 <sd_init+0x470>
   862b8:	91122063 	add	x3, x3, #0x488
		op=((ic32_20)&0xe)|((ic32_15)&0x1); d=((ic32_16)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   862bc:	121f0901 	and	w1, w8, #0xe
   862c0:	120000c6 	and	w6, w6, #0x1
   862c4:	1200101a 	and	w26, w0, #0x1f
		names="stxrb\0stlxrb\0?\0?\0?\0?\0?\0?\0?\0?\0casb\0caslb\0?\0?\0casab\0casalb\0";
   862c8:	913e4060 	add	x0, x3, #0xf90
		args[0]=disasm_arg_Wd; args[1]=disasm_arg_Wt; args[2]=disasm_arg_offs; args[3]=disasm_arg_XnS; args[4]=disasm_arg_offe; 
   862cc:	528a6a43 	mov	w3, #0x5352                	// #21330
		op=((ic32_20)&0xe)|((ic32_15)&0x1); d=((ic32_16)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   862d0:	120010a4 	and	w4, w5, #0x1f
   862d4:	12001059 	and	w25, w2, #0x1f
		args[0]=disasm_arg_Wd; args[1]=disasm_arg_Wt; args[2]=disasm_arg_offs; args[3]=disasm_arg_XnS; args[4]=disasm_arg_offe; 
   862d8:	72a54523 	movk	w3, #0x2a29, lsl #16
   862dc:	52800562 	mov	w2, #0x2b                  	// #43
		op=((ic32_20)&0xe)|((ic32_15)&0x1); d=((ic32_16)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   862e0:	2a060021 	orr	w1, w1, w6
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   862e4:	52800017 	mov	w23, #0x0                   	// #0
   862e8:	52800018 	mov	w24, #0x0                   	// #0
   862ec:	5280001b 	mov	w27, #0x0                   	// #0
	uint16_t op=0, om=0, j=0;
   862f0:	52800014 	mov	w20, #0x0                   	// #0
	uint32_t i=0;
   862f4:	290effff 	stp	wzr, wzr, [sp, #116]
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   862f8:	290fffff 	stp	wzr, wzr, [sp, #124]
   862fc:	29117fe4 	stp	w4, wzr, [sp, #136]
   86300:	29127fff 	stp	wzr, wzr, [sp, #144]
   86304:	b9009bff 	str	wzr, [sp, #152]
		args[0]=disasm_arg_Wd; args[1]=disasm_arg_Wt; args[2]=disasm_arg_offs; args[3]=disasm_arg_XnS; args[4]=disasm_arg_offe; 
   86308:	b902c3e3 	str	w3, [sp, #704]
   8630c:	390b13e2 	strb	w2, [sp, #708]
   86310:	17fffe54 	b	85c60 <disasm+0x1c80>
				case disasm_arg_FPst: str+=sprintf(str,"%c%d", s==1?'q':(z==3?'d':(z==2?'s':(z==1?'h':'b'))), t); break;
   86314:	b940e7e0 	ldr	w0, [sp, #228]
   86318:	52800e22 	mov	w2, #0x71                  	// #113
   8631c:	35000160 	cbnz	w0, 86348 <disasm+0x2368>
   86320:	71000eff 	cmp	w23, #0x3
   86324:	52800c82 	mov	w2, #0x64                  	// #100
   86328:	54000100 	b.eq	86348 <disasm+0x2368>  // b.none
   8632c:	71000aff 	cmp	w23, #0x2
   86330:	52800e62 	mov	w2, #0x73                  	// #115
   86334:	540000a0 	b.eq	86348 <disasm+0x2368>  // b.none
   86338:	710006ff 	cmp	w23, #0x1
   8633c:	52800d02 	mov	w2, #0x68                  	// #104
   86340:	52800c40 	mov	w0, #0x62                  	// #98
   86344:	1a800042 	csel	w2, w2, w0, eq  // eq = none
   86348:	f94057e1 	ldr	x1, [sp, #168]
   8634c:	aa1303e0 	mov	x0, x19
   86350:	2a1a03e3 	mov	w3, w26
   86354:	97ffeead 	bl	81e08 <sprintf>
   86358:	8b204273 	add	x19, x19, w0, uxtw
   8635c:	d503201f 	nop
				case disasm_arg_FPz5d: str+=sprintf(str,"%c%d", z==1?'d':(z==0?'s':'h'), d); break;
				default: break;
			}
			if(*(str-2)==',')str-=2;
   86360:	aa1303e0 	mov	x0, x19
   86364:	9100077b 	add	x27, x27, #0x1
   86368:	385fec01 	ldrb	w1, [x0, #-2]!
   8636c:	7100b03f 	cmp	w1, #0x2c
   86370:	9a930013 	csel	x19, x0, x19, eq  // eq = none
		for(op=0;op<sizeof(args) && args[op]!=disasm_arg_NONE;op++) {
   86374:	eb1b02df 	cmp	x22, x27
   86378:	54fff781 	b.ne	86268 <disasm+0x2288>  // b.any
		}
		*str=0;
   8637c:	3900027f 	strb	wzr, [x19]
   86380:	a9435bf5 	ldp	x21, x22, [sp, #48]
	}
	return addr+4;
   86384:	91001381 	add	x1, x28, #0x4
}
   86388:	aa0103e0 	mov	x0, x1
   8638c:	a9417bfd 	ldp	x29, x30, [sp, #16]
   86390:	a94253f3 	ldp	x19, x20, [sp, #32]
	return addr+4;
   86394:	a94463f7 	ldp	x23, x24, [sp, #64]
   86398:	a9456bf9 	ldp	x25, x26, [sp, #80]
}
   8639c:	a94673fb 	ldp	x27, x28, [sp, #96]
   863a0:	910b43ff 	add	sp, sp, #0x2d0
   863a4:	d65f03c0 	ret
	uint16_t op=0, om=0, j=0;
   863a8:	52800002 	mov	w2, #0x0                   	// #0
   863ac:	d503201f 	nop
		while(*((uint32_t*)addr)==ic32) { op++; addr+=4; }
   863b0:	b8404f81 	ldr	w1, [x28, #4]!
   863b4:	11000442 	add	w2, w2, #0x1
   863b8:	12003c42 	and	w2, w2, #0xffff
   863bc:	6b00003f 	cmp	w1, w0
   863c0:	54ffff80 	b.eq	863b0 <disasm+0x23d0>  // b.none
		if(str!=NULL) str+=sprintf(str,"  %d x nop",op);
   863c4:	b404ddb3 	cbz	x19, 8ff78 <disasm+0xbf98>
   863c8:	aa1303e0 	mov	x0, x19
   863cc:	f0000061 	adrp	x1, 95000 <sd_init+0x3470>
   863d0:	91114021 	add	x1, x1, #0x450
   863d4:	97ffee8d 	bl	81e08 <sprintf>
		*str=0;
   863d8:	38204a7f 	strb	wzr, [x19, w0, uxtw]
		while(*((uint32_t*)addr)==ic32) { op++; addr+=4; }
   863dc:	aa1c03e1 	mov	x1, x28
}
   863e0:	aa0103e0 	mov	x0, x1
   863e4:	a9417bfd 	ldp	x29, x30, [sp, #16]
   863e8:	a94253f3 	ldp	x19, x20, [sp, #32]
   863ec:	a94673fb 	ldp	x27, x28, [sp, #96]
   863f0:	910b43ff 	add	sp, sp, #0x2d0
   863f4:	d65f03c0 	ret
		names="fcvtn\0";
   863f8:	90000061 	adrp	x1, 92000 <sd_init+0x470>
   863fc:	91122021 	add	x1, x1, #0x488
		z=((ic32_22)&0x1); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   86400:	12001059 	and	w25, w2, #0x1f
   86404:	1200101a 	and	w26, w0, #0x1f
		args[0]=disasm_arg_Vtzq2; args[1]=disasm_arg_Vnz3; 
   86408:	128b0b42 	mov	w2, #0xffffa7a5            	// #-22619
		names="fcvtn\0";
   8640c:	913f4020 	add	x0, x1, #0xfd0
		z=((ic32_22)&0x1); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   86410:	120000f7 	and	w23, w7, #0x1
		q=0;
   86414:	52800018 	mov	w24, #0x0                   	// #0
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   86418:	5280001b 	mov	w27, #0x0                   	// #0
	uint16_t op=0, om=0, j=0;
   8641c:	52800014 	mov	w20, #0x0                   	// #0
   86420:	52800001 	mov	w1, #0x0                   	// #0
	uint32_t i=0;
   86424:	290effff 	stp	wzr, wzr, [sp, #116]
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   86428:	290fffff 	stp	wzr, wzr, [sp, #124]
   8642c:	29117fff 	stp	wzr, wzr, [sp, #136]
   86430:	29127fff 	stp	wzr, wzr, [sp, #144]
   86434:	b9009bff 	str	wzr, [sp, #152]
		args[0]=disasm_arg_Vtzq2; args[1]=disasm_arg_Vnz3; 
   86438:	790583e2 	strh	w2, [sp, #704]
   8643c:	17fffe09 	b	85c60 <disasm+0x1c80>
		names="xtn\0";
   86440:	90000061 	adrp	x1, 92000 <sd_init+0x470>
   86444:	91122021 	add	x1, x1, #0x488
		z=((ic32_22)&0x3); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   86448:	12001059 	and	w25, w2, #0x1f
   8644c:	1200101a 	and	w26, w0, #0x1f
		args[0]=disasm_arg_VtT; args[1]=disasm_arg_VnT2; 
   86450:	128b3b42 	mov	w2, #0xffffa625            	// #-23003
		names="xtn\0";
   86454:	913f8020 	add	x0, x1, #0xfe0
		z=((ic32_22)&0x3); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   86458:	120004f7 	and	w23, w7, #0x3
		q=0;
   8645c:	52800018 	mov	w24, #0x0                   	// #0
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   86460:	5280001b 	mov	w27, #0x0                   	// #0
	uint16_t op=0, om=0, j=0;
   86464:	52800014 	mov	w20, #0x0                   	// #0
   86468:	52800001 	mov	w1, #0x0                   	// #0
	uint32_t i=0;
   8646c:	290effff 	stp	wzr, wzr, [sp, #116]
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   86470:	290fffff 	stp	wzr, wzr, [sp, #124]
   86474:	29117fff 	stp	wzr, wzr, [sp, #136]
   86478:	29127fff 	stp	wzr, wzr, [sp, #144]
   8647c:	b9009bff 	str	wzr, [sp, #152]
		args[0]=disasm_arg_VtT; args[1]=disasm_arg_VnT2; 
   86480:	790583e2 	strh	w2, [sp, #704]
   86484:	17fffdf7 	b	85c60 <disasm+0x1c80>
		names="fcvtl\0";
   86488:	90000061 	adrp	x1, 92000 <sd_init+0x470>
   8648c:	91122021 	add	x1, x1, #0x488
		z=((ic32_22)&0x1); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   86490:	12001059 	and	w25, w2, #0x1f
   86494:	1200101a 	and	w26, w0, #0x1f
		args[0]=disasm_arg_Vtz3; args[1]=disasm_arg_Vnzq2; 
   86498:	128aeca2 	mov	w2, #0xffffa89a            	// #-22374
		names="fcvtl\0";
   8649c:	913f6020 	add	x0, x1, #0xfd8
		z=((ic32_22)&0x1); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   864a0:	120000f7 	and	w23, w7, #0x1
		q=0;
   864a4:	52800018 	mov	w24, #0x0                   	// #0
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   864a8:	5280001b 	mov	w27, #0x0                   	// #0
	uint16_t op=0, om=0, j=0;
   864ac:	52800014 	mov	w20, #0x0                   	// #0
   864b0:	52800001 	mov	w1, #0x0                   	// #0
	uint32_t i=0;
   864b4:	290effff 	stp	wzr, wzr, [sp, #116]
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   864b8:	290fffff 	stp	wzr, wzr, [sp, #124]
   864bc:	29117fff 	stp	wzr, wzr, [sp, #136]
   864c0:	29127fff 	stp	wzr, wzr, [sp, #144]
   864c4:	b9009bff 	str	wzr, [sp, #152]
		args[0]=disasm_arg_Vtz3; args[1]=disasm_arg_Vnzq2; 
   864c8:	790583e2 	strh	w2, [sp, #704]
   864cc:	17fffde5 	b	85c60 <disasm+0x1c80>
char *disasm_str(char*s,int n) {if(!s)return "?";while(n){s++;if(!*s){s++;n--;}}return *s?s:"?";};
   864d0:	f0000064 	adrp	x4, 95000 <sd_init+0x3470>
   864d4:	91108084 	add	x4, x4, #0x420
   864d8:	17fffde7 	b	85c74 <disasm+0x1c94>
		names="shll\0";
   864dc:	90000061 	adrp	x1, 92000 <sd_init+0x470>
   864e0:	91122021 	add	x1, x1, #0x488
		z=((ic32_22)&0x3); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   864e4:	12001059 	and	w25, w2, #0x1f
   864e8:	1200101a 	and	w26, w0, #0x1f
		args[0]=disasm_arg_Vtz; args[1]=disasm_arg_VnT; args[2]=disasm_arg_shift8; 
   864ec:	128f6e23 	mov	w3, #0xffff848e            	// #-31602
		names="shll\0";
   864f0:	913fa020 	add	x0, x1, #0xfe8
		args[0]=disasm_arg_Vtz; args[1]=disasm_arg_VnT; args[2]=disasm_arg_shift8; 
   864f4:	12800ac2 	mov	w2, #0xffffffa9            	// #-87
		z=((ic32_22)&0x3); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   864f8:	120004f7 	and	w23, w7, #0x3
		q=0;
   864fc:	52800018 	mov	w24, #0x0                   	// #0
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   86500:	5280001b 	mov	w27, #0x0                   	// #0
	uint16_t op=0, om=0, j=0;
   86504:	52800014 	mov	w20, #0x0                   	// #0
   86508:	52800001 	mov	w1, #0x0                   	// #0
	uint32_t i=0;
   8650c:	290effff 	stp	wzr, wzr, [sp, #116]
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   86510:	290fffff 	stp	wzr, wzr, [sp, #124]
   86514:	29117fff 	stp	wzr, wzr, [sp, #136]
   86518:	29127fff 	stp	wzr, wzr, [sp, #144]
   8651c:	b9009bff 	str	wzr, [sp, #152]
		args[0]=disasm_arg_Vtz; args[1]=disasm_arg_VnT; args[2]=disasm_arg_shift8; 
   86520:	790583e3 	strh	w3, [sp, #704]
   86524:	390b0be2 	strb	w2, [sp, #706]
   86528:	17fffdce 	b	85c60 <disasm+0x1c80>
		op=((ic32_14)&0x1); j=((ic32_9)&0x4)|((ic32_20)&0x3); m=((ic32_16)&0xf); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8652c:	121e01ef 	and	w15, w15, #0x4
   86530:	12000508 	and	w8, w8, #0x3
		names="smlal\0smlsl\0";
   86534:	b0000063 	adrp	x3, 93000 <sd_init+0x1470>
   86538:	91162063 	add	x3, x3, #0x588
		op=((ic32_14)&0x1); j=((ic32_9)&0x4)|((ic32_20)&0x3); m=((ic32_16)&0xf); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8653c:	12000ca4 	and	w4, w5, #0xf
   86540:	12001059 	and	w25, w2, #0x1f
   86544:	1200101a 	and	w26, w0, #0x1f
		args[0]=disasm_arg_Vtz3; args[1]=disasm_arg_VnT; args[2]=disasm_arg_VmTs; 
   86548:	12800c82 	mov	w2, #0xffffff9b            	// #-101
		names="smlal\0smlsl\0";
   8654c:	d103c060 	sub	x0, x3, #0xf0
		op=((ic32_14)&0x1); j=((ic32_9)&0x4)|((ic32_20)&0x3); m=((ic32_16)&0xf); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   86550:	2a0801f4 	orr	w20, w15, w8
		args[0]=disasm_arg_Vtz3; args[1]=disasm_arg_VnT; args[2]=disasm_arg_VmTs; 
   86554:	128f6ca3 	mov	w3, #0xffff849a            	// #-31590
		op=((ic32_14)&0x1); j=((ic32_9)&0x4)|((ic32_20)&0x3); m=((ic32_16)&0xf); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   86558:	12000221 	and	w1, w17, #0x1
		z=1;q=0;
   8655c:	52800037 	mov	w23, #0x1                   	// #1
   86560:	52800018 	mov	w24, #0x0                   	// #0
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   86564:	5280001b 	mov	w27, #0x0                   	// #0
	uint32_t i=0;
   86568:	290effff 	stp	wzr, wzr, [sp, #116]
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8656c:	290fffe4 	stp	w4, wzr, [sp, #124]
   86570:	29117fff 	stp	wzr, wzr, [sp, #136]
   86574:	29127fff 	stp	wzr, wzr, [sp, #144]
   86578:	b9009bff 	str	wzr, [sp, #152]
		args[0]=disasm_arg_Vtz3; args[1]=disasm_arg_VnT; args[2]=disasm_arg_VmTs; 
   8657c:	790583e3 	strh	w3, [sp, #704]
   86580:	390b0be2 	strb	w2, [sp, #706]
   86584:	17fffdb7 	b	85c60 <disasm+0x1c80>
				case disasm_arg_FPz5d: str+=sprintf(str,"%c%d", z==1?'d':(z==0?'s':'h'), d); break;
   86588:	710006ff 	cmp	w23, #0x1
   8658c:	52800c82 	mov	w2, #0x64                  	// #100
   86590:	540000a0 	b.eq	865a4 <disasm+0x25c4>  // b.none
   86594:	710002ff 	cmp	w23, #0x0
   86598:	52800e62 	mov	w2, #0x73                  	// #115
   8659c:	52800d00 	mov	w0, #0x68                  	// #104
   865a0:	1a800042 	csel	w2, w2, w0, eq  // eq = none
   865a4:	b9408be3 	ldr	w3, [sp, #136]
   865a8:	aa1303e0 	mov	x0, x19
   865ac:	f94057e1 	ldr	x1, [sp, #168]
   865b0:	97ffee16 	bl	81e08 <sprintf>
   865b4:	8b204273 	add	x19, x19, w0, uxtw
   865b8:	17ffff6a 	b	86360 <disasm+0x2380>
				case disasm_arg_Xt: str+=sprintf(str,t==31?"xzr":"x%d", t); break;
   865bc:	f940cfe1 	ldr	x1, [sp, #408]
   865c0:	aa1303e0 	mov	x0, x19
   865c4:	2a1a03e2 	mov	w2, w26
   865c8:	97ffee10 	bl	81e08 <sprintf>
   865cc:	8b204273 	add	x19, x19, w0, uxtw
   865d0:	17ffff64 	b	86360 <disasm+0x2380>
				case disasm_arg_labelij1: str+=sprintf(str,"0x%x", (int)iaddr+(i<<2)+j); break;
   865d4:	b9415fe2 	ldr	w2, [sp, #348]
   865d8:	aa1303e0 	mov	x0, x19
   865dc:	f0000061 	adrp	x1, 95000 <sd_init+0x3470>
   865e0:	9113a021 	add	x1, x1, #0x4e8
   865e4:	97ffee09 	bl	81e08 <sprintf>
   865e8:	8b204273 	add	x19, x19, w0, uxtw
   865ec:	17ffff5d 	b	86360 <disasm+0x2380>
				case disasm_arg_RtS: str+=sprintf(str,t==31?"%csp":"%c%d", (s?'x':'w'), t); break;
   865f0:	b940f3e2 	ldr	w2, [sp, #240]
   865f4:	aa1303e0 	mov	x0, x19
   865f8:	f940d3e1 	ldr	x1, [sp, #416]
   865fc:	2a1a03e3 	mov	w3, w26
   86600:	97ffee02 	bl	81e08 <sprintf>
   86604:	8b204273 	add	x19, x19, w0, uxtw
   86608:	17ffff56 	b	86360 <disasm+0x2380>
				case disasm_arg_RnS: str+=sprintf(str,n==31?"%csp":"%c%d", (s?'x':'w'), n); break;
   8660c:	b940f3e2 	ldr	w2, [sp, #240]
   86610:	aa1303e0 	mov	x0, x19
   86614:	f940d7e1 	ldr	x1, [sp, #424]
   86618:	2a1903e3 	mov	w3, w25
   8661c:	97ffedfb 	bl	81e08 <sprintf>
   86620:	8b204273 	add	x19, x19, w0, uxtw
   86624:	17ffff4f 	b	86360 <disasm+0x2380>
				case disasm_arg_i: str+=sprintf(str,"#0x%x", i); break;
   86628:	b9407be2 	ldr	w2, [sp, #120]
   8662c:	aa1303e0 	mov	x0, x19
   86630:	f9405fe1 	ldr	x1, [sp, #184]
   86634:	97ffedf5 	bl	81e08 <sprintf>
   86638:	8b204273 	add	x19, x19, w0, uxtw
   8663c:	17ffff49 	b	86360 <disasm+0x2380>
				case disasm_arg_j12_opt: str+=sprintf(str,!j?"":"lsl #%d", j*12); break;
   86640:	b942a3e2 	ldr	w2, [sp, #672]
   86644:	aa1303e0 	mov	x0, x19
   86648:	f94097e1 	ldr	x1, [sp, #296]
   8664c:	97ffedef 	bl	81e08 <sprintf>
   86650:	8b204273 	add	x19, x19, w0, uxtw
   86654:	17ffff43 	b	86360 <disasm+0x2380>
				case disasm_arg_Rn: str+=sprintf(str,n==31?"%czr":"%c%d", (s?'x':'w'), n); break;
   86658:	b940f3e2 	ldr	w2, [sp, #240]
   8665c:	aa1303e0 	mov	x0, x19
   86660:	f9409fe1 	ldr	x1, [sp, #312]
   86664:	2a1903e3 	mov	w3, w25
   86668:	97ffede8 	bl	81e08 <sprintf>
   8666c:	8b204273 	add	x19, x19, w0, uxtw
   86670:	17ffff3c 	b	86360 <disasm+0x2380>
				case disasm_arg_ib: str+=sprintf(str,"#0x%lx", disasm_dbm(k,j,i)); break;
   86674:	294e8be0 	ldp	w0, w2, [sp, #116]
   86678:	2a1503e1 	mov	w1, w21
   8667c:	97fff633 	bl	83f48 <disasm_dbm>
   86680:	aa0003e2 	mov	x2, x0
   86684:	f0000061 	adrp	x1, 95000 <sd_init+0x3470>
   86688:	aa1303e0 	mov	x0, x19
   8668c:	9113c021 	add	x1, x1, #0x4f0
   86690:	97ffedde 	bl	81e08 <sprintf>
   86694:	8b204273 	add	x19, x19, w0, uxtw
   86698:	17ffff32 	b	86360 <disasm+0x2380>
				case disasm_arg_Rt: str+=sprintf(str,t==31?"%czr":"%c%d", (s?'x':'w'), t); break;
   8669c:	b940f3e2 	ldr	w2, [sp, #240]
   866a0:	aa1303e0 	mov	x0, x19
   866a4:	f9409be1 	ldr	x1, [sp, #304]
   866a8:	2a1a03e3 	mov	w3, w26
   866ac:	97ffedd7 	bl	81e08 <sprintf>
   866b0:	8b204273 	add	x19, x19, w0, uxtw
   866b4:	17ffff2b 	b	86360 <disasm+0x2380>
				case disasm_arg_j16_opt: str+=sprintf(str,!j?"":"lsl #%d", j*16); break;
   866b8:	b94163e2 	ldr	w2, [sp, #352]
   866bc:	aa1303e0 	mov	x0, x19
   866c0:	f94097e1 	ldr	x1, [sp, #296]
   866c4:	97ffedd1 	bl	81e08 <sprintf>
   866c8:	8b204273 	add	x19, x19, w0, uxtw
   866cc:	17ffff25 	b	86360 <disasm+0x2380>
				case disasm_arg_j: str+=sprintf(str,"#0x%x", j); break;
   866d0:	f9405fe1 	ldr	x1, [sp, #184]
   866d4:	aa1303e0 	mov	x0, x19
   866d8:	2a1503e2 	mov	w2, w21
   866dc:	97ffedcb 	bl	81e08 <sprintf>
   866e0:	8b204273 	add	x19, x19, w0, uxtw
   866e4:	17ffff1f 	b	86360 <disasm+0x2380>
				case disasm_arg_Rm: str+=sprintf(str,m==31?"%czr":"%c%d", (s?'x':'w'), m); break;
   866e8:	b9407fe3 	ldr	w3, [sp, #124]
   866ec:	aa1303e0 	mov	x0, x19
   866f0:	b940f3e2 	ldr	w2, [sp, #240]
   866f4:	f9408be1 	ldr	x1, [sp, #272]
   866f8:	97ffedc4 	bl	81e08 <sprintf>
   866fc:	8b204273 	add	x19, x19, w0, uxtw
   86700:	17ffff18 	b	86360 <disasm+0x2380>
char *disasm_str(char*s,int n) {if(!s)return "?";while(n){s++;if(!*s){s++;n--;}}return *s?s:"?";};
   86704:	b9408fe1 	ldr	w1, [sp, #140]
   86708:	f9405be0 	ldr	x0, [sp, #176]
   8670c:	9129e000 	add	x0, x0, #0xa78
   86710:	97fff390 	bl	83550 <disasm_str.part.0>
				case disasm_arg_c: str+=sprintf(str,"%s", disasm_str(conds,c)); break;
   86714:	f0000061 	adrp	x1, 95000 <sd_init+0x3470>
   86718:	aa0003e2 	mov	x2, x0
   8671c:	9113e021 	add	x1, x1, #0x4f8
   86720:	aa1303e0 	mov	x0, x19
   86724:	97ffedb9 	bl	81e08 <sprintf>
   86728:	8b204273 	add	x19, x19, w0, uxtw
   8672c:	17ffff0d 	b	86360 <disasm+0x2380>
				case disasm_arg_labeli4: str+=sprintf(str,"0x%x", (int)iaddr+(i<<2)); break;
   86730:	b94167e2 	ldr	w2, [sp, #356]
   86734:	aa1303e0 	mov	x0, x19
   86738:	f0000061 	adrp	x1, 95000 <sd_init+0x3470>
   8673c:	9113a021 	add	x1, x1, #0x4e8
   86740:	97ffedb2 	bl	81e08 <sprintf>
   86744:	8b204273 	add	x19, x19, w0, uxtw
   86748:	17ffff06 	b	86360 <disasm+0x2380>
				case disasm_arg_i_opt: str+=sprintf(str,!i?"":"#0x%x", i); break;
   8674c:	b9407be2 	ldr	w2, [sp, #120]
   86750:	aa1303e0 	mov	x0, x19
   86754:	f9407fe1 	ldr	x1, [sp, #248]
   86758:	97ffedac 	bl	81e08 <sprintf>
   8675c:	8b204273 	add	x19, x19, w0, uxtw
   86760:	17ffff00 	b	86360 <disasm+0x2380>
char *disasm_str(char*s,int n) {if(!s)return "?";while(n){s++;if(!*s){s++;n--;}}return *s?s:"?";};
   86764:	b94093e1 	ldr	w1, [sp, #144]
   86768:	f9405be0 	ldr	x0, [sp, #176]
   8676c:	912ac000 	add	x0, x0, #0xab0
   86770:	97fff378 	bl	83550 <disasm_str.part.0>
				case disasm_arg_pstate: str+=sprintf(str,"%s", disasm_str(pstate,p)); break;
   86774:	f0000061 	adrp	x1, 95000 <sd_init+0x3470>
   86778:	aa0003e2 	mov	x2, x0
   8677c:	9113e021 	add	x1, x1, #0x4f8
   86780:	aa1303e0 	mov	x0, x19
   86784:	97ffeda1 	bl	81e08 <sprintf>
   86788:	8b204273 	add	x19, x19, w0, uxtw
   8678c:	17fffef5 	b	86360 <disasm+0x2380>
char *disasm_str(char*s,int n) {if(!s)return "?";while(n){s++;if(!*s){s++;n--;}}return *s?s:"?";};
   86790:	f9405be0 	ldr	x0, [sp, #176]
   86794:	2a1503e1 	mov	w1, w21
   86798:	912b6000 	add	x0, x0, #0xad8
   8679c:	97fff36d 	bl	83550 <disasm_str.part.0>
				case disasm_arg_sh: str+=sprintf(str,"%s", disasm_str(share,j)); break;
   867a0:	f0000061 	adrp	x1, 95000 <sd_init+0x3470>
   867a4:	aa0003e2 	mov	x2, x0
   867a8:	9113e021 	add	x1, x1, #0x4f8
   867ac:	aa1303e0 	mov	x0, x19
   867b0:	97ffed96 	bl	81e08 <sprintf>
   867b4:	8b204273 	add	x19, x19, w0, uxtw
   867b8:	17fffeea 	b	86360 <disasm+0x2380>
char *disasm_str(char*s,int n) {if(!s)return "?";while(n){s++;if(!*s){s++;n--;}}return *s?s:"?";};
   867bc:	b94097e1 	ldr	w1, [sp, #148]
   867c0:	f9405be0 	ldr	x0, [sp, #176]
   867c4:	912c8000 	add	x0, x0, #0xb20
   867c8:	97fff362 	bl	83550 <disasm_str.part.0>
				case disasm_arg_a0: str+=sprintf(str,"%s", disasm_str(at_op0,a)); break;
   867cc:	f0000061 	adrp	x1, 95000 <sd_init+0x3470>
   867d0:	aa0003e2 	mov	x2, x0
   867d4:	9113e021 	add	x1, x1, #0x4f8
   867d8:	aa1303e0 	mov	x0, x19
   867dc:	97ffed8b 	bl	81e08 <sprintf>
   867e0:	8b204273 	add	x19, x19, w0, uxtw
   867e4:	17fffedf 	b	86360 <disasm+0x2380>
char *disasm_str(char*s,int n) {if(!s)return "?";while(n){s++;if(!*s){s++;n--;}}return *s?s:"?";};
   867e8:	b94097e1 	ldr	w1, [sp, #148]
   867ec:	f9405be0 	ldr	x0, [sp, #176]
   867f0:	912d0000 	add	x0, x0, #0xb40
   867f4:	97fff357 	bl	83550 <disasm_str.part.0>
				case disasm_arg_a1: str+=sprintf(str,"%s", disasm_str(at_op1,a)); break;
   867f8:	f0000061 	adrp	x1, 95000 <sd_init+0x3470>
   867fc:	aa0003e2 	mov	x2, x0
   86800:	9113e021 	add	x1, x1, #0x4f8
   86804:	aa1303e0 	mov	x0, x19
   86808:	97ffed80 	bl	81e08 <sprintf>
   8680c:	8b204273 	add	x19, x19, w0, uxtw
   86810:	17fffed4 	b	86360 <disasm+0x2380>
char *disasm_str(char*s,int n) {if(!s)return "?";while(n){s++;if(!*s){s++;n--;}}return *s?s:"?";};
   86814:	b94097e1 	ldr	w1, [sp, #148]
   86818:	f9405be0 	ldr	x0, [sp, #176]
   8681c:	912d4000 	add	x0, x0, #0xb50
   86820:	97fff34c 	bl	83550 <disasm_str.part.0>
				case disasm_arg_a2: str+=sprintf(str,"%s", disasm_str(at_op2,a)); break;
   86824:	f0000061 	adrp	x1, 95000 <sd_init+0x3470>
   86828:	aa0003e2 	mov	x2, x0
   8682c:	9113e021 	add	x1, x1, #0x4f8
   86830:	aa1303e0 	mov	x0, x19
   86834:	97ffed75 	bl	81e08 <sprintf>
   86838:	8b204273 	add	x19, x19, w0, uxtw
   8683c:	17fffec9 	b	86360 <disasm+0x2380>
char *disasm_str(char*s,int n) {if(!s)return "?";while(n){s++;if(!*s){s++;n--;}}return *s?s:"?";};
   86840:	b9408be1 	ldr	w1, [sp, #136]
   86844:	f9405be0 	ldr	x0, [sp, #176]
   86848:	912e4000 	add	x0, x0, #0xb90
   8684c:	97fff341 	bl	83550 <disasm_str.part.0>
				case disasm_arg_dc0: str+=sprintf(str,"%s", disasm_str(dc_op0,d)); break;
   86850:	f0000061 	adrp	x1, 95000 <sd_init+0x3470>
   86854:	aa0003e2 	mov	x2, x0
   86858:	9113e021 	add	x1, x1, #0x4f8
   8685c:	aa1303e0 	mov	x0, x19
   86860:	97ffed6a 	bl	81e08 <sprintf>
   86864:	8b204273 	add	x19, x19, w0, uxtw
   86868:	17fffebe 	b	86360 <disasm+0x2380>
char *disasm_str(char*s,int n) {if(!s)return "?";while(n){s++;if(!*s){s++;n--;}}return *s?s:"?";};
   8686c:	b9408be1 	ldr	w1, [sp, #136]
   86870:	f9405be0 	ldr	x0, [sp, #176]
   86874:	912e8000 	add	x0, x0, #0xba0
   86878:	97fff336 	bl	83550 <disasm_str.part.0>
				case disasm_arg_dc1: str+=sprintf(str,"%s", disasm_str(dc_op1,d)); break;
   8687c:	f0000061 	adrp	x1, 95000 <sd_init+0x3470>
   86880:	aa0003e2 	mov	x2, x0
   86884:	9113e021 	add	x1, x1, #0x4f8
   86888:	aa1303e0 	mov	x0, x19
   8688c:	97ffed5f 	bl	81e08 <sprintf>
   86890:	8b204273 	add	x19, x19, w0, uxtw
   86894:	17fffeb3 	b	86360 <disasm+0x2380>
				case disasm_arg_ZVA: str+=sprintf(str,"ZVA"); break;
   86898:	aa1303e0 	mov	x0, x19
   8689c:	f0000061 	adrp	x1, 95000 <sd_init+0x3470>
   868a0:	91140021 	add	x1, x1, #0x500
   868a4:	97ffed59 	bl	81e08 <sprintf>
   868a8:	8b204273 	add	x19, x19, w0, uxtw
   868ac:	17fffead 	b	86360 <disasm+0x2380>
char *disasm_str(char*s,int n) {if(!s)return "?";while(n){s++;if(!*s){s++;n--;}}return *s?s:"?";};
   868b0:	b9408be1 	ldr	w1, [sp, #136]
   868b4:	f9405be0 	ldr	x0, [sp, #176]
   868b8:	912ec000 	add	x0, x0, #0xbb0
   868bc:	97fff325 	bl	83550 <disasm_str.part.0>
				case disasm_arg_dc2: str+=sprintf(str,"%s", disasm_str(dc_op2,d)); break;
   868c0:	f0000061 	adrp	x1, 95000 <sd_init+0x3470>
   868c4:	aa0003e2 	mov	x2, x0
   868c8:	9113e021 	add	x1, x1, #0x4f8
   868cc:	aa1303e0 	mov	x0, x19
   868d0:	97ffed4e 	bl	81e08 <sprintf>
   868d4:	8b204273 	add	x19, x19, w0, uxtw
   868d8:	17fffea2 	b	86360 <disasm+0x2380>
char *disasm_str(char*s,int n) {if(!s)return "?";while(n){s++;if(!*s){s++;n--;}}return *s?s:"?";};
   868dc:	b9408fe1 	ldr	w1, [sp, #140]
   868e0:	f9405be0 	ldr	x0, [sp, #176]
   868e4:	912f2000 	add	x0, x0, #0xbc8
   868e8:	97fff31a 	bl	83550 <disasm_str.part.0>
				case disasm_arg_ic: str+=sprintf(str,"%s", disasm_str(ic_op,c)); break;
   868ec:	f0000061 	adrp	x1, 95000 <sd_init+0x3470>
   868f0:	aa0003e2 	mov	x2, x0
   868f4:	9113e021 	add	x1, x1, #0x4f8
   868f8:	aa1303e0 	mov	x0, x19
   868fc:	97ffed43 	bl	81e08 <sprintf>
   86900:	8b204273 	add	x19, x19, w0, uxtw
   86904:	17fffe97 	b	86360 <disasm+0x2380>
				case disasm_arg_Xt_opt: str+=sprintf(str,t==31?"":"x%d", t); break;
   86908:	f940dbe1 	ldr	x1, [sp, #432]
   8690c:	aa1303e0 	mov	x0, x19
   86910:	2a1a03e2 	mov	w2, w26
   86914:	97ffed3d 	bl	81e08 <sprintf>
   86918:	8b204273 	add	x19, x19, w0, uxtw
   8691c:	17fffe91 	b	86360 <disasm+0x2380>
char *disasm_str(char*s,int n) {if(!s)return "?";while(n){s++;if(!*s){s++;n--;}}return *s?s:"?";};
   86920:	f9405be0 	ldr	x0, [sp, #176]
   86924:	2a1903e1 	mov	w1, w25
   86928:	912f8000 	add	x0, x0, #0xbe0
   8692c:	97fff309 	bl	83550 <disasm_str.part.0>
				case disasm_arg_tl0: str+=sprintf(str,"%s", disasm_str(tlbi_op0,n)); break;
   86930:	f0000061 	adrp	x1, 95000 <sd_init+0x3470>
   86934:	aa0003e2 	mov	x2, x0
   86938:	9113e021 	add	x1, x1, #0x4f8
   8693c:	aa1303e0 	mov	x0, x19
   86940:	97ffed32 	bl	81e08 <sprintf>
   86944:	8b204273 	add	x19, x19, w0, uxtw
   86948:	17fffe86 	b	86360 <disasm+0x2380>
char *disasm_str(char*s,int n) {if(!s)return "?";while(n){s++;if(!*s){s++;n--;}}return *s?s:"?";};
   8694c:	f9405be0 	ldr	x0, [sp, #176]
   86950:	2a1903e1 	mov	w1, w25
   86954:	91328000 	add	x0, x0, #0xca0
   86958:	97fff2fe 	bl	83550 <disasm_str.part.0>
				case disasm_arg_tl1: str+=sprintf(str,"%s", disasm_str(tlbi_op1,n)); break;
   8695c:	f0000061 	adrp	x1, 95000 <sd_init+0x3470>
   86960:	aa0003e2 	mov	x2, x0
   86964:	9113e021 	add	x1, x1, #0x4f8
   86968:	aa1303e0 	mov	x0, x19
   8696c:	97ffed27 	bl	81e08 <sprintf>
   86970:	8b204273 	add	x19, x19, w0, uxtw
   86974:	17fffe7b 	b	86360 <disasm+0x2380>
char *disasm_str(char*s,int n) {if(!s)return "?";while(n){s++;if(!*s){s++;n--;}}return *s?s:"?";};
   86978:	f9405be0 	ldr	x0, [sp, #176]
   8697c:	2a1903e1 	mov	w1, w25
   86980:	91332000 	add	x0, x0, #0xcc8
   86984:	97fff2f3 	bl	83550 <disasm_str.part.0>
				case disasm_arg_tl2: str+=sprintf(str,"%s", disasm_str(tlbi_op2,n)); break;
   86988:	f0000061 	adrp	x1, 95000 <sd_init+0x3470>
   8698c:	aa0003e2 	mov	x2, x0
   86990:	9113e021 	add	x1, x1, #0x4f8
   86994:	aa1303e0 	mov	x0, x19
   86998:	97ffed1c 	bl	81e08 <sprintf>
   8699c:	8b204273 	add	x19, x19, w0, uxtw
   869a0:	17fffe70 	b	86360 <disasm+0x2380>
				case disasm_arg_sysreg: str+=sprintf(str,disasm_sysreg(p,k,n,m,j)?disasm_sysreg(p,k,n,m,j):"S%d_%d_%d_%d_%d", p,k,n,m,j); break;
   869a4:	b94077e8 	ldr	w8, [sp, #116]
   869a8:	2a1503e4 	mov	w4, w21
   869ac:	b9407fe9 	ldr	w9, [sp, #124]
   869b0:	2a1903e2 	mov	w2, w25
   869b4:	b94093e7 	ldr	w7, [sp, #144]
   869b8:	2a0803e1 	mov	w1, w8
   869bc:	2a0903e3 	mov	w3, w9
   869c0:	2a0703e0 	mov	w0, w7
   869c4:	97fff2ff 	bl	835c0 <disasm_sysreg>
   869c8:	f100001f 	cmp	x0, #0x0
   869cc:	f0000061 	adrp	x1, 95000 <sd_init+0x3470>
   869d0:	9110c021 	add	x1, x1, #0x430
   869d4:	9a800021 	csel	x1, x1, x0, eq  // eq = none
   869d8:	2a1503e6 	mov	w6, w21
   869dc:	aa1303e0 	mov	x0, x19
   869e0:	2a0903e5 	mov	w5, w9
   869e4:	2a1903e4 	mov	w4, w25
   869e8:	2a0803e3 	mov	w3, w8
   869ec:	2a0703e2 	mov	w2, w7
   869f0:	97ffed06 	bl	81e08 <sprintf>
   869f4:	8b204273 	add	x19, x19, w0, uxtw
   869f8:	17fffe5a 	b	86360 <disasm+0x2380>
				case disasm_arg_Cn: str+=sprintf(str,"C%d", n); break;
   869fc:	aa1303e0 	mov	x0, x19
   86a00:	f0000061 	adrp	x1, 95000 <sd_init+0x3470>
   86a04:	2a1903e2 	mov	w2, w25
   86a08:	91142021 	add	x1, x1, #0x508
   86a0c:	97ffecff 	bl	81e08 <sprintf>
   86a10:	8b204273 	add	x19, x19, w0, uxtw
   86a14:	17fffe53 	b	86360 <disasm+0x2380>
				case disasm_arg_Cm: str+=sprintf(str,"C%d", m); break;
   86a18:	b9407fe2 	ldr	w2, [sp, #124]
   86a1c:	aa1303e0 	mov	x0, x19
   86a20:	f0000061 	adrp	x1, 95000 <sd_init+0x3470>
   86a24:	91142021 	add	x1, x1, #0x508
   86a28:	97ffecf8 	bl	81e08 <sprintf>
   86a2c:	8b204273 	add	x19, x19, w0, uxtw
   86a30:	17fffe4c 	b	86360 <disasm+0x2380>
				case disasm_arg_Xn: str+=sprintf(str,n==31?"xzr":"x%d", n); break;
   86a34:	f940dfe1 	ldr	x1, [sp, #440]
   86a38:	aa1303e0 	mov	x0, x19
   86a3c:	2a1903e2 	mov	w2, w25
   86a40:	97ffecf2 	bl	81e08 <sprintf>
   86a44:	8b204273 	add	x19, x19, w0, uxtw
   86a48:	17fffe46 	b	86360 <disasm+0x2380>
				case disasm_arg_b: str+=sprintf(str,"#0x%x", b); break;
   86a4c:	b9409be2 	ldr	w2, [sp, #152]
   86a50:	aa1303e0 	mov	x0, x19
   86a54:	f9405fe1 	ldr	x1, [sp, #184]
   86a58:	97ffecec 	bl	81e08 <sprintf>
   86a5c:	8b204273 	add	x19, x19, w0, uxtw
   86a60:	17fffe40 	b	86360 <disasm+0x2380>
char *disasm_str(char*s,int n) {if(!s)return "?";while(n){s++;if(!*s){s++;n--;}}return *s?s:"?";};
   86a64:	b940e3e1 	ldr	w1, [sp, #224]
   86a68:	f9405be0 	ldr	x0, [sp, #176]
   86a6c:	9133e000 	add	x0, x0, #0xcf8
   86a70:	97fff2b8 	bl	83550 <disasm_str.part.0>
				case disasm_arg_VtT: str+=sprintf(str,"%s", "V%d.%s", t, disasm_str(quantum,(z<<1)|q)); break;
   86a74:	f0000062 	adrp	x2, 95000 <sd_init+0x3470>
   86a78:	aa0003e4 	mov	x4, x0
   86a7c:	91144042 	add	x2, x2, #0x510
   86a80:	aa1303e0 	mov	x0, x19
   86a84:	f0000061 	adrp	x1, 95000 <sd_init+0x3470>
   86a88:	2a1a03e3 	mov	w3, w26
   86a8c:	9113e021 	add	x1, x1, #0x4f8
   86a90:	97ffecde 	bl	81e08 <sprintf>
   86a94:	8b204273 	add	x19, x19, w0, uxtw
   86a98:	17fffe32 	b	86360 <disasm+0x2380>
char *disasm_str(char*s,int n) {if(!s)return "?";while(n){s++;if(!*s){s++;n--;}}return *s?s:"?";};
   86a9c:	b940e3e1 	ldr	w1, [sp, #224]
   86aa0:	f9405be0 	ldr	x0, [sp, #176]
   86aa4:	9133e000 	add	x0, x0, #0xcf8
   86aa8:	97fff2aa 	bl	83550 <disasm_str.part.0>
				case disasm_arg_Vt2T: str+=sprintf(str,"%s", "V%d.%s", (t+1)&0x1f, disasm_str(quantum,(z<<1)|q)); break;
   86aac:	11000741 	add	w1, w26, #0x1
   86ab0:	aa0003e4 	mov	x4, x0
   86ab4:	12001023 	and	w3, w1, #0x1f
   86ab8:	aa1303e0 	mov	x0, x19
   86abc:	f0000062 	adrp	x2, 95000 <sd_init+0x3470>
   86ac0:	f0000061 	adrp	x1, 95000 <sd_init+0x3470>
   86ac4:	91144042 	add	x2, x2, #0x510
   86ac8:	9113e021 	add	x1, x1, #0x4f8
   86acc:	97ffeccf 	bl	81e08 <sprintf>
   86ad0:	8b204273 	add	x19, x19, w0, uxtw
   86ad4:	17fffe23 	b	86360 <disasm+0x2380>
char *disasm_str(char*s,int n) {if(!s)return "?";while(n){s++;if(!*s){s++;n--;}}return *s?s:"?";};
   86ad8:	b940e3e1 	ldr	w1, [sp, #224]
   86adc:	f9405be0 	ldr	x0, [sp, #176]
   86ae0:	9133e000 	add	x0, x0, #0xcf8
   86ae4:	97fff29b 	bl	83550 <disasm_str.part.0>
				case disasm_arg_Vt3T: str+=sprintf(str,"%s", "V%d.%s", (t+2)&0x1f, disasm_str(quantum,(z<<1)|q)); break;
   86ae8:	11000b41 	add	w1, w26, #0x2
   86aec:	aa0003e4 	mov	x4, x0
   86af0:	12001023 	and	w3, w1, #0x1f
   86af4:	aa1303e0 	mov	x0, x19
   86af8:	f0000062 	adrp	x2, 95000 <sd_init+0x3470>
   86afc:	f0000061 	adrp	x1, 95000 <sd_init+0x3470>
   86b00:	91144042 	add	x2, x2, #0x510
   86b04:	9113e021 	add	x1, x1, #0x4f8
   86b08:	97ffecc0 	bl	81e08 <sprintf>
   86b0c:	8b204273 	add	x19, x19, w0, uxtw
   86b10:	17fffe14 	b	86360 <disasm+0x2380>
char *disasm_str(char*s,int n) {if(!s)return "?";while(n){s++;if(!*s){s++;n--;}}return *s?s:"?";};
   86b14:	b940e3e1 	ldr	w1, [sp, #224]
   86b18:	f9405be0 	ldr	x0, [sp, #176]
   86b1c:	9133e000 	add	x0, x0, #0xcf8
   86b20:	97fff28c 	bl	83550 <disasm_str.part.0>
				case disasm_arg_Vt4T: str+=sprintf(str,"%s", "V%d.%s", (t+3)&0x1f, disasm_str(quantum,(z<<1)|q)); break;
   86b24:	11000f41 	add	w1, w26, #0x3
   86b28:	aa0003e4 	mov	x4, x0
   86b2c:	12001023 	and	w3, w1, #0x1f
   86b30:	aa1303e0 	mov	x0, x19
   86b34:	f0000062 	adrp	x2, 95000 <sd_init+0x3470>
   86b38:	f0000061 	adrp	x1, 95000 <sd_init+0x3470>
   86b3c:	91144042 	add	x2, x2, #0x510
   86b40:	9113e021 	add	x1, x1, #0x4f8
   86b44:	97ffecb1 	bl	81e08 <sprintf>
   86b48:	8b204273 	add	x19, x19, w0, uxtw
   86b4c:	17fffe05 	b	86360 <disasm+0x2380>
				case disasm_arg_offs: str+=sprintf(str,"["); break;
   86b50:	aa1303e0 	mov	x0, x19
   86b54:	f0000061 	adrp	x1, 95000 <sd_init+0x3470>
   86b58:	91146021 	add	x1, x1, #0x518
   86b5c:	97ffecab 	bl	81e08 <sprintf>
   86b60:	8b204273 	add	x19, x19, w0, uxtw
   86b64:	17fffdff 	b	86360 <disasm+0x2380>
				case disasm_arg_XnS: str+=sprintf(str,n==31?"xsp":"x%d", n); break;
   86b68:	f940e3e1 	ldr	x1, [sp, #448]
   86b6c:	aa1303e0 	mov	x0, x19
   86b70:	2a1903e2 	mov	w2, w25
   86b74:	97ffeca5 	bl	81e08 <sprintf>
   86b78:	8b204273 	add	x19, x19, w0, uxtw
   86b7c:	17fffdf9 	b	86360 <disasm+0x2380>
				case disasm_arg_offe: str+=sprintf(str,"]%s", p?"!":""); break;
   86b80:	f940e7e2 	ldr	x2, [sp, #456]
   86b84:	aa1303e0 	mov	x0, x19
   86b88:	f0000061 	adrp	x1, 95000 <sd_init+0x3470>
   86b8c:	91148021 	add	x1, x1, #0x520
   86b90:	97ffec9e 	bl	81e08 <sprintf>
   86b94:	8b204273 	add	x19, x19, w0, uxtw
   86b98:	17fffdf2 	b	86360 <disasm+0x2380>
				case disasm_arg_Qi: str+=sprintf(str,"#%d", q?64:32); break;
   86b9c:	b941dbe2 	ldr	w2, [sp, #472]
   86ba0:	aa1303e0 	mov	x0, x19
   86ba4:	f0000061 	adrp	x1, 95000 <sd_init+0x3470>
   86ba8:	9114a021 	add	x1, x1, #0x528
   86bac:	97ffec97 	bl	81e08 <sprintf>
   86bb0:	8b204273 	add	x19, x19, w0, uxtw
   86bb4:	17fffdeb 	b	86360 <disasm+0x2380>
				case disasm_arg_Xm: str+=sprintf(str,m==31?"xzr":"x%d", m); break;
   86bb8:	b9407fe2 	ldr	w2, [sp, #124]
   86bbc:	aa1303e0 	mov	x0, x19
   86bc0:	f940ebe1 	ldr	x1, [sp, #464]
   86bc4:	97ffec91 	bl	81e08 <sprintf>
   86bc8:	8b204273 	add	x19, x19, w0, uxtw
   86bcc:	17fffde5 	b	86360 <disasm+0x2380>
				case disasm_arg_Qi3: str+=sprintf(str,"#%d", q?48:24); break;
   86bd0:	b941dfe2 	ldr	w2, [sp, #476]
   86bd4:	aa1303e0 	mov	x0, x19
   86bd8:	f0000061 	adrp	x1, 95000 <sd_init+0x3470>
   86bdc:	9114a021 	add	x1, x1, #0x528
   86be0:	97ffec8a 	bl	81e08 <sprintf>
   86be4:	8b204273 	add	x19, x19, w0, uxtw
   86be8:	17fffdde 	b	86360 <disasm+0x2380>
				case disasm_arg_Qi2: str+=sprintf(str,"#%d", q?32:16); break;
   86bec:	b941e3e2 	ldr	w2, [sp, #480]
   86bf0:	aa1303e0 	mov	x0, x19
   86bf4:	f0000061 	adrp	x1, 95000 <sd_init+0x3470>
   86bf8:	9114a021 	add	x1, x1, #0x528
   86bfc:	97ffec83 	bl	81e08 <sprintf>
   86c00:	8b204273 	add	x19, x19, w0, uxtw
   86c04:	17fffdd7 	b	86360 <disasm+0x2380>
				case disasm_arg_Qi1: str+=sprintf(str,"#%d", q?16:8); break;
   86c08:	b941e7e2 	ldr	w2, [sp, #484]
   86c0c:	aa1303e0 	mov	x0, x19
   86c10:	f0000061 	adrp	x1, 95000 <sd_init+0x3470>
   86c14:	9114a021 	add	x1, x1, #0x528
   86c18:	97ffec7c 	bl	81e08 <sprintf>
   86c1c:	8b204273 	add	x19, x19, w0, uxtw
   86c20:	17fffdd0 	b	86360 <disasm+0x2380>
				case disasm_arg_VtB: str+=sprintf(str,"V%d.b[%d]", t, (q<<3)|(s<<2)|z); break;
   86c24:	b940cbe3 	ldr	w3, [sp, #200]
   86c28:	aa1303e0 	mov	x0, x19
   86c2c:	f0000061 	adrp	x1, 95000 <sd_init+0x3470>
   86c30:	2a1a03e2 	mov	w2, w26
   86c34:	9114c021 	add	x1, x1, #0x530
   86c38:	97ffec74 	bl	81e08 <sprintf>
   86c3c:	8b204273 	add	x19, x19, w0, uxtw
   86c40:	17fffdc8 	b	86360 <disasm+0x2380>
				case disasm_arg_VtH: str+=sprintf(str,"V%d.h[%d]", t, (q<<3)|(s<<2)|z); break;
   86c44:	b940cbe3 	ldr	w3, [sp, #200]
   86c48:	aa1303e0 	mov	x0, x19
   86c4c:	f0000061 	adrp	x1, 95000 <sd_init+0x3470>
   86c50:	2a1a03e2 	mov	w2, w26
   86c54:	91150021 	add	x1, x1, #0x540
   86c58:	97ffec6c 	bl	81e08 <sprintf>
   86c5c:	8b204273 	add	x19, x19, w0, uxtw
   86c60:	17fffdc0 	b	86360 <disasm+0x2380>
				case disasm_arg_VtS: str+=sprintf(str,"V%d.s[%d]", t, (q<<1)|s); break;
   86c64:	b94103e3 	ldr	w3, [sp, #256]
   86c68:	aa1303e0 	mov	x0, x19
   86c6c:	f0000061 	adrp	x1, 95000 <sd_init+0x3470>
   86c70:	2a1a03e2 	mov	w2, w26
   86c74:	91154021 	add	x1, x1, #0x550
   86c78:	97ffec64 	bl	81e08 <sprintf>
   86c7c:	8b204273 	add	x19, x19, w0, uxtw
   86c80:	17fffdb8 	b	86360 <disasm+0x2380>
				case disasm_arg_VtD: str+=sprintf(str,"V%d.d[%d]", t, q); break;
   86c84:	aa1303e0 	mov	x0, x19
   86c88:	f0000061 	adrp	x1, 95000 <sd_init+0x3470>
   86c8c:	2a1803e3 	mov	w3, w24
   86c90:	91158021 	add	x1, x1, #0x560
   86c94:	2a1a03e2 	mov	w2, w26
   86c98:	97ffec5c 	bl	81e08 <sprintf>
   86c9c:	8b204273 	add	x19, x19, w0, uxtw
   86ca0:	17fffdb0 	b	86360 <disasm+0x2380>
				case disasm_arg_i1: str+=sprintf(str,"1"); break;
   86ca4:	aa1303e0 	mov	x0, x19
   86ca8:	f0000061 	adrp	x1, 95000 <sd_init+0x3470>
   86cac:	9115c021 	add	x1, x1, #0x570
   86cb0:	97ffec56 	bl	81e08 <sprintf>
   86cb4:	8b204273 	add	x19, x19, w0, uxtw
   86cb8:	17fffdaa 	b	86360 <disasm+0x2380>
				case disasm_arg_i2: str+=sprintf(str,"2"); break;
   86cbc:	aa1303e0 	mov	x0, x19
   86cc0:	f0000061 	adrp	x1, 95000 <sd_init+0x3470>
   86cc4:	9115e021 	add	x1, x1, #0x578
   86cc8:	97ffec50 	bl	81e08 <sprintf>
   86ccc:	8b204273 	add	x19, x19, w0, uxtw
   86cd0:	17fffda4 	b	86360 <disasm+0x2380>
				case disasm_arg_i4: str+=sprintf(str,"4"); break;
   86cd4:	aa1303e0 	mov	x0, x19
   86cd8:	f0000061 	adrp	x1, 95000 <sd_init+0x3470>
   86cdc:	91160021 	add	x1, x1, #0x580
   86ce0:	97ffec4a 	bl	81e08 <sprintf>
   86ce4:	8b204273 	add	x19, x19, w0, uxtw
   86ce8:	17fffd9e 	b	86360 <disasm+0x2380>
				case disasm_arg_i8: str+=sprintf(str,"8"); break;
   86cec:	aa1303e0 	mov	x0, x19
   86cf0:	f0000061 	adrp	x1, 95000 <sd_init+0x3470>
   86cf4:	91162021 	add	x1, x1, #0x588
   86cf8:	97ffec44 	bl	81e08 <sprintf>
   86cfc:	8b204273 	add	x19, x19, w0, uxtw
   86d00:	17fffd98 	b	86360 <disasm+0x2380>
				case disasm_arg_Vt3B: str+=sprintf(str,"V%d.b V%d.b V%d.b[%d]", t, (t+1)&0x1f, (t+2)&0x1f, (q<<3)|(s<<2)|z); break;
   86d04:	b940cbe5 	ldr	w5, [sp, #200]
   86d08:	11000740 	add	w0, w26, #0x1
   86d0c:	11000b44 	add	w4, w26, #0x2
   86d10:	12001003 	and	w3, w0, #0x1f
   86d14:	12001084 	and	w4, w4, #0x1f
   86d18:	aa1303e0 	mov	x0, x19
   86d1c:	f0000061 	adrp	x1, 95000 <sd_init+0x3470>
   86d20:	2a1a03e2 	mov	w2, w26
   86d24:	91164021 	add	x1, x1, #0x590
   86d28:	97ffec38 	bl	81e08 <sprintf>
   86d2c:	8b204273 	add	x19, x19, w0, uxtw
   86d30:	17fffd8c 	b	86360 <disasm+0x2380>
				case disasm_arg_Vt3H: str+=sprintf(str,"V%d.h V%d.h V%d.h[%d]", t, (t+1)&0x1f, (t+2)&0x1f, (q<<3)|(s<<2)|z); break;
   86d34:	b940cbe5 	ldr	w5, [sp, #200]
   86d38:	11000740 	add	w0, w26, #0x1
   86d3c:	11000b44 	add	w4, w26, #0x2
   86d40:	12001003 	and	w3, w0, #0x1f
   86d44:	12001084 	and	w4, w4, #0x1f
   86d48:	aa1303e0 	mov	x0, x19
   86d4c:	f0000061 	adrp	x1, 95000 <sd_init+0x3470>
   86d50:	2a1a03e2 	mov	w2, w26
   86d54:	9116a021 	add	x1, x1, #0x5a8
   86d58:	97ffec2c 	bl	81e08 <sprintf>
   86d5c:	8b204273 	add	x19, x19, w0, uxtw
   86d60:	17fffd80 	b	86360 <disasm+0x2380>
				case disasm_arg_Vt3S: str+=sprintf(str,"V%d.s V%d.s V%d.s[%d]", t, (t+1)&0x1f, (t+2)&0x1f, (q<<1)|s); break;
   86d64:	b94103e5 	ldr	w5, [sp, #256]
   86d68:	11000740 	add	w0, w26, #0x1
   86d6c:	11000b44 	add	w4, w26, #0x2
   86d70:	12001003 	and	w3, w0, #0x1f
   86d74:	12001084 	and	w4, w4, #0x1f
   86d78:	aa1303e0 	mov	x0, x19
   86d7c:	f0000061 	adrp	x1, 95000 <sd_init+0x3470>
   86d80:	2a1a03e2 	mov	w2, w26
   86d84:	91170021 	add	x1, x1, #0x5c0
   86d88:	97ffec20 	bl	81e08 <sprintf>
   86d8c:	8b204273 	add	x19, x19, w0, uxtw
   86d90:	17fffd74 	b	86360 <disasm+0x2380>
				case disasm_arg_Vt3D: str+=sprintf(str,"V%d.d V%d.d V%d.d[%d]", t, (t+1)&0x1f, (t+2)&0x1f, q); break;
   86d94:	11000740 	add	w0, w26, #0x1
   86d98:	11000b44 	add	w4, w26, #0x2
   86d9c:	12001003 	and	w3, w0, #0x1f
   86da0:	12001084 	and	w4, w4, #0x1f
   86da4:	aa1303e0 	mov	x0, x19
   86da8:	f0000061 	adrp	x1, 95000 <sd_init+0x3470>
   86dac:	2a1803e5 	mov	w5, w24
   86db0:	91176021 	add	x1, x1, #0x5d8
   86db4:	2a1a03e2 	mov	w2, w26
   86db8:	97ffec14 	bl	81e08 <sprintf>
   86dbc:	8b204273 	add	x19, x19, w0, uxtw
   86dc0:	17fffd68 	b	86360 <disasm+0x2380>
				case disasm_arg_i3: str+=sprintf(str,"3"); break;
   86dc4:	aa1303e0 	mov	x0, x19
   86dc8:	f0000061 	adrp	x1, 95000 <sd_init+0x3470>
   86dcc:	9117c021 	add	x1, x1, #0x5f0
   86dd0:	97ffec0e 	bl	81e08 <sprintf>
   86dd4:	8b204273 	add	x19, x19, w0, uxtw
   86dd8:	17fffd62 	b	86360 <disasm+0x2380>
				case disasm_arg_i6: str+=sprintf(str,"6"); break;
   86ddc:	aa1303e0 	mov	x0, x19
   86de0:	f0000061 	adrp	x1, 95000 <sd_init+0x3470>
   86de4:	9117e021 	add	x1, x1, #0x5f8
   86de8:	97ffec08 	bl	81e08 <sprintf>
   86dec:	8b204273 	add	x19, x19, w0, uxtw
   86df0:	17fffd5c 	b	86360 <disasm+0x2380>
				case disasm_arg_i12: str+=sprintf(str,"12"); break;
   86df4:	aa1303e0 	mov	x0, x19
   86df8:	f0000061 	adrp	x1, 95000 <sd_init+0x3470>
   86dfc:	91180021 	add	x1, x1, #0x600
   86e00:	97ffec02 	bl	81e08 <sprintf>
   86e04:	8b204273 	add	x19, x19, w0, uxtw
   86e08:	17fffd56 	b	86360 <disasm+0x2380>
				case disasm_arg_i24: str+=sprintf(str,"24"); break;
   86e0c:	aa1303e0 	mov	x0, x19
   86e10:	f0000061 	adrp	x1, 95000 <sd_init+0x3470>
   86e14:	91182021 	add	x1, x1, #0x608
   86e18:	97ffebfc 	bl	81e08 <sprintf>
   86e1c:	8b204273 	add	x19, x19, w0, uxtw
   86e20:	17fffd50 	b	86360 <disasm+0x2380>
				case disasm_arg_Vt2B: str+=sprintf(str,"V%d.b V%d.b[%d]", t, (t+1)&0x1f, (q<<3)|(s<<2)|z); break;
   86e24:	b940cbe4 	ldr	w4, [sp, #200]
   86e28:	11000743 	add	w3, w26, #0x1
   86e2c:	aa1303e0 	mov	x0, x19
   86e30:	f0000061 	adrp	x1, 95000 <sd_init+0x3470>
   86e34:	12001063 	and	w3, w3, #0x1f
   86e38:	91184021 	add	x1, x1, #0x610
   86e3c:	2a1a03e2 	mov	w2, w26
   86e40:	97ffebf2 	bl	81e08 <sprintf>
   86e44:	8b204273 	add	x19, x19, w0, uxtw
   86e48:	17fffd46 	b	86360 <disasm+0x2380>
				case disasm_arg_Vt2H: str+=sprintf(str,"V%d.h V%d.h[%d]", t, (t+1)&0x1f, (q<<3)|(s<<2)|z); break;
   86e4c:	b940cbe4 	ldr	w4, [sp, #200]
   86e50:	11000743 	add	w3, w26, #0x1
   86e54:	aa1303e0 	mov	x0, x19
   86e58:	f0000061 	adrp	x1, 95000 <sd_init+0x3470>
   86e5c:	12001063 	and	w3, w3, #0x1f
   86e60:	91188021 	add	x1, x1, #0x620
   86e64:	2a1a03e2 	mov	w2, w26
   86e68:	97ffebe8 	bl	81e08 <sprintf>
   86e6c:	8b204273 	add	x19, x19, w0, uxtw
   86e70:	17fffd3c 	b	86360 <disasm+0x2380>
				case disasm_arg_Vt2S: str+=sprintf(str,"V%d.s V%d.s[%d]", t, (t+1)&0x1f, (q<<1)|s); break;
   86e74:	b94103e4 	ldr	w4, [sp, #256]
   86e78:	11000743 	add	w3, w26, #0x1
   86e7c:	aa1303e0 	mov	x0, x19
   86e80:	f0000061 	adrp	x1, 95000 <sd_init+0x3470>
   86e84:	12001063 	and	w3, w3, #0x1f
   86e88:	9118c021 	add	x1, x1, #0x630
   86e8c:	2a1a03e2 	mov	w2, w26
   86e90:	97ffebde 	bl	81e08 <sprintf>
   86e94:	8b204273 	add	x19, x19, w0, uxtw
   86e98:	17fffd32 	b	86360 <disasm+0x2380>
				case disasm_arg_Vt2D: str+=sprintf(str,"V%d.d V%d.d[%d]", t, (t+1)&0x1f, q); break;
   86e9c:	11000743 	add	w3, w26, #0x1
   86ea0:	aa1303e0 	mov	x0, x19
   86ea4:	f0000061 	adrp	x1, 95000 <sd_init+0x3470>
   86ea8:	12001063 	and	w3, w3, #0x1f
   86eac:	91190021 	add	x1, x1, #0x640
   86eb0:	2a1803e4 	mov	w4, w24
   86eb4:	2a1a03e2 	mov	w2, w26
   86eb8:	97ffebd4 	bl	81e08 <sprintf>
   86ebc:	8b204273 	add	x19, x19, w0, uxtw
   86ec0:	17fffd28 	b	86360 <disasm+0x2380>
				case disasm_arg_i16: str+=sprintf(str,"16"); break;
   86ec4:	aa1303e0 	mov	x0, x19
   86ec8:	f0000061 	adrp	x1, 95000 <sd_init+0x3470>
   86ecc:	91194021 	add	x1, x1, #0x650
   86ed0:	97ffebce 	bl	81e08 <sprintf>
   86ed4:	8b204273 	add	x19, x19, w0, uxtw
   86ed8:	17fffd22 	b	86360 <disasm+0x2380>
				case disasm_arg_Vt4B: str+=sprintf(str,"V%d.b V%d.b V%d.b V%d.b[%d]", t, (t+1)&0x1f, (t+2)&0x1f, (t+3)&0x1f, (q<<3)|(s<<2)|z); break;
   86edc:	b940cbe6 	ldr	w6, [sp, #200]
   86ee0:	11000b41 	add	w1, w26, #0x2
   86ee4:	11000740 	add	w0, w26, #0x1
   86ee8:	11000f45 	add	w5, w26, #0x3
   86eec:	12001024 	and	w4, w1, #0x1f
   86ef0:	12001003 	and	w3, w0, #0x1f
   86ef4:	120010a5 	and	w5, w5, #0x1f
   86ef8:	aa1303e0 	mov	x0, x19
   86efc:	f0000061 	adrp	x1, 95000 <sd_init+0x3470>
   86f00:	2a1a03e2 	mov	w2, w26
   86f04:	91196021 	add	x1, x1, #0x658
   86f08:	97ffebc0 	bl	81e08 <sprintf>
   86f0c:	8b204273 	add	x19, x19, w0, uxtw
   86f10:	17fffd14 	b	86360 <disasm+0x2380>
				case disasm_arg_Vt4H: str+=sprintf(str,"V%d.h V%d.h V%d.h V%d.h[%d]", t, (t+1)&0x1f, (t+2)&0x1f, (t+3)&0x1f, (q<<3)|(s<<2)|z); break;
   86f14:	b940cbe6 	ldr	w6, [sp, #200]
   86f18:	11000b41 	add	w1, w26, #0x2
   86f1c:	11000740 	add	w0, w26, #0x1
   86f20:	11000f45 	add	w5, w26, #0x3
   86f24:	12001024 	and	w4, w1, #0x1f
   86f28:	12001003 	and	w3, w0, #0x1f
   86f2c:	120010a5 	and	w5, w5, #0x1f
   86f30:	aa1303e0 	mov	x0, x19
   86f34:	f0000061 	adrp	x1, 95000 <sd_init+0x3470>
   86f38:	2a1a03e2 	mov	w2, w26
   86f3c:	9119e021 	add	x1, x1, #0x678
   86f40:	97ffebb2 	bl	81e08 <sprintf>
   86f44:	8b204273 	add	x19, x19, w0, uxtw
   86f48:	17fffd06 	b	86360 <disasm+0x2380>
				case disasm_arg_Vt4S: str+=sprintf(str,"V%d.s V%d.s V%d.s V%d.s[%d]", t, (t+1)&0x1f, (t+2)&0x1f, (t+3)&0x1f, (q<<1)|s); break;
   86f4c:	b94103e6 	ldr	w6, [sp, #256]
   86f50:	11000b41 	add	w1, w26, #0x2
   86f54:	11000740 	add	w0, w26, #0x1
   86f58:	11000f45 	add	w5, w26, #0x3
   86f5c:	12001024 	and	w4, w1, #0x1f
   86f60:	12001003 	and	w3, w0, #0x1f
   86f64:	120010a5 	and	w5, w5, #0x1f
   86f68:	aa1303e0 	mov	x0, x19
   86f6c:	f0000061 	adrp	x1, 95000 <sd_init+0x3470>
   86f70:	2a1a03e2 	mov	w2, w26
   86f74:	911a6021 	add	x1, x1, #0x698
   86f78:	97ffeba4 	bl	81e08 <sprintf>
   86f7c:	8b204273 	add	x19, x19, w0, uxtw
   86f80:	17fffcf8 	b	86360 <disasm+0x2380>
				case disasm_arg_Vt4D: str+=sprintf(str,"V%d.d V%d.d V%d.d V%d.d[%d]", t, (t+1)&0x1f, (t+2)&0x1f, (t+3)&0x1f, q); break;
   86f84:	11000b41 	add	w1, w26, #0x2
   86f88:	11000740 	add	w0, w26, #0x1
   86f8c:	11000f45 	add	w5, w26, #0x3
   86f90:	12001024 	and	w4, w1, #0x1f
   86f94:	12001003 	and	w3, w0, #0x1f
   86f98:	120010a5 	and	w5, w5, #0x1f
   86f9c:	aa1303e0 	mov	x0, x19
   86fa0:	f0000061 	adrp	x1, 95000 <sd_init+0x3470>
   86fa4:	2a1803e6 	mov	w6, w24
   86fa8:	911ae021 	add	x1, x1, #0x6b8
   86fac:	2a1a03e2 	mov	w2, w26
   86fb0:	97ffeb96 	bl	81e08 <sprintf>
   86fb4:	8b204273 	add	x19, x19, w0, uxtw
   86fb8:	17fffcea 	b	86360 <disasm+0x2380>
				case disasm_arg_i32: str+=sprintf(str,"32"); break;
   86fbc:	aa1303e0 	mov	x0, x19
   86fc0:	f0000061 	adrp	x1, 95000 <sd_init+0x3470>
   86fc4:	911b6021 	add	x1, x1, #0x6d8
   86fc8:	97ffeb90 	bl	81e08 <sprintf>
   86fcc:	8b204273 	add	x19, x19, w0, uxtw
   86fd0:	17fffce4 	b	86360 <disasm+0x2380>
				case disasm_arg_z: str+=sprintf(str,"#%d", 1<<z); break;
   86fd4:	b9416be2 	ldr	w2, [sp, #360]
   86fd8:	aa1303e0 	mov	x0, x19
   86fdc:	f0000061 	adrp	x1, 95000 <sd_init+0x3470>
   86fe0:	9114a021 	add	x1, x1, #0x528
   86fe4:	97ffeb89 	bl	81e08 <sprintf>
   86fe8:	8b204273 	add	x19, x19, w0, uxtw
   86fec:	17fffcdd 	b	86360 <disasm+0x2380>
				case disasm_arg_z3: str+=sprintf(str,"#%d", 3<<z); break;
   86ff0:	b9416fe2 	ldr	w2, [sp, #364]
   86ff4:	aa1303e0 	mov	x0, x19
   86ff8:	f0000061 	adrp	x1, 95000 <sd_init+0x3470>
   86ffc:	9114a021 	add	x1, x1, #0x528
   87000:	97ffeb82 	bl	81e08 <sprintf>
   87004:	8b204273 	add	x19, x19, w0, uxtw
   87008:	17fffcd6 	b	86360 <disasm+0x2380>
				case disasm_arg_z2: str+=sprintf(str,"#%d", 2<<z); break;
   8700c:	b94173e2 	ldr	w2, [sp, #368]
   87010:	aa1303e0 	mov	x0, x19
   87014:	d0000061 	adrp	x1, 95000 <sd_init+0x3470>
   87018:	9114a021 	add	x1, x1, #0x528
   8701c:	97ffeb7b 	bl	81e08 <sprintf>
   87020:	8b204273 	add	x19, x19, w0, uxtw
   87024:	17fffccf 	b	86360 <disasm+0x2380>
				case disasm_arg_z4: str+=sprintf(str,"#%d", 4<<z); break;
   87028:	b94177e2 	ldr	w2, [sp, #372]
   8702c:	aa1303e0 	mov	x0, x19
   87030:	d0000061 	adrp	x1, 95000 <sd_init+0x3470>
   87034:	9114a021 	add	x1, x1, #0x528
   87038:	97ffeb74 	bl	81e08 <sprintf>
   8703c:	8b204273 	add	x19, x19, w0, uxtw
   87040:	17fffcc8 	b	86360 <disasm+0x2380>
				case disasm_arg_Rd: str+=sprintf(str,d==31?"%czr":"%c%d", (s?'x':'w'), d); break;
   87044:	b9408be3 	ldr	w3, [sp, #136]
   87048:	aa1303e0 	mov	x0, x19
   8704c:	b940f3e2 	ldr	w2, [sp, #240]
   87050:	f940f7e1 	ldr	x1, [sp, #488]
   87054:	97ffeb6d 	bl	81e08 <sprintf>
   87058:	8b204273 	add	x19, x19, w0, uxtw
   8705c:	17fffcc1 	b	86360 <disasm+0x2380>
				case disasm_arg_Rd1: str+=sprintf(str,d+1==31?"%czr":"%c%d", (s?'x':'w'), (d+1)&0x1f); break;
   87060:	b940f3e2 	ldr	w2, [sp, #240]
   87064:	f940fbe1 	ldr	x1, [sp, #496]
   87068:	b9408be0 	ldr	w0, [sp, #136]
   8706c:	11000403 	add	w3, w0, #0x1
   87070:	aa1303e0 	mov	x0, x19
   87074:	12001063 	and	w3, w3, #0x1f
   87078:	97ffeb64 	bl	81e08 <sprintf>
   8707c:	8b204273 	add	x19, x19, w0, uxtw
   87080:	17fffcb8 	b	86360 <disasm+0x2380>
				case disasm_arg_Rt1: str+=sprintf(str,t+1==31?"%czr":"%c%d", (s?'x':'w'), (t+1)&0x1f); break;
   87084:	b940f3e2 	ldr	w2, [sp, #240]
   87088:	11000743 	add	w3, w26, #0x1
   8708c:	f940ffe1 	ldr	x1, [sp, #504]
   87090:	aa1303e0 	mov	x0, x19
   87094:	12001063 	and	w3, w3, #0x1f
   87098:	97ffeb5c 	bl	81e08 <sprintf>
   8709c:	8b204273 	add	x19, x19, w0, uxtw
   870a0:	17fffcb0 	b	86360 <disasm+0x2380>
				case disasm_arg_Wd: str+=sprintf(str,d==31?"wzr":"w%d", d); break;
   870a4:	b9408be2 	ldr	w2, [sp, #136]
   870a8:	aa1303e0 	mov	x0, x19
   870ac:	f94103e1 	ldr	x1, [sp, #512]
   870b0:	97ffeb56 	bl	81e08 <sprintf>
   870b4:	8b204273 	add	x19, x19, w0, uxtw
   870b8:	17fffcaa 	b	86360 <disasm+0x2380>
				case disasm_arg_Wt: str+=sprintf(str,t==31?"wzr":"w%d", t); break;
   870bc:	f94107e1 	ldr	x1, [sp, #520]
   870c0:	aa1303e0 	mov	x0, x19
   870c4:	2a1a03e2 	mov	w2, w26
   870c8:	97ffeb50 	bl	81e08 <sprintf>
   870cc:	8b204273 	add	x19, x19, w0, uxtw
   870d0:	17fffca4 	b	86360 <disasm+0x2380>
				case disasm_arg_FPt: str+=sprintf(str,"%c%d", z==2?'q':(z==1?'d':'s'), t); break;
   870d4:	71000aff 	cmp	w23, #0x2
   870d8:	52800e22 	mov	w2, #0x71                  	// #113
   870dc:	540000a0 	b.eq	870f0 <disasm+0x3110>  // b.none
   870e0:	710006ff 	cmp	w23, #0x1
   870e4:	52800c82 	mov	w2, #0x64                  	// #100
   870e8:	52800e60 	mov	w0, #0x73                  	// #115
   870ec:	1a800042 	csel	w2, w2, w0, eq  // eq = none
   870f0:	f94057e1 	ldr	x1, [sp, #168]
   870f4:	aa1303e0 	mov	x0, x19
   870f8:	2a1a03e3 	mov	w3, w26
   870fc:	97ffeb43 	bl	81e08 <sprintf>
   87100:	8b204273 	add	x19, x19, w0, uxtw
   87104:	17fffc97 	b	86360 <disasm+0x2380>
char *disasm_str(char*s,int n) {if(!s)return "?";while(n){s++;if(!*s){s++;n--;}}return *s?s:"?";};
   87108:	b9417be1 	ldr	w1, [sp, #376]
   8710c:	f9405be4 	ldr	x4, [sp, #176]
   87110:	91344080 	add	x0, x4, #0xd10
   87114:	97fff10f 	bl	83550 <disasm_str.part.0>
   87118:	aa0003e3 	mov	x3, x0
   8711c:	12000341 	and	w1, w26, #0x1
   87120:	91348080 	add	x0, x4, #0xd20
   87124:	f9015fe3 	str	x3, [sp, #696]
   87128:	97fff10a 	bl	83550 <disasm_str.part.0>
				case disasm_arg_prf_op: str+=sprintf(str,"%s", "%s L%d %s", disasm_str(prf_typ,(t>>3)&3), ((t>>1)&3)+1, disasm_str(prf_pol,t&1)); break;
   8712c:	aa0003e5 	mov	x5, x0
   87130:	b9417fe4 	ldr	w4, [sp, #380]
   87134:	aa1303e0 	mov	x0, x19
   87138:	f9415fe3 	ldr	x3, [sp, #696]
   8713c:	d0000062 	adrp	x2, 95000 <sd_init+0x3470>
   87140:	d0000061 	adrp	x1, 95000 <sd_init+0x3470>
   87144:	911b8042 	add	x2, x2, #0x6e0
   87148:	9113e021 	add	x1, x1, #0x4f8
   8714c:	97ffeb2f 	bl	81e08 <sprintf>
   87150:	8b204273 	add	x19, x19, w0, uxtw
   87154:	17fffc83 	b	86360 <disasm+0x2380>
				case disasm_arg_is4_opt: str+=sprintf(str,!i?"":"#0x%x", i<<(2+s)); break;
   87158:	b94183e2 	ldr	w2, [sp, #384]
   8715c:	aa1303e0 	mov	x0, x19
   87160:	f9407fe1 	ldr	x1, [sp, #248]
   87164:	97ffeb29 	bl	81e08 <sprintf>
   87168:	8b204273 	add	x19, x19, w0, uxtw
   8716c:	17fffc7d 	b	86360 <disasm+0x2380>
				case disasm_arg_FPm: str+=sprintf(str,"%c%d", z==2?'q':(z==1?'d':'s'), m); break;
   87170:	71000aff 	cmp	w23, #0x2
   87174:	52800e22 	mov	w2, #0x71                  	// #113
   87178:	540000a0 	b.eq	8718c <disasm+0x31ac>  // b.none
   8717c:	710006ff 	cmp	w23, #0x1
   87180:	52800c82 	mov	w2, #0x64                  	// #100
   87184:	52800e60 	mov	w0, #0x73                  	// #115
   87188:	1a800042 	csel	w2, w2, w0, eq  // eq = none
   8718c:	b9407fe3 	ldr	w3, [sp, #124]
   87190:	aa1303e0 	mov	x0, x19
   87194:	f94057e1 	ldr	x1, [sp, #168]
   87198:	97ffeb1c 	bl	81e08 <sprintf>
   8719c:	8b204273 	add	x19, x19, w0, uxtw
   871a0:	17fffc70 	b	86360 <disasm+0x2380>
				case disasm_arg_iz4_opt: str+=sprintf(str,!i?"":"#0x%x", i<<(2+z)); break;
   871a4:	b94187e2 	ldr	w2, [sp, #388]
   871a8:	aa1303e0 	mov	x0, x19
   871ac:	f9407fe1 	ldr	x1, [sp, #248]
   871b0:	97ffeb16 	bl	81e08 <sprintf>
   871b4:	8b204273 	add	x19, x19, w0, uxtw
   871b8:	17fffc6a 	b	86360 <disasm+0x2380>
				case disasm_arg_im4_opt: str+=sprintf(str,!i?"":"#0x%x", i<<2); break;
   871bc:	b940c3e2 	ldr	w2, [sp, #192]
   871c0:	aa1303e0 	mov	x0, x19
   871c4:	f9407fe1 	ldr	x1, [sp, #248]
   871c8:	97ffeb10 	bl	81e08 <sprintf>
   871cc:	8b204273 	add	x19, x19, w0, uxtw
   871d0:	17fffc64 	b	86360 <disasm+0x2380>
				case disasm_arg_nRt: str+=sprintf(str,t==31?"%czr":"%c%d", (s?'w':'x'), t); break;
   871d4:	b9421be2 	ldr	w2, [sp, #536]
   871d8:	aa1303e0 	mov	x0, x19
   871dc:	f9409be1 	ldr	x1, [sp, #304]
   871e0:	2a1a03e3 	mov	w3, w26
   871e4:	97ffeb09 	bl	81e08 <sprintf>
   871e8:	8b204273 	add	x19, x19, w0, uxtw
   871ec:	17fffc5d 	b	86360 <disasm+0x2380>
				case disasm_arg_j_opt: str+=sprintf(str,!j?"":"#0x%x", j); break;
   871f0:	f9410be1 	ldr	x1, [sp, #528]
   871f4:	aa1303e0 	mov	x0, x19
   871f8:	2a1503e2 	mov	w2, w21
   871fc:	97ffeb03 	bl	81e08 <sprintf>
   87200:	8b204273 	add	x19, x19, w0, uxtw
   87204:	17fffc57 	b	86360 <disasm+0x2380>
				case disasm_arg_Rom: str+=sprintf(str,m==31?"%czr":"%c%d", (o&1?'x':'w'), m); break;
   87208:	b9407fe3 	ldr	w3, [sp, #124]
   8720c:	aa1303e0 	mov	x0, x19
   87210:	b9421fe2 	ldr	w2, [sp, #540]
   87214:	f9408be1 	ldr	x1, [sp, #272]
   87218:	97ffeafc 	bl	81e08 <sprintf>
   8721c:	8b204273 	add	x19, x19, w0, uxtw
   87220:	17fffc50 	b	86360 <disasm+0x2380>
char *disasm_str(char*s,int n) {if(!s)return "?";while(n){s++;if(!*s){s++;n--;}}return *s?s:"?";};
   87224:	b94083e1 	ldr	w1, [sp, #128]
   87228:	f9405be0 	ldr	x0, [sp, #176]
   8722c:	9134c000 	add	x0, x0, #0xd30
   87230:	97fff0c8 	bl	83550 <disasm_str.part.0>
				case disasm_arg_amountj: str+=sprintf(str,"%s", "%s #%d", disasm_str(extend64,o), j); break;
   87234:	f94077e2 	ldr	x2, [sp, #232]
   87238:	aa0003e3 	mov	x3, x0
   8723c:	d0000061 	adrp	x1, 95000 <sd_init+0x3470>
   87240:	aa1303e0 	mov	x0, x19
   87244:	9113e021 	add	x1, x1, #0x4f8
   87248:	2a1503e4 	mov	w4, w21
   8724c:	97ffeaef 	bl	81e08 <sprintf>
   87250:	8b204273 	add	x19, x19, w0, uxtw
   87254:	17fffc43 	b	86360 <disasm+0x2380>
char *disasm_str(char*s,int n) {if(!s)return "?";while(n){s++;if(!*s){s++;n--;}}return *s?s:"?";};
   87258:	b94083e1 	ldr	w1, [sp, #128]
   8725c:	f9405be0 	ldr	x0, [sp, #176]
   87260:	9134c000 	add	x0, x0, #0xd30
   87264:	97fff0bb 	bl	83550 <disasm_str.part.0>
				case disasm_arg_amountz: str+=sprintf(str,"%s", "%s #%d", disasm_str(extend64,o), j?(s?4:z):0); break;
   87268:	52800004 	mov	w4, #0x0                   	// #0
   8726c:	340000b5 	cbz	w21, 87280 <disasm+0x32a0>
   87270:	b940e7e1 	ldr	w1, [sp, #228]
   87274:	52800084 	mov	w4, #0x4                   	// #4
   87278:	7100003f 	cmp	w1, #0x0
   8727c:	1a8402e4 	csel	w4, w23, w4, eq  // eq = none
   87280:	f94077e2 	ldr	x2, [sp, #232]
   87284:	aa0003e3 	mov	x3, x0
   87288:	d0000061 	adrp	x1, 95000 <sd_init+0x3470>
   8728c:	aa1303e0 	mov	x0, x19
   87290:	9113e021 	add	x1, x1, #0x4f8
   87294:	97ffeadd 	bl	81e08 <sprintf>
   87298:	8b204273 	add	x19, x19, w0, uxtw
   8729c:	17fffc31 	b	86360 <disasm+0x2380>
char *disasm_str(char*s,int n) {if(!s)return "?";while(n){s++;if(!*s){s++;n--;}}return *s?s:"?";};
   872a0:	b94083e1 	ldr	w1, [sp, #128]
   872a4:	f9405be0 	ldr	x0, [sp, #176]
   872a8:	9134c000 	add	x0, x0, #0xd30
   872ac:	97fff0a9 	bl	83550 <disasm_str.part.0>
				case disasm_arg_amountjs: str+=sprintf(str,"%s", "%s #%d", disasm_str(extend64,o), j?(s?3:2):0); break;
   872b0:	f94077e2 	ldr	x2, [sp, #232]
   872b4:	710002bf 	cmp	w21, #0x0
   872b8:	b940e7e1 	ldr	w1, [sp, #228]
   872bc:	aa0003e3 	mov	x3, x0
   872c0:	aa1303e0 	mov	x0, x19
   872c4:	11000824 	add	w4, w1, #0x2
   872c8:	52800001 	mov	w1, #0x0                   	// #0
   872cc:	1a811084 	csel	w4, w4, w1, ne  // ne = any
   872d0:	d0000061 	adrp	x1, 95000 <sd_init+0x3470>
   872d4:	9113e021 	add	x1, x1, #0x4f8
   872d8:	97ffeacc 	bl	81e08 <sprintf>
   872dc:	8b204273 	add	x19, x19, w0, uxtw
   872e0:	17fffc20 	b	86360 <disasm+0x2380>
char *disasm_str(char*s,int n) {if(!s)return "?";while(n){s++;if(!*s){s++;n--;}}return *s?s:"?";};
   872e4:	b94083e1 	ldr	w1, [sp, #128]
   872e8:	f9405be0 	ldr	x0, [sp, #176]
   872ec:	9134c000 	add	x0, x0, #0xd30
   872f0:	97fff098 	bl	83550 <disasm_str.part.0>
				case disasm_arg_amountj2: str+=sprintf(str,"%s", "%s #%d", disasm_str(extend64,o), j?2:0); break;
   872f4:	b94223e4 	ldr	w4, [sp, #544]
   872f8:	aa0003e3 	mov	x3, x0
   872fc:	f94077e2 	ldr	x2, [sp, #232]
   87300:	aa1303e0 	mov	x0, x19
   87304:	d0000061 	adrp	x1, 95000 <sd_init+0x3470>
   87308:	9113e021 	add	x1, x1, #0x4f8
   8730c:	97ffeabf 	bl	81e08 <sprintf>
   87310:	8b204273 	add	x19, x19, w0, uxtw
   87314:	17fffc13 	b	86360 <disasm+0x2380>
char *disasm_str(char*s,int n) {if(!s)return "?";while(n){s++;if(!*s){s++;n--;}}return *s?s:"?";};
   87318:	b94083e1 	ldr	w1, [sp, #128]
   8731c:	f9405be0 	ldr	x0, [sp, #176]
   87320:	9134c000 	add	x0, x0, #0xd30
   87324:	97fff08b 	bl	83550 <disasm_str.part.0>
				case disasm_arg_amountj3: str+=sprintf(str,"%s", "%s #%d", disasm_str(extend64,o), j?3:0); break;
   87328:	b94227e4 	ldr	w4, [sp, #548]
   8732c:	aa0003e3 	mov	x3, x0
   87330:	f94077e2 	ldr	x2, [sp, #232]
   87334:	aa1303e0 	mov	x0, x19
   87338:	d0000061 	adrp	x1, 95000 <sd_init+0x3470>
   8733c:	9113e021 	add	x1, x1, #0x4f8
   87340:	97ffeab2 	bl	81e08 <sprintf>
   87344:	8b204273 	add	x19, x19, w0, uxtw
   87348:	17fffc06 	b	86360 <disasm+0x2380>
char *disasm_str(char*s,int n) {if(!s)return "?";while(n){s++;if(!*s){s++;n--;}}return *s?s:"?";};
   8734c:	f9405be0 	ldr	x0, [sp, #176]
   87350:	2a1703e1 	mov	w1, w23
   87354:	91356000 	add	x0, x0, #0xd58
   87358:	97fff07e 	bl	83550 <disasm_str.part.0>
				case disasm_arg_shiftj_opt: str+=sprintf(str,"%s", !j?"":"%s #%d", disasm_str(shift,z), j); break;
   8735c:	f94117e2 	ldr	x2, [sp, #552]
   87360:	aa0003e3 	mov	x3, x0
   87364:	d0000061 	adrp	x1, 95000 <sd_init+0x3470>
   87368:	aa1303e0 	mov	x0, x19
   8736c:	9113e021 	add	x1, x1, #0x4f8
   87370:	2a1503e4 	mov	w4, w21
   87374:	97ffeaa5 	bl	81e08 <sprintf>
   87378:	8b204273 	add	x19, x19, w0, uxtw
   8737c:	17fffbf9 	b	86360 <disasm+0x2380>
				case disasm_arg_Rsom: str+=sprintf(str,m==31?"%czr":"%c%d", (s&&(o&3)==3?'x':'w'), m); break;
   87380:	b940e7e0 	ldr	w0, [sp, #228]
   87384:	52800ee2 	mov	w2, #0x77                  	// #119
   87388:	340000c0 	cbz	w0, 873a0 <disasm+0x33c0>
   8738c:	b94083e0 	ldr	w0, [sp, #128]
   87390:	12000400 	and	w0, w0, #0x3
   87394:	71000c1f 	cmp	w0, #0x3
   87398:	1a9f17e2 	cset	w2, eq  // eq = none
   8739c:	1101dc42 	add	w2, w2, #0x77
   873a0:	b9407fe3 	ldr	w3, [sp, #124]
   873a4:	aa1303e0 	mov	x0, x19
   873a8:	f9408be1 	ldr	x1, [sp, #272]
   873ac:	97ffea97 	bl	81e08 <sprintf>
   873b0:	8b204273 	add	x19, x19, w0, uxtw
   873b4:	17fffbeb 	b	86360 <disasm+0x2380>
				case disasm_arg_exts: str+=sprintf(str,"%s", "%s #%d", s?disasm_str(extend64,o):disasm_str(extend32,o), j); break;
   873b8:	b940e7e0 	ldr	w0, [sp, #228]
   873bc:	b94083e1 	ldr	w1, [sp, #128]
   873c0:	34008bc0 	cbz	w0, 88538 <disasm+0x4558>
char *disasm_str(char*s,int n) {if(!s)return "?";while(n){s++;if(!*s){s++;n--;}}return *s?s:"?";};
   873c4:	f9405be0 	ldr	x0, [sp, #176]
   873c8:	9134c000 	add	x0, x0, #0xd30
   873cc:	97fff061 	bl	83550 <disasm_str.part.0>
   873d0:	aa0003e3 	mov	x3, x0
				case disasm_arg_exts: str+=sprintf(str,"%s", "%s #%d", s?disasm_str(extend64,o):disasm_str(extend32,o), j); break;
   873d4:	f94077e2 	ldr	x2, [sp, #232]
   873d8:	aa1303e0 	mov	x0, x19
   873dc:	d0000061 	adrp	x1, 95000 <sd_init+0x3470>
   873e0:	2a1503e4 	mov	w4, w21
   873e4:	9113e021 	add	x1, x1, #0x4f8
   873e8:	97ffea88 	bl	81e08 <sprintf>
   873ec:	8b204273 	add	x19, x19, w0, uxtw
   873f0:	17fffbdc 	b	86360 <disasm+0x2380>
				case disasm_arg_Wn: str+=sprintf(str,n==31?"wzr":"w%d", n); break;
   873f4:	f9411be1 	ldr	x1, [sp, #560]
   873f8:	aa1303e0 	mov	x0, x19
   873fc:	2a1903e2 	mov	w2, w25
   87400:	97ffea82 	bl	81e08 <sprintf>
   87404:	8b204273 	add	x19, x19, w0, uxtw
   87408:	17fffbd6 	b	86360 <disasm+0x2380>
				case disasm_arg_Xd: str+=sprintf(str,d==31?"xzr":"x%d", d); break;
   8740c:	b9408be2 	ldr	w2, [sp, #136]
   87410:	aa1303e0 	mov	x0, x19
   87414:	f94123e1 	ldr	x1, [sp, #576]
   87418:	97ffea7c 	bl	81e08 <sprintf>
   8741c:	8b204273 	add	x19, x19, w0, uxtw
   87420:	17fffbd0 	b	86360 <disasm+0x2380>
				case disasm_arg_Vt16b: str+=sprintf(str,"V%d.16b", t); break;
   87424:	aa1303e0 	mov	x0, x19
   87428:	d0000061 	adrp	x1, 95000 <sd_init+0x3470>
   8742c:	2a1a03e2 	mov	w2, w26
   87430:	911bc021 	add	x1, x1, #0x6f0
   87434:	97ffea75 	bl	81e08 <sprintf>
   87438:	8b204273 	add	x19, x19, w0, uxtw
   8743c:	17fffbc9 	b	86360 <disasm+0x2380>
				case disasm_arg_Wm: str+=sprintf(str,m==31?"wzr":"w%d", m); break;
   87440:	b9407fe2 	ldr	w2, [sp, #124]
   87444:	aa1303e0 	mov	x0, x19
   87448:	f9411fe1 	ldr	x1, [sp, #568]
   8744c:	97ffea6f 	bl	81e08 <sprintf>
   87450:	8b204273 	add	x19, x19, w0, uxtw
   87454:	17fffbc3 	b	86360 <disasm+0x2380>
				case disasm_arg_Vn16b: str+=sprintf(str,"V%d.16b", n); break;
   87458:	aa1303e0 	mov	x0, x19
   8745c:	d0000061 	adrp	x1, 95000 <sd_init+0x3470>
   87460:	2a1903e2 	mov	w2, w25
   87464:	911bc021 	add	x1, x1, #0x6f0
   87468:	97ffea68 	bl	81e08 <sprintf>
   8746c:	8b204273 	add	x19, x19, w0, uxtw
   87470:	17fffbbc 	b	86360 <disasm+0x2380>
				case disasm_arg_Qt: str+=sprintf(str,"q%d", t); break;
   87474:	aa1303e0 	mov	x0, x19
   87478:	d0000061 	adrp	x1, 95000 <sd_init+0x3470>
   8747c:	2a1a03e2 	mov	w2, w26
   87480:	911be021 	add	x1, x1, #0x6f8
   87484:	97ffea61 	bl	81e08 <sprintf>
   87488:	8b204273 	add	x19, x19, w0, uxtw
   8748c:	17fffbb5 	b	86360 <disasm+0x2380>
				case disasm_arg_Sn: str+=sprintf(str,"s%d", n); break;
   87490:	aa1303e0 	mov	x0, x19
   87494:	d0000061 	adrp	x1, 95000 <sd_init+0x3470>
   87498:	2a1903e2 	mov	w2, w25
   8749c:	911c0021 	add	x1, x1, #0x700
   874a0:	97ffea5a 	bl	81e08 <sprintf>
   874a4:	8b204273 	add	x19, x19, w0, uxtw
   874a8:	17fffbae 	b	86360 <disasm+0x2380>
				case disasm_arg_Vm4s: str+=sprintf(str,"V%d.4s", m); break;
   874ac:	b9407fe2 	ldr	w2, [sp, #124]
   874b0:	aa1303e0 	mov	x0, x19
   874b4:	d0000061 	adrp	x1, 95000 <sd_init+0x3470>
   874b8:	911c2021 	add	x1, x1, #0x708
   874bc:	97ffea53 	bl	81e08 <sprintf>
   874c0:	8b204273 	add	x19, x19, w0, uxtw
   874c4:	17fffba7 	b	86360 <disasm+0x2380>
				case disasm_arg_Vt4s: str+=sprintf(str,"V%d.4s", t); break;
   874c8:	aa1303e0 	mov	x0, x19
   874cc:	d0000061 	adrp	x1, 95000 <sd_init+0x3470>
   874d0:	2a1a03e2 	mov	w2, w26
   874d4:	911c2021 	add	x1, x1, #0x708
   874d8:	97ffea4c 	bl	81e08 <sprintf>
   874dc:	8b204273 	add	x19, x19, w0, uxtw
   874e0:	17fffba0 	b	86360 <disasm+0x2380>
				case disasm_arg_Vn4s: str+=sprintf(str,"V%d.4s", n); break;
   874e4:	aa1303e0 	mov	x0, x19
   874e8:	d0000061 	adrp	x1, 95000 <sd_init+0x3470>
   874ec:	2a1903e2 	mov	w2, w25
   874f0:	911c2021 	add	x1, x1, #0x708
   874f4:	97ffea45 	bl	81e08 <sprintf>
   874f8:	8b204273 	add	x19, x19, w0, uxtw
   874fc:	17fffb99 	b	86360 <disasm+0x2380>
				case disasm_arg_Qn: str+=sprintf(str,"q%d", n); break;
   87500:	aa1303e0 	mov	x0, x19
   87504:	d0000061 	adrp	x1, 95000 <sd_init+0x3470>
   87508:	2a1903e2 	mov	w2, w25
   8750c:	911be021 	add	x1, x1, #0x6f8
   87510:	97ffea3e 	bl	81e08 <sprintf>
   87514:	8b204273 	add	x19, x19, w0, uxtw
   87518:	17fffb92 	b	86360 <disasm+0x2380>
				case disasm_arg_St: str+=sprintf(str,"s%d", t); break;
   8751c:	aa1303e0 	mov	x0, x19
   87520:	d0000061 	adrp	x1, 95000 <sd_init+0x3470>
   87524:	2a1a03e2 	mov	w2, w26
   87528:	911c0021 	add	x1, x1, #0x700
   8752c:	97ffea37 	bl	81e08 <sprintf>
   87530:	8b204273 	add	x19, x19, w0, uxtw
   87534:	17fffb8b 	b	86360 <disasm+0x2380>
				case disasm_arg_FPjt: str+=sprintf(str,"%c%d", j&1?'b':((j&3)==2?'h':((j&7)==4?'s':'d')), t); break;
   87538:	b940f7e0 	ldr	w0, [sp, #244]
   8753c:	52800c42 	mov	w2, #0x62                  	// #98
   87540:	35000140 	cbnz	w0, 87568 <disasm+0x3588>
   87544:	120006a0 	and	w0, w21, #0x3
   87548:	52800d02 	mov	w2, #0x68                  	// #104
   8754c:	7100081f 	cmp	w0, #0x2
   87550:	540000c0 	b.eq	87568 <disasm+0x3588>  // b.none
   87554:	12000aa0 	and	w0, w21, #0x7
   87558:	52800e62 	mov	w2, #0x73                  	// #115
   8755c:	7100101f 	cmp	w0, #0x4
   87560:	52800c80 	mov	w0, #0x64                  	// #100
   87564:	1a800042 	csel	w2, w2, w0, eq  // eq = none
   87568:	f94057e1 	ldr	x1, [sp, #168]
   8756c:	aa1303e0 	mov	x0, x19
   87570:	2a1a03e3 	mov	w3, w26
   87574:	97ffea25 	bl	81e08 <sprintf>
   87578:	8b204273 	add	x19, x19, w0, uxtw
   8757c:	17fffb79 	b	86360 <disasm+0x2380>
				case disasm_arg_Vnj: str+=sprintf(str,"V%d.%c", n, j&1?'b':((j&3)==2?'h':((j&7)==4?'s':'d'))); break;
   87580:	b940f7e0 	ldr	w0, [sp, #244]
   87584:	52800c43 	mov	w3, #0x62                  	// #98
   87588:	35000140 	cbnz	w0, 875b0 <disasm+0x35d0>
   8758c:	120006a0 	and	w0, w21, #0x3
   87590:	52800d03 	mov	w3, #0x68                  	// #104
   87594:	7100081f 	cmp	w0, #0x2
   87598:	540000c0 	b.eq	875b0 <disasm+0x35d0>  // b.none
   8759c:	12000aa0 	and	w0, w21, #0x7
   875a0:	52800e63 	mov	w3, #0x73                  	// #115
   875a4:	7100101f 	cmp	w0, #0x4
   875a8:	52800c80 	mov	w0, #0x64                  	// #100
   875ac:	1a800063 	csel	w3, w3, w0, eq  // eq = none
   875b0:	aa1303e0 	mov	x0, x19
   875b4:	d0000061 	adrp	x1, 95000 <sd_init+0x3470>
   875b8:	2a1903e2 	mov	w2, w25
   875bc:	911c4021 	add	x1, x1, #0x710
   875c0:	97ffea12 	bl	81e08 <sprintf>
   875c4:	8b204273 	add	x19, x19, w0, uxtw
   875c8:	17fffb66 	b	86360 <disasm+0x2380>
				case disasm_arg_FPidx: str+=sprintf(str,"%d", j>>(j&1?1:((j&3)==2?2:((j&7)==4?3:4))), t); break;
   875cc:	b940f7e0 	ldr	w0, [sp, #244]
   875d0:	b94197e2 	ldr	w2, [sp, #404]
   875d4:	35000140 	cbnz	w0, 875fc <disasm+0x361c>
   875d8:	120006a0 	and	w0, w21, #0x3
   875dc:	b942a7e2 	ldr	w2, [sp, #676]
   875e0:	7100081f 	cmp	w0, #0x2
   875e4:	540000c0 	b.eq	875fc <disasm+0x361c>  // b.none
   875e8:	12000aa0 	and	w0, w21, #0x7
   875ec:	b942afe1 	ldr	w1, [sp, #684]
   875f0:	7100101f 	cmp	w0, #0x4
   875f4:	b942abe0 	ldr	w0, [sp, #680]
   875f8:	1a810002 	csel	w2, w0, w1, eq  // eq = none
   875fc:	aa1303e0 	mov	x0, x19
   87600:	d0000061 	adrp	x1, 95000 <sd_init+0x3470>
   87604:	2a1a03e3 	mov	w3, w26
   87608:	911c6021 	add	x1, x1, #0x718
   8760c:	97ffe9ff 	bl	81e08 <sprintf>
   87610:	8b204273 	add	x19, x19, w0, uxtw
   87614:	17fffb53 	b	86360 <disasm+0x2380>
				case disasm_arg_Vtjq: str+=sprintf(str,"%s", "V%d.%s", t, disasm_str(quantum,(j&1?0:((j&3)==2?2:(j&7)==4?4:6))+q)); break;
   87618:	b940f7e0 	ldr	w0, [sp, #244]
   8761c:	2a1803e1 	mov	w1, w24
   87620:	35000140 	cbnz	w0, 87648 <disasm+0x3668>
   87624:	120006a0 	and	w0, w21, #0x3
   87628:	11000b01 	add	w1, w24, #0x2
   8762c:	7100081f 	cmp	w0, #0x2
   87630:	540000c0 	b.eq	87648 <disasm+0x3668>  // b.none
   87634:	12000aa1 	and	w1, w21, #0x7
   87638:	11001300 	add	w0, w24, #0x4
   8763c:	7100103f 	cmp	w1, #0x4
   87640:	11001b01 	add	w1, w24, #0x6
   87644:	1a801021 	csel	w1, w1, w0, ne  // ne = any
char *disasm_str(char*s,int n) {if(!s)return "?";while(n){s++;if(!*s){s++;n--;}}return *s?s:"?";};
   87648:	f9405be0 	ldr	x0, [sp, #176]
   8764c:	9133e000 	add	x0, x0, #0xcf8
   87650:	97ffefc0 	bl	83550 <disasm_str.part.0>
				case disasm_arg_Vtjq: str+=sprintf(str,"%s", "V%d.%s", t, disasm_str(quantum,(j&1?0:((j&3)==2?2:(j&7)==4?4:6))+q)); break;
   87654:	d0000062 	adrp	x2, 95000 <sd_init+0x3470>
   87658:	aa0003e4 	mov	x4, x0
   8765c:	91144042 	add	x2, x2, #0x510
   87660:	aa1303e0 	mov	x0, x19
   87664:	d0000061 	adrp	x1, 95000 <sd_init+0x3470>
   87668:	2a1a03e3 	mov	w3, w26
   8766c:	9113e021 	add	x1, x1, #0x4f8
   87670:	97ffe9e6 	bl	81e08 <sprintf>
   87674:	8b204273 	add	x19, x19, w0, uxtw
   87678:	17fffb3a 	b	86360 <disasm+0x2380>
				case disasm_arg_Ht: str+=sprintf(str,"h%d", t); break;
   8767c:	aa1303e0 	mov	x0, x19
   87680:	d0000061 	adrp	x1, 95000 <sd_init+0x3470>
   87684:	2a1a03e2 	mov	w2, w26
   87688:	911c8021 	add	x1, x1, #0x720
   8768c:	97ffe9df 	bl	81e08 <sprintf>
   87690:	8b204273 	add	x19, x19, w0, uxtw
   87694:	17fffb33 	b	86360 <disasm+0x2380>
				case disasm_arg_Hn: str+=sprintf(str,"h%d", n); break;
   87698:	aa1303e0 	mov	x0, x19
   8769c:	d0000061 	adrp	x1, 95000 <sd_init+0x3470>
   876a0:	2a1903e2 	mov	w2, w25
   876a4:	911c8021 	add	x1, x1, #0x720
   876a8:	97ffe9d8 	bl	81e08 <sprintf>
   876ac:	8b204273 	add	x19, x19, w0, uxtw
   876b0:	17fffb2c 	b	86360 <disasm+0x2380>
				case disasm_arg_Hm: str+=sprintf(str,"h%d", m); break;
   876b4:	b9407fe2 	ldr	w2, [sp, #124]
   876b8:	aa1303e0 	mov	x0, x19
   876bc:	d0000061 	adrp	x1, 95000 <sd_init+0x3470>
   876c0:	911c8021 	add	x1, x1, #0x720
   876c4:	97ffe9d1 	bl	81e08 <sprintf>
   876c8:	8b204273 	add	x19, x19, w0, uxtw
   876cc:	17fffb25 	b	86360 <disasm+0x2380>
				case disasm_arg_FPn: str+=sprintf(str,"%c%d", z==2?'q':(z==1?'d':'s'), n); break;
   876d0:	71000aff 	cmp	w23, #0x2
   876d4:	52800e22 	mov	w2, #0x71                  	// #113
   876d8:	540000a0 	b.eq	876ec <disasm+0x370c>  // b.none
   876dc:	710006ff 	cmp	w23, #0x1
   876e0:	52800c82 	mov	w2, #0x64                  	// #100
   876e4:	52800e60 	mov	w0, #0x73                  	// #115
   876e8:	1a800042 	csel	w2, w2, w0, eq  // eq = none
   876ec:	f94057e1 	ldr	x1, [sp, #168]
   876f0:	aa1303e0 	mov	x0, x19
   876f4:	2a1903e3 	mov	w3, w25
   876f8:	97ffe9c4 	bl	81e08 <sprintf>
   876fc:	8b204273 	add	x19, x19, w0, uxtw
   87700:	17fffb18 	b	86360 <disasm+0x2380>
				case disasm_arg_VtH1: str+=sprintf(str,"V%d.%dh", t, q?8:4); break;
   87704:	b9411be3 	ldr	w3, [sp, #280]
   87708:	aa1303e0 	mov	x0, x19
   8770c:	d0000061 	adrp	x1, 95000 <sd_init+0x3470>
   87710:	2a1a03e2 	mov	w2, w26
   87714:	911ca021 	add	x1, x1, #0x728
   87718:	97ffe9bc 	bl	81e08 <sprintf>
   8771c:	8b204273 	add	x19, x19, w0, uxtw
   87720:	17fffb10 	b	86360 <disasm+0x2380>
				case disasm_arg_VnH1: str+=sprintf(str,"V%d.%dh", n, q?8:4); break;
   87724:	b9411be3 	ldr	w3, [sp, #280]
   87728:	aa1303e0 	mov	x0, x19
   8772c:	d0000061 	adrp	x1, 95000 <sd_init+0x3470>
   87730:	2a1903e2 	mov	w2, w25
   87734:	911ca021 	add	x1, x1, #0x728
   87738:	97ffe9b4 	bl	81e08 <sprintf>
   8773c:	8b204273 	add	x19, x19, w0, uxtw
   87740:	17fffb08 	b	86360 <disasm+0x2380>
				case disasm_arg_VmH1: str+=sprintf(str,"V%d.%dh", m, q?8:4); break;
   87744:	b9407fe2 	ldr	w2, [sp, #124]
   87748:	aa1303e0 	mov	x0, x19
   8774c:	b9411be3 	ldr	w3, [sp, #280]
   87750:	d0000061 	adrp	x1, 95000 <sd_init+0x3470>
   87754:	911ca021 	add	x1, x1, #0x728
   87758:	97ffe9ac 	bl	81e08 <sprintf>
   8775c:	8b204273 	add	x19, x19, w0, uxtw
   87760:	17fffb00 	b	86360 <disasm+0x2380>
char *disasm_str(char*s,int n) {if(!s)return "?";while(n){s++;if(!*s){s++;n--;}}return *s?s:"?";};
   87764:	b9410be1 	ldr	w1, [sp, #264]
   87768:	f9405be0 	ldr	x0, [sp, #176]
   8776c:	9133e000 	add	x0, x0, #0xcf8
   87770:	97ffef78 	bl	83550 <disasm_str.part.0>
				case disasm_arg_Vtzq: str+=sprintf(str,"%s", "V%d.%s", t, disasm_str(quantum,4+(z*2)+q)); break;
   87774:	d0000062 	adrp	x2, 95000 <sd_init+0x3470>
   87778:	aa0003e4 	mov	x4, x0
   8777c:	91144042 	add	x2, x2, #0x510
   87780:	aa1303e0 	mov	x0, x19
   87784:	d0000061 	adrp	x1, 95000 <sd_init+0x3470>
   87788:	2a1a03e3 	mov	w3, w26
   8778c:	9113e021 	add	x1, x1, #0x4f8
   87790:	97ffe99e 	bl	81e08 <sprintf>
   87794:	8b204273 	add	x19, x19, w0, uxtw
   87798:	17fffaf2 	b	86360 <disasm+0x2380>
char *disasm_str(char*s,int n) {if(!s)return "?";while(n){s++;if(!*s){s++;n--;}}return *s?s:"?";};
   8779c:	b9410be1 	ldr	w1, [sp, #264]
   877a0:	f9405be0 	ldr	x0, [sp, #176]
   877a4:	9133e000 	add	x0, x0, #0xcf8
   877a8:	97ffef6a 	bl	83550 <disasm_str.part.0>
				case disasm_arg_Vnzq: str+=sprintf(str,"%s", "V%d.%s", n, disasm_str(quantum,4+(z*2)+q)); break;
   877ac:	d0000062 	adrp	x2, 95000 <sd_init+0x3470>
   877b0:	aa0003e4 	mov	x4, x0
   877b4:	91144042 	add	x2, x2, #0x510
   877b8:	aa1303e0 	mov	x0, x19
   877bc:	d0000061 	adrp	x1, 95000 <sd_init+0x3470>
   877c0:	2a1903e3 	mov	w3, w25
   877c4:	9113e021 	add	x1, x1, #0x4f8
   877c8:	97ffe990 	bl	81e08 <sprintf>
   877cc:	8b204273 	add	x19, x19, w0, uxtw
   877d0:	17fffae4 	b	86360 <disasm+0x2380>
char *disasm_str(char*s,int n) {if(!s)return "?";while(n){s++;if(!*s){s++;n--;}}return *s?s:"?";};
   877d4:	b9410be1 	ldr	w1, [sp, #264]
   877d8:	f9405be0 	ldr	x0, [sp, #176]
   877dc:	9133e000 	add	x0, x0, #0xcf8
   877e0:	97ffef5c 	bl	83550 <disasm_str.part.0>
				case disasm_arg_Vmzq: str+=sprintf(str,"%s", "V%d.%s", m, disasm_str(quantum,4+(z*2)+q)); break;
   877e4:	b9407fe3 	ldr	w3, [sp, #124]
   877e8:	aa0003e4 	mov	x4, x0
   877ec:	d0000062 	adrp	x2, 95000 <sd_init+0x3470>
   877f0:	aa1303e0 	mov	x0, x19
   877f4:	91144042 	add	x2, x2, #0x510
   877f8:	d0000061 	adrp	x1, 95000 <sd_init+0x3470>
   877fc:	9113e021 	add	x1, x1, #0x4f8
   87800:	97ffe982 	bl	81e08 <sprintf>
   87804:	8b204273 	add	x19, x19, w0, uxtw
   87808:	17fffad6 	b	86360 <disasm+0x2380>
				case disasm_arg_simd0: str+=sprintf(str,"#0.0"); break;
   8780c:	aa1303e0 	mov	x0, x19
   87810:	d0000061 	adrp	x1, 95000 <sd_init+0x3470>
   87814:	911cc021 	add	x1, x1, #0x730
   87818:	97ffe97c 	bl	81e08 <sprintf>
   8781c:	8b204273 	add	x19, x19, w0, uxtw
   87820:	17fffad0 	b	86360 <disasm+0x2380>
				case disasm_arg_FPz2t: str+=sprintf(str,"%c%d", z==1?'h':'s', t); break;
   87824:	b94107e2 	ldr	w2, [sp, #260]
   87828:	aa1303e0 	mov	x0, x19
   8782c:	f94057e1 	ldr	x1, [sp, #168]
   87830:	2a1a03e3 	mov	w3, w26
   87834:	97ffe975 	bl	81e08 <sprintf>
   87838:	8b204273 	add	x19, x19, w0, uxtw
   8783c:	17fffac9 	b	86360 <disasm+0x2380>
				case disasm_arg_FPz2n: str+=sprintf(str,"%c%d", z==1?'h':'s', n); break;
   87840:	b94107e2 	ldr	w2, [sp, #260]
   87844:	aa1303e0 	mov	x0, x19
   87848:	f94057e1 	ldr	x1, [sp, #168]
   8784c:	2a1903e3 	mov	w3, w25
   87850:	97ffe96e 	bl	81e08 <sprintf>
   87854:	8b204273 	add	x19, x19, w0, uxtw
   87858:	17fffac2 	b	86360 <disasm+0x2380>
				case disasm_arg_FPz2m: str+=sprintf(str,"%c%d", z==1?'h':'s', m); break;
   8785c:	b9407fe3 	ldr	w3, [sp, #124]
   87860:	aa1303e0 	mov	x0, x19
   87864:	b94107e2 	ldr	w2, [sp, #260]
   87868:	f94057e1 	ldr	x1, [sp, #168]
   8786c:	97ffe967 	bl	81e08 <sprintf>
   87870:	8b204273 	add	x19, x19, w0, uxtw
   87874:	17fffabb 	b	86360 <disasm+0x2380>
char *disasm_str(char*s,int n) {if(!s)return "?";while(n){s++;if(!*s){s++;n--;}}return *s?s:"?";};
   87878:	b940e3e1 	ldr	w1, [sp, #224]
   8787c:	f9405be0 	ldr	x0, [sp, #176]
   87880:	9133e000 	add	x0, x0, #0xcf8
   87884:	97ffef33 	bl	83550 <disasm_str.part.0>
				case disasm_arg_VnT: str+=sprintf(str,"%s", "V%d.%s", n, disasm_str(quantum,(z<<1)|q)); break;
   87888:	d0000062 	adrp	x2, 95000 <sd_init+0x3470>
   8788c:	aa0003e4 	mov	x4, x0
   87890:	91144042 	add	x2, x2, #0x510
   87894:	aa1303e0 	mov	x0, x19
   87898:	d0000061 	adrp	x1, 95000 <sd_init+0x3470>
   8789c:	2a1903e3 	mov	w3, w25
   878a0:	9113e021 	add	x1, x1, #0x4f8
   878a4:	97ffe959 	bl	81e08 <sprintf>
   878a8:	8b204273 	add	x19, x19, w0, uxtw
   878ac:	17fffaad 	b	86360 <disasm+0x2380>
char *disasm_str(char*s,int n) {if(!s)return "?";while(n){s++;if(!*s){s++;n--;}}return *s?s:"?";};
   878b0:	b940e3e1 	ldr	w1, [sp, #224]
   878b4:	f9405be0 	ldr	x0, [sp, #176]
   878b8:	9133e000 	add	x0, x0, #0xcf8
   878bc:	97ffef25 	bl	83550 <disasm_str.part.0>
				case disasm_arg_VmT: str+=sprintf(str,"%s", "V%d.%s", m, disasm_str(quantum,(z<<1)|q)); break;
   878c0:	b9407fe3 	ldr	w3, [sp, #124]
   878c4:	aa0003e4 	mov	x4, x0
   878c8:	d0000062 	adrp	x2, 95000 <sd_init+0x3470>
   878cc:	aa1303e0 	mov	x0, x19
   878d0:	91144042 	add	x2, x2, #0x510
   878d4:	d0000061 	adrp	x1, 95000 <sd_init+0x3470>
   878d8:	9113e021 	add	x1, x1, #0x4f8
   878dc:	97ffe94b 	bl	81e08 <sprintf>
   878e0:	8b204273 	add	x19, x19, w0, uxtw
   878e4:	17fffa9f 	b	86360 <disasm+0x2380>
				case disasm_arg_FPz3t: str+=sprintf(str,"%c%d", z==3?'d':(z==2?'s':(z==1?'h':'b')), t); break;
   878e8:	71000eff 	cmp	w23, #0x3
   878ec:	52800c82 	mov	w2, #0x64                  	// #100
   878f0:	54000100 	b.eq	87910 <disasm+0x3930>  // b.none
   878f4:	71000aff 	cmp	w23, #0x2
   878f8:	52800e62 	mov	w2, #0x73                  	// #115
   878fc:	540000a0 	b.eq	87910 <disasm+0x3930>  // b.none
   87900:	710006ff 	cmp	w23, #0x1
   87904:	52800d02 	mov	w2, #0x68                  	// #104
   87908:	52800c40 	mov	w0, #0x62                  	// #98
   8790c:	1a800042 	csel	w2, w2, w0, eq  // eq = none
   87910:	f94057e1 	ldr	x1, [sp, #168]
   87914:	aa1303e0 	mov	x0, x19
   87918:	2a1a03e3 	mov	w3, w26
   8791c:	97ffe93b 	bl	81e08 <sprintf>
   87920:	8b204273 	add	x19, x19, w0, uxtw
   87924:	17fffa8f 	b	86360 <disasm+0x2380>
				case disasm_arg_FPz3n: str+=sprintf(str,"%c%d", z==3?'d':(z==2?'s':(z==1?'h':'b')), n); break;
   87928:	71000eff 	cmp	w23, #0x3
   8792c:	52800c82 	mov	w2, #0x64                  	// #100
   87930:	54000100 	b.eq	87950 <disasm+0x3970>  // b.none
   87934:	71000aff 	cmp	w23, #0x2
   87938:	52800e62 	mov	w2, #0x73                  	// #115
   8793c:	540000a0 	b.eq	87950 <disasm+0x3970>  // b.none
   87940:	710006ff 	cmp	w23, #0x1
   87944:	52800d02 	mov	w2, #0x68                  	// #104
   87948:	52800c40 	mov	w0, #0x62                  	// #98
   8794c:	1a800042 	csel	w2, w2, w0, eq  // eq = none
   87950:	f94057e1 	ldr	x1, [sp, #168]
   87954:	aa1303e0 	mov	x0, x19
   87958:	2a1903e3 	mov	w3, w25
   8795c:	97ffe92b 	bl	81e08 <sprintf>
   87960:	8b204273 	add	x19, x19, w0, uxtw
   87964:	17fffa7f 	b	86360 <disasm+0x2380>
				case disasm_arg_FPz4n: str+=sprintf(str,"%c%d", z==2?'d':(z==1?'s':'h'), n); break;
   87968:	71000aff 	cmp	w23, #0x2
   8796c:	52800c82 	mov	w2, #0x64                  	// #100
   87970:	540000a0 	b.eq	87984 <disasm+0x39a4>  // b.none
   87974:	710006ff 	cmp	w23, #0x1
   87978:	52800e62 	mov	w2, #0x73                  	// #115
   8797c:	52800d00 	mov	w0, #0x68                  	// #104
   87980:	1a800042 	csel	w2, w2, w0, eq  // eq = none
   87984:	f94057e1 	ldr	x1, [sp, #168]
   87988:	aa1303e0 	mov	x0, x19
   8798c:	2a1903e3 	mov	w3, w25
   87990:	97ffe91e 	bl	81e08 <sprintf>
   87994:	8b204273 	add	x19, x19, w0, uxtw
   87998:	17fffa72 	b	86360 <disasm+0x2380>
char *disasm_str(char*s,int n) {if(!s)return "?";while(n){s++;if(!*s){s++;n--;}}return *s?s:"?";};
   8799c:	b9410fe1 	ldr	w1, [sp, #268]
   879a0:	f9405be0 	ldr	x0, [sp, #176]
   879a4:	9133e000 	add	x0, x0, #0xcf8
   879a8:	97ffeeea 	bl	83550 <disasm_str.part.0>
				case disasm_arg_VnT3: str+=sprintf(str,"%s", "V%d.%s", n, disasm_str(quantum,(z<<1)+3)); break;
   879ac:	d0000062 	adrp	x2, 95000 <sd_init+0x3470>
   879b0:	aa0003e4 	mov	x4, x0
   879b4:	91144042 	add	x2, x2, #0x510
   879b8:	aa1303e0 	mov	x0, x19
   879bc:	d0000061 	adrp	x1, 95000 <sd_init+0x3470>
   879c0:	2a1903e3 	mov	w3, w25
   879c4:	9113e021 	add	x1, x1, #0x4f8
   879c8:	97ffe910 	bl	81e08 <sprintf>
   879cc:	8b204273 	add	x19, x19, w0, uxtw
   879d0:	17fffa64 	b	86360 <disasm+0x2380>
				case disasm_arg_Vn2d: str+=sprintf(str,"V%d.2d", n); break;
   879d4:	aa1303e0 	mov	x0, x19
   879d8:	d0000061 	adrp	x1, 95000 <sd_init+0x3470>
   879dc:	2a1903e2 	mov	w2, w25
   879e0:	911ce021 	add	x1, x1, #0x738
   879e4:	97ffe909 	bl	81e08 <sprintf>
   879e8:	8b204273 	add	x19, x19, w0, uxtw
   879ec:	17fffa5d 	b	86360 <disasm+0x2380>
				case disasm_arg_Vn2h: str+=sprintf(str,"V%d.2h", n); break;
   879f0:	aa1303e0 	mov	x0, x19
   879f4:	d0000061 	adrp	x1, 95000 <sd_init+0x3470>
   879f8:	2a1903e2 	mov	w2, w25
   879fc:	911d0021 	add	x1, x1, #0x740
   87a00:	97ffe902 	bl	81e08 <sprintf>
   87a04:	8b204273 	add	x19, x19, w0, uxtw
   87a08:	17fffa56 	b	86360 <disasm+0x2380>
				case disasm_arg_Vnz: str+=sprintf(str,"V%d.2%c", n, z?'d':'s'); break;
   87a0c:	b9424be3 	ldr	w3, [sp, #584]
   87a10:	aa1303e0 	mov	x0, x19
   87a14:	d0000061 	adrp	x1, 95000 <sd_init+0x3470>
   87a18:	2a1903e2 	mov	w2, w25
   87a1c:	911d2021 	add	x1, x1, #0x748
   87a20:	97ffe8fa 	bl	81e08 <sprintf>
   87a24:	8b204273 	add	x19, x19, w0, uxtw
   87a28:	17fffa4e 	b	86360 <disasm+0x2380>
				case disasm_arg_FPz4t: str+=sprintf(str,"%c%d", z==2?'d':(z==1?'s':'h'), t); break;
   87a2c:	71000aff 	cmp	w23, #0x2
   87a30:	52800c82 	mov	w2, #0x64                  	// #100
   87a34:	540000a0 	b.eq	87a48 <disasm+0x3a68>  // b.none
   87a38:	710006ff 	cmp	w23, #0x1
   87a3c:	52800e62 	mov	w2, #0x73                  	// #115
   87a40:	52800d00 	mov	w0, #0x68                  	// #104
   87a44:	1a800042 	csel	w2, w2, w0, eq  // eq = none
   87a48:	f94057e1 	ldr	x1, [sp, #168]
   87a4c:	aa1303e0 	mov	x0, x19
   87a50:	2a1a03e3 	mov	w3, w26
   87a54:	97ffe8ed 	bl	81e08 <sprintf>
   87a58:	8b204273 	add	x19, x19, w0, uxtw
   87a5c:	17fffa41 	b	86360 <disasm+0x2380>
char *disasm_str(char*s,int n) {if(!s)return "?";while(n){s++;if(!*s){s++;n--;}}return *s?s:"?";};
   87a60:	b940c7e1 	ldr	w1, [sp, #196]
   87a64:	f9405be0 	ldr	x0, [sp, #176]
   87a68:	9133e000 	add	x0, x0, #0xcf8
   87a6c:	97ffeeb9 	bl	83550 <disasm_str.part.0>
				case disasm_arg_Vtz: str+=sprintf(str,"%s", "V%d.%s", t, disasm_str(quantum,4+(z*2))); break;
   87a70:	d0000062 	adrp	x2, 95000 <sd_init+0x3470>
   87a74:	aa0003e4 	mov	x4, x0
   87a78:	91144042 	add	x2, x2, #0x510
   87a7c:	aa1303e0 	mov	x0, x19
   87a80:	d0000061 	adrp	x1, 95000 <sd_init+0x3470>
   87a84:	2a1a03e3 	mov	w3, w26
   87a88:	9113e021 	add	x1, x1, #0x4f8
   87a8c:	97ffe8df 	bl	81e08 <sprintf>
   87a90:	8b204273 	add	x19, x19, w0, uxtw
   87a94:	17fffa33 	b	86360 <disasm+0x2380>
				case disasm_arg_FPz3m: str+=sprintf(str,"%c%d", z==3?'d':(z==2?'s':(z==1?'h':'b')), m); break;
   87a98:	71000eff 	cmp	w23, #0x3
   87a9c:	52800c82 	mov	w2, #0x64                  	// #100
   87aa0:	54000100 	b.eq	87ac0 <disasm+0x3ae0>  // b.none
   87aa4:	71000aff 	cmp	w23, #0x2
   87aa8:	52800e62 	mov	w2, #0x73                  	// #115
   87aac:	540000a0 	b.eq	87ac0 <disasm+0x3ae0>  // b.none
   87ab0:	710006ff 	cmp	w23, #0x1
   87ab4:	52800d02 	mov	w2, #0x68                  	// #104
   87ab8:	52800c40 	mov	w0, #0x62                  	// #98
   87abc:	1a800042 	csel	w2, w2, w0, eq  // eq = none
   87ac0:	b9407fe3 	ldr	w3, [sp, #124]
   87ac4:	aa1303e0 	mov	x0, x19
   87ac8:	f94057e1 	ldr	x1, [sp, #168]
   87acc:	97ffe8cf 	bl	81e08 <sprintf>
   87ad0:	8b204273 	add	x19, x19, w0, uxtw
   87ad4:	17fffa23 	b	86360 <disasm+0x2380>
				case disasm_arg_Dt: str+=sprintf(str,"d%d", t); break;
   87ad8:	aa1303e0 	mov	x0, x19
   87adc:	d0000061 	adrp	x1, 95000 <sd_init+0x3470>
   87ae0:	2a1a03e2 	mov	w2, w26
   87ae4:	911d4021 	add	x1, x1, #0x750
   87ae8:	97ffe8c8 	bl	81e08 <sprintf>
   87aec:	8b204273 	add	x19, x19, w0, uxtw
   87af0:	17fffa1c 	b	86360 <disasm+0x2380>
				case disasm_arg_Dn: str+=sprintf(str,"d%d", n); break;
   87af4:	aa1303e0 	mov	x0, x19
   87af8:	d0000061 	adrp	x1, 95000 <sd_init+0x3470>
   87afc:	2a1903e2 	mov	w2, w25
   87b00:	911d4021 	add	x1, x1, #0x750
   87b04:	97ffe8c1 	bl	81e08 <sprintf>
   87b08:	8b204273 	add	x19, x19, w0, uxtw
   87b0c:	17fffa15 	b	86360 <disasm+0x2380>
				case disasm_arg_shrshift: str+=sprintf(str,"#%d", ((j>>3)==1?16:((j>>4)==1?32:((j>>5)==1?64:128)))-j); break;
   87b10:	b940d7e0 	ldr	w0, [sp, #212]
   87b14:	52800202 	mov	w2, #0x10                  	// #16
   87b18:	7100041f 	cmp	w0, #0x1
   87b1c:	54000140 	b.eq	87b44 <disasm+0x3b64>  // b.none
   87b20:	b940dbe0 	ldr	w0, [sp, #216]
   87b24:	52800402 	mov	w2, #0x20                  	// #32
   87b28:	7100041f 	cmp	w0, #0x1
   87b2c:	540000c0 	b.eq	87b44 <disasm+0x3b64>  // b.none
   87b30:	b9411fe0 	ldr	w0, [sp, #284]
   87b34:	52801002 	mov	w2, #0x80                  	// #128
   87b38:	7100041f 	cmp	w0, #0x1
   87b3c:	52800800 	mov	w0, #0x40                  	// #64
   87b40:	1a801042 	csel	w2, w2, w0, ne  // ne = any
   87b44:	aa1303e0 	mov	x0, x19
   87b48:	4b150042 	sub	w2, w2, w21
   87b4c:	d0000061 	adrp	x1, 95000 <sd_init+0x3470>
   87b50:	9114a021 	add	x1, x1, #0x528
   87b54:	97ffe8ad 	bl	81e08 <sprintf>
   87b58:	8b204273 	add	x19, x19, w0, uxtw
   87b5c:	17fffa01 	b	86360 <disasm+0x2380>
				case disasm_arg_Vtj2: str+=sprintf(str,"%s", "V%d.%s", t, disasm_str(quantum,((j>>3)==1?0:((j>>4)==1?2:((j>>5)==1?4:6)))|q)); break;
   87b60:	b940d7e0 	ldr	w0, [sp, #212]
   87b64:	2a1803e1 	mov	w1, w24
   87b68:	7100041f 	cmp	w0, #0x1
   87b6c:	54000140 	b.eq	87b94 <disasm+0x3bb4>  // b.none
   87b70:	b940dbe0 	ldr	w0, [sp, #216]
   87b74:	321f0301 	orr	w1, w24, #0x2
   87b78:	7100041f 	cmp	w0, #0x1
   87b7c:	540000c0 	b.eq	87b94 <disasm+0x3bb4>  // b.none
   87b80:	b9411fe0 	ldr	w0, [sp, #284]
   87b84:	321f0701 	orr	w1, w24, #0x6
   87b88:	7100041f 	cmp	w0, #0x1
   87b8c:	321e0300 	orr	w0, w24, #0x4
   87b90:	1a801021 	csel	w1, w1, w0, ne  // ne = any
char *disasm_str(char*s,int n) {if(!s)return "?";while(n){s++;if(!*s){s++;n--;}}return *s?s:"?";};
   87b94:	f9405be0 	ldr	x0, [sp, #176]
   87b98:	9133e000 	add	x0, x0, #0xcf8
   87b9c:	97ffee6d 	bl	83550 <disasm_str.part.0>
				case disasm_arg_Vtj2: str+=sprintf(str,"%s", "V%d.%s", t, disasm_str(quantum,((j>>3)==1?0:((j>>4)==1?2:((j>>5)==1?4:6)))|q)); break;
   87ba0:	d0000062 	adrp	x2, 95000 <sd_init+0x3470>
   87ba4:	aa0003e4 	mov	x4, x0
   87ba8:	91144042 	add	x2, x2, #0x510
   87bac:	aa1303e0 	mov	x0, x19
   87bb0:	d0000061 	adrp	x1, 95000 <sd_init+0x3470>
   87bb4:	2a1a03e3 	mov	w3, w26
   87bb8:	9113e021 	add	x1, x1, #0x4f8
   87bbc:	97ffe893 	bl	81e08 <sprintf>
   87bc0:	8b204273 	add	x19, x19, w0, uxtw
   87bc4:	17fff9e7 	b	86360 <disasm+0x2380>
				case disasm_arg_Vnj2: str+=sprintf(str,"%s", "V%d.%s", n, disasm_str(quantum,((j>>3)==1?0:((j>>4)==1?2:((j>>5)==1?4:6)))|q)); break;
   87bc8:	b940d7e0 	ldr	w0, [sp, #212]
   87bcc:	2a1803e1 	mov	w1, w24
   87bd0:	7100041f 	cmp	w0, #0x1
   87bd4:	54000140 	b.eq	87bfc <disasm+0x3c1c>  // b.none
   87bd8:	b940dbe0 	ldr	w0, [sp, #216]
   87bdc:	321f0301 	orr	w1, w24, #0x2
   87be0:	7100041f 	cmp	w0, #0x1
   87be4:	540000c0 	b.eq	87bfc <disasm+0x3c1c>  // b.none
   87be8:	b9411fe0 	ldr	w0, [sp, #284]
   87bec:	321f0701 	orr	w1, w24, #0x6
   87bf0:	7100041f 	cmp	w0, #0x1
   87bf4:	321e0300 	orr	w0, w24, #0x4
   87bf8:	1a801021 	csel	w1, w1, w0, ne  // ne = any
char *disasm_str(char*s,int n) {if(!s)return "?";while(n){s++;if(!*s){s++;n--;}}return *s?s:"?";};
   87bfc:	f9405be0 	ldr	x0, [sp, #176]
   87c00:	9133e000 	add	x0, x0, #0xcf8
   87c04:	97ffee53 	bl	83550 <disasm_str.part.0>
				case disasm_arg_Vnj2: str+=sprintf(str,"%s", "V%d.%s", n, disasm_str(quantum,((j>>3)==1?0:((j>>4)==1?2:((j>>5)==1?4:6)))|q)); break;
   87c08:	d0000062 	adrp	x2, 95000 <sd_init+0x3470>
   87c0c:	aa0003e4 	mov	x4, x0
   87c10:	91144042 	add	x2, x2, #0x510
   87c14:	aa1303e0 	mov	x0, x19
   87c18:	d0000061 	adrp	x1, 95000 <sd_init+0x3470>
   87c1c:	2a1903e3 	mov	w3, w25
   87c20:	9113e021 	add	x1, x1, #0x4f8
   87c24:	97ffe879 	bl	81e08 <sprintf>
   87c28:	8b204273 	add	x19, x19, w0, uxtw
   87c2c:	17fff9cd 	b	86360 <disasm+0x2380>
				case disasm_arg_shlshift: str+=sprintf(str,"#%d", j-((j>>3)==1?8:((j>>4)==1?16:((j>>5)==1?32:64)))); break;
   87c30:	b940d7e0 	ldr	w0, [sp, #212]
   87c34:	52800102 	mov	w2, #0x8                   	// #8
   87c38:	7100041f 	cmp	w0, #0x1
   87c3c:	54000140 	b.eq	87c64 <disasm+0x3c84>  // b.none
   87c40:	b940dbe0 	ldr	w0, [sp, #216]
   87c44:	52800202 	mov	w2, #0x10                  	// #16
   87c48:	7100041f 	cmp	w0, #0x1
   87c4c:	540000c0 	b.eq	87c64 <disasm+0x3c84>  // b.none
   87c50:	b9411fe0 	ldr	w0, [sp, #284]
   87c54:	52800402 	mov	w2, #0x20                  	// #32
   87c58:	7100041f 	cmp	w0, #0x1
   87c5c:	52800800 	mov	w0, #0x40                  	// #64
   87c60:	1a800042 	csel	w2, w2, w0, eq  // eq = none
   87c64:	aa1303e0 	mov	x0, x19
   87c68:	4b0202a2 	sub	w2, w21, w2
   87c6c:	d0000061 	adrp	x1, 95000 <sd_init+0x3470>
   87c70:	9114a021 	add	x1, x1, #0x528
   87c74:	97ffe865 	bl	81e08 <sprintf>
   87c78:	8b204273 	add	x19, x19, w0, uxtw
   87c7c:	17fff9b9 	b	86360 <disasm+0x2380>
				case disasm_arg_FPnj: str+=sprintf(str,"%c%d", (j>>3)==1?'h':((j>>4)==1?'s':'d'), n); break;
   87c80:	b940d7e0 	ldr	w0, [sp, #212]
   87c84:	52800d02 	mov	w2, #0x68                  	// #104
   87c88:	7100041f 	cmp	w0, #0x1
   87c8c:	540000c0 	b.eq	87ca4 <disasm+0x3cc4>  // b.none
   87c90:	b940dbe0 	ldr	w0, [sp, #216]
   87c94:	52800e62 	mov	w2, #0x73                  	// #115
   87c98:	7100041f 	cmp	w0, #0x1
   87c9c:	52800c80 	mov	w0, #0x64                  	// #100
   87ca0:	1a800042 	csel	w2, w2, w0, eq  // eq = none
   87ca4:	f94057e1 	ldr	x1, [sp, #168]
   87ca8:	aa1303e0 	mov	x0, x19
   87cac:	2a1903e3 	mov	w3, w25
   87cb0:	97ffe856 	bl	81e08 <sprintf>
   87cb4:	8b204273 	add	x19, x19, w0, uxtw
   87cb8:	17fff9aa 	b	86360 <disasm+0x2380>
				case disasm_arg_VnTa: str+=sprintf(str,"%s", "V%d.%s", n, disasm_str(quantum,((j>>3)==1?3:((j>>4)==1?4:7)))); break;
   87cbc:	b940d7e0 	ldr	w0, [sp, #212]
   87cc0:	52800061 	mov	w1, #0x3                   	// #3
   87cc4:	7100041f 	cmp	w0, #0x1
   87cc8:	540000c0 	b.eq	87ce0 <disasm+0x3d00>  // b.none
   87ccc:	b940dbe0 	ldr	w0, [sp, #216]
   87cd0:	52800081 	mov	w1, #0x4                   	// #4
   87cd4:	7100041f 	cmp	w0, #0x1
   87cd8:	528000e0 	mov	w0, #0x7                   	// #7
   87cdc:	1a800021 	csel	w1, w1, w0, eq  // eq = none
char *disasm_str(char*s,int n) {if(!s)return "?";while(n){s++;if(!*s){s++;n--;}}return *s?s:"?";};
   87ce0:	f9405be0 	ldr	x0, [sp, #176]
   87ce4:	9133e000 	add	x0, x0, #0xcf8
   87ce8:	97ffee1a 	bl	83550 <disasm_str.part.0>
				case disasm_arg_VnTa: str+=sprintf(str,"%s", "V%d.%s", n, disasm_str(quantum,((j>>3)==1?3:((j>>4)==1?4:7)))); break;
   87cec:	d0000062 	adrp	x2, 95000 <sd_init+0x3470>
   87cf0:	aa0003e4 	mov	x4, x0
   87cf4:	91144042 	add	x2, x2, #0x510
   87cf8:	aa1303e0 	mov	x0, x19
   87cfc:	d0000061 	adrp	x1, 95000 <sd_init+0x3470>
   87d00:	2a1903e3 	mov	w3, w25
   87d04:	9113e021 	add	x1, x1, #0x4f8
   87d08:	97ffe840 	bl	81e08 <sprintf>
   87d0c:	8b204273 	add	x19, x19, w0, uxtw
   87d10:	17fff994 	b	86360 <disasm+0x2380>
				case disasm_arg_FPjt2: str+=sprintf(str,"%c%d", (j>>3)==1?'b':((j>>4)==1?'h':((j>>5)==1?'s':'d')), t); break;
   87d14:	b940d7e0 	ldr	w0, [sp, #212]
   87d18:	52800c42 	mov	w2, #0x62                  	// #98
   87d1c:	7100041f 	cmp	w0, #0x1
   87d20:	54000140 	b.eq	87d48 <disasm+0x3d68>  // b.none
   87d24:	b940dbe0 	ldr	w0, [sp, #216]
   87d28:	52800d02 	mov	w2, #0x68                  	// #104
   87d2c:	7100041f 	cmp	w0, #0x1
   87d30:	540000c0 	b.eq	87d48 <disasm+0x3d68>  // b.none
   87d34:	b9411fe0 	ldr	w0, [sp, #284]
   87d38:	52800e62 	mov	w2, #0x73                  	// #115
   87d3c:	7100041f 	cmp	w0, #0x1
   87d40:	52800c80 	mov	w0, #0x64                  	// #100
   87d44:	1a800042 	csel	w2, w2, w0, eq  // eq = none
   87d48:	f94057e1 	ldr	x1, [sp, #168]
   87d4c:	aa1303e0 	mov	x0, x19
   87d50:	2a1a03e3 	mov	w3, w26
   87d54:	97ffe82d 	bl	81e08 <sprintf>
   87d58:	8b204273 	add	x19, x19, w0, uxtw
   87d5c:	17fff981 	b	86360 <disasm+0x2380>
				case disasm_arg_FPjn2: str+=sprintf(str,"%c%d", (j>>3)==1?'b':((j>>4)==1?'h':((j>>5)==1?'s':'d')), n); break;
   87d60:	b940d7e0 	ldr	w0, [sp, #212]
   87d64:	52800c42 	mov	w2, #0x62                  	// #98
   87d68:	7100041f 	cmp	w0, #0x1
   87d6c:	54000140 	b.eq	87d94 <disasm+0x3db4>  // b.none
   87d70:	b940dbe0 	ldr	w0, [sp, #216]
   87d74:	52800d02 	mov	w2, #0x68                  	// #104
   87d78:	7100041f 	cmp	w0, #0x1
   87d7c:	540000c0 	b.eq	87d94 <disasm+0x3db4>  // b.none
   87d80:	b9411fe0 	ldr	w0, [sp, #284]
   87d84:	52800e62 	mov	w2, #0x73                  	// #115
   87d88:	7100041f 	cmp	w0, #0x1
   87d8c:	52800c80 	mov	w0, #0x64                  	// #100
   87d90:	1a800042 	csel	w2, w2, w0, eq  // eq = none
   87d94:	f94057e1 	ldr	x1, [sp, #168]
   87d98:	aa1303e0 	mov	x0, x19
   87d9c:	2a1903e3 	mov	w3, w25
   87da0:	97ffe81a 	bl	81e08 <sprintf>
   87da4:	8b204273 	add	x19, x19, w0, uxtw
   87da8:	17fff96e 	b	86360 <disasm+0x2380>
char *disasm_str(char*s,int n) {if(!s)return "?";while(n){s++;if(!*s){s++;n--;}}return *s?s:"?";};
   87dac:	b94123e1 	ldr	w1, [sp, #288]
   87db0:	f9405be0 	ldr	x0, [sp, #176]
   87db4:	9133e000 	add	x0, x0, #0xcf8
   87db8:	97ffede6 	bl	83550 <disasm_str.part.0>
				case disasm_arg_Vtz3: str+=sprintf(str,"%s", "V%d.%s", t, disasm_str(quantum,(z<<1)+6)); break;
   87dbc:	d0000062 	adrp	x2, 95000 <sd_init+0x3470>
   87dc0:	aa0003e4 	mov	x4, x0
   87dc4:	91144042 	add	x2, x2, #0x510
   87dc8:	aa1303e0 	mov	x0, x19
   87dcc:	d0000061 	adrp	x1, 95000 <sd_init+0x3470>
   87dd0:	2a1a03e3 	mov	w3, w26
   87dd4:	9113e021 	add	x1, x1, #0x4f8
   87dd8:	97ffe80c 	bl	81e08 <sprintf>
   87ddc:	8b204273 	add	x19, x19, w0, uxtw
   87de0:	17fff960 	b	86360 <disasm+0x2380>
				case disasm_arg_VmTs: str+=sprintf(str,"V%d.%c[%d]", m, z==1?'h':'s', j); break;
   87de4:	b9407fe2 	ldr	w2, [sp, #124]
   87de8:	aa1303e0 	mov	x0, x19
   87dec:	b94107e3 	ldr	w3, [sp, #260]
   87df0:	d0000061 	adrp	x1, 95000 <sd_init+0x3470>
   87df4:	2a1503e4 	mov	w4, w21
   87df8:	911d6021 	add	x1, x1, #0x758
   87dfc:	97ffe803 	bl	81e08 <sprintf>
   87e00:	8b204273 	add	x19, x19, w0, uxtw
   87e04:	17fff957 	b	86360 <disasm+0x2380>
				case disasm_arg_VmHs: str+=sprintf(str,"V%d.h[%d]", m, j); break;
   87e08:	b9407fe2 	ldr	w2, [sp, #124]
   87e0c:	aa1303e0 	mov	x0, x19
   87e10:	d0000061 	adrp	x1, 95000 <sd_init+0x3470>
   87e14:	2a1503e3 	mov	w3, w21
   87e18:	91150021 	add	x1, x1, #0x540
   87e1c:	97ffe7fb 	bl	81e08 <sprintf>
   87e20:	8b204273 	add	x19, x19, w0, uxtw
   87e24:	17fff94f 	b	86360 <disasm+0x2380>
				case disasm_arg_VmTs2: str+=sprintf(str,"V%d.%c[%d]", m, z==1?'d':'s', j); break;
   87e28:	b9407fe2 	ldr	w2, [sp, #124]
   87e2c:	aa1303e0 	mov	x0, x19
   87e30:	b9424fe3 	ldr	w3, [sp, #588]
   87e34:	d0000061 	adrp	x1, 95000 <sd_init+0x3470>
   87e38:	2a1503e4 	mov	w4, w21
   87e3c:	911d6021 	add	x1, x1, #0x758
   87e40:	97ffe7f2 	bl	81e08 <sprintf>
   87e44:	8b204273 	add	x19, x19, w0, uxtw
   87e48:	17fff946 	b	86360 <disasm+0x2380>
				case disasm_arg_Vn116b: str+=sprintf(str,"{ V%d.16b }", n); break;
   87e4c:	aa1303e0 	mov	x0, x19
   87e50:	d0000061 	adrp	x1, 95000 <sd_init+0x3470>
   87e54:	2a1903e2 	mov	w2, w25
   87e58:	911da021 	add	x1, x1, #0x768
   87e5c:	97ffe7eb 	bl	81e08 <sprintf>
   87e60:	8b204273 	add	x19, x19, w0, uxtw
   87e64:	17fff93f 	b	86360 <disasm+0x2380>
				case disasm_arg_Vn216b: str+=sprintf(str,"{ V%d.16b, V%d.16b }", n, (n+1)&0x1f); break;
   87e68:	11000723 	add	w3, w25, #0x1
   87e6c:	aa1303e0 	mov	x0, x19
   87e70:	d0000061 	adrp	x1, 95000 <sd_init+0x3470>
   87e74:	12001063 	and	w3, w3, #0x1f
   87e78:	911de021 	add	x1, x1, #0x778
   87e7c:	2a1903e2 	mov	w2, w25
   87e80:	97ffe7e2 	bl	81e08 <sprintf>
   87e84:	8b204273 	add	x19, x19, w0, uxtw
   87e88:	17fff936 	b	86360 <disasm+0x2380>
				case disasm_arg_Vn316b: str+=sprintf(str,"{ V%d.16b, V%d.16b, V%d.16b }", n, (n+1)&0x1f, (n+2)&0x1f); break;
   87e8c:	11000720 	add	w0, w25, #0x1
   87e90:	11000b24 	add	w4, w25, #0x2
   87e94:	12001003 	and	w3, w0, #0x1f
   87e98:	12001084 	and	w4, w4, #0x1f
   87e9c:	aa1303e0 	mov	x0, x19
   87ea0:	d0000061 	adrp	x1, 95000 <sd_init+0x3470>
   87ea4:	2a1903e2 	mov	w2, w25
   87ea8:	911e4021 	add	x1, x1, #0x790
   87eac:	97ffe7d7 	bl	81e08 <sprintf>
   87eb0:	8b204273 	add	x19, x19, w0, uxtw
   87eb4:	17fff92b 	b	86360 <disasm+0x2380>
				case disasm_arg_Vn416b: str+=sprintf(str,"{ V%d.16b, V%d.16b, V%d.16b, V%d.16b }", n, (n+1)&0x1f, (n+2)&0x1f, (n+3)&0x1f); break;
   87eb8:	11000b21 	add	w1, w25, #0x2
   87ebc:	11000720 	add	w0, w25, #0x1
   87ec0:	11000f25 	add	w5, w25, #0x3
   87ec4:	12001024 	and	w4, w1, #0x1f
   87ec8:	12001003 	and	w3, w0, #0x1f
   87ecc:	120010a5 	and	w5, w5, #0x1f
   87ed0:	aa1303e0 	mov	x0, x19
   87ed4:	d0000061 	adrp	x1, 95000 <sd_init+0x3470>
   87ed8:	2a1903e2 	mov	w2, w25
   87edc:	911ec021 	add	x1, x1, #0x7b0
   87ee0:	97ffe7ca 	bl	81e08 <sprintf>
   87ee4:	8b204273 	add	x19, x19, w0, uxtw
   87ee8:	17fff91e 	b	86360 <disasm+0x2380>
				case disasm_arg_Vtj: str+=sprintf(str,"V%d.%c", t, j&1?'b':((j&3)==2?'h':((j&7)==4?'s':'d'))); break;
   87eec:	b940f7e0 	ldr	w0, [sp, #244]
   87ef0:	52800c43 	mov	w3, #0x62                  	// #98
   87ef4:	35000140 	cbnz	w0, 87f1c <disasm+0x3f3c>
   87ef8:	120006a0 	and	w0, w21, #0x3
   87efc:	52800d03 	mov	w3, #0x68                  	// #104
   87f00:	7100081f 	cmp	w0, #0x2
   87f04:	540000c0 	b.eq	87f1c <disasm+0x3f3c>  // b.none
   87f08:	12000aa0 	and	w0, w21, #0x7
   87f0c:	52800e63 	mov	w3, #0x73                  	// #115
   87f10:	7100101f 	cmp	w0, #0x4
   87f14:	52800c80 	mov	w0, #0x64                  	// #100
   87f18:	1a800063 	csel	w3, w3, w0, eq  // eq = none
   87f1c:	aa1303e0 	mov	x0, x19
   87f20:	d0000061 	adrp	x1, 95000 <sd_init+0x3470>
   87f24:	2a1a03e2 	mov	w2, w26
   87f28:	911c4021 	add	x1, x1, #0x710
   87f2c:	97ffe7b7 	bl	81e08 <sprintf>
   87f30:	8b204273 	add	x19, x19, w0, uxtw
   87f34:	17fff90b 	b	86360 <disasm+0x2380>
				case disasm_arg_R2n: str+=sprintf(str,n==31?"%czr":"%c%d", ((j&15)==8?'x':'w'), n); break;
   87f38:	b94253e2 	ldr	w2, [sp, #592]
   87f3c:	aa1303e0 	mov	x0, x19
   87f40:	f9409fe1 	ldr	x1, [sp, #312]
   87f44:	2a1903e3 	mov	w3, w25
   87f48:	97ffe7b0 	bl	81e08 <sprintf>
   87f4c:	8b204273 	add	x19, x19, w0, uxtw
   87f50:	17fff904 	b	86360 <disasm+0x2380>
				case disasm_arg_FPidxk: str+=sprintf(str,"%d", k>>(k&1?1:((k&3)==2?2:((k&7)==4?3:4))), t); break;
   87f54:	b94077e1 	ldr	w1, [sp, #116]
   87f58:	52800022 	mov	w2, #0x1                   	// #1
   87f5c:	37000121 	tbnz	w1, #0, 87f80 <disasm+0x3fa0>
   87f60:	12000420 	and	w0, w1, #0x3
   87f64:	52800042 	mov	w2, #0x2                   	// #2
   87f68:	6b02001f 	cmp	w0, w2
   87f6c:	540000a0 	b.eq	87f80 <disasm+0x3fa0>  // b.none
   87f70:	12000820 	and	w0, w1, #0x7
   87f74:	7100101f 	cmp	w0, #0x4
   87f78:	1a9f07e2 	cset	w2, ne  // ne = any
   87f7c:	11000c42 	add	w2, w2, #0x3
   87f80:	b94077e0 	ldr	w0, [sp, #116]
   87f84:	d0000061 	adrp	x1, 95000 <sd_init+0x3470>
   87f88:	2a1a03e3 	mov	w3, w26
   87f8c:	911c6021 	add	x1, x1, #0x718
   87f90:	1ac22802 	asr	w2, w0, w2
   87f94:	aa1303e0 	mov	x0, x19
   87f98:	97ffe79c 	bl	81e08 <sprintf>
   87f9c:	8b204273 	add	x19, x19, w0, uxtw
   87fa0:	17fff8f0 	b	86360 <disasm+0x2380>
char *disasm_str(char*s,int n) {if(!s)return "?";while(n){s++;if(!*s){s++;n--;}}return *s?s:"?";};
   87fa4:	b94127e1 	ldr	w1, [sp, #292]
   87fa8:	f9405be0 	ldr	x0, [sp, #176]
   87fac:	9133e000 	add	x0, x0, #0xcf8
   87fb0:	97ffed68 	bl	83550 <disasm_str.part.0>
				case disasm_arg_Vtzq2: str+=sprintf(str,"%s", "V%d.%s", t, disasm_str(quantum,2+(z*2)+q)); break;
   87fb4:	d0000062 	adrp	x2, 95000 <sd_init+0x3470>
   87fb8:	aa0003e4 	mov	x4, x0
   87fbc:	91144042 	add	x2, x2, #0x510
   87fc0:	aa1303e0 	mov	x0, x19
   87fc4:	d0000061 	adrp	x1, 95000 <sd_init+0x3470>
   87fc8:	2a1a03e3 	mov	w3, w26
   87fcc:	9113e021 	add	x1, x1, #0x4f8
   87fd0:	97ffe78e 	bl	81e08 <sprintf>
   87fd4:	8b204273 	add	x19, x19, w0, uxtw
   87fd8:	17fff8e2 	b	86360 <disasm+0x2380>
char *disasm_str(char*s,int n) {if(!s)return "?";while(n){s++;if(!*s){s++;n--;}}return *s?s:"?";};
   87fdc:	b940d3e1 	ldr	w1, [sp, #208]
   87fe0:	f9405be0 	ldr	x0, [sp, #176]
   87fe4:	9133e000 	add	x0, x0, #0xcf8
   87fe8:	97ffed5a 	bl	83550 <disasm_str.part.0>
				case disasm_arg_VnT2: str+=sprintf(str,"%s", "V%d.%s", n, disasm_str(quantum,z+3)); break;
   87fec:	d0000062 	adrp	x2, 95000 <sd_init+0x3470>
   87ff0:	aa0003e4 	mov	x4, x0
   87ff4:	91144042 	add	x2, x2, #0x510
   87ff8:	aa1303e0 	mov	x0, x19
   87ffc:	d0000061 	adrp	x1, 95000 <sd_init+0x3470>
   88000:	2a1903e3 	mov	w3, w25
   88004:	9113e021 	add	x1, x1, #0x4f8
   88008:	97ffe780 	bl	81e08 <sprintf>
   8800c:	8b204273 	add	x19, x19, w0, uxtw
   88010:	17fff8d4 	b	86360 <disasm+0x2380>
char *disasm_str(char*s,int n) {if(!s)return "?";while(n){s++;if(!*s){s++;n--;}}return *s?s:"?";};
   88014:	b94123e1 	ldr	w1, [sp, #288]
   88018:	f9405be0 	ldr	x0, [sp, #176]
   8801c:	9133e000 	add	x0, x0, #0xcf8
   88020:	97ffed4c 	bl	83550 <disasm_str.part.0>
				case disasm_arg_Vnz3: str+=sprintf(str,"%s", "V%d.%s", n, disasm_str(quantum,(z<<1)+6)); break;
   88024:	b0000062 	adrp	x2, 95000 <sd_init+0x3470>
   88028:	aa0003e4 	mov	x4, x0
   8802c:	91144042 	add	x2, x2, #0x510
   88030:	aa1303e0 	mov	x0, x19
   88034:	b0000061 	adrp	x1, 95000 <sd_init+0x3470>
   88038:	2a1903e3 	mov	w3, w25
   8803c:	9113e021 	add	x1, x1, #0x4f8
   88040:	97ffe772 	bl	81e08 <sprintf>
   88044:	8b204273 	add	x19, x19, w0, uxtw
   88048:	17fff8c6 	b	86360 <disasm+0x2380>
char *disasm_str(char*s,int n) {if(!s)return "?";while(n){s++;if(!*s){s++;n--;}}return *s?s:"?";};
   8804c:	b94127e1 	ldr	w1, [sp, #292]
   88050:	f9405be0 	ldr	x0, [sp, #176]
   88054:	9133e000 	add	x0, x0, #0xcf8
   88058:	97ffed3e 	bl	83550 <disasm_str.part.0>
				case disasm_arg_Vnzq2: str+=sprintf(str,"%s", "V%d.%s", n, disasm_str(quantum,2+(z*2)+q)); break;
   8805c:	b0000062 	adrp	x2, 95000 <sd_init+0x3470>
   88060:	aa0003e4 	mov	x4, x0
   88064:	91144042 	add	x2, x2, #0x510
   88068:	aa1303e0 	mov	x0, x19
   8806c:	b0000061 	adrp	x1, 95000 <sd_init+0x3470>
   88070:	2a1903e3 	mov	w3, w25
   88074:	9113e021 	add	x1, x1, #0x4f8
   88078:	97ffe764 	bl	81e08 <sprintf>
   8807c:	8b204273 	add	x19, x19, w0, uxtw
   88080:	17fff8b8 	b	86360 <disasm+0x2380>
				case disasm_arg_shift8: str+=sprintf(str,"#%d", 1<<(z+3)); break;
   88084:	b9418be2 	ldr	w2, [sp, #392]
   88088:	aa1303e0 	mov	x0, x19
   8808c:	b0000061 	adrp	x1, 95000 <sd_init+0x3470>
   88090:	9114a021 	add	x1, x1, #0x528
   88094:	97ffe75d 	bl	81e08 <sprintf>
   88098:	8b204273 	add	x19, x19, w0, uxtw
   8809c:	17fff8b1 	b	86360 <disasm+0x2380>
char *disasm_str(char*s,int n) {if(!s)return "?";while(n){s++;if(!*s){s++;n--;}}return *s?s:"?";};
   880a0:	b9410fe1 	ldr	w1, [sp, #268]
   880a4:	f9405be0 	ldr	x0, [sp, #176]
   880a8:	9133e000 	add	x0, x0, #0xcf8
   880ac:	97ffed29 	bl	83550 <disasm_str.part.0>
				case disasm_arg_VtT3: str+=sprintf(str,"%s", "V%d.%s", t, disasm_str(quantum,(z<<1)+3)); break;
   880b0:	b0000062 	adrp	x2, 95000 <sd_init+0x3470>
   880b4:	aa0003e4 	mov	x4, x0
   880b8:	91144042 	add	x2, x2, #0x510
   880bc:	aa1303e0 	mov	x0, x19
   880c0:	b0000061 	adrp	x1, 95000 <sd_init+0x3470>
   880c4:	2a1a03e3 	mov	w3, w26
   880c8:	9113e021 	add	x1, x1, #0x4f8
   880cc:	97ffe74f 	bl	81e08 <sprintf>
   880d0:	8b204273 	add	x19, x19, w0, uxtw
   880d4:	17fff8a3 	b	86360 <disasm+0x2380>
char *disasm_str(char*s,int n) {if(!s)return "?";while(n){s++;if(!*s){s++;n--;}}return *s?s:"?";};
   880d8:	b9410fe1 	ldr	w1, [sp, #268]
   880dc:	f9405be0 	ldr	x0, [sp, #176]
   880e0:	9133e000 	add	x0, x0, #0xcf8
   880e4:	97ffed1b 	bl	83550 <disasm_str.part.0>
				case disasm_arg_VmT3: str+=sprintf(str,"%s", "V%d.%s", m, disasm_str(quantum,(z<<1)+3)); break;
   880e8:	b9407fe3 	ldr	w3, [sp, #124]
   880ec:	aa0003e4 	mov	x4, x0
   880f0:	b0000062 	adrp	x2, 95000 <sd_init+0x3470>
   880f4:	aa1303e0 	mov	x0, x19
   880f8:	91144042 	add	x2, x2, #0x510
   880fc:	b0000061 	adrp	x1, 95000 <sd_init+0x3470>
   88100:	9113e021 	add	x1, x1, #0x4f8
   88104:	97ffe741 	bl	81e08 <sprintf>
   88108:	8b204273 	add	x19, x19, w0, uxtw
   8810c:	17fff895 	b	86360 <disasm+0x2380>
char *disasm_str(char*s,int n) {if(!s)return "?";while(n){s++;if(!*s){s++;n--;}}return *s?s:"?";};
   88110:	b94257e1 	ldr	w1, [sp, #596]
   88114:	f9405be0 	ldr	x0, [sp, #176]
   88118:	9133e000 	add	x0, x0, #0xcf8
   8811c:	97ffed0d 	bl	83550 <disasm_str.part.0>
				case disasm_arg_VtT4: str+=sprintf(str,"%s", "V%d.%s", t, disasm_str(quantum,z?8:3)); break;
   88120:	b0000062 	adrp	x2, 95000 <sd_init+0x3470>
   88124:	aa0003e4 	mov	x4, x0
   88128:	91144042 	add	x2, x2, #0x510
   8812c:	aa1303e0 	mov	x0, x19
   88130:	b0000061 	adrp	x1, 95000 <sd_init+0x3470>
   88134:	2a1a03e3 	mov	w3, w26
   88138:	9113e021 	add	x1, x1, #0x4f8
   8813c:	97ffe733 	bl	81e08 <sprintf>
   88140:	8b204273 	add	x19, x19, w0, uxtw
   88144:	17fff887 	b	86360 <disasm+0x2380>
				case disasm_arg_imm8: str+=sprintf(str,"#%x", j); break;
   88148:	aa1303e0 	mov	x0, x19
   8814c:	b0000061 	adrp	x1, 95000 <sd_init+0x3470>
   88150:	2a1503e2 	mov	w2, w21
   88154:	911f6021 	add	x1, x1, #0x7d8
   88158:	97ffe72c 	bl	81e08 <sprintf>
   8815c:	8b204273 	add	x19, x19, w0, uxtw
   88160:	17fff880 	b	86360 <disasm+0x2380>
				case disasm_arg_amountk_opt: str+=sprintf(str,!k?"":"lsl #%d", 1<<(k*3)); break;
   88164:	b94143e2 	ldr	w2, [sp, #320]
   88168:	aa1303e0 	mov	x0, x19
   8816c:	f9412fe1 	ldr	x1, [sp, #600]
   88170:	97ffe726 	bl	81e08 <sprintf>
   88174:	8b204273 	add	x19, x19, w0, uxtw
   88178:	17fff87a 	b	86360 <disasm+0x2380>
				case disasm_arg_amountk2_opt: str+=sprintf(str,!k?"":"msl #%d", 1<<(k*3)); break;
   8817c:	b94143e2 	ldr	w2, [sp, #320]
   88180:	aa1303e0 	mov	x0, x19
   88184:	f94133e1 	ldr	x1, [sp, #608]
   88188:	97ffe720 	bl	81e08 <sprintf>
   8818c:	8b204273 	add	x19, x19, w0, uxtw
   88190:	17fff874 	b	86360 <disasm+0x2380>
				case disasm_arg_imm64: str+=sprintf(str,"#0x%02x%02x%02x%02x%02x%02x%02x%02x", j&128?255:0,j&64?255:0,j&32?255:0,j&16?255:0,j&8?255:0,j&4?255:0,j&2?255:0,j&1?255:0); break;
   88194:	910803e0 	add	x0, sp, #0x200
   88198:	b9427be6 	ldr	w6, [sp, #632]
   8819c:	b9427fe7 	ldr	w7, [sp, #636]
   881a0:	b0000061 	adrp	x1, 95000 <sd_init+0x3470>
   881a4:	911f8021 	add	x1, x1, #0x7e0
   881a8:	294d0c02 	ldp	w2, w3, [x0, #104]
   881ac:	294e1404 	ldp	w4, w5, [x0, #112]
   881b0:	b94283e0 	ldr	w0, [sp, #640]
   881b4:	b90003e0 	str	w0, [sp]
   881b8:	b94287e0 	ldr	w0, [sp, #644]
   881bc:	b9000be0 	str	w0, [sp, #8]
   881c0:	aa1303e0 	mov	x0, x19
   881c4:	97ffe711 	bl	81e08 <sprintf>
   881c8:	8b204273 	add	x19, x19, w0, uxtw
   881cc:	17fff865 	b	86360 <disasm+0x2380>
				case disasm_arg_Vt2d: str+=sprintf(str,"V%d.2d", t); break;
   881d0:	aa1303e0 	mov	x0, x19
   881d4:	b0000061 	adrp	x1, 95000 <sd_init+0x3470>
   881d8:	2a1a03e2 	mov	w2, w26
   881dc:	911ce021 	add	x1, x1, #0x738
   881e0:	97ffe70a 	bl	81e08 <sprintf>
   881e4:	8b204273 	add	x19, x19, w0, uxtw
   881e8:	17fff85e 	b	86360 <disasm+0x2380>
				case disasm_arg_F16: str+=sprintf(str,"#0x02x%02x", (j&128)|(j&64?0:64)|(j&64?32:0)|(j&64?16:0)|((j>>2)&0xF), (j&3)<<6); break;
   881ec:	b94147e2 	ldr	w2, [sp, #324]
   881f0:	aa1303e0 	mov	x0, x19
   881f4:	b9414be3 	ldr	w3, [sp, #328]
   881f8:	f940abe1 	ldr	x1, [sp, #336]
   881fc:	97ffe703 	bl	81e08 <sprintf>
   88200:	8b204273 	add	x19, x19, w0, uxtw
   88204:	17fff857 	b	86360 <disasm+0x2380>
				case disasm_arg_F32: str+=sprintf(str,"#0x02x%02x0000", (j&128)|(j&64?0:64)|(j&64?32:0)|(j&64?16:0)|(j&64?8:0)|(j&64?4:0)|(j&64?2:0)|(j&32?1:0), (j&0x1f)<<3); break;
   88208:	b9414fe3 	ldr	w3, [sp, #332]
   8820c:	aa1303e0 	mov	x0, x19
   88210:	b9418fe2 	ldr	w2, [sp, #396]
   88214:	f94147e1 	ldr	x1, [sp, #648]
   88218:	97ffe6fc 	bl	81e08 <sprintf>
   8821c:	8b204273 	add	x19, x19, w0, uxtw
   88220:	17fff850 	b	86360 <disasm+0x2380>
				case disasm_arg_F64: str+=sprintf(str,"#0x02x%02x%06x", (j&128)|(j&64?0:64)|(j&64?32:0)|(j&64?16:0)|(j&64?8:0)|(j&64?4:0)|(j&64?2:0)|(j&64?1:0), (j&64?128:0)|(j&64?64:0)|(j&0x3f), 0); break;
   88224:	b9415be3 	ldr	w3, [sp, #344]
   88228:	aa1303e0 	mov	x0, x19
   8822c:	b94193e2 	ldr	w2, [sp, #400]
   88230:	52800004 	mov	w4, #0x0                   	// #0
   88234:	f9414be1 	ldr	x1, [sp, #656]
   88238:	97ffe6f4 	bl	81e08 <sprintf>
   8823c:	8b204273 	add	x19, x19, w0, uxtw
   88240:	17fff848 	b	86360 <disasm+0x2380>
				case disasm_arg_VmTs4b: str+=sprintf(str,"V%d.4b[%d]", m, j); break;
   88244:	b9407fe2 	ldr	w2, [sp, #124]
   88248:	aa1303e0 	mov	x0, x19
   8824c:	b0000061 	adrp	x1, 95000 <sd_init+0x3470>
   88250:	2a1503e3 	mov	w3, w21
   88254:	91202021 	add	x1, x1, #0x808
   88258:	97ffe6ec 	bl	81e08 <sprintf>
   8825c:	8b204273 	add	x19, x19, w0, uxtw
   88260:	17fff840 	b	86360 <disasm+0x2380>
				case disasm_arg_Vm2d: str+=sprintf(str,"V%d.2d", m); break;
   88264:	b9407fe2 	ldr	w2, [sp, #124]
   88268:	aa1303e0 	mov	x0, x19
   8826c:	b0000061 	adrp	x1, 95000 <sd_init+0x3470>
   88270:	911ce021 	add	x1, x1, #0x738
   88274:	97ffe6e5 	bl	81e08 <sprintf>
   88278:	8b204273 	add	x19, x19, w0, uxtw
   8827c:	17fff839 	b	86360 <disasm+0x2380>
				case disasm_arg_Vm16b: str+=sprintf(str,"V%d.16b", m); break;
   88280:	b9407fe2 	ldr	w2, [sp, #124]
   88284:	aa1303e0 	mov	x0, x19
   88288:	b0000061 	adrp	x1, 95000 <sd_init+0x3470>
   8828c:	911bc021 	add	x1, x1, #0x6f0
   88290:	97ffe6de 	bl	81e08 <sprintf>
   88294:	8b204273 	add	x19, x19, w0, uxtw
   88298:	17fff832 	b	86360 <disasm+0x2380>
				case disasm_arg_Vd16b: str+=sprintf(str,"V%d.16b", d); break;
   8829c:	b9408be2 	ldr	w2, [sp, #136]
   882a0:	aa1303e0 	mov	x0, x19
   882a4:	b0000061 	adrp	x1, 95000 <sd_init+0x3470>
   882a8:	911bc021 	add	x1, x1, #0x6f0
   882ac:	97ffe6d7 	bl	81e08 <sprintf>
   882b0:	8b204273 	add	x19, x19, w0, uxtw
   882b4:	17fff82b 	b	86360 <disasm+0x2380>
				case disasm_arg_Vd4s: str+=sprintf(str,"V%d.4s", d); break;
   882b8:	b9408be2 	ldr	w2, [sp, #136]
   882bc:	aa1303e0 	mov	x0, x19
   882c0:	b0000061 	adrp	x1, 95000 <sd_init+0x3470>
   882c4:	911c2021 	add	x1, x1, #0x708
   882c8:	97ffe6d0 	bl	81e08 <sprintf>
   882cc:	8b204273 	add	x19, x19, w0, uxtw
   882d0:	17fff824 	b	86360 <disasm+0x2380>
				case disasm_arg_FPz5t: str+=sprintf(str,"%c%d", z==1?'d':(z==0?'s':'h'), t); break;
   882d4:	710006ff 	cmp	w23, #0x1
   882d8:	52800c82 	mov	w2, #0x64                  	// #100
   882dc:	540000a0 	b.eq	882f0 <disasm+0x4310>  // b.none
   882e0:	710002ff 	cmp	w23, #0x0
   882e4:	52800e62 	mov	w2, #0x73                  	// #115
   882e8:	52800d00 	mov	w0, #0x68                  	// #104
   882ec:	1a800042 	csel	w2, w2, w0, eq  // eq = none
   882f0:	f94057e1 	ldr	x1, [sp, #168]
   882f4:	aa1303e0 	mov	x0, x19
   882f8:	2a1a03e3 	mov	w3, w26
   882fc:	97ffe6c3 	bl	81e08 <sprintf>
   88300:	8b204273 	add	x19, x19, w0, uxtw
   88304:	17fff817 	b	86360 <disasm+0x2380>
				case disasm_arg_fbits: str+=sprintf(str,"#%d", 64-j); break;
   88308:	aa1303e0 	mov	x0, x19
   8830c:	52800802 	mov	w2, #0x40                  	// #64
   88310:	b0000061 	adrp	x1, 95000 <sd_init+0x3470>
   88314:	4b150042 	sub	w2, w2, w21
   88318:	9114a021 	add	x1, x1, #0x528
   8831c:	97ffe6bb 	bl	81e08 <sprintf>
   88320:	8b204273 	add	x19, x19, w0, uxtw
   88324:	17fff80f 	b	86360 <disasm+0x2380>
				case disasm_arg_FPz5n: str+=sprintf(str,"%c%d", z==1?'d':(z==0?'s':'h'), n); break;
   88328:	710006ff 	cmp	w23, #0x1
   8832c:	52800c82 	mov	w2, #0x64                  	// #100
   88330:	540000a0 	b.eq	88344 <disasm+0x4364>  // b.none
   88334:	710002ff 	cmp	w23, #0x0
   88338:	52800e62 	mov	w2, #0x73                  	// #115
   8833c:	52800d00 	mov	w0, #0x68                  	// #104
   88340:	1a800042 	csel	w2, w2, w0, eq  // eq = none
   88344:	f94057e1 	ldr	x1, [sp, #168]
   88348:	aa1303e0 	mov	x0, x19
   8834c:	2a1903e3 	mov	w3, w25
   88350:	97ffe6ae 	bl	81e08 <sprintf>
   88354:	8b204273 	add	x19, x19, w0, uxtw
   88358:	17fff802 	b	86360 <disasm+0x2380>
				case disasm_arg_Vn1d: str+=sprintf(str,"V%d.1d[n]", n); break;
   8835c:	aa1303e0 	mov	x0, x19
   88360:	b0000061 	adrp	x1, 95000 <sd_init+0x3470>
   88364:	2a1903e2 	mov	w2, w25
   88368:	91206021 	add	x1, x1, #0x818
   8836c:	97ffe6a7 	bl	81e08 <sprintf>
   88370:	8b204273 	add	x19, x19, w0, uxtw
   88374:	17fff7fb 	b	86360 <disasm+0x2380>
				case disasm_arg_Vt1d: str+=sprintf(str,"V%d.1d[1]", t); break;
   88378:	aa1303e0 	mov	x0, x19
   8837c:	b0000061 	adrp	x1, 95000 <sd_init+0x3470>
   88380:	2a1a03e2 	mov	w2, w26
   88384:	9120a021 	add	x1, x1, #0x828
   88388:	97ffe6a0 	bl	81e08 <sprintf>
   8838c:	8b204273 	add	x19, x19, w0, uxtw
   88390:	17fff7f4 	b	86360 <disasm+0x2380>
				case disasm_arg_FPk5t: str+=sprintf(str,"%c%d", k==1?'d':(k==0?'s':'h'), t); break;
   88394:	b94077e0 	ldr	w0, [sp, #116]
   88398:	52800c82 	mov	w2, #0x64                  	// #100
   8839c:	7100041f 	cmp	w0, #0x1
   883a0:	540000a0 	b.eq	883b4 <disasm+0x43d4>  // b.none
   883a4:	7100001f 	cmp	w0, #0x0
   883a8:	52800e62 	mov	w2, #0x73                  	// #115
   883ac:	52800d00 	mov	w0, #0x68                  	// #104
   883b0:	1a800042 	csel	w2, w2, w0, eq  // eq = none
   883b4:	f94057e1 	ldr	x1, [sp, #168]
   883b8:	aa1303e0 	mov	x0, x19
   883bc:	2a1a03e3 	mov	w3, w26
   883c0:	97ffe692 	bl	81e08 <sprintf>
   883c4:	8b204273 	add	x19, x19, w0, uxtw
   883c8:	17fff7e6 	b	86360 <disasm+0x2380>
				case disasm_arg_FPz5m: str+=sprintf(str,"%c%d", z==1?'d':(z==0?'s':'h'), m); break;
   883cc:	710006ff 	cmp	w23, #0x1
   883d0:	52800c82 	mov	w2, #0x64                  	// #100
   883d4:	540000a0 	b.eq	883e8 <disasm+0x4408>  // b.none
   883d8:	710002ff 	cmp	w23, #0x0
   883dc:	52800e62 	mov	w2, #0x73                  	// #115
   883e0:	52800d00 	mov	w0, #0x68                  	// #104
   883e4:	1a800042 	csel	w2, w2, w0, eq  // eq = none
   883e8:	b9407fe3 	ldr	w3, [sp, #124]
   883ec:	aa1303e0 	mov	x0, x19
   883f0:	f94057e1 	ldr	x1, [sp, #168]
   883f4:	97ffe685 	bl	81e08 <sprintf>
   883f8:	8b204273 	add	x19, x19, w0, uxtw
   883fc:	17fff7d9 	b	86360 <disasm+0x2380>
				case disasm_arg_jz: str+=sprintf(str,z==3?"#0x02x%02x":(z==0?"#0x02x%02x0000":"#0x02x%02x%06x"), z==3?(j&128)|(j&64?0:64)|(j&64?32:0)|(j&64?16:0)|((j>>2)&0xF):(j&128)|(j&64?0:64)|(j&64?32:0)|(j&64?16:0)|(j&64?8:0)|(j&64?4:0)|(j&64?2:0)|(j&(z==0?32:64)?1:0),z==3?(j&3)<<6:(z==0?(j&0x1f)<<3:(j&64?128:0)|(j&64?64:0)|(j&0x3f)), 0); break;
   88400:	71000eff 	cmp	w23, #0x3
   88404:	54000da0 	b.eq	885b8 <disasm+0x45d8>  // b.none
   88408:	35000d17 	cbnz	w23, 885a8 <disasm+0x45c8>
   8840c:	b9414fe3 	ldr	w3, [sp, #332]
   88410:	b942b7e2 	ldr	w2, [sp, #692]
   88414:	f9414fe1 	ldr	x1, [sp, #664]
   88418:	aa1303e0 	mov	x0, x19
   8841c:	52800004 	mov	w4, #0x0                   	// #0
   88420:	97ffe67a 	bl	81e08 <sprintf>
   88424:	8b204273 	add	x19, x19, w0, uxtw
   88428:	17fff7ce 	b	86360 <disasm+0x2380>
		names="sqdmlal\0sqdmlsl\0sqdmull\0";
   8842c:	d0000043 	adrp	x3, 92000 <sd_init+0x470>
   88430:	91122063 	add	x3, x3, #0x488
		op=((ic32_13)&0x3); z=((ic32_22)&0x3); m=((ic32_16)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   88434:	120010a4 	and	w4, w5, #0x1f
   88438:	12001059 	and	w25, w2, #0x1f
   8843c:	1200101a 	and	w26, w0, #0x1f
		args[0]=disasm_arg_Vtz; args[1]=disasm_arg_VnT; args[2]=disasm_arg_VmT; 
   88440:	12800f42 	mov	w2, #0xffffff85            	// #-123
		names="sqdmlal\0sqdmlsl\0sqdmull\0";
   88444:	913fc060 	add	x0, x3, #0xff0
		op=((ic32_13)&0x3); z=((ic32_22)&0x3); m=((ic32_16)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   88448:	12000561 	and	w1, w11, #0x3
		args[0]=disasm_arg_Vtz; args[1]=disasm_arg_VnT; args[2]=disasm_arg_VmT; 
   8844c:	128f6e23 	mov	w3, #0xffff848e            	// #-31602
		op=((ic32_13)&0x3); z=((ic32_22)&0x3); m=((ic32_16)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   88450:	120004f7 	and	w23, w7, #0x3
		q=0;
   88454:	52800018 	mov	w24, #0x0                   	// #0
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   88458:	5280001b 	mov	w27, #0x0                   	// #0
	uint16_t op=0, om=0, j=0;
   8845c:	52800014 	mov	w20, #0x0                   	// #0
	uint32_t i=0;
   88460:	290effff 	stp	wzr, wzr, [sp, #116]
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   88464:	290fffe4 	stp	w4, wzr, [sp, #124]
   88468:	29117fff 	stp	wzr, wzr, [sp, #136]
   8846c:	29127fff 	stp	wzr, wzr, [sp, #144]
   88470:	b9009bff 	str	wzr, [sp, #152]
		args[0]=disasm_arg_Vtz; args[1]=disasm_arg_VnT; args[2]=disasm_arg_VmT; 
   88474:	790583e3 	strh	w3, [sp, #704]
   88478:	390b0be2 	strb	w2, [sp, #706]
   8847c:	17fff5f9 	b	85c60 <disasm+0x1c80>
		j=((ic32_9)&0x4)|((ic32_20)&0x3); m=((ic32_16)&0xf); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   88480:	12000ca3 	and	w3, w5, #0xf
   88484:	121e01ef 	and	w15, w15, #0x4
   88488:	12000508 	and	w8, w8, #0x3
		names="smull\0";
   8848c:	f0000041 	adrp	x1, 93000 <sd_init+0x1470>
   88490:	91162021 	add	x1, x1, #0x588
		j=((ic32_9)&0x4)|((ic32_20)&0x3); m=((ic32_16)&0xf); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   88494:	12001059 	and	w25, w2, #0x1f
   88498:	1200101a 	and	w26, w0, #0x1f
		args[0]=disasm_arg_VtT; args[1]=disasm_arg_VnT; args[2]=disasm_arg_VmTs; 
   8849c:	12800c82 	mov	w2, #0xffffff9b            	// #-101
		names="smull\0";
   884a0:	d1038020 	sub	x0, x1, #0xe0
		j=((ic32_9)&0x4)|((ic32_20)&0x3); m=((ic32_16)&0xf); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   884a4:	2a0801f4 	orr	w20, w15, w8
		z=1;q=0;
   884a8:	52800037 	mov	w23, #0x1                   	// #1
   884ac:	52800018 	mov	w24, #0x0                   	// #0
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   884b0:	5280001b 	mov	w27, #0x0                   	// #0
	uint16_t op=0, om=0, j=0;
   884b4:	52800001 	mov	w1, #0x0                   	// #0
	uint32_t i=0;
   884b8:	290effff 	stp	wzr, wzr, [sp, #116]
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   884bc:	290fffe3 	stp	w3, wzr, [sp, #124]
		args[0]=disasm_arg_VtT; args[1]=disasm_arg_VnT; args[2]=disasm_arg_VmTs; 
   884c0:	128f7b43 	mov	w3, #0xffff8425            	// #-31707
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   884c4:	29117fff 	stp	wzr, wzr, [sp, #136]
   884c8:	29127fff 	stp	wzr, wzr, [sp, #144]
   884cc:	b9009bff 	str	wzr, [sp, #152]
		args[0]=disasm_arg_VtT; args[1]=disasm_arg_VnT; args[2]=disasm_arg_VmTs; 
   884d0:	790583e3 	strh	w3, [sp, #704]
   884d4:	390b0be2 	strb	w2, [sp, #706]
   884d8:	17fff5e2 	b	85c60 <disasm+0x1c80>
		op=((ic32_14)&0x1); j=((ic32_10)&0x2)|((ic32_21)&0x1); m=((ic32_16)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   884dc:	121f0294 	and	w20, w20, #0x2
   884e0:	1200018c 	and	w12, w12, #0x1
		names="smlal\0smlsl\0";
   884e4:	f0000043 	adrp	x3, 93000 <sd_init+0x1470>
   884e8:	91162063 	add	x3, x3, #0x588
		op=((ic32_14)&0x1); j=((ic32_10)&0x2)|((ic32_21)&0x1); m=((ic32_16)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   884ec:	120010a4 	and	w4, w5, #0x1f
   884f0:	12001059 	and	w25, w2, #0x1f
   884f4:	1200101a 	and	w26, w0, #0x1f
		args[0]=disasm_arg_Vtz3; args[1]=disasm_arg_VnT; args[2]=disasm_arg_VmTs; 
   884f8:	12800c82 	mov	w2, #0xffffff9b            	// #-101
		names="smlal\0smlsl\0";
   884fc:	d103c060 	sub	x0, x3, #0xf0
		op=((ic32_14)&0x1); j=((ic32_10)&0x2)|((ic32_21)&0x1); m=((ic32_16)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   88500:	2a0c0294 	orr	w20, w20, w12
		args[0]=disasm_arg_Vtz3; args[1]=disasm_arg_VnT; args[2]=disasm_arg_VmTs; 
   88504:	128f6ca3 	mov	w3, #0xffff849a            	// #-31590
		op=((ic32_14)&0x1); j=((ic32_10)&0x2)|((ic32_21)&0x1); m=((ic32_16)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   88508:	12000221 	and	w1, w17, #0x1
		z=2;q=0;
   8850c:	52800057 	mov	w23, #0x2                   	// #2
   88510:	52800018 	mov	w24, #0x0                   	// #0
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   88514:	5280001b 	mov	w27, #0x0                   	// #0
	uint32_t i=0;
   88518:	290effff 	stp	wzr, wzr, [sp, #116]
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8851c:	290fffe4 	stp	w4, wzr, [sp, #124]
   88520:	29117fff 	stp	wzr, wzr, [sp, #136]
   88524:	29127fff 	stp	wzr, wzr, [sp, #144]
   88528:	b9009bff 	str	wzr, [sp, #152]
		args[0]=disasm_arg_Vtz3; args[1]=disasm_arg_VnT; args[2]=disasm_arg_VmTs; 
   8852c:	790583e3 	strh	w3, [sp, #704]
   88530:	390b0be2 	strb	w2, [sp, #706]
   88534:	17fff5cb 	b	85c60 <disasm+0x1c80>
char *disasm_str(char*s,int n) {if(!s)return "?";while(n){s++;if(!*s){s++;n--;}}return *s?s:"?";};
   88538:	f9405be0 	ldr	x0, [sp, #176]
   8853c:	9135c000 	add	x0, x0, #0xd70
   88540:	97ffec04 	bl	83550 <disasm_str.part.0>
   88544:	aa0003e3 	mov	x3, x0
   88548:	17fffba3 	b	873d4 <disasm+0x33f4>
		j=((ic32_10)&0x2)|((ic32_21)&0x1); m=((ic32_16)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8854c:	120010a3 	and	w3, w5, #0x1f
   88550:	121f0294 	and	w20, w20, #0x2
   88554:	1200018c 	and	w12, w12, #0x1
		names="smull\0";
   88558:	f0000041 	adrp	x1, 93000 <sd_init+0x1470>
   8855c:	91162021 	add	x1, x1, #0x588
		j=((ic32_10)&0x2)|((ic32_21)&0x1); m=((ic32_16)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   88560:	12001059 	and	w25, w2, #0x1f
   88564:	1200101a 	and	w26, w0, #0x1f
		args[0]=disasm_arg_VtT; args[1]=disasm_arg_VnT; args[2]=disasm_arg_VmTs; 
   88568:	12800c82 	mov	w2, #0xffffff9b            	// #-101
		names="smull\0";
   8856c:	d1038020 	sub	x0, x1, #0xe0
		j=((ic32_10)&0x2)|((ic32_21)&0x1); m=((ic32_16)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   88570:	2a0c0294 	orr	w20, w20, w12
		z=2;q=0;
   88574:	52800057 	mov	w23, #0x2                   	// #2
   88578:	52800018 	mov	w24, #0x0                   	// #0
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8857c:	5280001b 	mov	w27, #0x0                   	// #0
	uint16_t op=0, om=0, j=0;
   88580:	52800001 	mov	w1, #0x0                   	// #0
	uint32_t i=0;
   88584:	290effff 	stp	wzr, wzr, [sp, #116]
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   88588:	290fffe3 	stp	w3, wzr, [sp, #124]
		args[0]=disasm_arg_VtT; args[1]=disasm_arg_VnT; args[2]=disasm_arg_VmTs; 
   8858c:	128f7b43 	mov	w3, #0xffff8425            	// #-31707
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   88590:	29117fff 	stp	wzr, wzr, [sp, #136]
   88594:	29127fff 	stp	wzr, wzr, [sp, #144]
   88598:	b9009bff 	str	wzr, [sp, #152]
		args[0]=disasm_arg_VtT; args[1]=disasm_arg_VnT; args[2]=disasm_arg_VmTs; 
   8859c:	790583e3 	strh	w3, [sp, #704]
   885a0:	390b0be2 	strb	w2, [sp, #706]
   885a4:	17fff5af 	b	85c60 <disasm+0x1c80>
				case disasm_arg_jz: str+=sprintf(str,z==3?"#0x02x%02x":(z==0?"#0x02x%02x0000":"#0x02x%02x%06x"), z==3?(j&128)|(j&64?0:64)|(j&64?32:0)|(j&64?16:0)|((j>>2)&0xF):(j&128)|(j&64?0:64)|(j&64?32:0)|(j&64?16:0)|(j&64?8:0)|(j&64?4:0)|(j&64?2:0)|(j&(z==0?32:64)?1:0),z==3?(j&3)<<6:(z==0?(j&0x1f)<<3:(j&64?128:0)|(j&64?64:0)|(j&0x3f)), 0); break;
   885a8:	b9415be3 	ldr	w3, [sp, #344]
   885ac:	b942b3e2 	ldr	w2, [sp, #688]
   885b0:	f9414fe1 	ldr	x1, [sp, #664]
   885b4:	17ffff99 	b	88418 <disasm+0x4438>
   885b8:	b94147e2 	ldr	w2, [sp, #324]
   885bc:	b9414be3 	ldr	w3, [sp, #328]
   885c0:	f940abe1 	ldr	x1, [sp, #336]
   885c4:	17ffff95 	b	88418 <disasm+0x4438>
		names="fcvt\0";
   885c8:	f0000041 	adrp	x1, 93000 <sd_init+0x1470>
   885cc:	91162021 	add	x1, x1, #0x588
		n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   885d0:	12001059 	and	w25, w2, #0x1f
   885d4:	1200101a 	and	w26, w0, #0x1f
		args[0]=disasm_arg_St; args[1]=disasm_arg_Dn; 
   885d8:	128dd1c2 	mov	w2, #0xffff9171            	// #-28303
		names="fcvt\0";
   885dc:	d1036020 	sub	x0, x1, #0xd8
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   885e0:	52800017 	mov	w23, #0x0                   	// #0
   885e4:	52800018 	mov	w24, #0x0                   	// #0
   885e8:	5280001b 	mov	w27, #0x0                   	// #0
	uint16_t op=0, om=0, j=0;
   885ec:	52800014 	mov	w20, #0x0                   	// #0
   885f0:	52800001 	mov	w1, #0x0                   	// #0
	uint32_t i=0;
   885f4:	290effff 	stp	wzr, wzr, [sp, #116]
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   885f8:	290fffff 	stp	wzr, wzr, [sp, #124]
   885fc:	29117fff 	stp	wzr, wzr, [sp, #136]
   88600:	29127fff 	stp	wzr, wzr, [sp, #144]
   88604:	b9009bff 	str	wzr, [sp, #152]
		args[0]=disasm_arg_St; args[1]=disasm_arg_Dn; 
   88608:	790583e2 	strh	w2, [sp, #704]
   8860c:	17fff595 	b	85c60 <disasm+0x1c80>
		names="fcvt\0";
   88610:	f0000041 	adrp	x1, 93000 <sd_init+0x1470>
   88614:	91162021 	add	x1, x1, #0x588
		z=((ic32_22)&0x3); k=((ic32_15)&0x3); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   88618:	120004c3 	and	w3, w6, #0x3
   8861c:	12001059 	and	w25, w2, #0x1f
   88620:	1200101a 	and	w26, w0, #0x1f
		args[0]=disasm_arg_FPk5t; args[1]=disasm_arg_FPz5n; 
   88624:	12886802 	mov	w2, #0xffffbcbf            	// #-17217
		names="fcvt\0";
   88628:	d1036020 	sub	x0, x1, #0xd8
		z=((ic32_22)&0x3); k=((ic32_15)&0x3); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8862c:	120004f7 	and	w23, w7, #0x3
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   88630:	52800018 	mov	w24, #0x0                   	// #0
   88634:	5280001b 	mov	w27, #0x0                   	// #0
	uint16_t op=0, om=0, j=0;
   88638:	52800014 	mov	w20, #0x0                   	// #0
   8863c:	52800001 	mov	w1, #0x0                   	// #0
	uint32_t i=0;
   88640:	290effe3 	stp	w3, wzr, [sp, #116]
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   88644:	290fffff 	stp	wzr, wzr, [sp, #124]
   88648:	29117fff 	stp	wzr, wzr, [sp, #136]
   8864c:	29127fff 	stp	wzr, wzr, [sp, #144]
   88650:	b9009bff 	str	wzr, [sp, #152]
		args[0]=disasm_arg_FPk5t; args[1]=disasm_arg_FPz5n; 
   88654:	790583e2 	strh	w2, [sp, #704]
   88658:	17fff582 	b	85c60 <disasm+0x1c80>
		names="fmov\0fabs\0fneg\0fsqrt\0?\0?\0?\0?\0frintn\0frintp\0frintm\0frintz\0frinta\0?\0frintx\0frinti\0";
   8865c:	f0000043 	adrp	x3, 93000 <sd_init+0x1470>
   88660:	91162063 	add	x3, x3, #0x588
		op=((ic32_15)&0xf); z=((ic32_22)&0x3); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   88664:	12001059 	and	w25, w2, #0x1f
   88668:	1200101a 	and	w26, w0, #0x1f
		args[0]=disasm_arg_FPz5t; args[1]=disasm_arg_FPz5n; 
   8866c:	128868a2 	mov	w2, #0xffffbcba            	// #-17222
		op=((ic32_15)&0xf); z=((ic32_22)&0x3); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   88670:	12000cc1 	and	w1, w6, #0xf
   88674:	120004f7 	and	w23, w7, #0x3
		names="fmov\0fabs\0fneg\0fsqrt\0?\0?\0?\0?\0frintn\0frintp\0frintm\0frintz\0frinta\0?\0frintx\0frinti\0";
   88678:	d1034060 	sub	x0, x3, #0xd0
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8867c:	52800018 	mov	w24, #0x0                   	// #0
   88680:	5280001b 	mov	w27, #0x0                   	// #0
	uint16_t op=0, om=0, j=0;
   88684:	52800014 	mov	w20, #0x0                   	// #0
	uint32_t i=0;
   88688:	290effff 	stp	wzr, wzr, [sp, #116]
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8868c:	290fffff 	stp	wzr, wzr, [sp, #124]
   88690:	29117fff 	stp	wzr, wzr, [sp, #136]
   88694:	29127fff 	stp	wzr, wzr, [sp, #144]
   88698:	b9009bff 	str	wzr, [sp, #152]
		args[0]=disasm_arg_FPz5t; args[1]=disasm_arg_FPz5n; 
   8869c:	790583e2 	strh	w2, [sp, #704]
   886a0:	17fff570 	b	85c60 <disasm+0x1c80>
		names="fcmp\0fcmpe\0";
   886a4:	f0000040 	adrp	x0, 93000 <sd_init+0x1470>
   886a8:	91162000 	add	x0, x0, #0x588
		op=((ic32_4)&0x1); z=((ic32_22)&0x3); n=((ic32_5)&0x1f); 
   886ac:	12001059 	and	w25, w2, #0x1f
   886b0:	12000021 	and	w1, w1, #0x1
		args[0]=disasm_arg_FPz5n; args[1]=disasm_arg_simd0; 
   886b4:	128fe862 	mov	w2, #0xffff80bc            	// #-32580
		op=((ic32_4)&0x1); z=((ic32_22)&0x3); n=((ic32_5)&0x1f); 
   886b8:	120004f7 	and	w23, w7, #0x3
		names="fcmp\0fcmpe\0";
   886bc:	d101e000 	sub	x0, x0, #0x78
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   886c0:	52800018 	mov	w24, #0x0                   	// #0
   886c4:	5280001b 	mov	w27, #0x0                   	// #0
   886c8:	5280001a 	mov	w26, #0x0                   	// #0
	uint16_t op=0, om=0, j=0;
   886cc:	52800014 	mov	w20, #0x0                   	// #0
	uint32_t i=0;
   886d0:	290effff 	stp	wzr, wzr, [sp, #116]
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   886d4:	290fffff 	stp	wzr, wzr, [sp, #124]
   886d8:	29117fff 	stp	wzr, wzr, [sp, #136]
   886dc:	29127fff 	stp	wzr, wzr, [sp, #144]
   886e0:	b9009bff 	str	wzr, [sp, #152]
		args[0]=disasm_arg_FPz5n; args[1]=disasm_arg_simd0; 
   886e4:	790583e2 	strh	w2, [sp, #704]
   886e8:	17fff55e 	b	85c60 <disasm+0x1c80>
		names="fcmp\0fcmpe\0";
   886ec:	f0000040 	adrp	x0, 93000 <sd_init+0x1470>
   886f0:	91162000 	add	x0, x0, #0x588
		op=((ic32_4)&0x1); z=((ic32_22)&0x3); m=((ic32_16)&0x1f); n=((ic32_5)&0x1f); 
   886f4:	120010a3 	and	w3, w5, #0x1f
   886f8:	12001059 	and	w25, w2, #0x1f
   886fc:	12000021 	and	w1, w1, #0x1
		args[0]=disasm_arg_FPz5n; args[1]=disasm_arg_FPz5m; 
   88700:	1287e862 	mov	w2, #0xffffc0bc            	// #-16196
		op=((ic32_4)&0x1); z=((ic32_22)&0x3); m=((ic32_16)&0x1f); n=((ic32_5)&0x1f); 
   88704:	120004f7 	and	w23, w7, #0x3
		names="fcmp\0fcmpe\0";
   88708:	d101e000 	sub	x0, x0, #0x78
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8870c:	52800018 	mov	w24, #0x0                   	// #0
   88710:	5280001b 	mov	w27, #0x0                   	// #0
   88714:	5280001a 	mov	w26, #0x0                   	// #0
	uint16_t op=0, om=0, j=0;
   88718:	52800014 	mov	w20, #0x0                   	// #0
	uint32_t i=0;
   8871c:	290effff 	stp	wzr, wzr, [sp, #116]
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   88720:	290fffe3 	stp	w3, wzr, [sp, #124]
   88724:	29117fff 	stp	wzr, wzr, [sp, #136]
   88728:	29127fff 	stp	wzr, wzr, [sp, #144]
   8872c:	b9009bff 	str	wzr, [sp, #152]
		args[0]=disasm_arg_FPz5n; args[1]=disasm_arg_FPz5m; 
   88730:	790583e2 	strh	w2, [sp, #704]
   88734:	17fff54b 	b	85c60 <disasm+0x1c80>
		op=((ic32_4)&0x1); z=((ic32_22)&0x3); m=((ic32_16)&0x1f); c=((ic32_12)&0xf); n=((ic32_5)&0x1f); j=((ic32)&0xf); 
   88738:	120010a4 	and	w4, w5, #0x1f
		names="ffcmp\0ffcmpe\0";
   8873c:	f0000043 	adrp	x3, 93000 <sd_init+0x1470>
		op=((ic32_4)&0x1); z=((ic32_22)&0x3); m=((ic32_16)&0x1f); c=((ic32_12)&0xf); n=((ic32_5)&0x1f); j=((ic32)&0xf); 
   88740:	12001059 	and	w25, w2, #0x1f
		names="ffcmp\0ffcmpe\0";
   88744:	91162063 	add	x3, x3, #0x588
		args[0]=disasm_arg_FPz5n; args[1]=disasm_arg_FPz5m; args[2]=disasm_arg_j; args[3]=disasm_arg_c; 
   88748:	52981782 	mov	w2, #0xc0bc                	// #49340
		op=((ic32_4)&0x1); z=((ic32_22)&0x3); m=((ic32_16)&0x1f); c=((ic32_12)&0xf); n=((ic32_5)&0x1f); j=((ic32)&0xf); 
   8874c:	12000c14 	and	w20, w0, #0xf
		args[0]=disasm_arg_FPz5n; args[1]=disasm_arg_FPz5m; args[2]=disasm_arg_j; args[3]=disasm_arg_c; 
   88750:	72a1e1a2 	movk	w2, #0xf0d, lsl #16
		op=((ic32_4)&0x1); z=((ic32_22)&0x3); m=((ic32_16)&0x1f); c=((ic32_12)&0xf); n=((ic32_5)&0x1f); j=((ic32)&0xf); 
   88754:	12000021 	and	w1, w1, #0x1
   88758:	120004f7 	and	w23, w7, #0x3
		names="ffcmp\0ffcmpe\0";
   8875c:	d1018060 	sub	x0, x3, #0x60
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   88760:	52800018 	mov	w24, #0x0                   	// #0
   88764:	5280001b 	mov	w27, #0x0                   	// #0
   88768:	5280001a 	mov	w26, #0x0                   	// #0
	uint32_t i=0;
   8876c:	290effff 	stp	wzr, wzr, [sp, #116]
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   88770:	290fffe4 	stp	w4, wzr, [sp, #124]
		op=((ic32_4)&0x1); z=((ic32_22)&0x3); m=((ic32_16)&0x1f); c=((ic32_12)&0xf); n=((ic32_5)&0x1f); j=((ic32)&0xf); 
   88774:	12000d44 	and	w4, w10, #0xf
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   88778:	b9008bff 	str	wzr, [sp, #136]
		op=((ic32_4)&0x1); z=((ic32_22)&0x3); m=((ic32_16)&0x1f); c=((ic32_12)&0xf); n=((ic32_5)&0x1f); j=((ic32)&0xf); 
   8877c:	b9008fe4 	str	w4, [sp, #140]
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   88780:	29127fff 	stp	wzr, wzr, [sp, #144]
   88784:	b9009bff 	str	wzr, [sp, #152]
		args[0]=disasm_arg_FPz5n; args[1]=disasm_arg_FPz5m; args[2]=disasm_arg_j; args[3]=disasm_arg_c; 
   88788:	b902c3e2 	str	w2, [sp, #704]
   8878c:	17fff535 	b	85c60 <disasm+0x1c80>
		names="fmov\0";
   88790:	f0000041 	adrp	x1, 93000 <sd_init+0x1470>
   88794:	91162021 	add	x1, x1, #0x588
		z=((ic32_22)&0x3); j=((ic32_13)&0xff); t=((ic32)&0x1f); 
   88798:	1200101a 	and	w26, w0, #0x1f
		args[0]=disasm_arg_FPz5t; args[1]=disasm_arg_jz; 
   8879c:	1287c8a2 	mov	w2, #0xffffc1ba            	// #-15942
		names="fmov\0";
   887a0:	d101a020 	sub	x0, x1, #0x68
		z=((ic32_22)&0x3); j=((ic32_13)&0xff); t=((ic32)&0x1f); 
   887a4:	120004f7 	and	w23, w7, #0x3
   887a8:	12001d74 	and	w20, w11, #0xff
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   887ac:	52800018 	mov	w24, #0x0                   	// #0
   887b0:	52800019 	mov	w25, #0x0                   	// #0
   887b4:	5280001b 	mov	w27, #0x0                   	// #0
	uint16_t op=0, om=0, j=0;
   887b8:	52800001 	mov	w1, #0x0                   	// #0
	uint32_t i=0;
   887bc:	290effff 	stp	wzr, wzr, [sp, #116]
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   887c0:	290fffff 	stp	wzr, wzr, [sp, #124]
   887c4:	29117fff 	stp	wzr, wzr, [sp, #136]
   887c8:	29127fff 	stp	wzr, wzr, [sp, #144]
   887cc:	b9009bff 	str	wzr, [sp, #152]
		args[0]=disasm_arg_FPz5t; args[1]=disasm_arg_jz; 
   887d0:	790583e2 	strh	w2, [sp, #704]
   887d4:	17fff523 	b	85c60 <disasm+0x1c80>
		names="adc\0adcs\0sbc\0sbcs\0";
   887d8:	90000063 	adrp	x3, 94000 <sd_init+0x2470>
   887dc:	911a2063 	add	x3, x3, #0x688
		op=((ic32_29)&0x3); s=((ic32_31)&0x1); m=((ic32_16)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   887e0:	120006a1 	and	w1, w21, #0x3
   887e4:	120010a4 	and	w4, w5, #0x1f
   887e8:	12001059 	and	w25, w2, #0x1f
   887ec:	1200101a 	and	w26, w0, #0x1f
		args[0]=disasm_arg_Rt; args[1]=disasm_arg_Rn; args[2]=disasm_arg_Rm; 
   887f0:	528001c2 	mov	w2, #0xe                   	// #14
		names="adc\0adcs\0sbc\0sbcs\0";
   887f4:	91298060 	add	x0, x3, #0xa60
		op=((ic32_29)&0x3); s=((ic32_31)&0x1); m=((ic32_16)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   887f8:	12001d3b 	and	w27, w9, #0xff
		args[0]=disasm_arg_Rt; args[1]=disasm_arg_Rn; args[2]=disasm_arg_Rm; 
   887fc:	52812163 	mov	w3, #0x90b                 	// #2315
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   88800:	52800017 	mov	w23, #0x0                   	// #0
   88804:	52800018 	mov	w24, #0x0                   	// #0
	uint16_t op=0, om=0, j=0;
   88808:	52800014 	mov	w20, #0x0                   	// #0
	uint32_t i=0;
   8880c:	290effff 	stp	wzr, wzr, [sp, #116]
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   88810:	290fffe4 	stp	w4, wzr, [sp, #124]
   88814:	29117fff 	stp	wzr, wzr, [sp, #136]
   88818:	29127fff 	stp	wzr, wzr, [sp, #144]
   8881c:	b9009bff 	str	wzr, [sp, #152]
		args[0]=disasm_arg_Rt; args[1]=disasm_arg_Rn; args[2]=disasm_arg_Rm; 
   88820:	790583e3 	strh	w3, [sp, #704]
   88824:	390b0be2 	strb	w2, [sp, #706]
   88828:	a9435bf5 	ldp	x21, x22, [sp, #48]
   8882c:	17fff50d 	b	85c60 <disasm+0x1c80>
		op=((ic32_29)&0x3); s=((ic32_31)&0x1); i=((ic32_21)&1?(-1<<6):0)|((ic32_16)&0x3f); j=((ic32_10)&0x3f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   88830:	f240019f 	tst	x12, #0x1
   88834:	120014a5 	and	w5, w5, #0x3f
   88838:	128007e4 	mov	w4, #0xffffffc0            	// #-64
   8883c:	1a9f1084 	csel	w4, w4, wzr, ne  // ne = any
		names="sbfm\0bfm\0ubfm\0";
   88840:	90000063 	adrp	x3, 94000 <sd_init+0x2470>
		op=((ic32_29)&0x3); s=((ic32_31)&0x1); i=((ic32_21)&1?(-1<<6):0)|((ic32_16)&0x3f); j=((ic32_10)&0x3f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   88844:	12001059 	and	w25, w2, #0x1f
		names="sbfm\0bfm\0ubfm\0";
   88848:	911a2063 	add	x3, x3, #0x688
		op=((ic32_29)&0x3); s=((ic32_31)&0x1); i=((ic32_21)&1?(-1<<6):0)|((ic32_16)&0x3f); j=((ic32_10)&0x3f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8884c:	1200101a 	and	w26, w0, #0x1f
		args[0]=disasm_arg_Rt; args[1]=disasm_arg_Rn; args[2]=disasm_arg_i; args[3]=disasm_arg_j; 
   88850:	52812162 	mov	w2, #0x90b                 	// #2315
		op=((ic32_29)&0x3); s=((ic32_31)&0x1); i=((ic32_21)&1?(-1<<6):0)|((ic32_16)&0x3f); j=((ic32_10)&0x3f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   88854:	2a0400a0 	orr	w0, w5, w4
   88858:	120006a1 	and	w1, w21, #0x3
		args[0]=disasm_arg_Rt; args[1]=disasm_arg_Rn; args[2]=disasm_arg_i; args[3]=disasm_arg_j; 
   8885c:	72a1a0e2 	movk	w2, #0xd07, lsl #16
		op=((ic32_29)&0x3); s=((ic32_31)&0x1); i=((ic32_21)&1?(-1<<6):0)|((ic32_16)&0x3f); j=((ic32_10)&0x3f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   88860:	12001d3b 	and	w27, w9, #0xff
   88864:	12001694 	and	w20, w20, #0x3f
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   88868:	52800017 	mov	w23, #0x0                   	// #0
   8886c:	52800018 	mov	w24, #0x0                   	// #0
		op=((ic32_29)&0x3); s=((ic32_31)&0x1); i=((ic32_21)&1?(-1<<6):0)|((ic32_16)&0x3f); j=((ic32_10)&0x3f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   88870:	290e83ff 	stp	wzr, w0, [sp, #116]
		names="sbfm\0bfm\0ubfm\0";
   88874:	91294060 	add	x0, x3, #0xa50
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   88878:	290fffff 	stp	wzr, wzr, [sp, #124]
   8887c:	29117fff 	stp	wzr, wzr, [sp, #136]
   88880:	29127fff 	stp	wzr, wzr, [sp, #144]
   88884:	b9009bff 	str	wzr, [sp, #152]
		args[0]=disasm_arg_Rt; args[1]=disasm_arg_Rn; args[2]=disasm_arg_i; args[3]=disasm_arg_j; 
   88888:	b902c3e2 	str	w2, [sp, #704]
   8888c:	a9435bf5 	ldp	x21, x22, [sp, #48]
   88890:	17fff4f4 	b	85c60 <disasm+0x1c80>
		j=((ic32_11)&0xe0)|((ic32_5)&0x1f); t=((ic32)&0x1f); 
   88894:	12001042 	and	w2, w2, #0x1f
   88898:	121b09ad 	and	w13, w13, #0xe0
		names="movi\0";
   8889c:	f0000041 	adrp	x1, 93000 <sd_init+0x1470>
   888a0:	91162021 	add	x1, x1, #0x588
		j=((ic32_11)&0xe0)|((ic32_5)&0x1f); t=((ic32)&0x1f); 
   888a4:	2a0201b4 	orr	w20, w13, w2
   888a8:	1200101a 	and	w26, w0, #0x1f
		args[0]=disasm_arg_Dt; args[1]=disasm_arg_imm64; 
   888ac:	1289ede2 	mov	w2, #0xffffb090            	// #-20336
		names="movi\0";
   888b0:	91004020 	add	x0, x1, #0x10
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   888b4:	52800017 	mov	w23, #0x0                   	// #0
   888b8:	52800018 	mov	w24, #0x0                   	// #0
   888bc:	52800019 	mov	w25, #0x0                   	// #0
   888c0:	5280001b 	mov	w27, #0x0                   	// #0
	uint16_t op=0, om=0, j=0;
   888c4:	52800001 	mov	w1, #0x0                   	// #0
	uint32_t i=0;
   888c8:	290effff 	stp	wzr, wzr, [sp, #116]
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   888cc:	290fffff 	stp	wzr, wzr, [sp, #124]
   888d0:	29117fff 	stp	wzr, wzr, [sp, #136]
   888d4:	29127fff 	stp	wzr, wzr, [sp, #144]
   888d8:	b9009bff 	str	wzr, [sp, #152]
		args[0]=disasm_arg_Dt; args[1]=disasm_arg_imm64; 
   888dc:	790583e2 	strh	w2, [sp, #704]
   888e0:	a9435bf5 	ldp	x21, x22, [sp, #48]
   888e4:	17fff4df 	b	85c60 <disasm+0x1c80>
		names="fmadd\0fmsub\0fnmadd\0fnmsub\0";
   888e8:	f0000043 	adrp	x3, 93000 <sd_init+0x1470>
   888ec:	91162063 	add	x3, x3, #0x588
		op=((ic32_20)&0x2)|((ic32_15)&0x1); z=((ic32_22)&0x3); m=((ic32_16)&0x1f); d=((ic32_10)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   888f0:	120010a4 	and	w4, w5, #0x1f
   888f4:	121f0101 	and	w1, w8, #0x2
   888f8:	120000c6 	and	w6, w6, #0x1
   888fc:	1200101a 	and	w26, w0, #0x1f
		names="fmadd\0fmsub\0fnmadd\0fnmsub\0";
   88900:	d1004060 	sub	x0, x3, #0x10
		args[0]=disasm_arg_FPz5t; args[1]=disasm_arg_FPz5n; args[2]=disasm_arg_FPz5m; args[3]=disasm_arg_FPz5t; args[4]=disasm_arg_FPz5n; args[5]=disasm_arg_FPz5d; 
   88904:	52979743 	mov	w3, #0xbcba                	// #48314
		op=((ic32_20)&0x2)|((ic32_15)&0x1); z=((ic32_22)&0x3); m=((ic32_16)&0x1f); d=((ic32_10)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   88908:	12001059 	and	w25, w2, #0x1f
		args[0]=disasm_arg_FPz5t; args[1]=disasm_arg_FPz5n; args[2]=disasm_arg_FPz5m; args[3]=disasm_arg_FPz5t; args[4]=disasm_arg_FPz5n; args[5]=disasm_arg_FPz5d; 
   8890c:	72b75803 	movk	w3, #0xbac0, lsl #16
   88910:	1287a862 	mov	w2, #0xffffc2bc            	// #-15684
		op=((ic32_20)&0x2)|((ic32_15)&0x1); z=((ic32_22)&0x3); m=((ic32_16)&0x1f); d=((ic32_10)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   88914:	2a060021 	orr	w1, w1, w6
   88918:	120004f7 	and	w23, w7, #0x3
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8891c:	52800018 	mov	w24, #0x0                   	// #0
   88920:	5280001b 	mov	w27, #0x0                   	// #0
	uint32_t i=0;
   88924:	290effff 	stp	wzr, wzr, [sp, #116]
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   88928:	290fffe4 	stp	w4, wzr, [sp, #124]
		op=((ic32_20)&0x2)|((ic32_15)&0x1); z=((ic32_22)&0x3); m=((ic32_16)&0x1f); d=((ic32_10)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8892c:	12001284 	and	w4, w20, #0x1f
	uint16_t op=0, om=0, j=0;
   88930:	52800014 	mov	w20, #0x0                   	// #0
		op=((ic32_20)&0x2)|((ic32_15)&0x1); z=((ic32_22)&0x3); m=((ic32_16)&0x1f); d=((ic32_10)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   88934:	b9008be4 	str	w4, [sp, #136]
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   88938:	2911ffff 	stp	wzr, wzr, [sp, #140]
   8893c:	2912ffff 	stp	wzr, wzr, [sp, #148]
		args[0]=disasm_arg_FPz5t; args[1]=disasm_arg_FPz5n; args[2]=disasm_arg_FPz5m; args[3]=disasm_arg_FPz5t; args[4]=disasm_arg_FPz5n; args[5]=disasm_arg_FPz5d; 
   88940:	b902c3e3 	str	w3, [sp, #704]
   88944:	79058be2 	strh	w2, [sp, #708]
   88948:	a9435bf5 	ldp	x21, x22, [sp, #48]
   8894c:	17fff4c5 	b	85c60 <disasm+0x1c80>
		z=((ic32_22)&0x3); m=((ic32_16)&0x1f); c=((ic32_12)&0xf); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   88950:	120010a3 	and	w3, w5, #0x1f
		names="fcsel\0";
   88954:	f0000041 	adrp	x1, 93000 <sd_init+0x1470>
		z=((ic32_22)&0x3); m=((ic32_16)&0x1f); c=((ic32_12)&0xf); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   88958:	12001059 	and	w25, w2, #0x1f
		names="fcsel\0";
   8895c:	91162021 	add	x1, x1, #0x588
		args[0]=disasm_arg_FPz5t; args[1]=disasm_arg_FPz5n; args[2]=disasm_arg_FPz5m; args[3]=disasm_arg_c; 
   88960:	52979742 	mov	w2, #0xbcba                	// #48314
		z=((ic32_22)&0x3); m=((ic32_16)&0x1f); c=((ic32_12)&0xf); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   88964:	1200101a 	and	w26, w0, #0x1f
		args[0]=disasm_arg_FPz5t; args[1]=disasm_arg_FPz5n; args[2]=disasm_arg_FPz5m; args[3]=disasm_arg_c; 
   88968:	72a1f802 	movk	w2, #0xfc0, lsl #16
		names="fcsel\0";
   8896c:	d1006020 	sub	x0, x1, #0x18
		z=((ic32_22)&0x3); m=((ic32_16)&0x1f); c=((ic32_12)&0xf); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   88970:	120004f7 	and	w23, w7, #0x3
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   88974:	52800018 	mov	w24, #0x0                   	// #0
   88978:	5280001b 	mov	w27, #0x0                   	// #0
	uint16_t op=0, om=0, j=0;
   8897c:	52800014 	mov	w20, #0x0                   	// #0
   88980:	52800001 	mov	w1, #0x0                   	// #0
	uint32_t i=0;
   88984:	290effff 	stp	wzr, wzr, [sp, #116]
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   88988:	290fffe3 	stp	w3, wzr, [sp, #124]
		z=((ic32_22)&0x3); m=((ic32_16)&0x1f); c=((ic32_12)&0xf); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8898c:	12000d43 	and	w3, w10, #0xf
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   88990:	b9008bff 	str	wzr, [sp, #136]
		z=((ic32_22)&0x3); m=((ic32_16)&0x1f); c=((ic32_12)&0xf); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   88994:	b9008fe3 	str	w3, [sp, #140]
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   88998:	29127fff 	stp	wzr, wzr, [sp, #144]
   8899c:	b9009bff 	str	wzr, [sp, #152]
		args[0]=disasm_arg_FPz5t; args[1]=disasm_arg_FPz5n; args[2]=disasm_arg_FPz5m; args[3]=disasm_arg_c; 
   889a0:	b902c3e2 	str	w2, [sp, #704]
   889a4:	17fff4af 	b	85c60 <disasm+0x1c80>
		names="fmul\0fdiv\0fadd\0fsub\0fmax\0fmin\0fmaxnm\0fminmn\0fnmul\0";
   889a8:	f0000043 	adrp	x3, 93000 <sd_init+0x1470>
   889ac:	91162063 	add	x3, x3, #0x588
		op=((ic32_12)&0xf); z=((ic32_22)&0x3); m=((ic32_16)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   889b0:	120010a4 	and	w4, w5, #0x1f
   889b4:	12001059 	and	w25, w2, #0x1f
   889b8:	1200101a 	and	w26, w0, #0x1f
		args[0]=disasm_arg_FPz5t; args[1]=disasm_arg_FPz5n; args[2]=disasm_arg_FPz5m; 
   889bc:	128007e2 	mov	w2, #0xffffffc0            	// #-64
		names="fmul\0fdiv\0fadd\0fsub\0fmax\0fmin\0fmaxnm\0fminmn\0fnmul\0";
   889c0:	d1014060 	sub	x0, x3, #0x50
		op=((ic32_12)&0xf); z=((ic32_22)&0x3); m=((ic32_16)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   889c4:	12000d41 	and	w1, w10, #0xf
		args[0]=disasm_arg_FPz5t; args[1]=disasm_arg_FPz5n; args[2]=disasm_arg_FPz5m; 
   889c8:	128868a3 	mov	w3, #0xffffbcba            	// #-17222
		op=((ic32_12)&0xf); z=((ic32_22)&0x3); m=((ic32_16)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   889cc:	120004f7 	and	w23, w7, #0x3
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   889d0:	52800018 	mov	w24, #0x0                   	// #0
   889d4:	5280001b 	mov	w27, #0x0                   	// #0
	uint16_t op=0, om=0, j=0;
   889d8:	52800014 	mov	w20, #0x0                   	// #0
	uint32_t i=0;
   889dc:	290effff 	stp	wzr, wzr, [sp, #116]
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   889e0:	290fffe4 	stp	w4, wzr, [sp, #124]
   889e4:	29117fff 	stp	wzr, wzr, [sp, #136]
   889e8:	29127fff 	stp	wzr, wzr, [sp, #144]
   889ec:	b9009bff 	str	wzr, [sp, #152]
		args[0]=disasm_arg_FPz5t; args[1]=disasm_arg_FPz5n; args[2]=disasm_arg_FPz5m; 
   889f0:	790583e3 	strh	w3, [sp, #704]
   889f4:	390b0be2 	strb	w2, [sp, #706]
   889f8:	17fff49a 	b	85c60 <disasm+0x1c80>
		op=((ic32_29)&0x3); s=((ic32_31)&0x1); j=((ic32_21)&0x3); i=((ic32_20)&1?(-1<<16):0)|((ic32_5)&0xffff); t=((ic32)&0x1f); 
   889fc:	f240011f 	tst	x8, #0x1
   88a00:	12003c42 	and	w2, w2, #0xffff
   88a04:	52bfffe4 	mov	w4, #0xffff0000            	// #-65536
   88a08:	1a9f1084 	csel	w4, w4, wzr, ne  // ne = any
		names="movn\0?\0movz\0movk\0";
   88a0c:	90000063 	adrp	x3, 94000 <sd_init+0x2470>
		op=((ic32_29)&0x3); s=((ic32_31)&0x1); j=((ic32_21)&0x3); i=((ic32_20)&1?(-1<<16):0)|((ic32_5)&0xffff); t=((ic32)&0x1f); 
   88a10:	1200101a 	and	w26, w0, #0x1f
		names="movn\0?\0movz\0movk\0";
   88a14:	911a2063 	add	x3, x3, #0x688
		op=((ic32_29)&0x3); s=((ic32_31)&0x1); j=((ic32_21)&0x3); i=((ic32_20)&1?(-1<<16):0)|((ic32_5)&0xffff); t=((ic32)&0x1f); 
   88a18:	2a040040 	orr	w0, w2, w4
   88a1c:	120006a1 	and	w1, w21, #0x3
		args[0]=disasm_arg_Rt; args[1]=disasm_arg_i; args[2]=disasm_arg_j16_opt; 
   88a20:	52800182 	mov	w2, #0xc                   	// #12
		op=((ic32_29)&0x3); s=((ic32_31)&0x1); j=((ic32_21)&0x3); i=((ic32_20)&1?(-1<<16):0)|((ic32_5)&0xffff); t=((ic32)&0x1f); 
   88a24:	12001d3b 	and	w27, w9, #0xff
   88a28:	12000594 	and	w20, w12, #0x3
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   88a2c:	52800017 	mov	w23, #0x0                   	// #0
   88a30:	52800018 	mov	w24, #0x0                   	// #0
   88a34:	52800019 	mov	w25, #0x0                   	// #0
		op=((ic32_29)&0x3); s=((ic32_31)&0x1); j=((ic32_21)&0x3); i=((ic32_20)&1?(-1<<16):0)|((ic32_5)&0xffff); t=((ic32)&0x1f); 
   88a38:	290e83ff 	stp	wzr, w0, [sp, #116]
		names="movn\0?\0movz\0movk\0";
   88a3c:	9128e060 	add	x0, x3, #0xa38
		args[0]=disasm_arg_Rt; args[1]=disasm_arg_i; args[2]=disasm_arg_j16_opt; 
   88a40:	5280e163 	mov	w3, #0x70b                 	// #1803
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   88a44:	290fffff 	stp	wzr, wzr, [sp, #124]
   88a48:	29117fff 	stp	wzr, wzr, [sp, #136]
   88a4c:	29127fff 	stp	wzr, wzr, [sp, #144]
   88a50:	b9009bff 	str	wzr, [sp, #152]
		args[0]=disasm_arg_Rt; args[1]=disasm_arg_i; args[2]=disasm_arg_j16_opt; 
   88a54:	790583e3 	strh	w3, [sp, #704]
   88a58:	390b0be2 	strb	w2, [sp, #706]
   88a5c:	a9435bf5 	ldp	x21, x22, [sp, #48]
   88a60:	17fff480 	b	85c60 <disasm+0x1c80>
		op=((ic32_29)&0x3); s=((ic32_31)&0x1); k=((ic32_22)&0x1); i=((ic32_21)&1?(-1<<6):0)|((ic32_16)&0x3f); j=((ic32_10)&0x3f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   88a64:	f240019f 	tst	x12, #0x1
   88a68:	120014a5 	and	w5, w5, #0x3f
   88a6c:	128007e4 	mov	w4, #0xffffffc0            	// #-64
   88a70:	1a9f1084 	csel	w4, w4, wzr, ne  // ne = any
		names="and\0orr\0eor\0ands\0";
   88a74:	90000063 	adrp	x3, 94000 <sd_init+0x2470>
		op=((ic32_29)&0x3); s=((ic32_31)&0x1); k=((ic32_22)&0x1); i=((ic32_21)&1?(-1<<6):0)|((ic32_16)&0x3f); j=((ic32_10)&0x3f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   88a78:	1200101a 	and	w26, w0, #0x1f
		names="and\0orr\0eor\0ands\0";
   88a7c:	911a2063 	add	x3, x3, #0x688
		op=((ic32_29)&0x3); s=((ic32_31)&0x1); k=((ic32_22)&0x1); i=((ic32_21)&1?(-1<<6):0)|((ic32_16)&0x3f); j=((ic32_10)&0x3f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   88a80:	2a0400a0 	orr	w0, w5, w4
   88a84:	120006a1 	and	w1, w21, #0x3
   88a88:	120000e6 	and	w6, w7, #0x1
   88a8c:	12001059 	and	w25, w2, #0x1f
   88a90:	12001d3b 	and	w27, w9, #0xff
		args[0]=disasm_arg_RtS; args[1]=disasm_arg_Rn; args[2]=disasm_arg_ib; 
   88a94:	52800142 	mov	w2, #0xa                   	// #10
		op=((ic32_29)&0x3); s=((ic32_31)&0x1); k=((ic32_22)&0x1); i=((ic32_21)&1?(-1<<6):0)|((ic32_16)&0x3f); j=((ic32_10)&0x3f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   88a98:	12001694 	and	w20, w20, #0x3f
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   88a9c:	52800017 	mov	w23, #0x0                   	// #0
   88aa0:	52800018 	mov	w24, #0x0                   	// #0
		op=((ic32_29)&0x3); s=((ic32_31)&0x1); k=((ic32_22)&0x1); i=((ic32_21)&1?(-1<<6):0)|((ic32_16)&0x3f); j=((ic32_10)&0x3f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   88aa4:	290e83e6 	stp	w6, w0, [sp, #116]
		names="and\0orr\0eor\0ands\0";
   88aa8:	91288060 	add	x0, x3, #0xa20
		args[0]=disasm_arg_RtS; args[1]=disasm_arg_Rn; args[2]=disasm_arg_ib; 
   88aac:	528120a3 	mov	w3, #0x905                 	// #2309
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   88ab0:	290fffff 	stp	wzr, wzr, [sp, #124]
   88ab4:	29117fff 	stp	wzr, wzr, [sp, #136]
   88ab8:	29127fff 	stp	wzr, wzr, [sp, #144]
   88abc:	b9009bff 	str	wzr, [sp, #152]
		args[0]=disasm_arg_RtS; args[1]=disasm_arg_Rn; args[2]=disasm_arg_ib; 
   88ac0:	790583e3 	strh	w3, [sp, #704]
   88ac4:	390b0be2 	strb	w2, [sp, #706]
   88ac8:	a9435bf5 	ldp	x21, x22, [sp, #48]
   88acc:	17fff465 	b	85c60 <disasm+0x1c80>
		op=((ic32_29)&0x3); s=((ic32_31)&0x1); j=((ic32_22)&0x3); i=((ic32_21)&1?(-1<<12):0)|((ic32_10)&0xfff); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   88ad0:	f240019f 	tst	x12, #0x1
   88ad4:	12002e85 	and	w5, w20, #0xfff
   88ad8:	1281ffe4 	mov	w4, #0xfffff000            	// #-4096
   88adc:	1a9f1084 	csel	w4, w4, wzr, ne  // ne = any
		names="add\0adds\0sub\0subs\0";
   88ae0:	90000063 	adrp	x3, 94000 <sd_init+0x2470>
		op=((ic32_29)&0x3); s=((ic32_31)&0x1); j=((ic32_22)&0x3); i=((ic32_21)&1?(-1<<12):0)|((ic32_10)&0xfff); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   88ae4:	12001059 	and	w25, w2, #0x1f
		names="add\0adds\0sub\0subs\0";
   88ae8:	911a2063 	add	x3, x3, #0x688
		op=((ic32_29)&0x3); s=((ic32_31)&0x1); j=((ic32_22)&0x3); i=((ic32_21)&1?(-1<<12):0)|((ic32_10)&0xfff); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   88aec:	1200101a 	and	w26, w0, #0x1f
		args[0]=disasm_arg_RtS; args[1]=disasm_arg_RnS; args[2]=disasm_arg_i; args[3]=disasm_arg_j12_opt; 
   88af0:	5280c0a2 	mov	w2, #0x605                 	// #1541
		op=((ic32_29)&0x3); s=((ic32_31)&0x1); j=((ic32_22)&0x3); i=((ic32_21)&1?(-1<<12):0)|((ic32_10)&0xfff); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   88af4:	2a0400a0 	orr	w0, w5, w4
   88af8:	120006a1 	and	w1, w21, #0x3
		args[0]=disasm_arg_RtS; args[1]=disasm_arg_RnS; args[2]=disasm_arg_i; args[3]=disasm_arg_j12_opt; 
   88afc:	72a100e2 	movk	w2, #0x807, lsl #16
		op=((ic32_29)&0x3); s=((ic32_31)&0x1); j=((ic32_22)&0x3); i=((ic32_21)&1?(-1<<12):0)|((ic32_10)&0xfff); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   88b00:	12001d3b 	and	w27, w9, #0xff
   88b04:	120004f4 	and	w20, w7, #0x3
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   88b08:	52800017 	mov	w23, #0x0                   	// #0
   88b0c:	52800018 	mov	w24, #0x0                   	// #0
		op=((ic32_29)&0x3); s=((ic32_31)&0x1); j=((ic32_22)&0x3); i=((ic32_21)&1?(-1<<12):0)|((ic32_10)&0xfff); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   88b10:	290e83ff 	stp	wzr, w0, [sp, #116]
		names="add\0adds\0sub\0subs\0";
   88b14:	9126e060 	add	x0, x3, #0x9b8
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   88b18:	290fffff 	stp	wzr, wzr, [sp, #124]
   88b1c:	29117fff 	stp	wzr, wzr, [sp, #136]
   88b20:	29127fff 	stp	wzr, wzr, [sp, #144]
   88b24:	b9009bff 	str	wzr, [sp, #152]
		args[0]=disasm_arg_RtS; args[1]=disasm_arg_RnS; args[2]=disasm_arg_i; args[3]=disasm_arg_j12_opt; 
   88b28:	b902c3e2 	str	w2, [sp, #704]
   88b2c:	a9435bf5 	ldp	x21, x22, [sp, #48]
   88b30:	17fff44c 	b	85c60 <disasm+0x1c80>
		op=((ic32_31)&0x1); j=((ic32_29)&0x3); i=((ic32_23)&1?(-1<<19):0)|((ic32_5)&0x7ffff); t=((ic32)&0x1f); 
   88b34:	f240021f 	tst	x16, #0x1
   88b38:	12004842 	and	w2, w2, #0x7ffff
   88b3c:	52bfff04 	mov	w4, #0xfff80000            	// #-524288
   88b40:	1a9f1084 	csel	w4, w4, wzr, ne  // ne = any
		names="adr\0adrp\0";
   88b44:	90000063 	adrp	x3, 94000 <sd_init+0x2470>
		op=((ic32_31)&0x1); j=((ic32_29)&0x3); i=((ic32_23)&1?(-1<<19):0)|((ic32_5)&0x7ffff); t=((ic32)&0x1f); 
   88b48:	1200101a 	and	w26, w0, #0x1f
		names="adr\0adrp\0";
   88b4c:	911a2063 	add	x3, x3, #0x688
		op=((ic32_31)&0x1); j=((ic32_29)&0x3); i=((ic32_23)&1?(-1<<19):0)|((ic32_5)&0x7ffff); t=((ic32)&0x1f); 
   88b50:	2a040040 	orr	w0, w2, w4
   88b54:	120006b4 	and	w20, w21, #0x3
		args[0]=disasm_arg_Xt; args[1]=disasm_arg_labelij1; 
   88b58:	52808062 	mov	w2, #0x403                 	// #1027
		op=((ic32_31)&0x1); j=((ic32_29)&0x3); i=((ic32_23)&1?(-1<<19):0)|((ic32_5)&0x7ffff); t=((ic32)&0x1f); 
   88b5c:	12003d21 	and	w1, w9, #0xffff
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   88b60:	52800017 	mov	w23, #0x0                   	// #0
   88b64:	52800018 	mov	w24, #0x0                   	// #0
   88b68:	52800019 	mov	w25, #0x0                   	// #0
   88b6c:	5280001b 	mov	w27, #0x0                   	// #0
		op=((ic32_31)&0x1); j=((ic32_29)&0x3); i=((ic32_23)&1?(-1<<19):0)|((ic32_5)&0x7ffff); t=((ic32)&0x1f); 
   88b70:	290e83ff 	stp	wzr, w0, [sp, #116]
		names="adr\0adrp\0";
   88b74:	91284060 	add	x0, x3, #0xa10
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   88b78:	290fffff 	stp	wzr, wzr, [sp, #124]
   88b7c:	29117fff 	stp	wzr, wzr, [sp, #136]
   88b80:	29127fff 	stp	wzr, wzr, [sp, #144]
   88b84:	b9009bff 	str	wzr, [sp, #152]
		args[0]=disasm_arg_Xt; args[1]=disasm_arg_labelij1; 
   88b88:	790583e2 	strh	w2, [sp, #704]
   88b8c:	a9435bf5 	ldp	x21, x22, [sp, #48]
   88b90:	17fff434 	b	85c60 <disasm+0x1c80>
		op=((ic32_27)&0xc)|((ic32_23)&0x2)|((ic32_21)&0x1); s=((ic32_31)&0x1); z=((ic32_22)&0x3); m=((ic32_16)&0x1f); j=((ic32_10)&0x3f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   88b94:	121e0421 	and	w1, w1, #0xc
   88b98:	121f0210 	and	w16, w16, #0x2
   88b9c:	2a100021 	orr	w1, w1, w16
   88ba0:	12000186 	and	w6, w12, #0x1
		names="and\0bic\0add\0?\0orr\0orn\0adds\0?\0eor\0eon\0sub\0?\0ands\0bics\0subs\0";
   88ba4:	90000063 	adrp	x3, 94000 <sd_init+0x2470>
		op=((ic32_27)&0xc)|((ic32_23)&0x2)|((ic32_21)&0x1); s=((ic32_31)&0x1); z=((ic32_22)&0x3); m=((ic32_16)&0x1f); j=((ic32_10)&0x3f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   88ba8:	12001059 	and	w25, w2, #0x1f
		names="and\0bic\0add\0?\0orr\0orn\0adds\0?\0eor\0eon\0sub\0?\0ands\0bics\0subs\0";
   88bac:	911a2063 	add	x3, x3, #0x688
		args[0]=disasm_arg_Rt; args[1]=disasm_arg_Rn; args[2]=disasm_arg_Rm; args[3]=disasm_arg_shiftj_opt; 
   88bb0:	52812162 	mov	w2, #0x90b                 	// #2315
		op=((ic32_27)&0xc)|((ic32_23)&0x2)|((ic32_21)&0x1); s=((ic32_31)&0x1); z=((ic32_22)&0x3); m=((ic32_16)&0x1f); j=((ic32_10)&0x3f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   88bb4:	120010a4 	and	w4, w5, #0x1f
   88bb8:	1200101a 	and	w26, w0, #0x1f
		args[0]=disasm_arg_Rt; args[1]=disasm_arg_Rn; args[2]=disasm_arg_Rm; args[3]=disasm_arg_shiftj_opt; 
   88bbc:	72ac61c2 	movk	w2, #0x630e, lsl #16
		op=((ic32_27)&0xc)|((ic32_23)&0x2)|((ic32_21)&0x1); s=((ic32_31)&0x1); z=((ic32_22)&0x3); m=((ic32_16)&0x1f); j=((ic32_10)&0x3f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   88bc0:	2a060021 	orr	w1, w1, w6
   88bc4:	12001d3b 	and	w27, w9, #0xff
   88bc8:	120004f7 	and	w23, w7, #0x3
   88bcc:	12001694 	and	w20, w20, #0x3f
		names="and\0bic\0add\0?\0orr\0orn\0adds\0?\0eor\0eon\0sub\0?\0ands\0bics\0subs\0";
   88bd0:	91274060 	add	x0, x3, #0x9d0
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   88bd4:	52800018 	mov	w24, #0x0                   	// #0
	uint32_t i=0;
   88bd8:	290effff 	stp	wzr, wzr, [sp, #116]
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   88bdc:	290fffe4 	stp	w4, wzr, [sp, #124]
   88be0:	29117fff 	stp	wzr, wzr, [sp, #136]
   88be4:	29127fff 	stp	wzr, wzr, [sp, #144]
   88be8:	b9009bff 	str	wzr, [sp, #152]
		args[0]=disasm_arg_Rt; args[1]=disasm_arg_Rn; args[2]=disasm_arg_Rm; args[3]=disasm_arg_shiftj_opt; 
   88bec:	b902c3e2 	str	w2, [sp, #704]
   88bf0:	a9435bf5 	ldp	x21, x22, [sp, #48]
   88bf4:	17fff41b 	b	85c60 <disasm+0x1c80>
		op=((ic32_29)&0x3); s=((ic32_31)&0x1); m=((ic32_16)&0x1f); o=((ic32_13)&0x7); j=((ic32_10)&0x7); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   88bf8:	120010a4 	and	w4, w5, #0x1f
		names="add\0adds\0sub\0subs\0";
   88bfc:	90000063 	adrp	x3, 94000 <sd_init+0x2470>
		op=((ic32_29)&0x3); s=((ic32_31)&0x1); m=((ic32_16)&0x1f); o=((ic32_13)&0x7); j=((ic32_10)&0x7); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   88c00:	12001059 	and	w25, w2, #0x1f
		names="add\0adds\0sub\0subs\0";
   88c04:	911a2063 	add	x3, x3, #0x688
		args[0]=disasm_arg_RtS; args[1]=disasm_arg_RnS; args[2]=disasm_arg_Rsom; args[3]=disasm_arg_exts; 
   88c08:	5280c0a2 	mov	w2, #0x605                 	// #1541
		op=((ic32_29)&0x3); s=((ic32_31)&0x1); m=((ic32_16)&0x1f); o=((ic32_13)&0x7); j=((ic32_10)&0x7); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   88c0c:	120006a1 	and	w1, w21, #0x3
   88c10:	1200101a 	and	w26, w0, #0x1f
		args[0]=disasm_arg_RtS; args[1]=disasm_arg_RnS; args[2]=disasm_arg_Rsom; args[3]=disasm_arg_exts; 
   88c14:	72acac82 	movk	w2, #0x6564, lsl #16
		op=((ic32_29)&0x3); s=((ic32_31)&0x1); m=((ic32_16)&0x1f); o=((ic32_13)&0x7); j=((ic32_10)&0x7); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   88c18:	12001d3b 	and	w27, w9, #0xff
   88c1c:	12000a94 	and	w20, w20, #0x7
		names="add\0adds\0sub\0subs\0";
   88c20:	9126e060 	add	x0, x3, #0x9b8
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   88c24:	52800017 	mov	w23, #0x0                   	// #0
   88c28:	52800018 	mov	w24, #0x0                   	// #0
	uint32_t i=0;
   88c2c:	290effff 	stp	wzr, wzr, [sp, #116]
		op=((ic32_29)&0x3); s=((ic32_31)&0x1); m=((ic32_16)&0x1f); o=((ic32_13)&0x7); j=((ic32_10)&0x7); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   88c30:	b9007fe4 	str	w4, [sp, #124]
   88c34:	12000964 	and	w4, w11, #0x7
   88c38:	b90083e4 	str	w4, [sp, #128]
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   88c3c:	29117fff 	stp	wzr, wzr, [sp, #136]
   88c40:	29127fff 	stp	wzr, wzr, [sp, #144]
   88c44:	b9009bff 	str	wzr, [sp, #152]
		args[0]=disasm_arg_RtS; args[1]=disasm_arg_RnS; args[2]=disasm_arg_Rsom; args[3]=disasm_arg_exts; 
   88c48:	b902c3e2 	str	w2, [sp, #704]
   88c4c:	a9435bf5 	ldp	x21, x22, [sp, #48]
   88c50:	17fff404 	b	85c60 <disasm+0x1c80>
		names="str\0ldr\0";
   88c54:	90000063 	adrp	x3, 94000 <sd_init+0x2470>
   88c58:	911a2063 	add	x3, x3, #0x688
		op=((ic32_22)&0x1); z=((ic32_30)&0x3); s=((ic32_23)&0x1); j=((ic32_10)&0xfff); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   88c5c:	1200101a 	and	w26, w0, #0x1f
		names="str\0ldr\0";
   88c60:	9119e060 	add	x0, x3, #0x678
		args[0]=disasm_arg_FPst; args[1]=disasm_arg_offs; args[2]=disasm_arg_XnS; args[3]=disasm_arg_j_opt; args[4]=disasm_arg_offe; 
   88c64:	52852b63 	mov	w3, #0x295b                	// #10587
		op=((ic32_22)&0x1); z=((ic32_30)&0x3); s=((ic32_23)&0x1); j=((ic32_10)&0xfff); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   88c68:	12001059 	and	w25, w2, #0x1f
		args[0]=disasm_arg_FPst; args[1]=disasm_arg_offs; args[2]=disasm_arg_XnS; args[3]=disasm_arg_j_opt; args[4]=disasm_arg_offe; 
   88c6c:	72ab8543 	movk	w3, #0x5c2a, lsl #16
   88c70:	52800562 	mov	w2, #0x2b                  	// #43
		op=((ic32_22)&0x1); z=((ic32_30)&0x3); s=((ic32_23)&0x1); j=((ic32_10)&0xfff); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   88c74:	120000e1 	and	w1, w7, #0x1
   88c78:	12001c97 	and	w23, w4, #0xff
   88c7c:	1200021b 	and	w27, w16, #0x1
   88c80:	12002e94 	and	w20, w20, #0xfff
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   88c84:	52800018 	mov	w24, #0x0                   	// #0
	uint32_t i=0;
   88c88:	290effff 	stp	wzr, wzr, [sp, #116]
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   88c8c:	290fffff 	stp	wzr, wzr, [sp, #124]
   88c90:	29117fff 	stp	wzr, wzr, [sp, #136]
   88c94:	29127fff 	stp	wzr, wzr, [sp, #144]
   88c98:	b9009bff 	str	wzr, [sp, #152]
		args[0]=disasm_arg_FPst; args[1]=disasm_arg_offs; args[2]=disasm_arg_XnS; args[3]=disasm_arg_j_opt; args[4]=disasm_arg_offe; 
   88c9c:	b902c3e3 	str	w3, [sp, #704]
   88ca0:	390b13e2 	strb	w2, [sp, #708]
   88ca4:	a9435bf5 	ldp	x21, x22, [sp, #48]
   88ca8:	17fff3ee 	b	85c60 <disasm+0x1c80>
		names="str\0ldr\0";
   88cac:	90000063 	adrp	x3, 94000 <sd_init+0x2470>
   88cb0:	911a2063 	add	x3, x3, #0x688
		op=((ic32_22)&0x1); z=((ic32_30)&0x3); s=((ic32_23)&0x1); m=((ic32_16)&0x1f); o=((ic32_13)&0x7); j=((ic32_12)&0x1); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   88cb4:	12001c97 	and	w23, w4, #0xff
   88cb8:	1200101a 	and	w26, w0, #0x1f
   88cbc:	120010a4 	and	w4, w5, #0x1f
		names="str\0ldr\0";
   88cc0:	9119e060 	add	x0, x3, #0x678
		args[0]=disasm_arg_FPst; args[1]=disasm_arg_offs; args[2]=disasm_arg_XnS; args[3]=disasm_arg_Rom; args[4]=disasm_arg_amountz; args[5]=disasm_arg_offe; 
   88cc4:	52852b63 	mov	w3, #0x295b                	// #10587
		op=((ic32_22)&0x1); z=((ic32_30)&0x3); s=((ic32_23)&0x1); m=((ic32_16)&0x1f); o=((ic32_13)&0x7); j=((ic32_12)&0x1); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   88cc8:	12001059 	and	w25, w2, #0x1f
		args[0]=disasm_arg_FPst; args[1]=disasm_arg_offs; args[2]=disasm_arg_XnS; args[3]=disasm_arg_Rom; args[4]=disasm_arg_amountz; args[5]=disasm_arg_offe; 
   88ccc:	72aba543 	movk	w3, #0x5d2a, lsl #16
   88cd0:	52856be2 	mov	w2, #0x2b5f                	// #11103
		op=((ic32_22)&0x1); z=((ic32_30)&0x3); s=((ic32_23)&0x1); m=((ic32_16)&0x1f); o=((ic32_13)&0x7); j=((ic32_12)&0x1); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   88cd4:	120000e1 	and	w1, w7, #0x1
   88cd8:	1200021b 	and	w27, w16, #0x1
   88cdc:	12000154 	and	w20, w10, #0x1
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   88ce0:	52800018 	mov	w24, #0x0                   	// #0
	uint32_t i=0;
   88ce4:	290effff 	stp	wzr, wzr, [sp, #116]
		op=((ic32_22)&0x1); z=((ic32_30)&0x3); s=((ic32_23)&0x1); m=((ic32_16)&0x1f); o=((ic32_13)&0x7); j=((ic32_12)&0x1); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   88ce8:	b9007fe4 	str	w4, [sp, #124]
   88cec:	12000964 	and	w4, w11, #0x7
   88cf0:	b90083e4 	str	w4, [sp, #128]
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   88cf4:	29117fff 	stp	wzr, wzr, [sp, #136]
   88cf8:	29127fff 	stp	wzr, wzr, [sp, #144]
   88cfc:	b9009bff 	str	wzr, [sp, #152]
		args[0]=disasm_arg_FPst; args[1]=disasm_arg_offs; args[2]=disasm_arg_XnS; args[3]=disasm_arg_Rom; args[4]=disasm_arg_amountz; args[5]=disasm_arg_offe; 
   88d00:	b902c3e3 	str	w3, [sp, #704]
   88d04:	79058be2 	strh	w2, [sp, #708]
   88d08:	a9435bf5 	ldp	x21, x22, [sp, #48]
   88d0c:	17fff3d5 	b	85c60 <disasm+0x1c80>
		op=((ic32_22)&0x1); z=((ic32_30)&0x3); s=((ic32_23)&0x1); i=((ic32_20)&1?(-1<<9):0)|((ic32_12)&0x1ff); p=((ic32_11)&0x1); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   88d10:	f240011f 	tst	x8, #0x1
   88d14:	1200214a 	and	w10, w10, #0x1ff
   88d18:	12803fe5 	mov	w5, #0xfffffe00            	// #-512
   88d1c:	1a9f10a5 	csel	w5, w5, wzr, ne  // ne = any
		names="str\0ldr\0";
   88d20:	90000063 	adrp	x3, 94000 <sd_init+0x2470>
		op=((ic32_22)&0x1); z=((ic32_30)&0x3); s=((ic32_23)&0x1); i=((ic32_20)&1?(-1<<9):0)|((ic32_12)&0x1ff); p=((ic32_11)&0x1); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   88d24:	1200101a 	and	w26, w0, #0x1f
		names="str\0ldr\0";
   88d28:	911a2063 	add	x3, x3, #0x688
		op=((ic32_22)&0x1); z=((ic32_30)&0x3); s=((ic32_23)&0x1); i=((ic32_20)&1?(-1<<9):0)|((ic32_12)&0x1ff); p=((ic32_11)&0x1); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   88d2c:	2a050140 	orr	w0, w10, w5
   88d30:	290e83ff 	stp	wzr, w0, [sp, #116]
		names="str\0ldr\0";
   88d34:	9119e060 	add	x0, x3, #0x678
		args[0]=disasm_arg_FPst; args[1]=disasm_arg_offs; args[2]=disasm_arg_XnS; args[3]=disasm_arg_i_opt; args[4]=disasm_arg_offe; 
   88d38:	52852b63 	mov	w3, #0x295b                	// #10587
		op=((ic32_22)&0x1); z=((ic32_30)&0x3); s=((ic32_23)&0x1); i=((ic32_20)&1?(-1<<9):0)|((ic32_12)&0x1ff); p=((ic32_11)&0x1); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   88d3c:	12001c97 	and	w23, w4, #0xff
   88d40:	12001059 	and	w25, w2, #0x1f
   88d44:	120001a4 	and	w4, w13, #0x1
		args[0]=disasm_arg_FPst; args[1]=disasm_arg_offs; args[2]=disasm_arg_XnS; args[3]=disasm_arg_i_opt; args[4]=disasm_arg_offe; 
   88d48:	52800562 	mov	w2, #0x2b                  	// #43
   88d4c:	72a22543 	movk	w3, #0x112a, lsl #16
		op=((ic32_22)&0x1); z=((ic32_30)&0x3); s=((ic32_23)&0x1); i=((ic32_20)&1?(-1<<9):0)|((ic32_12)&0x1ff); p=((ic32_11)&0x1); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   88d50:	120000e1 	and	w1, w7, #0x1
   88d54:	1200021b 	and	w27, w16, #0x1
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   88d58:	52800018 	mov	w24, #0x0                   	// #0
	uint16_t op=0, om=0, j=0;
   88d5c:	52800014 	mov	w20, #0x0                   	// #0
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   88d60:	290fffff 	stp	wzr, wzr, [sp, #124]
   88d64:	29117fff 	stp	wzr, wzr, [sp, #136]
   88d68:	29127fe4 	stp	w4, wzr, [sp, #144]
   88d6c:	b9009bff 	str	wzr, [sp, #152]
		args[0]=disasm_arg_FPst; args[1]=disasm_arg_offs; args[2]=disasm_arg_XnS; args[3]=disasm_arg_i_opt; args[4]=disasm_arg_offe; 
   88d70:	b902c3e3 	str	w3, [sp, #704]
   88d74:	390b13e2 	strb	w2, [sp, #708]
   88d78:	a9435bf5 	ldp	x21, x22, [sp, #48]
   88d7c:	17fff3b9 	b	85c60 <disasm+0x1c80>
		op=((ic32_22)&0x1); z=((ic32_30)&0x3); s=((ic32_23)&0x1); i=((ic32_20)&1?(-1<<9):0)|((ic32_12)&0x1ff); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   88d80:	f240011f 	tst	x8, #0x1
   88d84:	1200214a 	and	w10, w10, #0x1ff
   88d88:	12803fe5 	mov	w5, #0xfffffe00            	// #-512
   88d8c:	1a9f10a5 	csel	w5, w5, wzr, ne  // ne = any
		names="str\0ldr\0";
   88d90:	90000063 	adrp	x3, 94000 <sd_init+0x2470>
		op=((ic32_22)&0x1); z=((ic32_30)&0x3); s=((ic32_23)&0x1); i=((ic32_20)&1?(-1<<9):0)|((ic32_12)&0x1ff); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   88d94:	1200101a 	and	w26, w0, #0x1f
		names="str\0ldr\0";
   88d98:	911a2063 	add	x3, x3, #0x688
		op=((ic32_22)&0x1); z=((ic32_30)&0x3); s=((ic32_23)&0x1); i=((ic32_20)&1?(-1<<9):0)|((ic32_12)&0x1ff); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   88d9c:	2a050140 	orr	w0, w10, w5
   88da0:	290e83ff 	stp	wzr, w0, [sp, #116]
		names="str\0ldr\0";
   88da4:	9119e060 	add	x0, x3, #0x678
		args[0]=disasm_arg_FPst; args[1]=disasm_arg_offs; args[2]=disasm_arg_XnS; args[3]=disasm_arg_offe; args[4]=disasm_arg_i_opt; 
   88da8:	52852b63 	mov	w3, #0x295b                	// #10587
		op=((ic32_22)&0x1); z=((ic32_30)&0x3); s=((ic32_23)&0x1); i=((ic32_20)&1?(-1<<9):0)|((ic32_12)&0x1ff); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   88dac:	12001059 	and	w25, w2, #0x1f
		args[0]=disasm_arg_FPst; args[1]=disasm_arg_offs; args[2]=disasm_arg_XnS; args[3]=disasm_arg_offe; args[4]=disasm_arg_i_opt; 
   88db0:	72a56543 	movk	w3, #0x2b2a, lsl #16
   88db4:	52800222 	mov	w2, #0x11                  	// #17
		op=((ic32_22)&0x1); z=((ic32_30)&0x3); s=((ic32_23)&0x1); i=((ic32_20)&1?(-1<<9):0)|((ic32_12)&0x1ff); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   88db8:	120000e1 	and	w1, w7, #0x1
   88dbc:	12001c97 	and	w23, w4, #0xff
   88dc0:	1200021b 	and	w27, w16, #0x1
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   88dc4:	52800018 	mov	w24, #0x0                   	// #0
	uint16_t op=0, om=0, j=0;
   88dc8:	52800014 	mov	w20, #0x0                   	// #0
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   88dcc:	290fffff 	stp	wzr, wzr, [sp, #124]
   88dd0:	29117fff 	stp	wzr, wzr, [sp, #136]
   88dd4:	29127fff 	stp	wzr, wzr, [sp, #144]
   88dd8:	b9009bff 	str	wzr, [sp, #152]
		args[0]=disasm_arg_FPst; args[1]=disasm_arg_offs; args[2]=disasm_arg_XnS; args[3]=disasm_arg_offe; args[4]=disasm_arg_i_opt; 
   88ddc:	b902c3e3 	str	w3, [sp, #704]
   88de0:	390b13e2 	strb	w2, [sp, #708]
   88de4:	a9435bf5 	ldp	x21, x22, [sp, #48]
   88de8:	17fff39e 	b	85c60 <disasm+0x1c80>
		op=((ic32_22)&0x1); z=((ic32_30)&0x3); s=((ic32_23)&0x1); i=((ic32_20)&1?(-1<<9):0)|((ic32_12)&0x1ff); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   88dec:	f240011f 	tst	x8, #0x1
   88df0:	1200214a 	and	w10, w10, #0x1ff
   88df4:	12803fe5 	mov	w5, #0xfffffe00            	// #-512
   88df8:	1a9f10a5 	csel	w5, w5, wzr, ne  // ne = any
		names="stur\0ldur\0";
   88dfc:	90000063 	adrp	x3, 94000 <sd_init+0x2470>
		op=((ic32_22)&0x1); z=((ic32_30)&0x3); s=((ic32_23)&0x1); i=((ic32_20)&1?(-1<<9):0)|((ic32_12)&0x1ff); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   88e00:	1200101a 	and	w26, w0, #0x1f
		names="stur\0ldur\0";
   88e04:	911a2063 	add	x3, x3, #0x688
		op=((ic32_22)&0x1); z=((ic32_30)&0x3); s=((ic32_23)&0x1); i=((ic32_20)&1?(-1<<9):0)|((ic32_12)&0x1ff); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   88e08:	2a050140 	orr	w0, w10, w5
   88e0c:	290e83ff 	stp	wzr, w0, [sp, #116]
		names="stur\0ldur\0";
   88e10:	9126a060 	add	x0, x3, #0x9a8
		args[0]=disasm_arg_FPst; args[1]=disasm_arg_offs; args[2]=disasm_arg_XnS; args[3]=disasm_arg_i_opt; args[4]=disasm_arg_offe; 
   88e14:	52852b63 	mov	w3, #0x295b                	// #10587
		op=((ic32_22)&0x1); z=((ic32_30)&0x3); s=((ic32_23)&0x1); i=((ic32_20)&1?(-1<<9):0)|((ic32_12)&0x1ff); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   88e18:	12001059 	and	w25, w2, #0x1f
		args[0]=disasm_arg_FPst; args[1]=disasm_arg_offs; args[2]=disasm_arg_XnS; args[3]=disasm_arg_i_opt; args[4]=disasm_arg_offe; 
   88e1c:	72a22543 	movk	w3, #0x112a, lsl #16
   88e20:	52800562 	mov	w2, #0x2b                  	// #43
		op=((ic32_22)&0x1); z=((ic32_30)&0x3); s=((ic32_23)&0x1); i=((ic32_20)&1?(-1<<9):0)|((ic32_12)&0x1ff); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   88e24:	120000e1 	and	w1, w7, #0x1
   88e28:	12001c97 	and	w23, w4, #0xff
   88e2c:	1200021b 	and	w27, w16, #0x1
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   88e30:	52800018 	mov	w24, #0x0                   	// #0
	uint16_t op=0, om=0, j=0;
   88e34:	52800014 	mov	w20, #0x0                   	// #0
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   88e38:	290fffff 	stp	wzr, wzr, [sp, #124]
   88e3c:	29117fff 	stp	wzr, wzr, [sp, #136]
   88e40:	29127fff 	stp	wzr, wzr, [sp, #144]
   88e44:	b9009bff 	str	wzr, [sp, #152]
		args[0]=disasm_arg_FPst; args[1]=disasm_arg_offs; args[2]=disasm_arg_XnS; args[3]=disasm_arg_i_opt; args[4]=disasm_arg_offe; 
   88e48:	b902c3e3 	str	w3, [sp, #704]
   88e4c:	390b13e2 	strb	w2, [sp, #708]
   88e50:	a9435bf5 	ldp	x21, x22, [sp, #48]
   88e54:	17fff383 	b	85c60 <disasm+0x1c80>
		names="ccmn\0ccmp\0";
   88e58:	90000063 	adrp	x3, 94000 <sd_init+0x2470>
		op=((ic32_30)&0x1); s=((ic32_31)&0x1); b=((ic32_16)&0x1f); c=((ic32_12)&0xf); n=((ic32_5)&0x1f); j=((ic32)&0xf); 
   88e5c:	12000081 	and	w1, w4, #0x1
		names="ccmn\0ccmp\0";
   88e60:	911a2063 	add	x3, x3, #0x688
		op=((ic32_30)&0x1); s=((ic32_31)&0x1); b=((ic32_16)&0x1f); c=((ic32_12)&0xf); n=((ic32_5)&0x1f); j=((ic32)&0xf); 
   88e64:	120010a4 	and	w4, w5, #0x1f
   88e68:	12001059 	and	w25, w2, #0x1f
		args[0]=disasm_arg_Rn; args[1]=disasm_arg_b; args[2]=disasm_arg_j; args[3]=disasm_arg_c; 
   88e6c:	52848122 	mov	w2, #0x2409                	// #9225
		op=((ic32_30)&0x1); s=((ic32_31)&0x1); b=((ic32_16)&0x1f); c=((ic32_12)&0xf); n=((ic32_5)&0x1f); j=((ic32)&0xf); 
   88e70:	12000c14 	and	w20, w0, #0xf
		args[0]=disasm_arg_Rn; args[1]=disasm_arg_b; args[2]=disasm_arg_j; args[3]=disasm_arg_c; 
   88e74:	72a1e1a2 	movk	w2, #0xf0d, lsl #16
		op=((ic32_30)&0x1); s=((ic32_31)&0x1); b=((ic32_16)&0x1f); c=((ic32_12)&0xf); n=((ic32_5)&0x1f); j=((ic32)&0xf); 
   88e78:	12001d3b 	and	w27, w9, #0xff
		names="ccmn\0ccmp\0";
   88e7c:	91266060 	add	x0, x3, #0x998
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   88e80:	52800017 	mov	w23, #0x0                   	// #0
   88e84:	52800018 	mov	w24, #0x0                   	// #0
   88e88:	5280001a 	mov	w26, #0x0                   	// #0
	uint32_t i=0;
   88e8c:	290effff 	stp	wzr, wzr, [sp, #116]
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   88e90:	290fffff 	stp	wzr, wzr, [sp, #124]
   88e94:	b9008bff 	str	wzr, [sp, #136]
   88e98:	29127fff 	stp	wzr, wzr, [sp, #144]
		op=((ic32_30)&0x1); s=((ic32_31)&0x1); b=((ic32_16)&0x1f); c=((ic32_12)&0xf); n=((ic32_5)&0x1f); j=((ic32)&0xf); 
   88e9c:	b9009be4 	str	w4, [sp, #152]
   88ea0:	12000d44 	and	w4, w10, #0xf
   88ea4:	b9008fe4 	str	w4, [sp, #140]
		args[0]=disasm_arg_Rn; args[1]=disasm_arg_b; args[2]=disasm_arg_j; args[3]=disasm_arg_c; 
   88ea8:	b902c3e2 	str	w2, [sp, #704]
   88eac:	a9435bf5 	ldp	x21, x22, [sp, #48]
   88eb0:	17fff36c 	b	85c60 <disasm+0x1c80>
		names="ccmn\0ccmp\0";
   88eb4:	90000063 	adrp	x3, 94000 <sd_init+0x2470>
		op=((ic32_30)&0x1); s=((ic32_31)&0x1); m=((ic32_16)&0x1f); c=((ic32_12)&0xf); n=((ic32_5)&0x1f); j=((ic32)&0xf); 
   88eb8:	12000081 	and	w1, w4, #0x1
		names="ccmn\0ccmp\0";
   88ebc:	911a2063 	add	x3, x3, #0x688
		op=((ic32_30)&0x1); s=((ic32_31)&0x1); m=((ic32_16)&0x1f); c=((ic32_12)&0xf); n=((ic32_5)&0x1f); j=((ic32)&0xf); 
   88ec0:	120010a4 	and	w4, w5, #0x1f
   88ec4:	12001059 	and	w25, w2, #0x1f
		args[0]=disasm_arg_Rn; args[1]=disasm_arg_Rm; args[2]=disasm_arg_j; args[3]=disasm_arg_c; 
   88ec8:	5281c122 	mov	w2, #0xe09                 	// #3593
		op=((ic32_30)&0x1); s=((ic32_31)&0x1); m=((ic32_16)&0x1f); c=((ic32_12)&0xf); n=((ic32_5)&0x1f); j=((ic32)&0xf); 
   88ecc:	12000c14 	and	w20, w0, #0xf
		args[0]=disasm_arg_Rn; args[1]=disasm_arg_Rm; args[2]=disasm_arg_j; args[3]=disasm_arg_c; 
   88ed0:	72a1e1a2 	movk	w2, #0xf0d, lsl #16
		op=((ic32_30)&0x1); s=((ic32_31)&0x1); m=((ic32_16)&0x1f); c=((ic32_12)&0xf); n=((ic32_5)&0x1f); j=((ic32)&0xf); 
   88ed4:	12001d3b 	and	w27, w9, #0xff
		names="ccmn\0ccmp\0";
   88ed8:	91266060 	add	x0, x3, #0x998
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   88edc:	52800017 	mov	w23, #0x0                   	// #0
   88ee0:	52800018 	mov	w24, #0x0                   	// #0
   88ee4:	5280001a 	mov	w26, #0x0                   	// #0
	uint32_t i=0;
   88ee8:	290effff 	stp	wzr, wzr, [sp, #116]
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   88eec:	290fffe4 	stp	w4, wzr, [sp, #124]
		op=((ic32_30)&0x1); s=((ic32_31)&0x1); m=((ic32_16)&0x1f); c=((ic32_12)&0xf); n=((ic32_5)&0x1f); j=((ic32)&0xf); 
   88ef0:	12000d44 	and	w4, w10, #0xf
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   88ef4:	b9008bff 	str	wzr, [sp, #136]
		op=((ic32_30)&0x1); s=((ic32_31)&0x1); m=((ic32_16)&0x1f); c=((ic32_12)&0xf); n=((ic32_5)&0x1f); j=((ic32)&0xf); 
   88ef8:	b9008fe4 	str	w4, [sp, #140]
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   88efc:	29127fff 	stp	wzr, wzr, [sp, #144]
   88f00:	b9009bff 	str	wzr, [sp, #152]
		args[0]=disasm_arg_Rn; args[1]=disasm_arg_Rm; args[2]=disasm_arg_j; args[3]=disasm_arg_c; 
   88f04:	b902c3e2 	str	w2, [sp, #704]
   88f08:	a9435bf5 	ldp	x21, x22, [sp, #48]
   88f0c:	17fff355 	b	85c60 <disasm+0x1c80>
		op=((ic32_23)&0x2)|((ic32_22)&0x1); z=((ic32_30)&0x3); p=((ic32_23)&0x1); i=((ic32_21)&1?(-1<<7):0)|((ic32_15)&0x7f); m=((ic32_10)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   88f10:	f240019f 	tst	x12, #0x1
   88f14:	120018c3 	and	w3, w6, #0x7f
   88f18:	12800fe8 	mov	w8, #0xffffff80            	// #-128
   88f1c:	1200101a 	and	w26, w0, #0x1f
   88f20:	1a9f1108 	csel	w8, w8, wzr, ne  // ne = any
   88f24:	12000200 	and	w0, w16, #0x1
   88f28:	120000e7 	and	w7, w7, #0x1
   88f2c:	121f0201 	and	w1, w16, #0x2
		names="stnp\0ldnp\0stp\0ldp\0";
   88f30:	90000065 	adrp	x5, 94000 <sd_init+0x2470>
   88f34:	911a20a5 	add	x5, x5, #0x688
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   88f38:	29127fe0 	stp	w0, wzr, [sp, #144]
		op=((ic32_23)&0x2)|((ic32_22)&0x1); z=((ic32_30)&0x3); p=((ic32_23)&0x1); i=((ic32_21)&1?(-1<<7):0)|((ic32_15)&0x7f); m=((ic32_10)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   88f3c:	2a080060 	orr	w0, w3, w8
		args[0]=disasm_arg_FPt; args[1]=disasm_arg_FPm; args[2]=disasm_arg_offs; args[3]=disasm_arg_XnS; args[4]=disasm_arg_iz4_opt; args[5]=disasm_arg_offe; 
   88f40:	528aea83 	mov	w3, #0x5754                	// #22356
		op=((ic32_23)&0x2)|((ic32_22)&0x1); z=((ic32_30)&0x3); p=((ic32_23)&0x1); i=((ic32_21)&1?(-1<<7):0)|((ic32_15)&0x7f); m=((ic32_10)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   88f44:	12001c97 	and	w23, w4, #0xff
   88f48:	12001059 	and	w25, w2, #0x1f
   88f4c:	12001284 	and	w4, w20, #0x1f
		args[0]=disasm_arg_FPt; args[1]=disasm_arg_FPm; args[2]=disasm_arg_offs; args[3]=disasm_arg_XnS; args[4]=disasm_arg_iz4_opt; args[5]=disasm_arg_offe; 
   88f50:	52856b02 	mov	w2, #0x2b58                	// #11096
   88f54:	72a54523 	movk	w3, #0x2a29, lsl #16
		op=((ic32_23)&0x2)|((ic32_22)&0x1); z=((ic32_30)&0x3); p=((ic32_23)&0x1); i=((ic32_21)&1?(-1<<7):0)|((ic32_15)&0x7f); m=((ic32_10)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   88f58:	2a070021 	orr	w1, w1, w7
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   88f5c:	52800018 	mov	w24, #0x0                   	// #0
   88f60:	5280001b 	mov	w27, #0x0                   	// #0
	uint16_t op=0, om=0, j=0;
   88f64:	52800014 	mov	w20, #0x0                   	// #0
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   88f68:	b90077ff 	str	wzr, [sp, #116]
		op=((ic32_23)&0x2)|((ic32_22)&0x1); z=((ic32_30)&0x3); p=((ic32_23)&0x1); i=((ic32_21)&1?(-1<<7):0)|((ic32_15)&0x7f); m=((ic32_10)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   88f6c:	b9007be0 	str	w0, [sp, #120]
		names="stnp\0ldnp\0stp\0ldp\0";
   88f70:	9123e0a0 	add	x0, x5, #0x8f8
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   88f74:	290fffe4 	stp	w4, wzr, [sp, #124]
   88f78:	29117fff 	stp	wzr, wzr, [sp, #136]
   88f7c:	b9009bff 	str	wzr, [sp, #152]
		args[0]=disasm_arg_FPt; args[1]=disasm_arg_FPm; args[2]=disasm_arg_offs; args[3]=disasm_arg_XnS; args[4]=disasm_arg_iz4_opt; args[5]=disasm_arg_offe; 
   88f80:	b902c3e3 	str	w3, [sp, #704]
   88f84:	79058be2 	strh	w2, [sp, #708]
   88f88:	a9435bf5 	ldp	x21, x22, [sp, #48]
   88f8c:	17fff335 	b	85c60 <disasm+0x1c80>
		op=((ic32_22)&0x1); z=((ic32_30)&0x3); i=((ic32_21)&1?(-1<<7):0)|((ic32_15)&0x7f); m=((ic32_10)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   88f90:	f240019f 	tst	x12, #0x1
   88f94:	120018c6 	and	w6, w6, #0x7f
   88f98:	12800fe5 	mov	w5, #0xffffff80            	// #-128
   88f9c:	1a9f10a5 	csel	w5, w5, wzr, ne  // ne = any
		names="stp\0ldp\0";
   88fa0:	90000063 	adrp	x3, 94000 <sd_init+0x2470>
		op=((ic32_22)&0x1); z=((ic32_30)&0x3); i=((ic32_21)&1?(-1<<7):0)|((ic32_15)&0x7f); m=((ic32_10)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   88fa4:	1200101a 	and	w26, w0, #0x1f
		names="stp\0ldp\0";
   88fa8:	911a2063 	add	x3, x3, #0x688
		op=((ic32_22)&0x1); z=((ic32_30)&0x3); i=((ic32_21)&1?(-1<<7):0)|((ic32_15)&0x7f); m=((ic32_10)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   88fac:	2a0500c0 	orr	w0, w6, w5
   88fb0:	290e83ff 	stp	wzr, w0, [sp, #116]
		names="stp\0ldp\0";
   88fb4:	9123a060 	add	x0, x3, #0x8e8
		args[0]=disasm_arg_FPt; args[1]=disasm_arg_FPm; args[2]=disasm_arg_offs; args[3]=disasm_arg_XnS; args[4]=disasm_arg_offe; args[5]=disasm_arg_iz4_opt; 
   88fb8:	528aea83 	mov	w3, #0x5754                	// #22356
		op=((ic32_22)&0x1); z=((ic32_30)&0x3); i=((ic32_21)&1?(-1<<7):0)|((ic32_15)&0x7f); m=((ic32_10)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   88fbc:	12001c97 	and	w23, w4, #0xff
   88fc0:	12001059 	and	w25, w2, #0x1f
   88fc4:	12001284 	and	w4, w20, #0x1f
		args[0]=disasm_arg_FPt; args[1]=disasm_arg_FPm; args[2]=disasm_arg_offs; args[3]=disasm_arg_XnS; args[4]=disasm_arg_offe; args[5]=disasm_arg_iz4_opt; 
   88fc8:	528b0562 	mov	w2, #0x582b                	// #22571
   88fcc:	72a54523 	movk	w3, #0x2a29, lsl #16
		op=((ic32_22)&0x1); z=((ic32_30)&0x3); i=((ic32_21)&1?(-1<<7):0)|((ic32_15)&0x7f); m=((ic32_10)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   88fd0:	120000e1 	and	w1, w7, #0x1
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   88fd4:	52800018 	mov	w24, #0x0                   	// #0
   88fd8:	5280001b 	mov	w27, #0x0                   	// #0
	uint16_t op=0, om=0, j=0;
   88fdc:	52800014 	mov	w20, #0x0                   	// #0
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   88fe0:	290fffe4 	stp	w4, wzr, [sp, #124]
   88fe4:	29117fff 	stp	wzr, wzr, [sp, #136]
   88fe8:	29127fff 	stp	wzr, wzr, [sp, #144]
   88fec:	b9009bff 	str	wzr, [sp, #152]
		args[0]=disasm_arg_FPt; args[1]=disasm_arg_FPm; args[2]=disasm_arg_offs; args[3]=disasm_arg_XnS; args[4]=disasm_arg_offe; args[5]=disasm_arg_iz4_opt; 
   88ff0:	b902c3e3 	str	w3, [sp, #704]
   88ff4:	79058be2 	strh	w2, [sp, #708]
   88ff8:	a9435bf5 	ldp	x21, x22, [sp, #48]
   88ffc:	17fff319 	b	85c60 <disasm+0x1c80>
		op=((ic32_30)&0x1); s=((ic32_31)&0x1); m=((ic32_16)&0x1f); o=((ic32_13)&0x7); j=((ic32_10)&0x7); n=((ic32_5)&0x1f); 
   89000:	120010a3 	and	w3, w5, #0x1f
		names="cmn\0cmp\0";
   89004:	f0000040 	adrp	x0, 94000 <sd_init+0x2470>
   89008:	911a2000 	add	x0, x0, #0x688
		op=((ic32_30)&0x1); s=((ic32_31)&0x1); m=((ic32_16)&0x1f); o=((ic32_13)&0x7); j=((ic32_10)&0x7); n=((ic32_5)&0x1f); 
   8900c:	b9007fe3 	str	w3, [sp, #124]
   89010:	12000963 	and	w3, w11, #0x7
   89014:	12001059 	and	w25, w2, #0x1f
   89018:	12000081 	and	w1, w4, #0x1
		args[0]=disasm_arg_RnS; args[1]=disasm_arg_Rsom; args[2]=disasm_arg_exts; 
   8901c:	52800ca2 	mov	w2, #0x65                  	// #101
		op=((ic32_30)&0x1); s=((ic32_31)&0x1); m=((ic32_16)&0x1f); o=((ic32_13)&0x7); j=((ic32_10)&0x7); n=((ic32_5)&0x1f); 
   89020:	12001d3b 	and	w27, w9, #0xff
   89024:	12000a94 	and	w20, w20, #0x7
		names="cmn\0cmp\0";
   89028:	91262000 	add	x0, x0, #0x988
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8902c:	52800017 	mov	w23, #0x0                   	// #0
   89030:	52800018 	mov	w24, #0x0                   	// #0
   89034:	5280001a 	mov	w26, #0x0                   	// #0
	uint32_t i=0;
   89038:	290effff 	stp	wzr, wzr, [sp, #116]
		op=((ic32_30)&0x1); s=((ic32_31)&0x1); m=((ic32_16)&0x1f); o=((ic32_13)&0x7); j=((ic32_10)&0x7); n=((ic32_5)&0x1f); 
   8903c:	b90083e3 	str	w3, [sp, #128]
		args[0]=disasm_arg_RnS; args[1]=disasm_arg_Rsom; args[2]=disasm_arg_exts; 
   89040:	528c80c3 	mov	w3, #0x6406                	// #25606
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   89044:	29117fff 	stp	wzr, wzr, [sp, #136]
   89048:	29127fff 	stp	wzr, wzr, [sp, #144]
   8904c:	b9009bff 	str	wzr, [sp, #152]
		args[0]=disasm_arg_RnS; args[1]=disasm_arg_Rsom; args[2]=disasm_arg_exts; 
   89050:	790583e3 	strh	w3, [sp, #704]
   89054:	390b0be2 	strb	w2, [sp, #706]
   89058:	a9435bf5 	ldp	x21, x22, [sp, #48]
   8905c:	17fff301 	b	85c60 <disasm+0x1c80>
		z=((ic32_30)&0x3); i=((ic32_23)&1?(-1<<19):0)|((ic32_5)&0x7ffff); t=((ic32)&0x1f); 
   89060:	f240021f 	tst	x16, #0x1
   89064:	12004842 	and	w2, w2, #0x7ffff
   89068:	52bfff03 	mov	w3, #0xfff80000            	// #-524288
   8906c:	1a9f1063 	csel	w3, w3, wzr, ne  // ne = any
		names="ldr\0";
   89070:	d0000041 	adrp	x1, 93000 <sd_init+0x1470>
		z=((ic32_30)&0x3); i=((ic32_23)&1?(-1<<19):0)|((ic32_5)&0x7ffff); t=((ic32)&0x1f); 
   89074:	1200101a 	and	w26, w0, #0x1f
		names="ldr\0";
   89078:	91162021 	add	x1, x1, #0x588
		z=((ic32_30)&0x3); i=((ic32_23)&1?(-1<<19):0)|((ic32_5)&0x7ffff); t=((ic32)&0x1f); 
   8907c:	2a030040 	orr	w0, w2, w3
   89080:	12001c97 	and	w23, w4, #0xff
		args[0]=disasm_arg_FPt; args[1]=disasm_arg_labeli4; 
   89084:	52820a82 	mov	w2, #0x1054                	// #4180
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   89088:	52800018 	mov	w24, #0x0                   	// #0
   8908c:	52800019 	mov	w25, #0x0                   	// #0
   89090:	5280001b 	mov	w27, #0x0                   	// #0
	uint16_t op=0, om=0, j=0;
   89094:	52800014 	mov	w20, #0x0                   	// #0
		z=((ic32_30)&0x3); i=((ic32_23)&1?(-1<<19):0)|((ic32_5)&0x7ffff); t=((ic32)&0x1f); 
   89098:	290e83ff 	stp	wzr, w0, [sp, #116]
		names="ldr\0";
   8909c:	91398020 	add	x0, x1, #0xe60
	uint16_t op=0, om=0, j=0;
   890a0:	52800001 	mov	w1, #0x0                   	// #0
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   890a4:	290fffff 	stp	wzr, wzr, [sp, #124]
   890a8:	29117fff 	stp	wzr, wzr, [sp, #136]
   890ac:	29127fff 	stp	wzr, wzr, [sp, #144]
   890b0:	b9009bff 	str	wzr, [sp, #152]
		args[0]=disasm_arg_FPt; args[1]=disasm_arg_labeli4; 
   890b4:	790583e2 	strh	w2, [sp, #704]
   890b8:	a9435bf5 	ldp	x21, x22, [sp, #48]
   890bc:	17fff2e9 	b	85c60 <disasm+0x1c80>
		op=((ic32_29)&0x2)|((ic32_10)&0x1); s=((ic32_31)&0x1); m=((ic32_16)&0x1f); c=((ic32_12)&0xf); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   890c0:	121f02a1 	and	w1, w21, #0x2
   890c4:	12000294 	and	w20, w20, #0x1
   890c8:	120010a4 	and	w4, w5, #0x1f
		names="csel\0csinc\0csinv\0csneg\0";
   890cc:	f0000043 	adrp	x3, 94000 <sd_init+0x2470>
		op=((ic32_29)&0x2)|((ic32_10)&0x1); s=((ic32_31)&0x1); m=((ic32_16)&0x1f); c=((ic32_12)&0xf); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   890d0:	12001059 	and	w25, w2, #0x1f
		names="csel\0csinc\0csinv\0csneg\0";
   890d4:	911a2063 	add	x3, x3, #0x688
		args[0]=disasm_arg_Rt; args[1]=disasm_arg_Rn; args[2]=disasm_arg_Rm; args[3]=disasm_arg_c; 
   890d8:	52812162 	mov	w2, #0x90b                 	// #2315
		op=((ic32_29)&0x2)|((ic32_10)&0x1); s=((ic32_31)&0x1); m=((ic32_16)&0x1f); c=((ic32_12)&0xf); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   890dc:	2a140021 	orr	w1, w1, w20
   890e0:	1200101a 	and	w26, w0, #0x1f
		args[0]=disasm_arg_Rt; args[1]=disasm_arg_Rn; args[2]=disasm_arg_Rm; args[3]=disasm_arg_c; 
   890e4:	72a1e1c2 	movk	w2, #0xf0e, lsl #16
		op=((ic32_29)&0x2)|((ic32_10)&0x1); s=((ic32_31)&0x1); m=((ic32_16)&0x1f); c=((ic32_12)&0xf); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   890e8:	12001d3b 	and	w27, w9, #0xff
		names="csel\0csinc\0csinv\0csneg\0";
   890ec:	9125c060 	add	x0, x3, #0x970
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   890f0:	52800017 	mov	w23, #0x0                   	// #0
   890f4:	52800018 	mov	w24, #0x0                   	// #0
	uint16_t op=0, om=0, j=0;
   890f8:	52800014 	mov	w20, #0x0                   	// #0
	uint32_t i=0;
   890fc:	290effff 	stp	wzr, wzr, [sp, #116]
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   89100:	290fffe4 	stp	w4, wzr, [sp, #124]
		op=((ic32_29)&0x2)|((ic32_10)&0x1); s=((ic32_31)&0x1); m=((ic32_16)&0x1f); c=((ic32_12)&0xf); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   89104:	12000d44 	and	w4, w10, #0xf
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   89108:	b9008bff 	str	wzr, [sp, #136]
		op=((ic32_29)&0x2)|((ic32_10)&0x1); s=((ic32_31)&0x1); m=((ic32_16)&0x1f); c=((ic32_12)&0xf); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8910c:	b9008fe4 	str	w4, [sp, #140]
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   89110:	29127fff 	stp	wzr, wzr, [sp, #144]
   89114:	b9009bff 	str	wzr, [sp, #152]
		args[0]=disasm_arg_Rt; args[1]=disasm_arg_Rn; args[2]=disasm_arg_Rm; args[3]=disasm_arg_c; 
   89118:	b902c3e2 	str	w2, [sp, #704]
   8911c:	a9435bf5 	ldp	x21, x22, [sp, #48]
   89120:	17fff2d0 	b	85c60 <disasm+0x1c80>
		op=((ic32_11)&0x2)|((ic32_10)&0x1); s=((ic32_31)&0x1); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   89124:	12000294 	and	w20, w20, #0x1
   89128:	121f01a1 	and	w1, w13, #0x2
		names="rbit\0rev16\0clz\0cls\0";
   8912c:	f0000043 	adrp	x3, 94000 <sd_init+0x2470>
   89130:	911a2063 	add	x3, x3, #0x688
		op=((ic32_11)&0x2)|((ic32_10)&0x1); s=((ic32_31)&0x1); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   89134:	2a140021 	orr	w1, w1, w20
   89138:	12001059 	and	w25, w2, #0x1f
   8913c:	1200101a 	and	w26, w0, #0x1f
		args[0]=disasm_arg_Rt; args[1]=disasm_arg_Rn; 
   89140:	52812162 	mov	w2, #0x90b                 	// #2315
		op=((ic32_11)&0x2)|((ic32_10)&0x1); s=((ic32_31)&0x1); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   89144:	12001d3b 	and	w27, w9, #0xff
		names="rbit\0rev16\0clz\0cls\0";
   89148:	91256060 	add	x0, x3, #0x958
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8914c:	52800017 	mov	w23, #0x0                   	// #0
   89150:	52800018 	mov	w24, #0x0                   	// #0
	uint16_t op=0, om=0, j=0;
   89154:	52800014 	mov	w20, #0x0                   	// #0
	uint32_t i=0;
   89158:	290effff 	stp	wzr, wzr, [sp, #116]
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8915c:	290fffff 	stp	wzr, wzr, [sp, #124]
   89160:	29117fff 	stp	wzr, wzr, [sp, #136]
   89164:	29127fff 	stp	wzr, wzr, [sp, #144]
   89168:	b9009bff 	str	wzr, [sp, #152]
		args[0]=disasm_arg_Rt; args[1]=disasm_arg_Rn; 
   8916c:	790583e2 	strh	w2, [sp, #704]
   89170:	a9435bf5 	ldp	x21, x22, [sp, #48]
   89174:	17fff2bb 	b	85c60 <disasm+0x1c80>
		names="rev\0";
   89178:	f0000041 	adrp	x1, 94000 <sd_init+0x2470>
   8917c:	911a2021 	add	x1, x1, #0x688
		s=((ic32_31)&0x1); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   89180:	12001059 	and	w25, w2, #0x1f
   89184:	1200101a 	and	w26, w0, #0x1f
		args[0]=disasm_arg_Rt; args[1]=disasm_arg_Rn; 
   89188:	52812162 	mov	w2, #0x90b                 	// #2315
		names="rev\0";
   8918c:	91254020 	add	x0, x1, #0x950
		s=((ic32_31)&0x1); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   89190:	12001d3b 	and	w27, w9, #0xff
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   89194:	52800017 	mov	w23, #0x0                   	// #0
   89198:	52800018 	mov	w24, #0x0                   	// #0
	uint16_t op=0, om=0, j=0;
   8919c:	52800014 	mov	w20, #0x0                   	// #0
   891a0:	52800001 	mov	w1, #0x0                   	// #0
	uint32_t i=0;
   891a4:	290effff 	stp	wzr, wzr, [sp, #116]
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   891a8:	290fffff 	stp	wzr, wzr, [sp, #124]
   891ac:	29117fff 	stp	wzr, wzr, [sp, #136]
   891b0:	29127fff 	stp	wzr, wzr, [sp, #144]
   891b4:	b9009bff 	str	wzr, [sp, #152]
		args[0]=disasm_arg_Rt; args[1]=disasm_arg_Rn; 
   891b8:	790583e2 	strh	w2, [sp, #704]
   891bc:	a9435bf5 	ldp	x21, x22, [sp, #48]
   891c0:	17fff2a8 	b	85c60 <disasm+0x1c80>
		s=((ic32_31)&0x1); m=((ic32_16)&0x1f); t=((ic32)&0x1f); 
   891c4:	120010a2 	and	w2, w5, #0x1f
		names="ngc\0";
   891c8:	f0000041 	adrp	x1, 94000 <sd_init+0x2470>
   891cc:	911a2021 	add	x1, x1, #0x688
		s=((ic32_31)&0x1); m=((ic32_16)&0x1f); t=((ic32)&0x1f); 
   891d0:	1200101a 	and	w26, w0, #0x1f
   891d4:	12001d3b 	and	w27, w9, #0xff
		names="ngc\0";
   891d8:	91252020 	add	x0, x1, #0x948
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   891dc:	52800017 	mov	w23, #0x0                   	// #0
   891e0:	52800018 	mov	w24, #0x0                   	// #0
   891e4:	52800019 	mov	w25, #0x0                   	// #0
	uint16_t op=0, om=0, j=0;
   891e8:	52800014 	mov	w20, #0x0                   	// #0
   891ec:	52800001 	mov	w1, #0x0                   	// #0
	uint32_t i=0;
   891f0:	290effff 	stp	wzr, wzr, [sp, #116]
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   891f4:	290fffe2 	stp	w2, wzr, [sp, #124]
		args[0]=disasm_arg_Rt; args[1]=disasm_arg_Rm; 
   891f8:	5281c162 	mov	w2, #0xe0b                 	// #3595
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   891fc:	29117fff 	stp	wzr, wzr, [sp, #136]
   89200:	29127fff 	stp	wzr, wzr, [sp, #144]
   89204:	b9009bff 	str	wzr, [sp, #152]
		args[0]=disasm_arg_Rt; args[1]=disasm_arg_Rm; 
   89208:	790583e2 	strh	w2, [sp, #704]
   8920c:	a9435bf5 	ldp	x21, x22, [sp, #48]
   89210:	17fff294 	b	85c60 <disasm+0x1c80>
		op=((ic32_30)&0x2)|((ic32_11)&0x1); i=((ic32_20)&1?(-1<<9):0)|((ic32_12)&0x1ff); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   89214:	f240011f 	tst	x8, #0x1
   89218:	121f0081 	and	w1, w4, #0x2
   8921c:	1200214a 	and	w10, w10, #0x1ff
   89220:	12803fe4 	mov	w4, #0xfffffe00            	// #-512
   89224:	1a9f1084 	csel	w4, w4, wzr, ne  // ne = any
		names="?\0ldtrsb\0ldursw\0ldtrsw\0";
   89228:	f0000043 	adrp	x3, 94000 <sd_init+0x2470>
		op=((ic32_30)&0x2)|((ic32_11)&0x1); i=((ic32_20)&1?(-1<<9):0)|((ic32_12)&0x1ff); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8922c:	1200101a 	and	w26, w0, #0x1f
		names="?\0ldtrsb\0ldursw\0ldtrsw\0";
   89230:	911a2063 	add	x3, x3, #0x688
		op=((ic32_30)&0x2)|((ic32_11)&0x1); i=((ic32_20)&1?(-1<<9):0)|((ic32_12)&0x1ff); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   89234:	2a040140 	orr	w0, w10, w4
   89238:	120001ad 	and	w13, w13, #0x1
   8923c:	290e83ff 	stp	wzr, w0, [sp, #116]
		names="?\0ldtrsb\0ldursw\0ldtrsw\0";
   89240:	9124c060 	add	x0, x3, #0x930
		args[0]=disasm_arg_Xt; args[1]=disasm_arg_offs; args[2]=disasm_arg_XnS; args[3]=disasm_arg_i_opt; args[4]=disasm_arg_offe; 
   89244:	52852063 	mov	w3, #0x2903                	// #10499
		op=((ic32_30)&0x2)|((ic32_11)&0x1); i=((ic32_20)&1?(-1<<9):0)|((ic32_12)&0x1ff); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   89248:	12001059 	and	w25, w2, #0x1f
		args[0]=disasm_arg_Xt; args[1]=disasm_arg_offs; args[2]=disasm_arg_XnS; args[3]=disasm_arg_i_opt; args[4]=disasm_arg_offe; 
   8924c:	72a22543 	movk	w3, #0x112a, lsl #16
   89250:	52800562 	mov	w2, #0x2b                  	// #43
		op=((ic32_30)&0x2)|((ic32_11)&0x1); i=((ic32_20)&1?(-1<<9):0)|((ic32_12)&0x1ff); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   89254:	2a0d0021 	orr	w1, w1, w13
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   89258:	52800017 	mov	w23, #0x0                   	// #0
   8925c:	52800018 	mov	w24, #0x0                   	// #0
   89260:	5280001b 	mov	w27, #0x0                   	// #0
	uint16_t op=0, om=0, j=0;
   89264:	52800014 	mov	w20, #0x0                   	// #0
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   89268:	290fffff 	stp	wzr, wzr, [sp, #124]
   8926c:	29117fff 	stp	wzr, wzr, [sp, #136]
   89270:	29127fff 	stp	wzr, wzr, [sp, #144]
   89274:	b9009bff 	str	wzr, [sp, #152]
		args[0]=disasm_arg_Xt; args[1]=disasm_arg_offs; args[2]=disasm_arg_XnS; args[3]=disasm_arg_i_opt; args[4]=disasm_arg_offe; 
   89278:	b902c3e3 	str	w3, [sp, #704]
   8927c:	390b13e2 	strb	w2, [sp, #708]
   89280:	a9435bf5 	ldp	x21, x22, [sp, #48]
   89284:	17fff277 	b	85c60 <disasm+0x1c80>
		op=((ic32_24)&0x1); b=((ic32_26)&0x20)|((ic32_19)&0x1f); i=((ic32_18)&1?(-1<<14):0)|((ic32_5)&0x3fff); t=((ic32)&0x1f); 
   89288:	f9404fe1 	ldr	x1, [sp, #152]
   8928c:	1200137b 	and	w27, w27, #0x1f
   89290:	12003442 	and	w2, w2, #0x3fff
   89294:	1287ffe4 	mov	w4, #0xffffc000            	// #-16384
		names="tbz\0tbnz\0";
   89298:	f0000043 	adrp	x3, 94000 <sd_init+0x2470>
		op=((ic32_24)&0x1); b=((ic32_26)&0x20)|((ic32_19)&0x1f); i=((ic32_18)&1?(-1<<14):0)|((ic32_5)&0x3fff); t=((ic32)&0x1f); 
   8929c:	1200101a 	and	w26, w0, #0x1f
   892a0:	f240003f 	tst	x1, #0x1
   892a4:	531a7c01 	lsr	w1, w0, #26
   892a8:	121b0021 	and	w1, w1, #0x20
   892ac:	1a9f1084 	csel	w4, w4, wzr, ne  // ne = any
   892b0:	2a1b0021 	orr	w1, w1, w27
   892b4:	2a040040 	orr	w0, w2, w4
		names="tbz\0tbnz\0";
   892b8:	911a2063 	add	x3, x3, #0x688
		args[0]=disasm_arg_Xt; args[1]=disasm_arg_b; args[2]=disasm_arg_labeli4; 
   892bc:	52800202 	mov	w2, #0x10                  	// #16
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   892c0:	52800017 	mov	w23, #0x0                   	// #0
   892c4:	52800018 	mov	w24, #0x0                   	// #0
   892c8:	52800019 	mov	w25, #0x0                   	// #0
	uint16_t op=0, om=0, j=0;
   892cc:	52800014 	mov	w20, #0x0                   	// #0
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   892d0:	5280001b 	mov	w27, #0x0                   	// #0
		op=((ic32_24)&0x1); b=((ic32_26)&0x20)|((ic32_19)&0x1f); i=((ic32_18)&1?(-1<<14):0)|((ic32_5)&0x3fff); t=((ic32)&0x1f); 
   892d4:	290e83ff 	stp	wzr, w0, [sp, #116]
		names="tbz\0tbnz\0";
   892d8:	91248060 	add	x0, x3, #0x920
		args[0]=disasm_arg_Xt; args[1]=disasm_arg_b; args[2]=disasm_arg_labeli4; 
   892dc:	52848063 	mov	w3, #0x2403                	// #9219
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   892e0:	290fffff 	stp	wzr, wzr, [sp, #124]
   892e4:	29117fff 	stp	wzr, wzr, [sp, #136]
   892e8:	29127fff 	stp	wzr, wzr, [sp, #144]
		op=((ic32_24)&0x1); b=((ic32_26)&0x20)|((ic32_19)&0x1f); i=((ic32_18)&1?(-1<<14):0)|((ic32_5)&0x3fff); t=((ic32)&0x1f); 
   892ec:	b9009be1 	str	w1, [sp, #152]
   892f0:	120002c1 	and	w1, w22, #0x1
		args[0]=disasm_arg_Xt; args[1]=disasm_arg_b; args[2]=disasm_arg_labeli4; 
   892f4:	790583e3 	strh	w3, [sp, #704]
   892f8:	390b0be2 	strb	w2, [sp, #706]
   892fc:	a9435bf5 	ldp	x21, x22, [sp, #48]
   89300:	17fff258 	b	85c60 <disasm+0x1c80>
		op=((ic32_24)&0x1); s=((ic32_31)&0x1); i=((ic32_23)&1?(-1<<19):0)|((ic32_5)&0x7ffff); t=((ic32)&0x1f); 
   89304:	f240021f 	tst	x16, #0x1
   89308:	12004842 	and	w2, w2, #0x7ffff
   8930c:	52bfff04 	mov	w4, #0xfff80000            	// #-524288
   89310:	1a9f1084 	csel	w4, w4, wzr, ne  // ne = any
		names="cbz\0cbnz\0";
   89314:	f0000043 	adrp	x3, 94000 <sd_init+0x2470>
		op=((ic32_24)&0x1); s=((ic32_31)&0x1); i=((ic32_23)&1?(-1<<19):0)|((ic32_5)&0x7ffff); t=((ic32)&0x1f); 
   89318:	1200101a 	and	w26, w0, #0x1f
		names="cbz\0cbnz\0";
   8931c:	911a2063 	add	x3, x3, #0x688
		op=((ic32_24)&0x1); s=((ic32_31)&0x1); i=((ic32_23)&1?(-1<<19):0)|((ic32_5)&0x7ffff); t=((ic32)&0x1f); 
   89320:	2a040040 	orr	w0, w2, w4
   89324:	120002c1 	and	w1, w22, #0x1
		args[0]=disasm_arg_Rt; args[1]=disasm_arg_labeli4; 
   89328:	52820162 	mov	w2, #0x100b                	// #4107
		op=((ic32_24)&0x1); s=((ic32_31)&0x1); i=((ic32_23)&1?(-1<<19):0)|((ic32_5)&0x7ffff); t=((ic32)&0x1f); 
   8932c:	12001d3b 	and	w27, w9, #0xff
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   89330:	52800017 	mov	w23, #0x0                   	// #0
   89334:	52800018 	mov	w24, #0x0                   	// #0
   89338:	52800019 	mov	w25, #0x0                   	// #0
	uint16_t op=0, om=0, j=0;
   8933c:	52800014 	mov	w20, #0x0                   	// #0
		op=((ic32_24)&0x1); s=((ic32_31)&0x1); i=((ic32_23)&1?(-1<<19):0)|((ic32_5)&0x7ffff); t=((ic32)&0x1f); 
   89340:	290e83ff 	stp	wzr, w0, [sp, #116]
		names="cbz\0cbnz\0";
   89344:	91244060 	add	x0, x3, #0x910
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   89348:	290fffff 	stp	wzr, wzr, [sp, #124]
   8934c:	29117fff 	stp	wzr, wzr, [sp, #136]
   89350:	29127fff 	stp	wzr, wzr, [sp, #144]
   89354:	b9009bff 	str	wzr, [sp, #152]
		args[0]=disasm_arg_Rt; args[1]=disasm_arg_labeli4; 
   89358:	790583e2 	strh	w2, [sp, #704]
   8935c:	a9435bf5 	ldp	x21, x22, [sp, #48]
   89360:	17fff240 	b	85c60 <disasm+0x1c80>
		names="xtn2\0";
   89364:	d0000041 	adrp	x1, 93000 <sd_init+0x1470>
   89368:	91162021 	add	x1, x1, #0x588
		z=((ic32_22)&0x3); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8936c:	12001059 	and	w25, w2, #0x1f
   89370:	1200101a 	and	w26, w0, #0x1f
		args[0]=disasm_arg_VtT; args[1]=disasm_arg_VnT2; 
   89374:	128b3b42 	mov	w2, #0xffffa625            	// #-23003
		names="xtn2\0";
   89378:	910e6020 	add	x0, x1, #0x398
		z=((ic32_22)&0x3); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8937c:	120004f7 	and	w23, w7, #0x3
		q=1;
   89380:	52800038 	mov	w24, #0x1                   	// #1
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   89384:	5280001b 	mov	w27, #0x0                   	// #0
	uint16_t op=0, om=0, j=0;
   89388:	52800014 	mov	w20, #0x0                   	// #0
   8938c:	52800001 	mov	w1, #0x0                   	// #0
	uint32_t i=0;
   89390:	290effff 	stp	wzr, wzr, [sp, #116]
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   89394:	290fffff 	stp	wzr, wzr, [sp, #124]
   89398:	29117fff 	stp	wzr, wzr, [sp, #136]
   8939c:	29127fff 	stp	wzr, wzr, [sp, #144]
   893a0:	b9009bff 	str	wzr, [sp, #152]
		args[0]=disasm_arg_VtT; args[1]=disasm_arg_VnT2; 
   893a4:	790583e2 	strh	w2, [sp, #704]
   893a8:	a9435bf5 	ldp	x21, x22, [sp, #48]
   893ac:	17fff22d 	b	85c60 <disasm+0x1c80>
		names="fcvtl2\0";
   893b0:	d0000041 	adrp	x1, 93000 <sd_init+0x1470>
   893b4:	91162021 	add	x1, x1, #0x588
		z=((ic32_22)&0x1); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   893b8:	12001059 	and	w25, w2, #0x1f
   893bc:	1200101a 	and	w26, w0, #0x1f
		args[0]=disasm_arg_Vtz3; args[1]=disasm_arg_Vnzq2; 
   893c0:	128aeca2 	mov	w2, #0xffffa89a            	// #-22374
		names="fcvtl2\0";
   893c4:	910e4020 	add	x0, x1, #0x390
		z=((ic32_22)&0x1); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   893c8:	120000f7 	and	w23, w7, #0x1
		q=1;
   893cc:	52800038 	mov	w24, #0x1                   	// #1
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   893d0:	5280001b 	mov	w27, #0x0                   	// #0
	uint16_t op=0, om=0, j=0;
   893d4:	52800014 	mov	w20, #0x0                   	// #0
   893d8:	52800001 	mov	w1, #0x0                   	// #0
	uint32_t i=0;
   893dc:	290effff 	stp	wzr, wzr, [sp, #116]
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   893e0:	290fffff 	stp	wzr, wzr, [sp, #124]
   893e4:	29117fff 	stp	wzr, wzr, [sp, #136]
   893e8:	29127fff 	stp	wzr, wzr, [sp, #144]
   893ec:	b9009bff 	str	wzr, [sp, #152]
		args[0]=disasm_arg_Vtz3; args[1]=disasm_arg_Vnzq2; 
   893f0:	790583e2 	strh	w2, [sp, #704]
   893f4:	a9435bf5 	ldp	x21, x22, [sp, #48]
   893f8:	17fff21a 	b	85c60 <disasm+0x1c80>
		names="fcvtn2\0";
   893fc:	d0000041 	adrp	x1, 93000 <sd_init+0x1470>
   89400:	91162021 	add	x1, x1, #0x588
		z=((ic32_22)&0x1); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   89404:	12001059 	and	w25, w2, #0x1f
   89408:	1200101a 	and	w26, w0, #0x1f
		args[0]=disasm_arg_Vtzq2; args[1]=disasm_arg_Vnz3; 
   8940c:	128b0b42 	mov	w2, #0xffffa7a5            	// #-22619
		names="fcvtn2\0";
   89410:	910e2020 	add	x0, x1, #0x388
		z=((ic32_22)&0x1); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   89414:	120000f7 	and	w23, w7, #0x1
		q=1;
   89418:	52800038 	mov	w24, #0x1                   	// #1
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8941c:	5280001b 	mov	w27, #0x0                   	// #0
	uint16_t op=0, om=0, j=0;
   89420:	52800014 	mov	w20, #0x0                   	// #0
   89424:	52800001 	mov	w1, #0x0                   	// #0
	uint32_t i=0;
   89428:	290effff 	stp	wzr, wzr, [sp, #116]
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8942c:	290fffff 	stp	wzr, wzr, [sp, #124]
   89430:	29117fff 	stp	wzr, wzr, [sp, #136]
   89434:	29127fff 	stp	wzr, wzr, [sp, #144]
   89438:	b9009bff 	str	wzr, [sp, #152]
		args[0]=disasm_arg_Vtzq2; args[1]=disasm_arg_Vnz3; 
   8943c:	790583e2 	strh	w2, [sp, #704]
   89440:	a9435bf5 	ldp	x21, x22, [sp, #48]
   89444:	17fff207 	b	85c60 <disasm+0x1c80>
		names="aese\0aesd\0aesmc\0aesimc\0";
   89448:	d0000043 	adrp	x3, 93000 <sd_init+0x1470>
   8944c:	91162063 	add	x3, x3, #0x588
		op=((ic32_12)&0x3); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   89450:	12001059 	and	w25, w2, #0x1f
   89454:	1200101a 	and	w26, w0, #0x1f
		args[0]=disasm_arg_Vt16b; args[1]=disasm_arg_Vn16b; 
   89458:	528d4d22 	mov	w2, #0x6a69                	// #27241
		op=((ic32_12)&0x3); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8945c:	12000541 	and	w1, w10, #0x3
		names="aese\0aesd\0aesmc\0aesimc\0";
   89460:	910dc060 	add	x0, x3, #0x370
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   89464:	52800017 	mov	w23, #0x0                   	// #0
   89468:	52800018 	mov	w24, #0x0                   	// #0
   8946c:	5280001b 	mov	w27, #0x0                   	// #0
	uint16_t op=0, om=0, j=0;
   89470:	52800014 	mov	w20, #0x0                   	// #0
	uint32_t i=0;
   89474:	290effff 	stp	wzr, wzr, [sp, #116]
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   89478:	290fffff 	stp	wzr, wzr, [sp, #124]
   8947c:	29117fff 	stp	wzr, wzr, [sp, #136]
   89480:	29127fff 	stp	wzr, wzr, [sp, #144]
   89484:	b9009bff 	str	wzr, [sp, #152]
		args[0]=disasm_arg_Vt16b; args[1]=disasm_arg_Vn16b; 
   89488:	790583e2 	strh	w2, [sp, #704]
   8948c:	a9435bf5 	ldp	x21, x22, [sp, #48]
   89490:	17fff1f4 	b	85c60 <disasm+0x1c80>
		names="ins\0";
   89494:	d0000041 	adrp	x1, 93000 <sd_init+0x1470>
		args[0]=disasm_arg_Vtj; args[1]=disasm_arg_offs; args[2]=disasm_arg_FPidx; args[3]=disasm_arg_offe; args[4]=disasm_arg_R2n; 
   89498:	52853443 	mov	w3, #0x29a2                	// #10658
		names="ins\0";
   8949c:	91162021 	add	x1, x1, #0x588
		j=((ic32_16)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   894a0:	12001059 	and	w25, w2, #0x1f
   894a4:	1200101a 	and	w26, w0, #0x1f
		args[0]=disasm_arg_Vtj; args[1]=disasm_arg_offs; args[2]=disasm_arg_FPidx; args[3]=disasm_arg_offe; args[4]=disasm_arg_R2n; 
   894a8:	72a56e83 	movk	w3, #0x2b74, lsl #16
		names="ins\0";
   894ac:	910da020 	add	x0, x1, #0x368
		args[0]=disasm_arg_Vtj; args[1]=disasm_arg_offs; args[2]=disasm_arg_FPidx; args[3]=disasm_arg_offe; args[4]=disasm_arg_R2n; 
   894b0:	12800b82 	mov	w2, #0xffffffa3            	// #-93
		j=((ic32_16)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   894b4:	120010b4 	and	w20, w5, #0x1f
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   894b8:	52800017 	mov	w23, #0x0                   	// #0
   894bc:	52800018 	mov	w24, #0x0                   	// #0
   894c0:	5280001b 	mov	w27, #0x0                   	// #0
	uint16_t op=0, om=0, j=0;
   894c4:	52800001 	mov	w1, #0x0                   	// #0
	uint32_t i=0;
   894c8:	290effff 	stp	wzr, wzr, [sp, #116]
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   894cc:	290fffff 	stp	wzr, wzr, [sp, #124]
   894d0:	29117fff 	stp	wzr, wzr, [sp, #136]
   894d4:	29127fff 	stp	wzr, wzr, [sp, #144]
   894d8:	b9009bff 	str	wzr, [sp, #152]
		args[0]=disasm_arg_Vtj; args[1]=disasm_arg_offs; args[2]=disasm_arg_FPidx; args[3]=disasm_arg_offe; args[4]=disasm_arg_R2n; 
   894dc:	b902c3e3 	str	w3, [sp, #704]
   894e0:	390b13e2 	strb	w2, [sp, #708]
   894e4:	a9435bf5 	ldp	x21, x22, [sp, #48]
   894e8:	17fff1de 	b	85c60 <disasm+0x1c80>
		names="stxrh\0stlxrh\0?\0?\0?\0?\0?\0?\0?\0?\0cash\0caslh\0?\0?\0casah\0casalh\0";
   894ec:	d0000043 	adrp	x3, 93000 <sd_init+0x1470>
   894f0:	91162063 	add	x3, x3, #0x588
		op=((ic32_20)&0xe)|((ic32_15)&0x1); d=((ic32_16)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   894f4:	121f0901 	and	w1, w8, #0xe
   894f8:	120000c6 	and	w6, w6, #0x1
   894fc:	1200101a 	and	w26, w0, #0x1f
		names="stxrh\0stlxrh\0?\0?\0?\0?\0?\0?\0?\0?\0cash\0caslh\0?\0?\0casah\0casalh\0";
   89500:	910ca060 	add	x0, x3, #0x328
		args[0]=disasm_arg_Wd; args[1]=disasm_arg_Wt; args[2]=disasm_arg_offs; args[3]=disasm_arg_XnS; args[4]=disasm_arg_offe; 
   89504:	528a6a43 	mov	w3, #0x5352                	// #21330
		op=((ic32_20)&0xe)|((ic32_15)&0x1); d=((ic32_16)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   89508:	120010a4 	and	w4, w5, #0x1f
   8950c:	12001059 	and	w25, w2, #0x1f
		args[0]=disasm_arg_Wd; args[1]=disasm_arg_Wt; args[2]=disasm_arg_offs; args[3]=disasm_arg_XnS; args[4]=disasm_arg_offe; 
   89510:	72a54523 	movk	w3, #0x2a29, lsl #16
   89514:	52800562 	mov	w2, #0x2b                  	// #43
		op=((ic32_20)&0xe)|((ic32_15)&0x1); d=((ic32_16)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   89518:	2a060021 	orr	w1, w1, w6
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8951c:	52800017 	mov	w23, #0x0                   	// #0
   89520:	52800018 	mov	w24, #0x0                   	// #0
   89524:	5280001b 	mov	w27, #0x0                   	// #0
	uint16_t op=0, om=0, j=0;
   89528:	52800014 	mov	w20, #0x0                   	// #0
	uint32_t i=0;
   8952c:	290effff 	stp	wzr, wzr, [sp, #116]
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   89530:	290fffff 	stp	wzr, wzr, [sp, #124]
   89534:	29117fe4 	stp	w4, wzr, [sp, #136]
   89538:	29127fff 	stp	wzr, wzr, [sp, #144]
   8953c:	b9009bff 	str	wzr, [sp, #152]
		args[0]=disasm_arg_Wd; args[1]=disasm_arg_Wt; args[2]=disasm_arg_offs; args[3]=disasm_arg_XnS; args[4]=disasm_arg_offe; 
   89540:	b902c3e3 	str	w3, [sp, #704]
   89544:	390b13e2 	strb	w2, [sp, #708]
   89548:	a9435bf5 	ldp	x21, x22, [sp, #48]
   8954c:	17fff1c5 	b	85c60 <disasm+0x1c80>
		op=((ic32_26)&0x8)|((ic32_13)&0x6)|((ic32_12)&0x1); j=((ic32_10)&0x2)|((ic32_21)&0x1); m=((ic32_16)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   89550:	531a7c01 	lsr	w1, w0, #26
   89554:	121f056b 	and	w11, w11, #0x6
   89558:	121d0021 	and	w1, w1, #0x8
   8955c:	12000146 	and	w6, w10, #0x1
   89560:	2a0b0021 	orr	w1, w1, w11
   89564:	121f0294 	and	w20, w20, #0x2
   89568:	1200018c 	and	w12, w12, #0x1
		names="smlal\0sqdmlal\0smlsl\0sqdmlsl\0smull\0sqdmull\0?\0?\0umlal\0?\0umlsl\0?\0umull\0";
   8956c:	d0000043 	adrp	x3, 93000 <sd_init+0x1470>
   89570:	91162063 	add	x3, x3, #0x588
		op=((ic32_26)&0x8)|((ic32_13)&0x6)|((ic32_12)&0x1); j=((ic32_10)&0x2)|((ic32_21)&0x1); m=((ic32_16)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   89574:	120010a4 	and	w4, w5, #0x1f
   89578:	12001059 	and	w25, w2, #0x1f
   8957c:	1200101a 	and	w26, w0, #0x1f
		args[0]=disasm_arg_Vtz; args[1]=disasm_arg_VnT; args[2]=disasm_arg_VmTs; 
   89580:	12800c82 	mov	w2, #0xffffff9b            	// #-101
		names="smlal\0sqdmlal\0smlsl\0sqdmlsl\0smull\0sqdmull\0?\0?\0umlal\0?\0umlsl\0?\0umull\0";
   89584:	910a6060 	add	x0, x3, #0x298
		op=((ic32_26)&0x8)|((ic32_13)&0x6)|((ic32_12)&0x1); j=((ic32_10)&0x2)|((ic32_21)&0x1); m=((ic32_16)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   89588:	2a060021 	orr	w1, w1, w6
		args[0]=disasm_arg_Vtz; args[1]=disasm_arg_VnT; args[2]=disasm_arg_VmTs; 
   8958c:	128f6e23 	mov	w3, #0xffff848e            	// #-31602
		op=((ic32_26)&0x8)|((ic32_13)&0x6)|((ic32_12)&0x1); j=((ic32_10)&0x2)|((ic32_21)&0x1); m=((ic32_16)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   89590:	2a0c0294 	orr	w20, w20, w12
		z=2;q=0;
   89594:	52800057 	mov	w23, #0x2                   	// #2
   89598:	52800018 	mov	w24, #0x0                   	// #0
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8959c:	5280001b 	mov	w27, #0x0                   	// #0
	uint32_t i=0;
   895a0:	290effff 	stp	wzr, wzr, [sp, #116]
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   895a4:	290fffe4 	stp	w4, wzr, [sp, #124]
   895a8:	29117fff 	stp	wzr, wzr, [sp, #136]
   895ac:	29127fff 	stp	wzr, wzr, [sp, #144]
   895b0:	b9009bff 	str	wzr, [sp, #152]
		args[0]=disasm_arg_Vtz; args[1]=disasm_arg_VnT; args[2]=disasm_arg_VmTs; 
   895b4:	790583e3 	strh	w3, [sp, #704]
   895b8:	390b0be2 	strb	w2, [sp, #706]
   895bc:	a9435bf5 	ldp	x21, x22, [sp, #48]
   895c0:	17fff1a8 	b	85c60 <disasm+0x1c80>
		names="sshll\0usshll\0";
   895c4:	d0000043 	adrp	x3, 93000 <sd_init+0x1470>
   895c8:	91162063 	add	x3, x3, #0x588
		op=((ic32_29)&0x1); j=((ic32_16)&0x7f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   895cc:	120002a1 	and	w1, w21, #0x1
   895d0:	12001059 	and	w25, w2, #0x1f
   895d4:	1200101a 	and	w26, w0, #0x1f
		args[0]=disasm_arg_Vtj2; args[1]=disasm_arg_VnTa; args[2]=disasm_arg_shlshift; 
   895d8:	12800d42 	mov	w2, #0xffffff95            	// #-107
		names="sshll\0usshll\0";
   895dc:	910c6060 	add	x0, x3, #0x318
		op=((ic32_29)&0x1); j=((ic32_16)&0x7f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   895e0:	120018b4 	and	w20, w5, #0x7f
		args[0]=disasm_arg_Vtj2; args[1]=disasm_arg_VnTa; args[2]=disasm_arg_shlshift; 
   895e4:	128d0d83 	mov	w3, #0xffff9793            	// #-26733
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   895e8:	52800017 	mov	w23, #0x0                   	// #0
		q=0;
   895ec:	52800018 	mov	w24, #0x0                   	// #0
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   895f0:	5280001b 	mov	w27, #0x0                   	// #0
	uint32_t i=0;
   895f4:	290effff 	stp	wzr, wzr, [sp, #116]
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   895f8:	290fffff 	stp	wzr, wzr, [sp, #124]
   895fc:	29117fff 	stp	wzr, wzr, [sp, #136]
   89600:	29127fff 	stp	wzr, wzr, [sp, #144]
   89604:	b9009bff 	str	wzr, [sp, #152]
		args[0]=disasm_arg_Vtj2; args[1]=disasm_arg_VnTa; args[2]=disasm_arg_shlshift; 
   89608:	790583e3 	strh	w3, [sp, #704]
   8960c:	390b0be2 	strb	w2, [sp, #706]
   89610:	a9435bf5 	ldp	x21, x22, [sp, #48]
   89614:	17fff193 	b	85c60 <disasm+0x1c80>
		op=((ic32_27)&0x4)|((ic32_11)&0x3); j=((ic32_16)&0x7f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   89618:	121e0021 	and	w1, w1, #0x4
   8961c:	120005ad 	and	w13, w13, #0x3
		names="?\0rshrn\0sqshrn\0sqrshrn\0sqshrun\0sqrshrun\0uqshrn\0uqrshrn\0";
   89620:	d0000043 	adrp	x3, 93000 <sd_init+0x1470>
   89624:	91162063 	add	x3, x3, #0x588
		op=((ic32_27)&0x4)|((ic32_11)&0x3); j=((ic32_16)&0x7f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   89628:	12001059 	and	w25, w2, #0x1f
   8962c:	1200101a 	and	w26, w0, #0x1f
		args[0]=disasm_arg_Vtj2; args[1]=disasm_arg_VnTa; args[2]=disasm_arg_shrshift; 
   89630:	12800da2 	mov	w2, #0xffffff92            	// #-110
		names="?\0rshrn\0sqshrn\0sqrshrn\0sqshrun\0sqrshrun\0uqshrn\0uqrshrn\0";
   89634:	910b8060 	add	x0, x3, #0x2e0
		op=((ic32_27)&0x4)|((ic32_11)&0x3); j=((ic32_16)&0x7f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   89638:	2a0d0021 	orr	w1, w1, w13
		args[0]=disasm_arg_Vtj2; args[1]=disasm_arg_VnTa; args[2]=disasm_arg_shrshift; 
   8963c:	128d0d83 	mov	w3, #0xffff9793            	// #-26733
		op=((ic32_27)&0x4)|((ic32_11)&0x3); j=((ic32_16)&0x7f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   89640:	120018b4 	and	w20, w5, #0x7f
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   89644:	52800017 	mov	w23, #0x0                   	// #0
		q=0;
   89648:	52800018 	mov	w24, #0x0                   	// #0
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8964c:	5280001b 	mov	w27, #0x0                   	// #0
	uint32_t i=0;
   89650:	290effff 	stp	wzr, wzr, [sp, #116]
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   89654:	290fffff 	stp	wzr, wzr, [sp, #124]
   89658:	29117fff 	stp	wzr, wzr, [sp, #136]
   8965c:	29127fff 	stp	wzr, wzr, [sp, #144]
   89660:	b9009bff 	str	wzr, [sp, #152]
		args[0]=disasm_arg_Vtj2; args[1]=disasm_arg_VnTa; args[2]=disasm_arg_shrshift; 
   89664:	790583e3 	strh	w3, [sp, #704]
   89668:	390b0be2 	strb	w2, [sp, #706]
   8966c:	a9435bf5 	ldp	x21, x22, [sp, #48]
   89670:	17fff17c 	b	85c60 <disasm+0x1c80>
		op=((ic32_26)&0x8)|((ic32_13)&0x6)|((ic32_12)&0x1); j=((ic32_9)&0x4)|((ic32_20)&0x3); m=((ic32_16)&0xf); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   89674:	121d0361 	and	w1, w27, #0x8
   89678:	121f056b 	and	w11, w11, #0x6
   8967c:	2a0b0021 	orr	w1, w1, w11
   89680:	12000146 	and	w6, w10, #0x1
   89684:	121e01ef 	and	w15, w15, #0x4
   89688:	12000508 	and	w8, w8, #0x3
		names="smlal\0sqdmlal\0smlsl\0sqdmlsl\0smull\0sqdmull\0?\0?\0umlal\0?\0umlsl\0?\0umull\0";
   8968c:	d0000043 	adrp	x3, 93000 <sd_init+0x1470>
   89690:	91162063 	add	x3, x3, #0x588
		op=((ic32_26)&0x8)|((ic32_13)&0x6)|((ic32_12)&0x1); j=((ic32_9)&0x4)|((ic32_20)&0x3); m=((ic32_16)&0xf); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   89694:	12000ca4 	and	w4, w5, #0xf
   89698:	12001059 	and	w25, w2, #0x1f
   8969c:	1200101a 	and	w26, w0, #0x1f
		args[0]=disasm_arg_Vtz; args[1]=disasm_arg_VnT; args[2]=disasm_arg_VmTs; 
   896a0:	12800c82 	mov	w2, #0xffffff9b            	// #-101
		names="smlal\0sqdmlal\0smlsl\0sqdmlsl\0smull\0sqdmull\0?\0?\0umlal\0?\0umlsl\0?\0umull\0";
   896a4:	910a6060 	add	x0, x3, #0x298
		op=((ic32_26)&0x8)|((ic32_13)&0x6)|((ic32_12)&0x1); j=((ic32_9)&0x4)|((ic32_20)&0x3); m=((ic32_16)&0xf); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   896a8:	2a060021 	orr	w1, w1, w6
		args[0]=disasm_arg_Vtz; args[1]=disasm_arg_VnT; args[2]=disasm_arg_VmTs; 
   896ac:	128f6e23 	mov	w3, #0xffff848e            	// #-31602
		op=((ic32_26)&0x8)|((ic32_13)&0x6)|((ic32_12)&0x1); j=((ic32_9)&0x4)|((ic32_20)&0x3); m=((ic32_16)&0xf); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   896b0:	2a0801f4 	orr	w20, w15, w8
		z=1;q=0;
   896b4:	52800037 	mov	w23, #0x1                   	// #1
   896b8:	52800018 	mov	w24, #0x0                   	// #0
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   896bc:	5280001b 	mov	w27, #0x0                   	// #0
	uint32_t i=0;
   896c0:	290effff 	stp	wzr, wzr, [sp, #116]
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   896c4:	290fffe4 	stp	w4, wzr, [sp, #124]
   896c8:	29117fff 	stp	wzr, wzr, [sp, #136]
   896cc:	29127fff 	stp	wzr, wzr, [sp, #144]
   896d0:	b9009bff 	str	wzr, [sp, #152]
		args[0]=disasm_arg_Vtz; args[1]=disasm_arg_VnT; args[2]=disasm_arg_VmTs; 
   896d4:	790583e3 	strh	w3, [sp, #704]
   896d8:	390b0be2 	strb	w2, [sp, #706]
   896dc:	a9435bf5 	ldp	x21, x22, [sp, #48]
   896e0:	17fff160 	b	85c60 <disasm+0x1c80>
		op=((ic32_25)&0x10)|((ic32_12)&0xf); z=((ic32_22)&0x3); m=((ic32_16)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   896e4:	121c02e1 	and	w1, w23, #0x10
   896e8:	12000d4a 	and	w10, w10, #0xf
		names="saddl\0saddw\0ssubl\0ssubw\0addhn\0sabal\0subhn\0sabdl\0smlal\0sqdmlal\0smlsl\0sqdmlsl\0?\0sqdmull\0pmull\0?\0uaddl\0uaddw\0usubl\0usubw\0raddhn\0uabal\0rsubhn\0uabdl\0umlal\0?\0umlsl\0?\0?\0?\0umull\0";
   896ec:	d0000043 	adrp	x3, 93000 <sd_init+0x1470>
   896f0:	91162063 	add	x3, x3, #0x588
		op=((ic32_25)&0x10)|((ic32_12)&0xf); z=((ic32_22)&0x3); m=((ic32_16)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   896f4:	120010a4 	and	w4, w5, #0x1f
   896f8:	12001059 	and	w25, w2, #0x1f
   896fc:	1200101a 	and	w26, w0, #0x1f
		args[0]=disasm_arg_VtT3; args[1]=disasm_arg_VnT; args[2]=disasm_arg_VmT; 
   89700:	12800f42 	mov	w2, #0xffffff85            	// #-123
		names="saddl\0saddw\0ssubl\0ssubw\0addhn\0sabal\0subhn\0sabdl\0smlal\0sqdmlal\0smlsl\0sqdmlsl\0?\0sqdmull\0pmull\0?\0uaddl\0uaddw\0usubl\0usubw\0raddhn\0uabal\0rsubhn\0uabdl\0umlal\0?\0umlsl\0?\0?\0?\0umull\0";
   89704:	9107a060 	add	x0, x3, #0x1e8
		op=((ic32_25)&0x10)|((ic32_12)&0xf); z=((ic32_22)&0x3); m=((ic32_16)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   89708:	2a0a0021 	orr	w1, w1, w10
		args[0]=disasm_arg_VtT3; args[1]=disasm_arg_VnT; args[2]=disasm_arg_VmT; 
   8970c:	128f6aa3 	mov	w3, #0xffff84aa            	// #-31574
		op=((ic32_25)&0x10)|((ic32_12)&0xf); z=((ic32_22)&0x3); m=((ic32_16)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   89710:	120004f7 	and	w23, w7, #0x3
		q=0;
   89714:	52800018 	mov	w24, #0x0                   	// #0
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   89718:	5280001b 	mov	w27, #0x0                   	// #0
	uint16_t op=0, om=0, j=0;
   8971c:	52800014 	mov	w20, #0x0                   	// #0
	uint32_t i=0;
   89720:	290effff 	stp	wzr, wzr, [sp, #116]
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   89724:	290fffe4 	stp	w4, wzr, [sp, #124]
   89728:	29117fff 	stp	wzr, wzr, [sp, #136]
   8972c:	29127fff 	stp	wzr, wzr, [sp, #144]
   89730:	b9009bff 	str	wzr, [sp, #152]
		args[0]=disasm_arg_VtT3; args[1]=disasm_arg_VnT; args[2]=disasm_arg_VmT; 
   89734:	790583e3 	strh	w3, [sp, #704]
   89738:	390b0be2 	strb	w2, [sp, #706]
   8973c:	a9435bf5 	ldp	x21, x22, [sp, #48]
   89740:	17fff148 	b	85c60 <disasm+0x1c80>
		names="pmull\0umull\0";
   89744:	d0000043 	adrp	x3, 93000 <sd_init+0x1470>
   89748:	91162063 	add	x3, x3, #0x588
		op=((ic32_29)&0x1); z=((ic32_22)&0x3); m=((ic32_16)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8974c:	120002a1 	and	w1, w21, #0x1
   89750:	120010a4 	and	w4, w5, #0x1f
   89754:	12001059 	and	w25, w2, #0x1f
   89758:	1200101a 	and	w26, w0, #0x1f
		args[0]=disasm_arg_VtT4; args[1]=disasm_arg_VnT; args[2]=disasm_arg_VmT; 
   8975c:	12800f42 	mov	w2, #0xffffff85            	// #-123
		names="pmull\0umull\0";
   89760:	91076060 	add	x0, x3, #0x1d8
		op=((ic32_29)&0x1); z=((ic32_22)&0x3); m=((ic32_16)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   89764:	120004f7 	and	w23, w7, #0x3
		args[0]=disasm_arg_VtT4; args[1]=disasm_arg_VnT; args[2]=disasm_arg_VmT; 
   89768:	128f6a63 	mov	w3, #0xffff84ac            	// #-31572
		q=0;
   8976c:	52800018 	mov	w24, #0x0                   	// #0
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   89770:	5280001b 	mov	w27, #0x0                   	// #0
	uint16_t op=0, om=0, j=0;
   89774:	52800014 	mov	w20, #0x0                   	// #0
	uint32_t i=0;
   89778:	290effff 	stp	wzr, wzr, [sp, #116]
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8977c:	290fffe4 	stp	w4, wzr, [sp, #124]
   89780:	29117fff 	stp	wzr, wzr, [sp, #136]
   89784:	29127fff 	stp	wzr, wzr, [sp, #144]
   89788:	b9009bff 	str	wzr, [sp, #152]
		args[0]=disasm_arg_VtT4; args[1]=disasm_arg_VnT; args[2]=disasm_arg_VmT; 
   8978c:	790583e3 	strh	w3, [sp, #704]
   89790:	390b0be2 	strb	w2, [sp, #706]
   89794:	a9435bf5 	ldp	x21, x22, [sp, #48]
   89798:	17fff132 	b	85c60 <disasm+0x1c80>
		op=((ic32_28)&0x2)|((ic32_13)&0x1); z=((ic32_22)&0x3); m=((ic32_16)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8979c:	121f0301 	and	w1, w24, #0x2
   897a0:	1200016b 	and	w11, w11, #0x1
		names="addhn\0subhn\0raddhn\0rsubhn\0";
   897a4:	d0000043 	adrp	x3, 93000 <sd_init+0x1470>
   897a8:	91162063 	add	x3, x3, #0x588
		op=((ic32_28)&0x2)|((ic32_13)&0x1); z=((ic32_22)&0x3); m=((ic32_16)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   897ac:	120010a4 	and	w4, w5, #0x1f
   897b0:	12001059 	and	w25, w2, #0x1f
   897b4:	1200101a 	and	w26, w0, #0x1f
		args[0]=disasm_arg_VtT; args[1]=disasm_arg_VnT3; args[2]=disasm_arg_VmT3; 
   897b8:	12800a82 	mov	w2, #0xffffffab            	// #-85
		names="addhn\0subhn\0raddhn\0rsubhn\0";
   897bc:	9106e060 	add	x0, x3, #0x1b8
		op=((ic32_28)&0x2)|((ic32_13)&0x1); z=((ic32_22)&0x3); m=((ic32_16)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   897c0:	2a0b0021 	orr	w1, w1, w11
		args[0]=disasm_arg_VtT; args[1]=disasm_arg_VnT3; args[2]=disasm_arg_VmT3; 
   897c4:	128edb43 	mov	w3, #0xffff8925            	// #-30427
		op=((ic32_28)&0x2)|((ic32_13)&0x1); z=((ic32_22)&0x3); m=((ic32_16)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   897c8:	120004f7 	and	w23, w7, #0x3
		q=0;
   897cc:	52800018 	mov	w24, #0x0                   	// #0
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   897d0:	5280001b 	mov	w27, #0x0                   	// #0
	uint16_t op=0, om=0, j=0;
   897d4:	52800014 	mov	w20, #0x0                   	// #0
	uint32_t i=0;
   897d8:	290effff 	stp	wzr, wzr, [sp, #116]
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   897dc:	290fffe4 	stp	w4, wzr, [sp, #124]
   897e0:	29117fff 	stp	wzr, wzr, [sp, #136]
   897e4:	29127fff 	stp	wzr, wzr, [sp, #144]
   897e8:	b9009bff 	str	wzr, [sp, #152]
		args[0]=disasm_arg_VtT; args[1]=disasm_arg_VnT3; args[2]=disasm_arg_VmT3; 
   897ec:	790583e3 	strh	w3, [sp, #704]
   897f0:	390b0be2 	strb	w2, [sp, #706]
   897f4:	a9435bf5 	ldp	x21, x22, [sp, #48]
   897f8:	17fff11a 	b	85c60 <disasm+0x1c80>
		op=((ic32_28)&0x2)|((ic32_13)&0x1); z=((ic32_22)&0x3); m=((ic32_16)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   897fc:	121f0301 	and	w1, w24, #0x2
   89800:	1200016b 	and	w11, w11, #0x1
		names="saddw\0ssubw\0uaddw\0usubw\0";
   89804:	d0000043 	adrp	x3, 93000 <sd_init+0x1470>
   89808:	91162063 	add	x3, x3, #0x588
		op=((ic32_28)&0x2)|((ic32_13)&0x1); z=((ic32_22)&0x3); m=((ic32_16)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8980c:	120010a4 	and	w4, w5, #0x1f
   89810:	12001059 	and	w25, w2, #0x1f
   89814:	1200101a 	and	w26, w0, #0x1f
		args[0]=disasm_arg_VtT3; args[1]=disasm_arg_VnT3; args[2]=disasm_arg_VmT; 
   89818:	12800f42 	mov	w2, #0xffffff85            	// #-123
		names="saddw\0ssubw\0uaddw\0usubw\0";
   8981c:	91066060 	add	x0, x3, #0x198
		op=((ic32_28)&0x2)|((ic32_13)&0x1); z=((ic32_22)&0x3); m=((ic32_16)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   89820:	2a0b0021 	orr	w1, w1, w11
		args[0]=disasm_arg_VtT3; args[1]=disasm_arg_VnT3; args[2]=disasm_arg_VmT; 
   89824:	128ecaa3 	mov	w3, #0xffff89aa            	// #-30294
		op=((ic32_28)&0x2)|((ic32_13)&0x1); z=((ic32_22)&0x3); m=((ic32_16)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   89828:	120004f7 	and	w23, w7, #0x3
		q=0;
   8982c:	52800018 	mov	w24, #0x0                   	// #0
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   89830:	5280001b 	mov	w27, #0x0                   	// #0
	uint16_t op=0, om=0, j=0;
   89834:	52800014 	mov	w20, #0x0                   	// #0
	uint32_t i=0;
   89838:	290effff 	stp	wzr, wzr, [sp, #116]
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8983c:	290fffe4 	stp	w4, wzr, [sp, #124]
   89840:	29117fff 	stp	wzr, wzr, [sp, #136]
   89844:	29127fff 	stp	wzr, wzr, [sp, #144]
   89848:	b9009bff 	str	wzr, [sp, #152]
		args[0]=disasm_arg_VtT3; args[1]=disasm_arg_VnT3; args[2]=disasm_arg_VmT; 
   8984c:	790583e3 	strh	w3, [sp, #704]
   89850:	390b0be2 	strb	w2, [sp, #706]
   89854:	a9435bf5 	ldp	x21, x22, [sp, #48]
   89858:	17fff102 	b	85c60 <disasm+0x1c80>
		op=((ic32_27)&0x4)|((ic32_13)&0x3); z=((ic32_22)&0x3); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8985c:	121e0021 	and	w1, w1, #0x4
   89860:	1200056b 	and	w11, w11, #0x3
		names="?\0xtn\0sqxtn\0?\0?\0sqxtun\0uqxtn\0fcvtxn\0";
   89864:	d0000043 	adrp	x3, 93000 <sd_init+0x1470>
   89868:	91162063 	add	x3, x3, #0x588
		op=((ic32_27)&0x4)|((ic32_13)&0x3); z=((ic32_22)&0x3); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8986c:	12001059 	and	w25, w2, #0x1f
   89870:	1200101a 	and	w26, w0, #0x1f
		args[0]=disasm_arg_VtT; args[1]=disasm_arg_VnT3; 
   89874:	128edb42 	mov	w2, #0xffff8925            	// #-30427
		op=((ic32_27)&0x4)|((ic32_13)&0x3); z=((ic32_22)&0x3); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   89878:	2a0b0021 	orr	w1, w1, w11
   8987c:	120004f7 	and	w23, w7, #0x3
		names="?\0xtn\0sqxtn\0?\0?\0sqxtun\0uqxtn\0fcvtxn\0";
   89880:	9105c060 	add	x0, x3, #0x170
		q=0;
   89884:	52800018 	mov	w24, #0x0                   	// #0
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   89888:	5280001b 	mov	w27, #0x0                   	// #0
	uint16_t op=0, om=0, j=0;
   8988c:	52800014 	mov	w20, #0x0                   	// #0
	uint32_t i=0;
   89890:	290effff 	stp	wzr, wzr, [sp, #116]
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   89894:	290fffff 	stp	wzr, wzr, [sp, #124]
   89898:	29117fff 	stp	wzr, wzr, [sp, #136]
   8989c:	29127fff 	stp	wzr, wzr, [sp, #144]
   898a0:	b9009bff 	str	wzr, [sp, #152]
		args[0]=disasm_arg_VtT; args[1]=disasm_arg_VnT3; 
   898a4:	790583e2 	strh	w2, [sp, #704]
   898a8:	a9435bf5 	ldp	x21, x22, [sp, #48]
   898ac:	17fff0ed 	b	85c60 <disasm+0x1c80>
		names="ldaddb\0ldclrb\0ldeorb\0ldsetb\0ldsmaxb\0ldsminb\0ldumaxb\0lduminb\0swpb\0?\0?\0?\0?\0?\0?\0?\0ldaddlb\0ldclrlb\0ldeorlb\0ldsetlb\0ldsmaxlb\0ldsminlb\0ldumaxlb\0lduminlb\0swplb\0?\0?\0?\0?\0?\0?\0?\0ldaddab\0ldclrab\0ldeorab\0ldsetab\0ldsmaxab\0ldsminab\0ldumaxab\0lduminab\0swpab\0?\0?\0?\0?\0?\0?\0?\0ldaddalb\0ldclralb\0ldeoralb\0ldsetalb\0ldsmaxalb\0ldsminalb\0ldumaxalb\0lduminalb\0swpalb\0";
   898b0:	d0000043 	adrp	x3, 93000 <sd_init+0x1470>
   898b4:	91162063 	add	x3, x3, #0x588
		op=((ic32_18)&0x30)|((ic32_12)&0xf); d=((ic32_16)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   898b8:	121c0421 	and	w1, w1, #0x30
   898bc:	12000d4a 	and	w10, w10, #0xf
   898c0:	1200101a 	and	w26, w0, #0x1f
		names="ldaddb\0ldclrb\0ldeorb\0ldsetb\0ldsmaxb\0ldsminb\0ldumaxb\0lduminb\0swpb\0?\0?\0?\0?\0?\0?\0?\0ldaddlb\0ldclrlb\0ldeorlb\0ldsetlb\0ldsmaxlb\0ldsminlb\0ldumaxlb\0lduminlb\0swplb\0?\0?\0?\0?\0?\0?\0?\0ldaddab\0ldclrab\0ldeorab\0ldsetab\0ldsmaxab\0ldsminab\0ldumaxab\0lduminab\0swpab\0?\0?\0?\0?\0?\0?\0?\0ldaddalb\0ldclralb\0ldeoralb\0ldsetalb\0ldsmaxalb\0ldsminalb\0ldumaxalb\0lduminalb\0swpalb\0";
   898c4:	91006060 	add	x0, x3, #0x18
		args[0]=disasm_arg_Wd; args[1]=disasm_arg_Wt; args[2]=disasm_arg_offs; args[3]=disasm_arg_XnS; args[4]=disasm_arg_offe; 
   898c8:	528a6a43 	mov	w3, #0x5352                	// #21330
		op=((ic32_18)&0x30)|((ic32_12)&0xf); d=((ic32_16)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   898cc:	120010a4 	and	w4, w5, #0x1f
   898d0:	12001059 	and	w25, w2, #0x1f
		args[0]=disasm_arg_Wd; args[1]=disasm_arg_Wt; args[2]=disasm_arg_offs; args[3]=disasm_arg_XnS; args[4]=disasm_arg_offe; 
   898d4:	72a54523 	movk	w3, #0x2a29, lsl #16
   898d8:	52800562 	mov	w2, #0x2b                  	// #43
		op=((ic32_18)&0x30)|((ic32_12)&0xf); d=((ic32_16)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   898dc:	2a0a0021 	orr	w1, w1, w10
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   898e0:	52800017 	mov	w23, #0x0                   	// #0
   898e4:	52800018 	mov	w24, #0x0                   	// #0
   898e8:	5280001b 	mov	w27, #0x0                   	// #0
	uint16_t op=0, om=0, j=0;
   898ec:	52800014 	mov	w20, #0x0                   	// #0
	uint32_t i=0;
   898f0:	290effff 	stp	wzr, wzr, [sp, #116]
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   898f4:	290fffff 	stp	wzr, wzr, [sp, #124]
   898f8:	29117fe4 	stp	w4, wzr, [sp, #136]
   898fc:	29127fff 	stp	wzr, wzr, [sp, #144]
   89900:	b9009bff 	str	wzr, [sp, #152]
		args[0]=disasm_arg_Wd; args[1]=disasm_arg_Wt; args[2]=disasm_arg_offs; args[3]=disasm_arg_XnS; args[4]=disasm_arg_offe; 
   89904:	b902c3e3 	str	w3, [sp, #704]
   89908:	390b13e2 	strb	w2, [sp, #708]
   8990c:	a9435bf5 	ldp	x21, x22, [sp, #48]
   89910:	17fff0d4 	b	85c60 <disasm+0x1c80>
		j=((ic32_16)&0x1f); k=((ic32_11)&0xf); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   89914:	12001059 	and	w25, w2, #0x1f
		args[0]=disasm_arg_Vtj; args[1]=disasm_arg_offs; args[2]=disasm_arg_FPidx; args[3]=disasm_arg_offe; args[4]=disasm_arg_Vnj; args[5]=disasm_arg_offs; args[6]=disasm_arg_FPidxk; args[7]=disasm_arg_offe; 
   89918:	d2853442 	mov	x2, #0x29a2                	// #10658
   8991c:	f2a56e82 	movk	x2, #0x2b74, lsl #16
		names="ins\0";
   89920:	d0000041 	adrp	x1, 93000 <sd_init+0x1470>
		args[0]=disasm_arg_Vtj; args[1]=disasm_arg_offs; args[2]=disasm_arg_FPidx; args[3]=disasm_arg_offe; args[4]=disasm_arg_Vnj; args[5]=disasm_arg_offs; args[6]=disasm_arg_FPidxk; args[7]=disasm_arg_offe; 
   89924:	f2c52e62 	movk	x2, #0x2973, lsl #32
		names="ins\0";
   89928:	91162021 	add	x1, x1, #0x588
		j=((ic32_16)&0x1f); k=((ic32_11)&0xf); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8992c:	12000da3 	and	w3, w13, #0xf
   89930:	1200101a 	and	w26, w0, #0x1f
		args[0]=disasm_arg_Vtj; args[1]=disasm_arg_offs; args[2]=disasm_arg_FPidx; args[3]=disasm_arg_offe; args[4]=disasm_arg_Vnj; args[5]=disasm_arg_offs; args[6]=disasm_arg_FPidxk; args[7]=disasm_arg_offe; 
   89934:	f2e57482 	movk	x2, #0x2ba4, lsl #48
		names="ins\0";
   89938:	910da020 	add	x0, x1, #0x368
		j=((ic32_16)&0x1f); k=((ic32_11)&0xf); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8993c:	120010b4 	and	w20, w5, #0x1f
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   89940:	52800017 	mov	w23, #0x0                   	// #0
   89944:	52800018 	mov	w24, #0x0                   	// #0
   89948:	5280001b 	mov	w27, #0x0                   	// #0
	uint16_t op=0, om=0, j=0;
   8994c:	52800001 	mov	w1, #0x0                   	// #0
	uint32_t i=0;
   89950:	290effe3 	stp	w3, wzr, [sp, #116]
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   89954:	290fffff 	stp	wzr, wzr, [sp, #124]
   89958:	29117fff 	stp	wzr, wzr, [sp, #136]
   8995c:	29127fff 	stp	wzr, wzr, [sp, #144]
   89960:	b9009bff 	str	wzr, [sp, #152]
		args[0]=disasm_arg_Vtj; args[1]=disasm_arg_offs; args[2]=disasm_arg_FPidx; args[3]=disasm_arg_offe; args[4]=disasm_arg_Vnj; args[5]=disasm_arg_offs; args[6]=disasm_arg_FPidxk; args[7]=disasm_arg_offe; 
   89964:	f90163e2 	str	x2, [sp, #704]
   89968:	a9435bf5 	ldp	x21, x22, [sp, #48]
   8996c:	17fff0bd 	b	85c60 <disasm+0x1c80>
		p=((ic32_23)&0x1); i=((ic32_21)&1?(-1<<7):0)|((ic32_15)&0x7f); m=((ic32_10)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   89970:	f240019f 	tst	x12, #0x1
   89974:	120018c6 	and	w6, w6, #0x7f
   89978:	12800fe3 	mov	w3, #0xffffff80            	// #-128
   8997c:	1a9f1063 	csel	w3, w3, wzr, ne  // ne = any
		names="ldpsw\0";
   89980:	d0000041 	adrp	x1, 93000 <sd_init+0x1470>
		p=((ic32_23)&0x1); i=((ic32_21)&1?(-1<<7):0)|((ic32_15)&0x7f); m=((ic32_10)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   89984:	1200101a 	and	w26, w0, #0x1f
		names="ldpsw\0";
   89988:	91162021 	add	x1, x1, #0x588
		p=((ic32_23)&0x1); i=((ic32_21)&1?(-1<<7):0)|((ic32_15)&0x7f); m=((ic32_10)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8998c:	2a0300c0 	orr	w0, w6, w3
   89990:	290e83ff 	stp	wzr, w0, [sp, #116]
		names="ldpsw\0";
   89994:	9113c020 	add	x0, x1, #0x4f0
		args[0]=disasm_arg_Xt; args[1]=disasm_arg_Xm; args[2]=disasm_arg_offs; args[3]=disasm_arg_XnS; args[4]=disasm_arg_im4_opt; args[5]=disasm_arg_offe; 
   89998:	5285a061 	mov	w1, #0x2d03                	// #11523
		p=((ic32_23)&0x1); i=((ic32_21)&1?(-1<<7):0)|((ic32_15)&0x7f); m=((ic32_10)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8999c:	12000204 	and	w4, w16, #0x1
		args[0]=disasm_arg_Xt; args[1]=disasm_arg_Xm; args[2]=disasm_arg_offs; args[3]=disasm_arg_XnS; args[4]=disasm_arg_im4_opt; args[5]=disasm_arg_offe; 
   899a0:	72a54521 	movk	w1, #0x2a29, lsl #16
		p=((ic32_23)&0x1); i=((ic32_21)&1?(-1<<7):0)|((ic32_15)&0x7f); m=((ic32_10)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   899a4:	12001059 	and	w25, w2, #0x1f
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   899a8:	52800017 	mov	w23, #0x0                   	// #0
		args[0]=disasm_arg_Xt; args[1]=disasm_arg_Xm; args[2]=disasm_arg_offs; args[3]=disasm_arg_XnS; args[4]=disasm_arg_im4_opt; args[5]=disasm_arg_offe; 
   899ac:	52856b22 	mov	w2, #0x2b59                	// #11097
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   899b0:	52800018 	mov	w24, #0x0                   	// #0
   899b4:	5280001b 	mov	w27, #0x0                   	// #0
   899b8:	b90083ff 	str	wzr, [sp, #128]
   899bc:	29117fff 	stp	wzr, wzr, [sp, #136]
   899c0:	29127fe4 	stp	w4, wzr, [sp, #144]
		p=((ic32_23)&0x1); i=((ic32_21)&1?(-1<<7):0)|((ic32_15)&0x7f); m=((ic32_10)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   899c4:	12001284 	and	w4, w20, #0x1f
	uint16_t op=0, om=0, j=0;
   899c8:	52800014 	mov	w20, #0x0                   	// #0
		p=((ic32_23)&0x1); i=((ic32_21)&1?(-1<<7):0)|((ic32_15)&0x7f); m=((ic32_10)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   899cc:	b9007fe4 	str	w4, [sp, #124]
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   899d0:	b9009bff 	str	wzr, [sp, #152]
		args[0]=disasm_arg_Xt; args[1]=disasm_arg_Xm; args[2]=disasm_arg_offs; args[3]=disasm_arg_XnS; args[4]=disasm_arg_im4_opt; args[5]=disasm_arg_offe; 
   899d4:	b902c3e1 	str	w1, [sp, #704]
	uint16_t op=0, om=0, j=0;
   899d8:	52800001 	mov	w1, #0x0                   	// #0
		args[0]=disasm_arg_Xt; args[1]=disasm_arg_Xm; args[2]=disasm_arg_offs; args[3]=disasm_arg_XnS; args[4]=disasm_arg_im4_opt; args[5]=disasm_arg_offe; 
   899dc:	79058be2 	strh	w2, [sp, #708]
   899e0:	a9435bf5 	ldp	x21, x22, [sp, #48]
   899e4:	17fff09f 	b	85c60 <disasm+0x1c80>
		i=((ic32_21)&1?(-1<<7):0)|((ic32_15)&0x7f); m=((ic32_10)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   899e8:	f240019f 	tst	x12, #0x1
   899ec:	120018c6 	and	w6, w6, #0x7f
   899f0:	12800fe3 	mov	w3, #0xffffff80            	// #-128
   899f4:	1a9f1063 	csel	w3, w3, wzr, ne  // ne = any
		names="ldpsw\0";
   899f8:	d0000041 	adrp	x1, 93000 <sd_init+0x1470>
		i=((ic32_21)&1?(-1<<7):0)|((ic32_15)&0x7f); m=((ic32_10)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   899fc:	1200101a 	and	w26, w0, #0x1f
		names="ldpsw\0";
   89a00:	91162021 	add	x1, x1, #0x588
		i=((ic32_21)&1?(-1<<7):0)|((ic32_15)&0x7f); m=((ic32_10)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   89a04:	2a0300c0 	orr	w0, w6, w3
   89a08:	290e83ff 	stp	wzr, w0, [sp, #116]
		names="ldpsw\0";
   89a0c:	9113c020 	add	x0, x1, #0x4f0
		args[0]=disasm_arg_Xt; args[1]=disasm_arg_Xm; args[2]=disasm_arg_offs; args[3]=disasm_arg_XnS; args[4]=disasm_arg_offe; args[5]=disasm_arg_im4_opt; 
   89a10:	5285a061 	mov	w1, #0x2d03                	// #11523
		i=((ic32_21)&1?(-1<<7):0)|((ic32_15)&0x7f); m=((ic32_10)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   89a14:	12001284 	and	w4, w20, #0x1f
		args[0]=disasm_arg_Xt; args[1]=disasm_arg_Xm; args[2]=disasm_arg_offs; args[3]=disasm_arg_XnS; args[4]=disasm_arg_offe; args[5]=disasm_arg_im4_opt; 
   89a18:	72a54521 	movk	w1, #0x2a29, lsl #16
		i=((ic32_21)&1?(-1<<7):0)|((ic32_15)&0x7f); m=((ic32_10)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   89a1c:	12001059 	and	w25, w2, #0x1f
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   89a20:	52800017 	mov	w23, #0x0                   	// #0
		args[0]=disasm_arg_Xt; args[1]=disasm_arg_Xm; args[2]=disasm_arg_offs; args[3]=disasm_arg_XnS; args[4]=disasm_arg_offe; args[5]=disasm_arg_im4_opt; 
   89a24:	528b2562 	mov	w2, #0x592b                	// #22827
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   89a28:	52800018 	mov	w24, #0x0                   	// #0
   89a2c:	5280001b 	mov	w27, #0x0                   	// #0
	uint16_t op=0, om=0, j=0;
   89a30:	52800014 	mov	w20, #0x0                   	// #0
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   89a34:	290fffe4 	stp	w4, wzr, [sp, #124]
   89a38:	29117fff 	stp	wzr, wzr, [sp, #136]
   89a3c:	29127fff 	stp	wzr, wzr, [sp, #144]
   89a40:	b9009bff 	str	wzr, [sp, #152]
		args[0]=disasm_arg_Xt; args[1]=disasm_arg_Xm; args[2]=disasm_arg_offs; args[3]=disasm_arg_XnS; args[4]=disasm_arg_offe; args[5]=disasm_arg_im4_opt; 
   89a44:	b902c3e1 	str	w1, [sp, #704]
	uint16_t op=0, om=0, j=0;
   89a48:	52800001 	mov	w1, #0x0                   	// #0
		args[0]=disasm_arg_Xt; args[1]=disasm_arg_Xm; args[2]=disasm_arg_offs; args[3]=disasm_arg_XnS; args[4]=disasm_arg_offe; args[5]=disasm_arg_im4_opt; 
   89a4c:	79058be2 	strh	w2, [sp, #708]
   89a50:	a9435bf5 	ldp	x21, x22, [sp, #48]
   89a54:	17fff083 	b	85c60 <disasm+0x1c80>
		op=((ic32_14)&0x3); j=((ic32_10)&0x2)|((ic32_21)&0x1); m=((ic32_16)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   89a58:	121f0294 	and	w20, w20, #0x2
   89a5c:	1200018c 	and	w12, w12, #0x1
		names="sqdmlal\0sqdmlsl\0sqdmull\0";
   89a60:	b0000043 	adrp	x3, 92000 <sd_init+0x470>
   89a64:	91122063 	add	x3, x3, #0x488
		op=((ic32_14)&0x3); j=((ic32_10)&0x2)|((ic32_21)&0x1); m=((ic32_16)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   89a68:	120010a4 	and	w4, w5, #0x1f
   89a6c:	12001059 	and	w25, w2, #0x1f
   89a70:	1200101a 	and	w26, w0, #0x1f
		args[0]=disasm_arg_FPz4t; args[1]=disasm_arg_FPz3n; args[2]=disasm_arg_VmTs; 
   89a74:	12800c82 	mov	w2, #0xffffff9b            	// #-101
		names="sqdmlal\0sqdmlsl\0sqdmull\0";
   89a78:	913fc060 	add	x0, x3, #0xff0
		op=((ic32_14)&0x3); j=((ic32_10)&0x2)|((ic32_21)&0x1); m=((ic32_16)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   89a7c:	2a0c0294 	orr	w20, w20, w12
		args[0]=disasm_arg_FPz4t; args[1]=disasm_arg_FPz3n; args[2]=disasm_arg_VmTs; 
   89a80:	128f0e43 	mov	w3, #0xffff878d            	// #-30835
		op=((ic32_14)&0x3); j=((ic32_10)&0x2)|((ic32_21)&0x1); m=((ic32_16)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   89a84:	12000621 	and	w1, w17, #0x3
		z=2;
   89a88:	52800057 	mov	w23, #0x2                   	// #2
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   89a8c:	52800018 	mov	w24, #0x0                   	// #0
   89a90:	5280001b 	mov	w27, #0x0                   	// #0
	uint32_t i=0;
   89a94:	290effff 	stp	wzr, wzr, [sp, #116]
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   89a98:	290fffe4 	stp	w4, wzr, [sp, #124]
   89a9c:	29117fff 	stp	wzr, wzr, [sp, #136]
   89aa0:	29127fff 	stp	wzr, wzr, [sp, #144]
   89aa4:	b9009bff 	str	wzr, [sp, #152]
		args[0]=disasm_arg_FPz4t; args[1]=disasm_arg_FPz3n; args[2]=disasm_arg_VmTs; 
   89aa8:	790583e3 	strh	w3, [sp, #704]
   89aac:	390b0be2 	strb	w2, [sp, #706]
   89ab0:	a9435bf5 	ldp	x21, x22, [sp, #48]
   89ab4:	17fff06b 	b	85c60 <disasm+0x1c80>
		op=((ic32_12)&0x1); j=((ic32_10)&0x2)|((ic32_21)&0x1); m=((ic32_16)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   89ab8:	121f0294 	and	w20, w20, #0x2
   89abc:	1200018c 	and	w12, w12, #0x1
		names="sqdmulh\0sqrdmulh\0";
   89ac0:	d0000043 	adrp	x3, 93000 <sd_init+0x1470>
   89ac4:	91162063 	add	x3, x3, #0x588
		op=((ic32_12)&0x1); j=((ic32_10)&0x2)|((ic32_21)&0x1); m=((ic32_16)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   89ac8:	120010a4 	and	w4, w5, #0x1f
   89acc:	12001059 	and	w25, w2, #0x1f
   89ad0:	1200101a 	and	w26, w0, #0x1f
		args[0]=disasm_arg_FPz4t; args[1]=disasm_arg_FPz4n; args[2]=disasm_arg_VmTs; 
   89ad4:	12800c82 	mov	w2, #0xffffff9b            	// #-101
		names="sqdmulh\0sqrdmulh\0";
   89ad8:	91132060 	add	x0, x3, #0x4c8
		op=((ic32_12)&0x1); j=((ic32_10)&0x2)|((ic32_21)&0x1); m=((ic32_16)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   89adc:	2a0c0294 	orr	w20, w20, w12
		args[0]=disasm_arg_FPz4t; args[1]=disasm_arg_FPz4n; args[2]=disasm_arg_VmTs; 
   89ae0:	128eee43 	mov	w3, #0xffff888d            	// #-30579
		op=((ic32_12)&0x1); j=((ic32_10)&0x2)|((ic32_21)&0x1); m=((ic32_16)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   89ae4:	12000141 	and	w1, w10, #0x1
		z=2;
   89ae8:	52800057 	mov	w23, #0x2                   	// #2
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   89aec:	52800018 	mov	w24, #0x0                   	// #0
   89af0:	5280001b 	mov	w27, #0x0                   	// #0
	uint32_t i=0;
   89af4:	290effff 	stp	wzr, wzr, [sp, #116]
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   89af8:	290fffe4 	stp	w4, wzr, [sp, #124]
   89afc:	29117fff 	stp	wzr, wzr, [sp, #136]
   89b00:	29127fff 	stp	wzr, wzr, [sp, #144]
   89b04:	b9009bff 	str	wzr, [sp, #152]
		args[0]=disasm_arg_FPz4t; args[1]=disasm_arg_FPz4n; args[2]=disasm_arg_VmTs; 
   89b08:	790583e3 	strh	w3, [sp, #704]
   89b0c:	390b0be2 	strb	w2, [sp, #706]
   89b10:	a9435bf5 	ldp	x21, x22, [sp, #48]
   89b14:	17fff053 	b	85c60 <disasm+0x1c80>
		names="shl\0sqshl\0";
   89b18:	d0000043 	adrp	x3, 93000 <sd_init+0x1470>
   89b1c:	91162063 	add	x3, x3, #0x588
		op=((ic32_13)&0x1); j=((ic32_16)&0x7f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   89b20:	12001059 	and	w25, w2, #0x1f
   89b24:	1200101a 	and	w26, w0, #0x1f
		args[0]=disasm_arg_Dt; args[1]=disasm_arg_Dn; args[2]=disasm_arg_shlshift; 
   89b28:	12800d42 	mov	w2, #0xffffff95            	// #-107
		names="shl\0sqshl\0";
   89b2c:	91138060 	add	x0, x3, #0x4e0
		op=((ic32_13)&0x1); j=((ic32_16)&0x7f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   89b30:	12000161 	and	w1, w11, #0x1
		args[0]=disasm_arg_Dt; args[1]=disasm_arg_Dn; args[2]=disasm_arg_shlshift; 
   89b34:	128dcde3 	mov	w3, #0xffff9190            	// #-28272
		op=((ic32_13)&0x1); j=((ic32_16)&0x7f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   89b38:	120018b4 	and	w20, w5, #0x7f
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   89b3c:	52800017 	mov	w23, #0x0                   	// #0
   89b40:	52800018 	mov	w24, #0x0                   	// #0
   89b44:	5280001b 	mov	w27, #0x0                   	// #0
	uint32_t i=0;
   89b48:	290effff 	stp	wzr, wzr, [sp, #116]
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   89b4c:	290fffff 	stp	wzr, wzr, [sp, #124]
   89b50:	29117fff 	stp	wzr, wzr, [sp, #136]
   89b54:	29127fff 	stp	wzr, wzr, [sp, #144]
   89b58:	b9009bff 	str	wzr, [sp, #152]
		args[0]=disasm_arg_Dt; args[1]=disasm_arg_Dn; args[2]=disasm_arg_shlshift; 
   89b5c:	790583e3 	strh	w3, [sp, #704]
   89b60:	390b0be2 	strb	w2, [sp, #706]
   89b64:	a9435bf5 	ldp	x21, x22, [sp, #48]
   89b68:	17fff03e 	b	85c60 <disasm+0x1c80>
		op=((ic32_14)&0x3); j=((ic32_9)&0x4)|((ic32_20)&0x3); m=((ic32_16)&0xf); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   89b6c:	121e01ef 	and	w15, w15, #0x4
   89b70:	12000508 	and	w8, w8, #0x3
		names="sqdmlal\0sqdmlsl\0sqdmull\0";
   89b74:	b0000043 	adrp	x3, 92000 <sd_init+0x470>
   89b78:	91122063 	add	x3, x3, #0x488
		op=((ic32_14)&0x3); j=((ic32_9)&0x4)|((ic32_20)&0x3); m=((ic32_16)&0xf); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   89b7c:	12000ca4 	and	w4, w5, #0xf
   89b80:	12001059 	and	w25, w2, #0x1f
   89b84:	1200101a 	and	w26, w0, #0x1f
		args[0]=disasm_arg_FPz4t; args[1]=disasm_arg_FPz3n; args[2]=disasm_arg_VmTs; 
   89b88:	12800c82 	mov	w2, #0xffffff9b            	// #-101
		names="sqdmlal\0sqdmlsl\0sqdmull\0";
   89b8c:	913fc060 	add	x0, x3, #0xff0
		op=((ic32_14)&0x3); j=((ic32_9)&0x4)|((ic32_20)&0x3); m=((ic32_16)&0xf); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   89b90:	2a0801f4 	orr	w20, w15, w8
		args[0]=disasm_arg_FPz4t; args[1]=disasm_arg_FPz3n; args[2]=disasm_arg_VmTs; 
   89b94:	128f0e43 	mov	w3, #0xffff878d            	// #-30835
		op=((ic32_14)&0x3); j=((ic32_9)&0x4)|((ic32_20)&0x3); m=((ic32_16)&0xf); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   89b98:	12000621 	and	w1, w17, #0x3
		z=1;
   89b9c:	52800037 	mov	w23, #0x1                   	// #1
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   89ba0:	52800018 	mov	w24, #0x0                   	// #0
   89ba4:	5280001b 	mov	w27, #0x0                   	// #0
	uint32_t i=0;
   89ba8:	290effff 	stp	wzr, wzr, [sp, #116]
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   89bac:	290fffe4 	stp	w4, wzr, [sp, #124]
   89bb0:	29117fff 	stp	wzr, wzr, [sp, #136]
   89bb4:	29127fff 	stp	wzr, wzr, [sp, #144]
   89bb8:	b9009bff 	str	wzr, [sp, #152]
		args[0]=disasm_arg_FPz4t; args[1]=disasm_arg_FPz3n; args[2]=disasm_arg_VmTs; 
   89bbc:	790583e3 	strh	w3, [sp, #704]
   89bc0:	390b0be2 	strb	w2, [sp, #706]
   89bc4:	a9435bf5 	ldp	x21, x22, [sp, #48]
   89bc8:	17fff026 	b	85c60 <disasm+0x1c80>
		op=((ic32_12)&0x1); j=((ic32_9)&0x4)|((ic32_20)&0x3); m=((ic32_16)&0xf); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   89bcc:	121e01ef 	and	w15, w15, #0x4
   89bd0:	12000508 	and	w8, w8, #0x3
		names="sqdmulh\0sqrdmulh\0";
   89bd4:	d0000043 	adrp	x3, 93000 <sd_init+0x1470>
   89bd8:	91162063 	add	x3, x3, #0x588
		op=((ic32_12)&0x1); j=((ic32_9)&0x4)|((ic32_20)&0x3); m=((ic32_16)&0xf); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   89bdc:	12000ca4 	and	w4, w5, #0xf
   89be0:	12001059 	and	w25, w2, #0x1f
   89be4:	1200101a 	and	w26, w0, #0x1f
		args[0]=disasm_arg_FPz4t; args[1]=disasm_arg_FPz4n; args[2]=disasm_arg_VmTs; 
   89be8:	12800c82 	mov	w2, #0xffffff9b            	// #-101
		names="sqdmulh\0sqrdmulh\0";
   89bec:	91132060 	add	x0, x3, #0x4c8
		op=((ic32_12)&0x1); j=((ic32_9)&0x4)|((ic32_20)&0x3); m=((ic32_16)&0xf); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   89bf0:	2a0801f4 	orr	w20, w15, w8
		args[0]=disasm_arg_FPz4t; args[1]=disasm_arg_FPz4n; args[2]=disasm_arg_VmTs; 
   89bf4:	128eee43 	mov	w3, #0xffff888d            	// #-30579
		op=((ic32_12)&0x1); j=((ic32_9)&0x4)|((ic32_20)&0x3); m=((ic32_16)&0xf); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   89bf8:	12000141 	and	w1, w10, #0x1
		z=1;
   89bfc:	52800037 	mov	w23, #0x1                   	// #1
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   89c00:	52800018 	mov	w24, #0x0                   	// #0
   89c04:	5280001b 	mov	w27, #0x0                   	// #0
	uint32_t i=0;
   89c08:	290effff 	stp	wzr, wzr, [sp, #116]
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   89c0c:	290fffe4 	stp	w4, wzr, [sp, #124]
   89c10:	29117fff 	stp	wzr, wzr, [sp, #136]
   89c14:	29127fff 	stp	wzr, wzr, [sp, #144]
   89c18:	b9009bff 	str	wzr, [sp, #152]
		args[0]=disasm_arg_FPz4t; args[1]=disasm_arg_FPz4n; args[2]=disasm_arg_VmTs; 
   89c1c:	790583e3 	strh	w3, [sp, #704]
   89c20:	390b0be2 	strb	w2, [sp, #706]
   89c24:	a9435bf5 	ldp	x21, x22, [sp, #48]
   89c28:	17fff00e 	b	85c60 <disasm+0x1c80>
		names="sqdmlal\0sqdmlsl\0sqdmull\0";
   89c2c:	b0000043 	adrp	x3, 92000 <sd_init+0x470>
   89c30:	91122063 	add	x3, x3, #0x488
		op=((ic32_13)&0x3); z=((ic32_22)&0x3); m=((ic32_16)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   89c34:	120010a4 	and	w4, w5, #0x1f
   89c38:	12001059 	and	w25, w2, #0x1f
   89c3c:	1200101a 	and	w26, w0, #0x1f
		args[0]=disasm_arg_FPz4t; args[1]=disasm_arg_FPz2n; args[2]=disasm_arg_FPz2m; 
   89c40:	12800f82 	mov	w2, #0xffffff83            	// #-125
		names="sqdmlal\0sqdmlsl\0sqdmull\0";
   89c44:	913fc060 	add	x0, x3, #0xff0
		op=((ic32_13)&0x3); z=((ic32_22)&0x3); m=((ic32_16)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   89c48:	12000561 	and	w1, w11, #0x3
		args[0]=disasm_arg_FPz4t; args[1]=disasm_arg_FPz2n; args[2]=disasm_arg_FPz2m; 
   89c4c:	128fae43 	mov	w3, #0xffff828d            	// #-32115
		op=((ic32_13)&0x3); z=((ic32_22)&0x3); m=((ic32_16)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   89c50:	120004f7 	and	w23, w7, #0x3
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   89c54:	52800018 	mov	w24, #0x0                   	// #0
   89c58:	5280001b 	mov	w27, #0x0                   	// #0
	uint16_t op=0, om=0, j=0;
   89c5c:	52800014 	mov	w20, #0x0                   	// #0
	uint32_t i=0;
   89c60:	290effff 	stp	wzr, wzr, [sp, #116]
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   89c64:	290fffe4 	stp	w4, wzr, [sp, #124]
   89c68:	29117fff 	stp	wzr, wzr, [sp, #136]
   89c6c:	29127fff 	stp	wzr, wzr, [sp, #144]
   89c70:	b9009bff 	str	wzr, [sp, #152]
		args[0]=disasm_arg_FPz4t; args[1]=disasm_arg_FPz2n; args[2]=disasm_arg_FPz2m; 
   89c74:	790583e3 	strh	w3, [sp, #704]
   89c78:	390b0be2 	strb	w2, [sp, #706]
   89c7c:	a9435bf5 	ldp	x21, x22, [sp, #48]
   89c80:	17ffeff8 	b	85c60 <disasm+0x1c80>
		names="frecps\0frsqrts\0";
   89c84:	d0000043 	adrp	x3, 93000 <sd_init+0x1470>
   89c88:	91162063 	add	x3, x3, #0x588
		op=((ic32_23)&0x1); z=((ic32_22)&0x1); m=((ic32_16)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   89c8c:	120010a4 	and	w4, w5, #0x1f
   89c90:	12001059 	and	w25, w2, #0x1f
   89c94:	1200101a 	and	w26, w0, #0x1f
		args[0]=disasm_arg_FPt; args[1]=disasm_arg_FPn; args[2]=disasm_arg_FPm; 
   89c98:	52800ae2 	mov	w2, #0x57                  	// #87
		names="frecps\0frsqrts\0";
   89c9c:	9112c060 	add	x0, x3, #0x4b0
		op=((ic32_23)&0x1); z=((ic32_22)&0x1); m=((ic32_16)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   89ca0:	12000201 	and	w1, w16, #0x1
		args[0]=disasm_arg_FPt; args[1]=disasm_arg_FPn; args[2]=disasm_arg_FPm; 
   89ca4:	528f2a83 	mov	w3, #0x7954                	// #31060
		op=((ic32_23)&0x1); z=((ic32_22)&0x1); m=((ic32_16)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   89ca8:	120000f7 	and	w23, w7, #0x1
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   89cac:	52800018 	mov	w24, #0x0                   	// #0
   89cb0:	5280001b 	mov	w27, #0x0                   	// #0
	uint16_t op=0, om=0, j=0;
   89cb4:	52800014 	mov	w20, #0x0                   	// #0
	uint32_t i=0;
   89cb8:	290effff 	stp	wzr, wzr, [sp, #116]
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   89cbc:	290fffe4 	stp	w4, wzr, [sp, #124]
   89cc0:	29117fff 	stp	wzr, wzr, [sp, #136]
   89cc4:	29127fff 	stp	wzr, wzr, [sp, #144]
   89cc8:	b9009bff 	str	wzr, [sp, #152]
		args[0]=disasm_arg_FPt; args[1]=disasm_arg_FPn; args[2]=disasm_arg_FPm; 
   89ccc:	790583e3 	strh	w3, [sp, #704]
   89cd0:	390b0be2 	strb	w2, [sp, #706]
   89cd4:	a9435bf5 	ldp	x21, x22, [sp, #48]
   89cd8:	17ffefe2 	b	85c60 <disasm+0x1c80>
		names="addp\0";
   89cdc:	d0000041 	adrp	x1, 93000 <sd_init+0x1470>
   89ce0:	91162021 	add	x1, x1, #0x588
		z=((ic32_22)&0x3); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   89ce4:	12001059 	and	w25, w2, #0x1f
   89ce8:	1200101a 	and	w26, w0, #0x1f
		args[0]=disasm_arg_FPz3t; args[1]=disasm_arg_Vn2d; 
   89cec:	128eaf22 	mov	w2, #0xffff8a86            	// #-30074
		names="addp\0";
   89cf0:	91130020 	add	x0, x1, #0x4c0
		z=((ic32_22)&0x3); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   89cf4:	120004f7 	and	w23, w7, #0x3
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   89cf8:	52800018 	mov	w24, #0x0                   	// #0
   89cfc:	5280001b 	mov	w27, #0x0                   	// #0
	uint16_t op=0, om=0, j=0;
   89d00:	52800014 	mov	w20, #0x0                   	// #0
   89d04:	52800001 	mov	w1, #0x0                   	// #0
	uint32_t i=0;
   89d08:	290effff 	stp	wzr, wzr, [sp, #116]
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   89d0c:	290fffff 	stp	wzr, wzr, [sp, #124]
   89d10:	29117fff 	stp	wzr, wzr, [sp, #136]
   89d14:	29127fff 	stp	wzr, wzr, [sp, #144]
   89d18:	b9009bff 	str	wzr, [sp, #152]
		args[0]=disasm_arg_FPz3t; args[1]=disasm_arg_Vn2d; 
   89d1c:	790583e2 	strh	w2, [sp, #704]
   89d20:	a9435bf5 	ldp	x21, x22, [sp, #48]
   89d24:	17ffefcf 	b	85c60 <disasm+0x1c80>
		names="frecps\0frsqrts\0";
   89d28:	d0000043 	adrp	x3, 93000 <sd_init+0x1470>
   89d2c:	91162063 	add	x3, x3, #0x588
		op=((ic32_23)&0x1); m=((ic32_16)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   89d30:	120010a4 	and	w4, w5, #0x1f
   89d34:	12001059 	and	w25, w2, #0x1f
   89d38:	1200101a 	and	w26, w0, #0x1f
		args[0]=disasm_arg_Ht; args[1]=disasm_arg_Hn; args[2]=disasm_arg_Hm; 
   89d3c:	52800f02 	mov	w2, #0x78                  	// #120
		names="frecps\0frsqrts\0";
   89d40:	9112c060 	add	x0, x3, #0x4b0
		op=((ic32_23)&0x1); m=((ic32_16)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   89d44:	12000201 	and	w1, w16, #0x1
		args[0]=disasm_arg_Ht; args[1]=disasm_arg_Hn; args[2]=disasm_arg_Hm; 
   89d48:	528eeec3 	mov	w3, #0x7776                	// #30582
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   89d4c:	52800017 	mov	w23, #0x0                   	// #0
   89d50:	52800018 	mov	w24, #0x0                   	// #0
   89d54:	5280001b 	mov	w27, #0x0                   	// #0
	uint16_t op=0, om=0, j=0;
   89d58:	52800014 	mov	w20, #0x0                   	// #0
	uint32_t i=0;
   89d5c:	290effff 	stp	wzr, wzr, [sp, #116]
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   89d60:	290fffe4 	stp	w4, wzr, [sp, #124]
   89d64:	29117fff 	stp	wzr, wzr, [sp, #136]
   89d68:	29127fff 	stp	wzr, wzr, [sp, #144]
   89d6c:	b9009bff 	str	wzr, [sp, #152]
		args[0]=disasm_arg_Ht; args[1]=disasm_arg_Hn; args[2]=disasm_arg_Hm; 
   89d70:	790583e3 	strh	w3, [sp, #704]
   89d74:	390b0be2 	strb	w2, [sp, #706]
   89d78:	a9435bf5 	ldp	x21, x22, [sp, #48]
   89d7c:	17ffefb9 	b	85c60 <disasm+0x1c80>
		op=((ic32_21)&0x4)|((ic32_12)&0x3); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   89d80:	121e0181 	and	w1, w12, #0x4
   89d84:	1200054a 	and	w10, w10, #0x3
		names="fmaxnmp\0faddp\0?\0fmaxp\0fminnmp\0?\0?\0fminp\0";
   89d88:	d0000043 	adrp	x3, 93000 <sd_init+0x1470>
   89d8c:	91162063 	add	x3, x3, #0x588
		op=((ic32_21)&0x4)|((ic32_12)&0x3); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   89d90:	12001059 	and	w25, w2, #0x1f
   89d94:	1200101a 	and	w26, w0, #0x1f
		args[0]=disasm_arg_Ht; args[1]=disasm_arg_Vn2h; 
   89d98:	128e9122 	mov	w2, #0xffff8b76            	// #-29834
		op=((ic32_21)&0x4)|((ic32_12)&0x3); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   89d9c:	2a0a0021 	orr	w1, w1, w10
		names="fmaxnmp\0faddp\0?\0fmaxp\0fminnmp\0?\0?\0fminp\0";
   89da0:	91120060 	add	x0, x3, #0x480
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   89da4:	52800017 	mov	w23, #0x0                   	// #0
   89da8:	52800018 	mov	w24, #0x0                   	// #0
   89dac:	5280001b 	mov	w27, #0x0                   	// #0
	uint16_t op=0, om=0, j=0;
   89db0:	52800014 	mov	w20, #0x0                   	// #0
	uint32_t i=0;
   89db4:	290effff 	stp	wzr, wzr, [sp, #116]
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   89db8:	290fffff 	stp	wzr, wzr, [sp, #124]
   89dbc:	29117fff 	stp	wzr, wzr, [sp, #136]
   89dc0:	29127fff 	stp	wzr, wzr, [sp, #144]
   89dc4:	b9009bff 	str	wzr, [sp, #152]
		args[0]=disasm_arg_Ht; args[1]=disasm_arg_Vn2h; 
   89dc8:	790583e2 	strh	w2, [sp, #704]
   89dcc:	a9435bf5 	ldp	x21, x22, [sp, #48]
   89dd0:	17ffefa4 	b	85c60 <disasm+0x1c80>
		z=((ic32_22)&0x1); m=((ic32_16)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   89dd4:	120010a3 	and	w3, w5, #0x1f
		names="fcmeq\0";
   89dd8:	d0000041 	adrp	x1, 93000 <sd_init+0x1470>
   89ddc:	91162021 	add	x1, x1, #0x588
		z=((ic32_22)&0x1); m=((ic32_16)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   89de0:	12001059 	and	w25, w2, #0x1f
   89de4:	1200101a 	and	w26, w0, #0x1f
		args[0]=disasm_arg_FPt; args[1]=disasm_arg_FPn; args[2]=disasm_arg_FPm; 
   89de8:	52800ae2 	mov	w2, #0x57                  	// #87
		names="fcmeq\0";
   89dec:	9111e020 	add	x0, x1, #0x478
		z=((ic32_22)&0x1); m=((ic32_16)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   89df0:	120000f7 	and	w23, w7, #0x1
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   89df4:	52800018 	mov	w24, #0x0                   	// #0
   89df8:	5280001b 	mov	w27, #0x0                   	// #0
	uint16_t op=0, om=0, j=0;
   89dfc:	52800014 	mov	w20, #0x0                   	// #0
   89e00:	52800001 	mov	w1, #0x0                   	// #0
	uint32_t i=0;
   89e04:	290effff 	stp	wzr, wzr, [sp, #116]
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   89e08:	290fffe3 	stp	w3, wzr, [sp, #124]
		args[0]=disasm_arg_FPt; args[1]=disasm_arg_FPn; args[2]=disasm_arg_FPm; 
   89e0c:	528f2a83 	mov	w3, #0x7954                	// #31060
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   89e10:	29117fff 	stp	wzr, wzr, [sp, #136]
   89e14:	29127fff 	stp	wzr, wzr, [sp, #144]
   89e18:	b9009bff 	str	wzr, [sp, #152]
		args[0]=disasm_arg_FPt; args[1]=disasm_arg_FPn; args[2]=disasm_arg_FPm; 
   89e1c:	790583e3 	strh	w3, [sp, #704]
   89e20:	390b0be2 	strb	w2, [sp, #706]
   89e24:	a9435bf5 	ldp	x21, x22, [sp, #48]
   89e28:	17ffef8e 	b	85c60 <disasm+0x1c80>
		z=((ic32_22)&0x1); m=((ic32_16)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   89e2c:	120010a3 	and	w3, w5, #0x1f
		names="fmulx\0";
   89e30:	d0000041 	adrp	x1, 93000 <sd_init+0x1470>
   89e34:	91162021 	add	x1, x1, #0x588
		z=((ic32_22)&0x1); m=((ic32_16)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   89e38:	12001059 	and	w25, w2, #0x1f
   89e3c:	1200101a 	and	w26, w0, #0x1f
		args[0]=disasm_arg_FPt; args[1]=disasm_arg_FPn; args[2]=disasm_arg_FPm; 
   89e40:	52800ae2 	mov	w2, #0x57                  	// #87
		names="fmulx\0";
   89e44:	9111c020 	add	x0, x1, #0x470
		z=((ic32_22)&0x1); m=((ic32_16)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   89e48:	120000f7 	and	w23, w7, #0x1
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   89e4c:	52800018 	mov	w24, #0x0                   	// #0
   89e50:	5280001b 	mov	w27, #0x0                   	// #0
	uint16_t op=0, om=0, j=0;
   89e54:	52800014 	mov	w20, #0x0                   	// #0
   89e58:	52800001 	mov	w1, #0x0                   	// #0
	uint32_t i=0;
   89e5c:	290effff 	stp	wzr, wzr, [sp, #116]
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   89e60:	290fffe3 	stp	w3, wzr, [sp, #124]
		args[0]=disasm_arg_FPt; args[1]=disasm_arg_FPn; args[2]=disasm_arg_FPm; 
   89e64:	528f2a83 	mov	w3, #0x7954                	// #31060
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   89e68:	29117fff 	stp	wzr, wzr, [sp, #136]
   89e6c:	29127fff 	stp	wzr, wzr, [sp, #144]
   89e70:	b9009bff 	str	wzr, [sp, #152]
		args[0]=disasm_arg_FPt; args[1]=disasm_arg_FPn; args[2]=disasm_arg_FPm; 
   89e74:	790583e3 	strh	w3, [sp, #704]
   89e78:	390b0be2 	strb	w2, [sp, #706]
   89e7c:	a9435bf5 	ldp	x21, x22, [sp, #48]
   89e80:	17ffef78 	b	85c60 <disasm+0x1c80>
		m=((ic32_16)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   89e84:	120010a3 	and	w3, w5, #0x1f
		names="fcmeq\0";
   89e88:	d0000041 	adrp	x1, 93000 <sd_init+0x1470>
   89e8c:	91162021 	add	x1, x1, #0x588
		m=((ic32_16)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   89e90:	12001059 	and	w25, w2, #0x1f
   89e94:	1200101a 	and	w26, w0, #0x1f
		args[0]=disasm_arg_Ht; args[1]=disasm_arg_Hn; args[2]=disasm_arg_Hm; 
   89e98:	52800f02 	mov	w2, #0x78                  	// #120
		names="fcmeq\0";
   89e9c:	9111e020 	add	x0, x1, #0x478
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   89ea0:	52800017 	mov	w23, #0x0                   	// #0
   89ea4:	52800018 	mov	w24, #0x0                   	// #0
   89ea8:	5280001b 	mov	w27, #0x0                   	// #0
	uint16_t op=0, om=0, j=0;
   89eac:	52800014 	mov	w20, #0x0                   	// #0
   89eb0:	52800001 	mov	w1, #0x0                   	// #0
	uint32_t i=0;
   89eb4:	290effff 	stp	wzr, wzr, [sp, #116]
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   89eb8:	290fffe3 	stp	w3, wzr, [sp, #124]
		args[0]=disasm_arg_Ht; args[1]=disasm_arg_Hn; args[2]=disasm_arg_Hm; 
   89ebc:	528eeec3 	mov	w3, #0x7776                	// #30582
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   89ec0:	29117fff 	stp	wzr, wzr, [sp, #136]
   89ec4:	29127fff 	stp	wzr, wzr, [sp, #144]
   89ec8:	b9009bff 	str	wzr, [sp, #152]
		args[0]=disasm_arg_Ht; args[1]=disasm_arg_Hn; args[2]=disasm_arg_Hm; 
   89ecc:	790583e3 	strh	w3, [sp, #704]
   89ed0:	390b0be2 	strb	w2, [sp, #706]
   89ed4:	a9435bf5 	ldp	x21, x22, [sp, #48]
   89ed8:	17ffef62 	b	85c60 <disasm+0x1c80>
		m=((ic32_16)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   89edc:	120010a3 	and	w3, w5, #0x1f
		names="fmulx\0";
   89ee0:	d0000041 	adrp	x1, 93000 <sd_init+0x1470>
   89ee4:	91162021 	add	x1, x1, #0x588
		m=((ic32_16)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   89ee8:	12001059 	and	w25, w2, #0x1f
   89eec:	1200101a 	and	w26, w0, #0x1f
		args[0]=disasm_arg_Ht; args[1]=disasm_arg_Hn; args[2]=disasm_arg_Hm; 
   89ef0:	52800f02 	mov	w2, #0x78                  	// #120
		names="fmulx\0";
   89ef4:	9111c020 	add	x0, x1, #0x470
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   89ef8:	52800017 	mov	w23, #0x0                   	// #0
   89efc:	52800018 	mov	w24, #0x0                   	// #0
   89f00:	5280001b 	mov	w27, #0x0                   	// #0
	uint16_t op=0, om=0, j=0;
   89f04:	52800014 	mov	w20, #0x0                   	// #0
   89f08:	52800001 	mov	w1, #0x0                   	// #0
	uint32_t i=0;
   89f0c:	290effff 	stp	wzr, wzr, [sp, #116]
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   89f10:	290fffe3 	stp	w3, wzr, [sp, #124]
		args[0]=disasm_arg_Ht; args[1]=disasm_arg_Hn; args[2]=disasm_arg_Hm; 
   89f14:	528eeec3 	mov	w3, #0x7776                	// #30582
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   89f18:	29117fff 	stp	wzr, wzr, [sp, #136]
   89f1c:	29127fff 	stp	wzr, wzr, [sp, #144]
   89f20:	b9009bff 	str	wzr, [sp, #152]
		args[0]=disasm_arg_Ht; args[1]=disasm_arg_Hn; args[2]=disasm_arg_Hm; 
   89f24:	790583e3 	strh	w3, [sp, #704]
   89f28:	390b0be2 	strb	w2, [sp, #706]
   89f2c:	a9435bf5 	ldp	x21, x22, [sp, #48]
   89f30:	17ffef4c 	b	85c60 <disasm+0x1c80>
		names="sha256su0\0";
   89f34:	d0000041 	adrp	x1, 93000 <sd_init+0x1470>
   89f38:	91162021 	add	x1, x1, #0x588
		n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   89f3c:	12001059 	and	w25, w2, #0x1f
   89f40:	1200101a 	and	w26, w0, #0x1f
		args[0]=disasm_arg_Vt4s; args[1]=disasm_arg_Vn4s; 
   89f44:	528dedc2 	mov	w2, #0x6f6e                	// #28526
		names="sha256su0\0";
   89f48:	91118020 	add	x0, x1, #0x460
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   89f4c:	52800017 	mov	w23, #0x0                   	// #0
   89f50:	52800018 	mov	w24, #0x0                   	// #0
   89f54:	5280001b 	mov	w27, #0x0                   	// #0
	uint16_t op=0, om=0, j=0;
   89f58:	52800014 	mov	w20, #0x0                   	// #0
   89f5c:	52800001 	mov	w1, #0x0                   	// #0
	uint32_t i=0;
   89f60:	290effff 	stp	wzr, wzr, [sp, #116]
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   89f64:	290fffff 	stp	wzr, wzr, [sp, #124]
   89f68:	29117fff 	stp	wzr, wzr, [sp, #136]
   89f6c:	29127fff 	stp	wzr, wzr, [sp, #144]
   89f70:	b9009bff 	str	wzr, [sp, #152]
		args[0]=disasm_arg_Vt4s; args[1]=disasm_arg_Vn4s; 
   89f74:	790583e2 	strh	w2, [sp, #704]
   89f78:	a9435bf5 	ldp	x21, x22, [sp, #48]
   89f7c:	17ffef39 	b	85c60 <disasm+0x1c80>
		names="sha1su1\0";
   89f80:	d0000041 	adrp	x1, 93000 <sd_init+0x1470>
   89f84:	91162021 	add	x1, x1, #0x588
		n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   89f88:	12001059 	and	w25, w2, #0x1f
   89f8c:	1200101a 	and	w26, w0, #0x1f
		args[0]=disasm_arg_Vt4s; args[1]=disasm_arg_Vn4s; 
   89f90:	528dedc2 	mov	w2, #0x6f6e                	// #28526
		names="sha1su1\0";
   89f94:	91114020 	add	x0, x1, #0x450
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   89f98:	52800017 	mov	w23, #0x0                   	// #0
   89f9c:	52800018 	mov	w24, #0x0                   	// #0
   89fa0:	5280001b 	mov	w27, #0x0                   	// #0
	uint16_t op=0, om=0, j=0;
   89fa4:	52800014 	mov	w20, #0x0                   	// #0
   89fa8:	52800001 	mov	w1, #0x0                   	// #0
	uint32_t i=0;
   89fac:	290effff 	stp	wzr, wzr, [sp, #116]
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   89fb0:	290fffff 	stp	wzr, wzr, [sp, #124]
   89fb4:	29117fff 	stp	wzr, wzr, [sp, #136]
   89fb8:	29127fff 	stp	wzr, wzr, [sp, #144]
   89fbc:	b9009bff 	str	wzr, [sp, #152]
		args[0]=disasm_arg_Vt4s; args[1]=disasm_arg_Vn4s; 
   89fc0:	790583e2 	strh	w2, [sp, #704]
   89fc4:	a9435bf5 	ldp	x21, x22, [sp, #48]
   89fc8:	17ffef26 	b	85c60 <disasm+0x1c80>
		names="sha1h\0";
   89fcc:	d0000041 	adrp	x1, 93000 <sd_init+0x1470>
   89fd0:	91162021 	add	x1, x1, #0x588
		n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   89fd4:	12001059 	and	w25, w2, #0x1f
   89fd8:	1200101a 	and	w26, w0, #0x1f
		args[0]=disasm_arg_St; args[1]=disasm_arg_Sn; 
   89fdc:	528d8e22 	mov	w2, #0x6c71                	// #27761
		names="sha1h\0";
   89fe0:	91112020 	add	x0, x1, #0x448
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   89fe4:	52800017 	mov	w23, #0x0                   	// #0
   89fe8:	52800018 	mov	w24, #0x0                   	// #0
   89fec:	5280001b 	mov	w27, #0x0                   	// #0
	uint16_t op=0, om=0, j=0;
   89ff0:	52800014 	mov	w20, #0x0                   	// #0
   89ff4:	52800001 	mov	w1, #0x0                   	// #0
	uint32_t i=0;
   89ff8:	290effff 	stp	wzr, wzr, [sp, #116]
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   89ffc:	290fffff 	stp	wzr, wzr, [sp, #124]
   8a000:	29117fff 	stp	wzr, wzr, [sp, #136]
   8a004:	29127fff 	stp	wzr, wzr, [sp, #144]
   8a008:	b9009bff 	str	wzr, [sp, #152]
		args[0]=disasm_arg_St; args[1]=disasm_arg_Sn; 
   8a00c:	790583e2 	strh	w2, [sp, #704]
   8a010:	a9435bf5 	ldp	x21, x22, [sp, #48]
   8a014:	17ffef13 	b	85c60 <disasm+0x1c80>
		m=((ic32_16)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8a018:	120010a3 	and	w3, w5, #0x1f
		names="sha256su1\0";
   8a01c:	b0000041 	adrp	x1, 93000 <sd_init+0x1470>
   8a020:	91162021 	add	x1, x1, #0x588
		m=((ic32_16)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8a024:	12001059 	and	w25, w2, #0x1f
   8a028:	1200101a 	and	w26, w0, #0x1f
		args[0]=disasm_arg_Vt4s; args[1]=disasm_arg_Vn4s; args[2]=disasm_arg_Vm4s; 
   8a02c:	52800da2 	mov	w2, #0x6d                  	// #109
		names="sha256su1\0";
   8a030:	9110e020 	add	x0, x1, #0x438
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8a034:	52800017 	mov	w23, #0x0                   	// #0
   8a038:	52800018 	mov	w24, #0x0                   	// #0
   8a03c:	5280001b 	mov	w27, #0x0                   	// #0
	uint16_t op=0, om=0, j=0;
   8a040:	52800014 	mov	w20, #0x0                   	// #0
   8a044:	52800001 	mov	w1, #0x0                   	// #0
	uint32_t i=0;
   8a048:	290effff 	stp	wzr, wzr, [sp, #116]
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8a04c:	290fffe3 	stp	w3, wzr, [sp, #124]
		args[0]=disasm_arg_Vt4s; args[1]=disasm_arg_Vn4s; args[2]=disasm_arg_Vm4s; 
   8a050:	528dedc3 	mov	w3, #0x6f6e                	// #28526
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8a054:	29117fff 	stp	wzr, wzr, [sp, #136]
   8a058:	29127fff 	stp	wzr, wzr, [sp, #144]
   8a05c:	b9009bff 	str	wzr, [sp, #152]
		args[0]=disasm_arg_Vt4s; args[1]=disasm_arg_Vn4s; args[2]=disasm_arg_Vm4s; 
   8a060:	790583e3 	strh	w3, [sp, #704]
   8a064:	390b0be2 	strb	w2, [sp, #706]
   8a068:	a9435bf5 	ldp	x21, x22, [sp, #48]
   8a06c:	17ffeefd 	b	85c60 <disasm+0x1c80>
		names="sha256h\0sha256h2\0";
   8a070:	b0000043 	adrp	x3, 93000 <sd_init+0x1470>
   8a074:	91162063 	add	x3, x3, #0x588
		op=((ic32_12)&0x1); m=((ic32_16)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8a078:	120010a4 	and	w4, w5, #0x1f
   8a07c:	12001059 	and	w25, w2, #0x1f
   8a080:	1200101a 	and	w26, w0, #0x1f
		args[0]=disasm_arg_Qt; args[1]=disasm_arg_Qn; args[2]=disasm_arg_Vm4s; 
   8a084:	52800da2 	mov	w2, #0x6d                  	// #109
		names="sha256h\0sha256h2\0";
   8a088:	91108060 	add	x0, x3, #0x420
		op=((ic32_12)&0x1); m=((ic32_16)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8a08c:	12000141 	and	w1, w10, #0x1
		args[0]=disasm_arg_Qt; args[1]=disasm_arg_Qn; args[2]=disasm_arg_Vm4s; 
   8a090:	528e0d63 	mov	w3, #0x706b                	// #28779
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8a094:	52800017 	mov	w23, #0x0                   	// #0
   8a098:	52800018 	mov	w24, #0x0                   	// #0
   8a09c:	5280001b 	mov	w27, #0x0                   	// #0
	uint16_t op=0, om=0, j=0;
   8a0a0:	52800014 	mov	w20, #0x0                   	// #0
	uint32_t i=0;
   8a0a4:	290effff 	stp	wzr, wzr, [sp, #116]
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8a0a8:	290fffe4 	stp	w4, wzr, [sp, #124]
   8a0ac:	29117fff 	stp	wzr, wzr, [sp, #136]
   8a0b0:	29127fff 	stp	wzr, wzr, [sp, #144]
   8a0b4:	b9009bff 	str	wzr, [sp, #152]
		args[0]=disasm_arg_Qt; args[1]=disasm_arg_Qn; args[2]=disasm_arg_Vm4s; 
   8a0b8:	790583e3 	strh	w3, [sp, #704]
   8a0bc:	390b0be2 	strb	w2, [sp, #706]
   8a0c0:	a9435bf5 	ldp	x21, x22, [sp, #48]
   8a0c4:	17ffeee7 	b	85c60 <disasm+0x1c80>
		names="sha1c\0sha1p\0sha1m\0sha1su0\0";
   8a0c8:	b0000043 	adrp	x3, 93000 <sd_init+0x1470>
   8a0cc:	91162063 	add	x3, x3, #0x588
		op=((ic32_12)&0x3); m=((ic32_16)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8a0d0:	120010a4 	and	w4, w5, #0x1f
   8a0d4:	12001059 	and	w25, w2, #0x1f
   8a0d8:	1200101a 	and	w26, w0, #0x1f
		args[0]=disasm_arg_Qt; args[1]=disasm_arg_Sn; args[2]=disasm_arg_Vm4s; 
   8a0dc:	52800da2 	mov	w2, #0x6d                  	// #109
		names="sha1c\0sha1p\0sha1m\0sha1su0\0";
   8a0e0:	91100060 	add	x0, x3, #0x400
		op=((ic32_12)&0x3); m=((ic32_16)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8a0e4:	12000541 	and	w1, w10, #0x3
		args[0]=disasm_arg_Qt; args[1]=disasm_arg_Sn; args[2]=disasm_arg_Vm4s; 
   8a0e8:	528d8d63 	mov	w3, #0x6c6b                	// #27755
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8a0ec:	52800017 	mov	w23, #0x0                   	// #0
   8a0f0:	52800018 	mov	w24, #0x0                   	// #0
   8a0f4:	5280001b 	mov	w27, #0x0                   	// #0
	uint16_t op=0, om=0, j=0;
   8a0f8:	52800014 	mov	w20, #0x0                   	// #0
	uint32_t i=0;
   8a0fc:	290effff 	stp	wzr, wzr, [sp, #116]
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8a100:	290fffe4 	stp	w4, wzr, [sp, #124]
   8a104:	29117fff 	stp	wzr, wzr, [sp, #136]
   8a108:	29127fff 	stp	wzr, wzr, [sp, #144]
   8a10c:	b9009bff 	str	wzr, [sp, #152]
		args[0]=disasm_arg_Qt; args[1]=disasm_arg_Sn; args[2]=disasm_arg_Vm4s; 
   8a110:	790583e3 	strh	w3, [sp, #704]
   8a114:	390b0be2 	strb	w2, [sp, #706]
   8a118:	a9435bf5 	ldp	x21, x22, [sp, #48]
   8a11c:	17ffeed1 	b	85c60 <disasm+0x1c80>
		m=((ic32_16)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8a120:	120010a3 	and	w3, w5, #0x1f
		names="sha1su0\0";
   8a124:	b0000041 	adrp	x1, 93000 <sd_init+0x1470>
   8a128:	91162021 	add	x1, x1, #0x588
		m=((ic32_16)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8a12c:	12001059 	and	w25, w2, #0x1f
   8a130:	1200101a 	and	w26, w0, #0x1f
		args[0]=disasm_arg_Vt4s; args[1]=disasm_arg_Vn4s; args[2]=disasm_arg_Vm4s; 
   8a134:	52800da2 	mov	w2, #0x6d                  	// #109
		names="sha1su0\0";
   8a138:	910fc020 	add	x0, x1, #0x3f0
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8a13c:	52800017 	mov	w23, #0x0                   	// #0
   8a140:	52800018 	mov	w24, #0x0                   	// #0
   8a144:	5280001b 	mov	w27, #0x0                   	// #0
	uint16_t op=0, om=0, j=0;
   8a148:	52800014 	mov	w20, #0x0                   	// #0
   8a14c:	52800001 	mov	w1, #0x0                   	// #0
	uint32_t i=0;
   8a150:	290effff 	stp	wzr, wzr, [sp, #116]
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8a154:	290fffe3 	stp	w3, wzr, [sp, #124]
		args[0]=disasm_arg_Vt4s; args[1]=disasm_arg_Vn4s; args[2]=disasm_arg_Vm4s; 
   8a158:	528dedc3 	mov	w3, #0x6f6e                	// #28526
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8a15c:	29117fff 	stp	wzr, wzr, [sp, #136]
   8a160:	29127fff 	stp	wzr, wzr, [sp, #144]
   8a164:	b9009bff 	str	wzr, [sp, #152]
		args[0]=disasm_arg_Vt4s; args[1]=disasm_arg_Vn4s; args[2]=disasm_arg_Vm4s; 
   8a168:	790583e3 	strh	w3, [sp, #704]
   8a16c:	390b0be2 	strb	w2, [sp, #706]
   8a170:	a9435bf5 	ldp	x21, x22, [sp, #48]
   8a174:	17ffeebb 	b	85c60 <disasm+0x1c80>
		names="dup\0";
   8a178:	b0000041 	adrp	x1, 93000 <sd_init+0x1470>
		args[0]=disasm_arg_FPjt; args[1]=disasm_arg_Vnj; args[2]=disasm_arg_offs; args[3]=disasm_arg_FPidx; args[4]=disasm_arg_offe; 
   8a17c:	528e6e43 	mov	w3, #0x7372                	// #29554
		names="dup\0";
   8a180:	91162021 	add	x1, x1, #0x588
		j=((ic32_16)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8a184:	12001059 	and	w25, w2, #0x1f
   8a188:	1200101a 	and	w26, w0, #0x1f
		args[0]=disasm_arg_FPjt; args[1]=disasm_arg_Vnj; args[2]=disasm_arg_offs; args[3]=disasm_arg_FPidx; args[4]=disasm_arg_offe; 
   8a18c:	72ae8523 	movk	w3, #0x7429, lsl #16
		names="dup\0";
   8a190:	910fa020 	add	x0, x1, #0x3e8
		args[0]=disasm_arg_FPjt; args[1]=disasm_arg_Vnj; args[2]=disasm_arg_offs; args[3]=disasm_arg_FPidx; args[4]=disasm_arg_offe; 
   8a194:	52800562 	mov	w2, #0x2b                  	// #43
		j=((ic32_16)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8a198:	120010b4 	and	w20, w5, #0x1f
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8a19c:	52800017 	mov	w23, #0x0                   	// #0
   8a1a0:	52800018 	mov	w24, #0x0                   	// #0
   8a1a4:	5280001b 	mov	w27, #0x0                   	// #0
	uint16_t op=0, om=0, j=0;
   8a1a8:	52800001 	mov	w1, #0x0                   	// #0
	uint32_t i=0;
   8a1ac:	290effff 	stp	wzr, wzr, [sp, #116]
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8a1b0:	290fffff 	stp	wzr, wzr, [sp, #124]
   8a1b4:	29117fff 	stp	wzr, wzr, [sp, #136]
   8a1b8:	29127fff 	stp	wzr, wzr, [sp, #144]
   8a1bc:	b9009bff 	str	wzr, [sp, #152]
		args[0]=disasm_arg_FPjt; args[1]=disasm_arg_Vnj; args[2]=disasm_arg_offs; args[3]=disasm_arg_FPidx; args[4]=disasm_arg_offe; 
   8a1c0:	b902c3e3 	str	w3, [sp, #704]
   8a1c4:	390b13e2 	strb	w2, [sp, #708]
   8a1c8:	a9435bf5 	ldp	x21, x22, [sp, #48]
   8a1cc:	17ffeea5 	b	85c60 <disasm+0x1c80>
		i=((ic32_23)&1?(-1<<19):0)|((ic32_5)&0x7ffff); c=((ic32)&0xf); 
   8a1d0:	f240021f 	tst	x16, #0x1
   8a1d4:	12004842 	and	w2, w2, #0x7ffff
   8a1d8:	12000c00 	and	w0, w0, #0xf
   8a1dc:	52bfff03 	mov	w3, #0xfff80000            	// #-524288
   8a1e0:	1a9f1063 	csel	w3, w3, wzr, ne  // ne = any
		names="b.%s\0";
   8a1e4:	b0000041 	adrp	x1, 93000 <sd_init+0x1470>
   8a1e8:	91162021 	add	x1, x1, #0x588
		i=((ic32_23)&1?(-1<<19):0)|((ic32_5)&0x7ffff); c=((ic32)&0xf); 
   8a1ec:	291103ff 	stp	wzr, w0, [sp, #136]
   8a1f0:	2a030040 	orr	w0, w2, w3
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8a1f4:	52800017 	mov	w23, #0x0                   	// #0
		args[0]=disasm_arg_labeli4; 
   8a1f8:	52800202 	mov	w2, #0x10                  	// #16
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8a1fc:	52800018 	mov	w24, #0x0                   	// #0
   8a200:	52800019 	mov	w25, #0x0                   	// #0
   8a204:	5280001b 	mov	w27, #0x0                   	// #0
   8a208:	5280001a 	mov	w26, #0x0                   	// #0
	uint16_t op=0, om=0, j=0;
   8a20c:	52800014 	mov	w20, #0x0                   	// #0
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8a210:	b90077ff 	str	wzr, [sp, #116]
		i=((ic32_23)&1?(-1<<19):0)|((ic32_5)&0x7ffff); c=((ic32)&0xf); 
   8a214:	b9007be0 	str	w0, [sp, #120]
		names="b.%s\0";
   8a218:	910f8020 	add	x0, x1, #0x3e0
	uint16_t op=0, om=0, j=0;
   8a21c:	52800001 	mov	w1, #0x0                   	// #0
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8a220:	290fffff 	stp	wzr, wzr, [sp, #124]
   8a224:	29127fff 	stp	wzr, wzr, [sp, #144]
   8a228:	b9009bff 	str	wzr, [sp, #152]
		args[0]=disasm_arg_labeli4; 
   8a22c:	390b03e2 	strb	w2, [sp, #704]
   8a230:	a9435bf5 	ldp	x21, x22, [sp, #48]
   8a234:	17ffee8b 	b	85c60 <disasm+0x1c80>
		j=((ic32_10)&0x2)|((ic32_21)&0x1); m=((ic32_16)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8a238:	120010a3 	and	w3, w5, #0x1f
   8a23c:	121f0294 	and	w20, w20, #0x2
   8a240:	1200018c 	and	w12, w12, #0x1
		names="smull2\0";
   8a244:	b0000041 	adrp	x1, 93000 <sd_init+0x1470>
   8a248:	91162021 	add	x1, x1, #0x588
		j=((ic32_10)&0x2)|((ic32_21)&0x1); m=((ic32_16)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8a24c:	12001059 	and	w25, w2, #0x1f
   8a250:	1200101a 	and	w26, w0, #0x1f
		args[0]=disasm_arg_VtT; args[1]=disasm_arg_VnT; args[2]=disasm_arg_VmTs; 
   8a254:	12800c82 	mov	w2, #0xffffff9b            	// #-101
		names="smull2\0";
   8a258:	910f6020 	add	x0, x1, #0x3d8
		j=((ic32_10)&0x2)|((ic32_21)&0x1); m=((ic32_16)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8a25c:	2a0c0294 	orr	w20, w20, w12
		z=2;q=1;
   8a260:	52800057 	mov	w23, #0x2                   	// #2
   8a264:	52800038 	mov	w24, #0x1                   	// #1
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8a268:	5280001b 	mov	w27, #0x0                   	// #0
	uint16_t op=0, om=0, j=0;
   8a26c:	52800001 	mov	w1, #0x0                   	// #0
	uint32_t i=0;
   8a270:	290effff 	stp	wzr, wzr, [sp, #116]
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8a274:	290fffe3 	stp	w3, wzr, [sp, #124]
		args[0]=disasm_arg_VtT; args[1]=disasm_arg_VnT; args[2]=disasm_arg_VmTs; 
   8a278:	128f7b43 	mov	w3, #0xffff8425            	// #-31707
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8a27c:	29117fff 	stp	wzr, wzr, [sp, #136]
   8a280:	29127fff 	stp	wzr, wzr, [sp, #144]
   8a284:	b9009bff 	str	wzr, [sp, #152]
		args[0]=disasm_arg_VtT; args[1]=disasm_arg_VnT; args[2]=disasm_arg_VmTs; 
   8a288:	790583e3 	strh	w3, [sp, #704]
   8a28c:	390b0be2 	strb	w2, [sp, #706]
   8a290:	a9435bf5 	ldp	x21, x22, [sp, #48]
   8a294:	17ffee73 	b	85c60 <disasm+0x1c80>
		op=((ic32_14)&0x1); j=((ic32_10)&0x2)|((ic32_21)&0x1); m=((ic32_16)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8a298:	121f0294 	and	w20, w20, #0x2
   8a29c:	1200018c 	and	w12, w12, #0x1
		names="smlal2\0smlsl2\0";
   8a2a0:	b0000043 	adrp	x3, 93000 <sd_init+0x1470>
   8a2a4:	91162063 	add	x3, x3, #0x588
		op=((ic32_14)&0x1); j=((ic32_10)&0x2)|((ic32_21)&0x1); m=((ic32_16)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8a2a8:	120010a4 	and	w4, w5, #0x1f
   8a2ac:	12001059 	and	w25, w2, #0x1f
   8a2b0:	1200101a 	and	w26, w0, #0x1f
		args[0]=disasm_arg_Vtz3; args[1]=disasm_arg_VnT; args[2]=disasm_arg_VmTs; 
   8a2b4:	12800c82 	mov	w2, #0xffffff9b            	// #-101
		names="smlal2\0smlsl2\0";
   8a2b8:	910f2060 	add	x0, x3, #0x3c8
		op=((ic32_14)&0x1); j=((ic32_10)&0x2)|((ic32_21)&0x1); m=((ic32_16)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8a2bc:	2a0c0294 	orr	w20, w20, w12
		args[0]=disasm_arg_Vtz3; args[1]=disasm_arg_VnT; args[2]=disasm_arg_VmTs; 
   8a2c0:	128f6ca3 	mov	w3, #0xffff849a            	// #-31590
		op=((ic32_14)&0x1); j=((ic32_10)&0x2)|((ic32_21)&0x1); m=((ic32_16)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8a2c4:	12000221 	and	w1, w17, #0x1
		z=2;q=1;
   8a2c8:	52800057 	mov	w23, #0x2                   	// #2
   8a2cc:	52800038 	mov	w24, #0x1                   	// #1
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8a2d0:	5280001b 	mov	w27, #0x0                   	// #0
	uint32_t i=0;
   8a2d4:	290effff 	stp	wzr, wzr, [sp, #116]
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8a2d8:	290fffe4 	stp	w4, wzr, [sp, #124]
   8a2dc:	29117fff 	stp	wzr, wzr, [sp, #136]
   8a2e0:	29127fff 	stp	wzr, wzr, [sp, #144]
   8a2e4:	b9009bff 	str	wzr, [sp, #152]
		args[0]=disasm_arg_Vtz3; args[1]=disasm_arg_VnT; args[2]=disasm_arg_VmTs; 
   8a2e8:	790583e3 	strh	w3, [sp, #704]
   8a2ec:	390b0be2 	strb	w2, [sp, #706]
   8a2f0:	a9435bf5 	ldp	x21, x22, [sp, #48]
   8a2f4:	17ffee5b 	b	85c60 <disasm+0x1c80>
		j=((ic32_9)&0x4)|((ic32_20)&0x3); m=((ic32_16)&0xf); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8a2f8:	12000ca3 	and	w3, w5, #0xf
   8a2fc:	121e01ef 	and	w15, w15, #0x4
   8a300:	12000508 	and	w8, w8, #0x3
		names="smull2\0";
   8a304:	b0000041 	adrp	x1, 93000 <sd_init+0x1470>
   8a308:	91162021 	add	x1, x1, #0x588
		j=((ic32_9)&0x4)|((ic32_20)&0x3); m=((ic32_16)&0xf); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8a30c:	12001059 	and	w25, w2, #0x1f
   8a310:	1200101a 	and	w26, w0, #0x1f
		args[0]=disasm_arg_VtT; args[1]=disasm_arg_VnT; args[2]=disasm_arg_VmTs; 
   8a314:	12800c82 	mov	w2, #0xffffff9b            	// #-101
		names="smull2\0";
   8a318:	910f6020 	add	x0, x1, #0x3d8
		z=1;q=1;
   8a31c:	52800037 	mov	w23, #0x1                   	// #1
		j=((ic32_9)&0x4)|((ic32_20)&0x3); m=((ic32_16)&0xf); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8a320:	2a0801f4 	orr	w20, w15, w8
		z=1;q=1;
   8a324:	2a1703f8 	mov	w24, w23
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8a328:	5280001b 	mov	w27, #0x0                   	// #0
	uint16_t op=0, om=0, j=0;
   8a32c:	52800001 	mov	w1, #0x0                   	// #0
	uint32_t i=0;
   8a330:	290effff 	stp	wzr, wzr, [sp, #116]
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8a334:	290fffe3 	stp	w3, wzr, [sp, #124]
		args[0]=disasm_arg_VtT; args[1]=disasm_arg_VnT; args[2]=disasm_arg_VmTs; 
   8a338:	128f7b43 	mov	w3, #0xffff8425            	// #-31707
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8a33c:	29117fff 	stp	wzr, wzr, [sp, #136]
   8a340:	29127fff 	stp	wzr, wzr, [sp, #144]
   8a344:	b9009bff 	str	wzr, [sp, #152]
		args[0]=disasm_arg_VtT; args[1]=disasm_arg_VnT; args[2]=disasm_arg_VmTs; 
   8a348:	790583e3 	strh	w3, [sp, #704]
   8a34c:	390b0be2 	strb	w2, [sp, #706]
   8a350:	a9435bf5 	ldp	x21, x22, [sp, #48]
   8a354:	17ffee43 	b	85c60 <disasm+0x1c80>
		op=((ic32_14)&0x1); j=((ic32_9)&0x4)|((ic32_20)&0x3); m=((ic32_16)&0xf); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8a358:	121e01ef 	and	w15, w15, #0x4
   8a35c:	12000508 	and	w8, w8, #0x3
		names="smlal2\0smlsl2\0";
   8a360:	b0000043 	adrp	x3, 93000 <sd_init+0x1470>
   8a364:	91162063 	add	x3, x3, #0x588
		op=((ic32_14)&0x1); j=((ic32_9)&0x4)|((ic32_20)&0x3); m=((ic32_16)&0xf); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8a368:	12000ca4 	and	w4, w5, #0xf
   8a36c:	12001059 	and	w25, w2, #0x1f
   8a370:	1200101a 	and	w26, w0, #0x1f
		args[0]=disasm_arg_Vtz3; args[1]=disasm_arg_VnT; args[2]=disasm_arg_VmTs; 
   8a374:	12800c82 	mov	w2, #0xffffff9b            	// #-101
		names="smlal2\0smlsl2\0";
   8a378:	910f2060 	add	x0, x3, #0x3c8
		z=1;q=1;
   8a37c:	52800037 	mov	w23, #0x1                   	// #1
		args[0]=disasm_arg_Vtz3; args[1]=disasm_arg_VnT; args[2]=disasm_arg_VmTs; 
   8a380:	128f6ca3 	mov	w3, #0xffff849a            	// #-31590
		op=((ic32_14)&0x1); j=((ic32_9)&0x4)|((ic32_20)&0x3); m=((ic32_16)&0xf); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8a384:	2a0801f4 	orr	w20, w15, w8
   8a388:	12000221 	and	w1, w17, #0x1
		z=1;q=1;
   8a38c:	2a1703f8 	mov	w24, w23
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8a390:	5280001b 	mov	w27, #0x0                   	// #0
	uint32_t i=0;
   8a394:	290effff 	stp	wzr, wzr, [sp, #116]
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8a398:	290fffe4 	stp	w4, wzr, [sp, #124]
   8a39c:	29117fff 	stp	wzr, wzr, [sp, #136]
   8a3a0:	29127fff 	stp	wzr, wzr, [sp, #144]
   8a3a4:	b9009bff 	str	wzr, [sp, #152]
		args[0]=disasm_arg_Vtz3; args[1]=disasm_arg_VnT; args[2]=disasm_arg_VmTs; 
   8a3a8:	790583e3 	strh	w3, [sp, #704]
   8a3ac:	390b0be2 	strb	w2, [sp, #706]
   8a3b0:	a9435bf5 	ldp	x21, x22, [sp, #48]
   8a3b4:	17ffee2b 	b	85c60 <disasm+0x1c80>
		names="sqdmlal2\0sqdmlsl2\0sqdmull2\0";
   8a3b8:	b0000043 	adrp	x3, 93000 <sd_init+0x1470>
   8a3bc:	91162063 	add	x3, x3, #0x588
		op=((ic32_13)&0x3); z=((ic32_22)&0x3); m=((ic32_16)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8a3c0:	120010a4 	and	w4, w5, #0x1f
   8a3c4:	12001059 	and	w25, w2, #0x1f
   8a3c8:	1200101a 	and	w26, w0, #0x1f
		args[0]=disasm_arg_Vtz; args[1]=disasm_arg_VnT; args[2]=disasm_arg_VmT; 
   8a3cc:	12800f42 	mov	w2, #0xffffff85            	// #-123
		names="sqdmlal2\0sqdmlsl2\0sqdmull2\0";
   8a3d0:	910ea060 	add	x0, x3, #0x3a8
		op=((ic32_13)&0x3); z=((ic32_22)&0x3); m=((ic32_16)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8a3d4:	12000561 	and	w1, w11, #0x3
		args[0]=disasm_arg_Vtz; args[1]=disasm_arg_VnT; args[2]=disasm_arg_VmT; 
   8a3d8:	128f6e23 	mov	w3, #0xffff848e            	// #-31602
		op=((ic32_13)&0x3); z=((ic32_22)&0x3); m=((ic32_16)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8a3dc:	120004f7 	and	w23, w7, #0x3
		q=1;
   8a3e0:	52800038 	mov	w24, #0x1                   	// #1
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8a3e4:	5280001b 	mov	w27, #0x0                   	// #0
	uint16_t op=0, om=0, j=0;
   8a3e8:	52800014 	mov	w20, #0x0                   	// #0
	uint32_t i=0;
   8a3ec:	290effff 	stp	wzr, wzr, [sp, #116]
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8a3f0:	290fffe4 	stp	w4, wzr, [sp, #124]
   8a3f4:	29117fff 	stp	wzr, wzr, [sp, #136]
   8a3f8:	29127fff 	stp	wzr, wzr, [sp, #144]
   8a3fc:	b9009bff 	str	wzr, [sp, #152]
		args[0]=disasm_arg_Vtz; args[1]=disasm_arg_VnT; args[2]=disasm_arg_VmT; 
   8a400:	790583e3 	strh	w3, [sp, #704]
   8a404:	390b0be2 	strb	w2, [sp, #706]
   8a408:	a9435bf5 	ldp	x21, x22, [sp, #48]
   8a40c:	17ffee15 	b	85c60 <disasm+0x1c80>
		names="shll2\0";
   8a410:	b0000041 	adrp	x1, 93000 <sd_init+0x1470>
   8a414:	91162021 	add	x1, x1, #0x588
		z=((ic32_22)&0x3); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8a418:	12001059 	and	w25, w2, #0x1f
   8a41c:	1200101a 	and	w26, w0, #0x1f
		args[0]=disasm_arg_Vtz; args[1]=disasm_arg_VnT; args[2]=disasm_arg_shift8; 
   8a420:	128f6e23 	mov	w3, #0xffff848e            	// #-31602
		names="shll2\0";
   8a424:	910e8020 	add	x0, x1, #0x3a0
		args[0]=disasm_arg_Vtz; args[1]=disasm_arg_VnT; args[2]=disasm_arg_shift8; 
   8a428:	12800ac2 	mov	w2, #0xffffffa9            	// #-87
		z=((ic32_22)&0x3); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8a42c:	120004f7 	and	w23, w7, #0x3
		q=1;
   8a430:	52800038 	mov	w24, #0x1                   	// #1
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8a434:	5280001b 	mov	w27, #0x0                   	// #0
	uint16_t op=0, om=0, j=0;
   8a438:	52800014 	mov	w20, #0x0                   	// #0
   8a43c:	52800001 	mov	w1, #0x0                   	// #0
	uint32_t i=0;
   8a440:	290effff 	stp	wzr, wzr, [sp, #116]
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8a444:	290fffff 	stp	wzr, wzr, [sp, #124]
   8a448:	29117fff 	stp	wzr, wzr, [sp, #136]
   8a44c:	29127fff 	stp	wzr, wzr, [sp, #144]
   8a450:	b9009bff 	str	wzr, [sp, #152]
		args[0]=disasm_arg_Vtz; args[1]=disasm_arg_VnT; args[2]=disasm_arg_shift8; 
   8a454:	790583e3 	strh	w3, [sp, #704]
   8a458:	390b0be2 	strb	w2, [sp, #706]
   8a45c:	a9435bf5 	ldp	x21, x22, [sp, #48]
   8a460:	17ffee00 	b	85c60 <disasm+0x1c80>
		op=((ic32_23)&0x2)|((ic32_22)&0x1); s=((ic32_31)&0x1); p=((ic32_23)&0x1); i=((ic32_21)&1?(-1<<7):0)|((ic32_15)&0x7f); m=((ic32_10)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8a464:	f240019f 	tst	x12, #0x1
   8a468:	120018c5 	and	w5, w6, #0x7f
   8a46c:	12800fe4 	mov	w4, #0xffffff80            	// #-128
   8a470:	1200101a 	and	w26, w0, #0x1f
   8a474:	1a9f1084 	csel	w4, w4, wzr, ne  // ne = any
   8a478:	12000200 	and	w0, w16, #0x1
		names="stnp\0ldnp\0stp\0ldp\0";
   8a47c:	d0000043 	adrp	x3, 94000 <sd_init+0x2470>
   8a480:	911a2063 	add	x3, x3, #0x688
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8a484:	29127fe0 	stp	w0, wzr, [sp, #144]
		op=((ic32_23)&0x2)|((ic32_22)&0x1); s=((ic32_31)&0x1); p=((ic32_23)&0x1); i=((ic32_21)&1?(-1<<7):0)|((ic32_15)&0x7f); m=((ic32_10)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8a488:	2a0400a0 	orr	w0, w5, w4
   8a48c:	120000e7 	and	w7, w7, #0x1
   8a490:	121f0201 	and	w1, w16, #0x2
   8a494:	b9007be0 	str	w0, [sp, #120]
		names="stnp\0ldnp\0stp\0ldp\0";
   8a498:	9123e060 	add	x0, x3, #0x8f8
		args[0]=disasm_arg_Rt; args[1]=disasm_arg_Rm; args[2]=disasm_arg_offs; args[3]=disasm_arg_XnS; args[4]=disasm_arg_is4_opt; args[5]=disasm_arg_offe; 
   8a49c:	5281c163 	mov	w3, #0xe0b                 	// #3595
		op=((ic32_23)&0x2)|((ic32_22)&0x1); s=((ic32_31)&0x1); p=((ic32_23)&0x1); i=((ic32_21)&1?(-1<<7):0)|((ic32_15)&0x7f); m=((ic32_10)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8a4a0:	12001286 	and	w6, w20, #0x1f
   8a4a4:	12001059 	and	w25, w2, #0x1f
		args[0]=disasm_arg_Rt; args[1]=disasm_arg_Rm; args[2]=disasm_arg_offs; args[3]=disasm_arg_XnS; args[4]=disasm_arg_is4_opt; args[5]=disasm_arg_offe; 
   8a4a8:	72a54523 	movk	w3, #0x2a29, lsl #16
   8a4ac:	52856ac2 	mov	w2, #0x2b56                	// #11094
		op=((ic32_23)&0x2)|((ic32_22)&0x1); s=((ic32_31)&0x1); p=((ic32_23)&0x1); i=((ic32_21)&1?(-1<<7):0)|((ic32_15)&0x7f); m=((ic32_10)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8a4b0:	12001d3b 	and	w27, w9, #0xff
   8a4b4:	2a070021 	orr	w1, w1, w7
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8a4b8:	52800017 	mov	w23, #0x0                   	// #0
   8a4bc:	52800018 	mov	w24, #0x0                   	// #0
	uint16_t op=0, om=0, j=0;
   8a4c0:	52800014 	mov	w20, #0x0                   	// #0
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8a4c4:	b90077ff 	str	wzr, [sp, #116]
   8a4c8:	290fffe6 	stp	w6, wzr, [sp, #124]
   8a4cc:	29117fff 	stp	wzr, wzr, [sp, #136]
   8a4d0:	b9009bff 	str	wzr, [sp, #152]
		args[0]=disasm_arg_Rt; args[1]=disasm_arg_Rm; args[2]=disasm_arg_offs; args[3]=disasm_arg_XnS; args[4]=disasm_arg_is4_opt; args[5]=disasm_arg_offe; 
   8a4d4:	b902c3e3 	str	w3, [sp, #704]
   8a4d8:	79058be2 	strh	w2, [sp, #708]
   8a4dc:	a9435bf5 	ldp	x21, x22, [sp, #48]
   8a4e0:	17ffede0 	b	85c60 <disasm+0x1c80>
		op=((ic32_22)&0x1); s=((ic32_31)&0x1); i=((ic32_21)&1?(-1<<7):0)|((ic32_15)&0x7f); m=((ic32_10)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8a4e4:	f240019f 	tst	x12, #0x1
   8a4e8:	120018c6 	and	w6, w6, #0x7f
   8a4ec:	12800fe4 	mov	w4, #0xffffff80            	// #-128
   8a4f0:	1a9f1084 	csel	w4, w4, wzr, ne  // ne = any
		names="stp\0ldp\0";
   8a4f4:	d0000043 	adrp	x3, 94000 <sd_init+0x2470>
		op=((ic32_22)&0x1); s=((ic32_31)&0x1); i=((ic32_21)&1?(-1<<7):0)|((ic32_15)&0x7f); m=((ic32_10)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8a4f8:	1200101a 	and	w26, w0, #0x1f
		names="stp\0ldp\0";
   8a4fc:	911a2063 	add	x3, x3, #0x688
		op=((ic32_22)&0x1); s=((ic32_31)&0x1); i=((ic32_21)&1?(-1<<7):0)|((ic32_15)&0x7f); m=((ic32_10)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8a500:	2a0400c0 	orr	w0, w6, w4
   8a504:	290e83ff 	stp	wzr, w0, [sp, #116]
		names="stp\0ldp\0";
   8a508:	9123a060 	add	x0, x3, #0x8e8
		args[0]=disasm_arg_Rt; args[1]=disasm_arg_Rm; args[2]=disasm_arg_offs; args[3]=disasm_arg_XnS; args[4]=disasm_arg_offe; args[5]=disasm_arg_is4_opt; 
   8a50c:	5281c163 	mov	w3, #0xe0b                 	// #3595
		op=((ic32_22)&0x1); s=((ic32_31)&0x1); i=((ic32_21)&1?(-1<<7):0)|((ic32_15)&0x7f); m=((ic32_10)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8a510:	12001285 	and	w5, w20, #0x1f
   8a514:	12001059 	and	w25, w2, #0x1f
		args[0]=disasm_arg_Rt; args[1]=disasm_arg_Rm; args[2]=disasm_arg_offs; args[3]=disasm_arg_XnS; args[4]=disasm_arg_offe; args[5]=disasm_arg_is4_opt; 
   8a518:	72a54523 	movk	w3, #0x2a29, lsl #16
   8a51c:	528ac562 	mov	w2, #0x562b                	// #22059
		op=((ic32_22)&0x1); s=((ic32_31)&0x1); i=((ic32_21)&1?(-1<<7):0)|((ic32_15)&0x7f); m=((ic32_10)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8a520:	120000e1 	and	w1, w7, #0x1
   8a524:	12001d3b 	and	w27, w9, #0xff
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8a528:	52800017 	mov	w23, #0x0                   	// #0
   8a52c:	52800018 	mov	w24, #0x0                   	// #0
	uint16_t op=0, om=0, j=0;
   8a530:	52800014 	mov	w20, #0x0                   	// #0
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8a534:	290fffe5 	stp	w5, wzr, [sp, #124]
   8a538:	29117fff 	stp	wzr, wzr, [sp, #136]
   8a53c:	29127fff 	stp	wzr, wzr, [sp, #144]
   8a540:	b9009bff 	str	wzr, [sp, #152]
		args[0]=disasm_arg_Rt; args[1]=disasm_arg_Rm; args[2]=disasm_arg_offs; args[3]=disasm_arg_XnS; args[4]=disasm_arg_offe; args[5]=disasm_arg_is4_opt; 
   8a544:	b902c3e3 	str	w3, [sp, #704]
   8a548:	79058be2 	strh	w2, [sp, #708]
   8a54c:	a9435bf5 	ldp	x21, x22, [sp, #48]
   8a550:	17ffedc4 	b	85c60 <disasm+0x1c80>
		names="fcvtms\0fcvtmu\0";
   8a554:	d0000043 	adrp	x3, 94000 <sd_init+0x2470>
   8a558:	911a2063 	add	x3, x3, #0x688
		op=((ic32_16)&0x1); s=((ic32_31)&0x1); z=((ic32_22)&0x3); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8a55c:	12001059 	and	w25, w2, #0x1f
   8a560:	1200101a 	and	w26, w0, #0x1f
		args[0]=disasm_arg_Rt; args[1]=disasm_arg_FPz5n; 
   8a564:	12887e82 	mov	w2, #0xffffbc0b            	// #-17397
		op=((ic32_16)&0x1); s=((ic32_31)&0x1); z=((ic32_22)&0x3); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8a568:	120000a1 	and	w1, w5, #0x1
   8a56c:	12001d3b 	and	w27, w9, #0xff
   8a570:	120004f7 	and	w23, w7, #0x3
		names="fcvtms\0fcvtmu\0";
   8a574:	91236060 	add	x0, x3, #0x8d8
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8a578:	52800018 	mov	w24, #0x0                   	// #0
	uint16_t op=0, om=0, j=0;
   8a57c:	52800014 	mov	w20, #0x0                   	// #0
	uint32_t i=0;
   8a580:	290effff 	stp	wzr, wzr, [sp, #116]
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8a584:	290fffff 	stp	wzr, wzr, [sp, #124]
   8a588:	29117fff 	stp	wzr, wzr, [sp, #136]
   8a58c:	29127fff 	stp	wzr, wzr, [sp, #144]
   8a590:	b9009bff 	str	wzr, [sp, #152]
		args[0]=disasm_arg_Rt; args[1]=disasm_arg_FPz5n; 
   8a594:	790583e2 	strh	w2, [sp, #704]
   8a598:	a9435bf5 	ldp	x21, x22, [sp, #48]
   8a59c:	17ffedb1 	b	85c60 <disasm+0x1c80>
		names="fcvtns\0fcvtnu\0scvtf\0ucvtf\0fcvtas\0fcvtau\0fmov\0fmov\0fcvtns\0fcvtnu\0";
   8a5a0:	d0000043 	adrp	x3, 94000 <sd_init+0x2470>
   8a5a4:	911a2063 	add	x3, x3, #0x688
		op=((ic32_16)&0xf); s=((ic32_31)&0x1); z=((ic32_22)&0x3); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8a5a8:	12001059 	and	w25, w2, #0x1f
   8a5ac:	1200101a 	and	w26, w0, #0x1f
		args[0]=disasm_arg_Rt; args[1]=disasm_arg_FPz5n; 
   8a5b0:	12887e82 	mov	w2, #0xffffbc0b            	// #-17397
		op=((ic32_16)&0xf); s=((ic32_31)&0x1); z=((ic32_22)&0x3); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8a5b4:	12000ca1 	and	w1, w5, #0xf
   8a5b8:	12001d3b 	and	w27, w9, #0xff
   8a5bc:	120004f7 	and	w23, w7, #0x3
		names="fcvtns\0fcvtnu\0scvtf\0ucvtf\0fcvtas\0fcvtau\0fmov\0fmov\0fcvtns\0fcvtnu\0";
   8a5c0:	91224060 	add	x0, x3, #0x890
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8a5c4:	52800018 	mov	w24, #0x0                   	// #0
	uint16_t op=0, om=0, j=0;
   8a5c8:	52800014 	mov	w20, #0x0                   	// #0
	uint32_t i=0;
   8a5cc:	290effff 	stp	wzr, wzr, [sp, #116]
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8a5d0:	290fffff 	stp	wzr, wzr, [sp, #124]
   8a5d4:	29117fff 	stp	wzr, wzr, [sp, #136]
   8a5d8:	29127fff 	stp	wzr, wzr, [sp, #144]
   8a5dc:	b9009bff 	str	wzr, [sp, #152]
		args[0]=disasm_arg_Rt; args[1]=disasm_arg_FPz5n; 
   8a5e0:	790583e2 	strh	w2, [sp, #704]
   8a5e4:	a9435bf5 	ldp	x21, x22, [sp, #48]
   8a5e8:	17ffed9e 	b	85c60 <disasm+0x1c80>
		op=((ic32>>17)&0x2)|((ic32_16)&0x1); s=((ic32_31)&0x1); z=((ic32_22)&0x3); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8a5ec:	53117c01 	lsr	w1, w0, #17
   8a5f0:	120000a5 	and	w5, w5, #0x1
   8a5f4:	121f0021 	and	w1, w1, #0x2
		names="scvtf\0ucvtf\0fmov\0fmov\0";
   8a5f8:	d0000043 	adrp	x3, 94000 <sd_init+0x2470>
   8a5fc:	911a2063 	add	x3, x3, #0x688
		op=((ic32>>17)&0x2)|((ic32_16)&0x1); s=((ic32_31)&0x1); z=((ic32_22)&0x3); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8a600:	12001059 	and	w25, w2, #0x1f
   8a604:	1200101a 	and	w26, w0, #0x1f
		args[0]=disasm_arg_FPz5t; args[1]=disasm_arg_Rn; 
   8a608:	52813742 	mov	w2, #0x9ba                 	// #2490
		op=((ic32>>17)&0x2)|((ic32_16)&0x1); s=((ic32_31)&0x1); z=((ic32_22)&0x3); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8a60c:	12001d3b 	and	w27, w9, #0xff
   8a610:	120004f7 	and	w23, w7, #0x3
   8a614:	2a050021 	orr	w1, w1, w5
		names="scvtf\0ucvtf\0fmov\0fmov\0";
   8a618:	9121e060 	add	x0, x3, #0x878
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8a61c:	52800018 	mov	w24, #0x0                   	// #0
	uint16_t op=0, om=0, j=0;
   8a620:	52800014 	mov	w20, #0x0                   	// #0
	uint32_t i=0;
   8a624:	290effff 	stp	wzr, wzr, [sp, #116]
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8a628:	290fffff 	stp	wzr, wzr, [sp, #124]
   8a62c:	29117fff 	stp	wzr, wzr, [sp, #136]
   8a630:	29127fff 	stp	wzr, wzr, [sp, #144]
   8a634:	b9009bff 	str	wzr, [sp, #152]
		args[0]=disasm_arg_FPz5t; args[1]=disasm_arg_Rn; 
   8a638:	790583e2 	strh	w2, [sp, #704]
   8a63c:	a9435bf5 	ldp	x21, x22, [sp, #48]
   8a640:	17ffed88 	b	85c60 <disasm+0x1c80>
		names="fcvtzs\0fcvtzu\0";
   8a644:	b0000043 	adrp	x3, 93000 <sd_init+0x1470>
   8a648:	91162063 	add	x3, x3, #0x588
		op=((ic32_16)&0x1); s=((ic32_31)&0x1); z=((ic32_22)&0x3); j=((ic32_10)&0x3f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8a64c:	12001059 	and	w25, w2, #0x1f
   8a650:	1200101a 	and	w26, w0, #0x1f
		args[0]=disasm_arg_Rt; args[1]=disasm_arg_FPz5n; args[2]=disasm_arg_fbits; 
   8a654:	12800882 	mov	w2, #0xffffffbb            	// #-69
		names="fcvtzs\0fcvtzu\0";
   8a658:	912e4060 	add	x0, x3, #0xb90
		op=((ic32_16)&0x1); s=((ic32_31)&0x1); z=((ic32_22)&0x3); j=((ic32_10)&0x3f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8a65c:	120000a1 	and	w1, w5, #0x1
		args[0]=disasm_arg_Rt; args[1]=disasm_arg_FPz5n; args[2]=disasm_arg_fbits; 
   8a660:	12887e83 	mov	w3, #0xffffbc0b            	// #-17397
		op=((ic32_16)&0x1); s=((ic32_31)&0x1); z=((ic32_22)&0x3); j=((ic32_10)&0x3f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8a664:	12001d3b 	and	w27, w9, #0xff
   8a668:	120004f7 	and	w23, w7, #0x3
   8a66c:	12001694 	and	w20, w20, #0x3f
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8a670:	52800018 	mov	w24, #0x0                   	// #0
	uint32_t i=0;
   8a674:	290effff 	stp	wzr, wzr, [sp, #116]
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8a678:	290fffff 	stp	wzr, wzr, [sp, #124]
   8a67c:	29117fff 	stp	wzr, wzr, [sp, #136]
   8a680:	29127fff 	stp	wzr, wzr, [sp, #144]
   8a684:	b9009bff 	str	wzr, [sp, #152]
		args[0]=disasm_arg_Rt; args[1]=disasm_arg_FPz5n; args[2]=disasm_arg_fbits; 
   8a688:	790583e3 	strh	w3, [sp, #704]
   8a68c:	390b0be2 	strb	w2, [sp, #706]
   8a690:	a9435bf5 	ldp	x21, x22, [sp, #48]
   8a694:	17ffed73 	b	85c60 <disasm+0x1c80>
		names="scvtf\0ucvtf\0";
   8a698:	b0000043 	adrp	x3, 93000 <sd_init+0x1470>
   8a69c:	91162063 	add	x3, x3, #0x588
		op=((ic32_16)&0x1); s=((ic32_31)&0x1); z=((ic32_22)&0x3); j=((ic32_10)&0x3f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8a6a0:	12001059 	and	w25, w2, #0x1f
   8a6a4:	1200101a 	and	w26, w0, #0x1f
		args[0]=disasm_arg_FPz5t; args[1]=disasm_arg_Rn; args[2]=disasm_arg_fbits; 
   8a6a8:	12800882 	mov	w2, #0xffffffbb            	// #-69
		names="scvtf\0ucvtf\0";
   8a6ac:	912e0060 	add	x0, x3, #0xb80
		op=((ic32_16)&0x1); s=((ic32_31)&0x1); z=((ic32_22)&0x3); j=((ic32_10)&0x3f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8a6b0:	120000a1 	and	w1, w5, #0x1
		args[0]=disasm_arg_FPz5t; args[1]=disasm_arg_Rn; args[2]=disasm_arg_fbits; 
   8a6b4:	52813743 	mov	w3, #0x9ba                 	// #2490
		op=((ic32_16)&0x1); s=((ic32_31)&0x1); z=((ic32_22)&0x3); j=((ic32_10)&0x3f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8a6b8:	12001d3b 	and	w27, w9, #0xff
   8a6bc:	120004f7 	and	w23, w7, #0x3
   8a6c0:	12001694 	and	w20, w20, #0x3f
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8a6c4:	52800018 	mov	w24, #0x0                   	// #0
	uint32_t i=0;
   8a6c8:	290effff 	stp	wzr, wzr, [sp, #116]
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8a6cc:	290fffff 	stp	wzr, wzr, [sp, #124]
   8a6d0:	29117fff 	stp	wzr, wzr, [sp, #136]
   8a6d4:	29127fff 	stp	wzr, wzr, [sp, #144]
   8a6d8:	b9009bff 	str	wzr, [sp, #152]
		args[0]=disasm_arg_FPz5t; args[1]=disasm_arg_Rn; args[2]=disasm_arg_fbits; 
   8a6dc:	790583e3 	strh	w3, [sp, #704]
   8a6e0:	390b0be2 	strb	w2, [sp, #706]
   8a6e4:	a9435bf5 	ldp	x21, x22, [sp, #48]
   8a6e8:	17ffed5e 	b	85c60 <disasm+0x1c80>
		names="fmov\0";
   8a6ec:	b0000041 	adrp	x1, 93000 <sd_init+0x1470>
   8a6f0:	91162021 	add	x1, x1, #0x588
		s=((ic32_31)&0x1); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8a6f4:	12001059 	and	w25, w2, #0x1f
   8a6f8:	1200101a 	and	w26, w0, #0x1f
		args[0]=disasm_arg_Vt1d; args[1]=disasm_arg_Rn; 
   8a6fc:	528137c2 	mov	w2, #0x9be                 	// #2494
		names="fmov\0";
   8a700:	d101a020 	sub	x0, x1, #0x68
		s=((ic32_31)&0x1); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8a704:	12001d3b 	and	w27, w9, #0xff
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8a708:	52800017 	mov	w23, #0x0                   	// #0
   8a70c:	52800018 	mov	w24, #0x0                   	// #0
	uint16_t op=0, om=0, j=0;
   8a710:	52800014 	mov	w20, #0x0                   	// #0
   8a714:	52800001 	mov	w1, #0x0                   	// #0
	uint32_t i=0;
   8a718:	290effff 	stp	wzr, wzr, [sp, #116]
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8a71c:	290fffff 	stp	wzr, wzr, [sp, #124]
   8a720:	29117fff 	stp	wzr, wzr, [sp, #136]
   8a724:	29127fff 	stp	wzr, wzr, [sp, #144]
   8a728:	b9009bff 	str	wzr, [sp, #152]
		args[0]=disasm_arg_Vt1d; args[1]=disasm_arg_Rn; 
   8a72c:	790583e2 	strh	w2, [sp, #704]
   8a730:	a9435bf5 	ldp	x21, x22, [sp, #48]
   8a734:	17ffed4b 	b	85c60 <disasm+0x1c80>
		names="fmov\0";
   8a738:	b0000041 	adrp	x1, 93000 <sd_init+0x1470>
   8a73c:	91162021 	add	x1, x1, #0x588
		s=((ic32_31)&0x1); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8a740:	12001059 	and	w25, w2, #0x1f
   8a744:	1200101a 	and	w26, w0, #0x1f
		args[0]=disasm_arg_Rt; args[1]=disasm_arg_Vn1d; 
   8a748:	12885e82 	mov	w2, #0xffffbd0b            	// #-17141
		names="fmov\0";
   8a74c:	d101a020 	sub	x0, x1, #0x68
		s=((ic32_31)&0x1); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8a750:	12001d3b 	and	w27, w9, #0xff
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8a754:	52800017 	mov	w23, #0x0                   	// #0
   8a758:	52800018 	mov	w24, #0x0                   	// #0
	uint16_t op=0, om=0, j=0;
   8a75c:	52800014 	mov	w20, #0x0                   	// #0
   8a760:	52800001 	mov	w1, #0x0                   	// #0
	uint32_t i=0;
   8a764:	290effff 	stp	wzr, wzr, [sp, #116]
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8a768:	290fffff 	stp	wzr, wzr, [sp, #124]
   8a76c:	29117fff 	stp	wzr, wzr, [sp, #136]
   8a770:	29127fff 	stp	wzr, wzr, [sp, #144]
   8a774:	b9009bff 	str	wzr, [sp, #152]
		args[0]=disasm_arg_Rt; args[1]=disasm_arg_Vn1d; 
   8a778:	790583e2 	strh	w2, [sp, #704]
   8a77c:	a9435bf5 	ldp	x21, x22, [sp, #48]
   8a780:	17ffed38 	b	85c60 <disasm+0x1c80>
		op=((ic32_15)&0x1); s=((ic32_31)&0x1); m=((ic32_16)&0x1f); d=((ic32_10)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8a784:	120010a4 	and	w4, w5, #0x1f
		names="madd\0msub\0";
   8a788:	d0000043 	adrp	x3, 94000 <sd_init+0x2470>
		op=((ic32_15)&0x1); s=((ic32_31)&0x1); m=((ic32_16)&0x1f); d=((ic32_10)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8a78c:	12001059 	and	w25, w2, #0x1f
		names="madd\0msub\0";
   8a790:	911a2063 	add	x3, x3, #0x688
		args[0]=disasm_arg_Rt; args[1]=disasm_arg_Rn; args[2]=disasm_arg_Rm; args[3]=disasm_arg_Rd; 
   8a794:	52812162 	mov	w2, #0x90b                 	// #2315
		op=((ic32_15)&0x1); s=((ic32_31)&0x1); m=((ic32_16)&0x1f); d=((ic32_10)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8a798:	1200101a 	and	w26, w0, #0x1f
		args[0]=disasm_arg_Rt; args[1]=disasm_arg_Rn; args[2]=disasm_arg_Rm; args[3]=disasm_arg_Rd; 
   8a79c:	72a9e1c2 	movk	w2, #0x4f0e, lsl #16
		op=((ic32_15)&0x1); s=((ic32_31)&0x1); m=((ic32_16)&0x1f); d=((ic32_10)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8a7a0:	120000c1 	and	w1, w6, #0x1
   8a7a4:	12001d3b 	and	w27, w9, #0xff
		names="madd\0msub\0";
   8a7a8:	9121a060 	add	x0, x3, #0x868
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8a7ac:	52800017 	mov	w23, #0x0                   	// #0
   8a7b0:	52800018 	mov	w24, #0x0                   	// #0
	uint32_t i=0;
   8a7b4:	290effff 	stp	wzr, wzr, [sp, #116]
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8a7b8:	290fffe4 	stp	w4, wzr, [sp, #124]
		op=((ic32_15)&0x1); s=((ic32_31)&0x1); m=((ic32_16)&0x1f); d=((ic32_10)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8a7bc:	12001284 	and	w4, w20, #0x1f
	uint16_t op=0, om=0, j=0;
   8a7c0:	52800014 	mov	w20, #0x0                   	// #0
		op=((ic32_15)&0x1); s=((ic32_31)&0x1); m=((ic32_16)&0x1f); d=((ic32_10)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8a7c4:	b9008be4 	str	w4, [sp, #136]
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8a7c8:	2911ffff 	stp	wzr, wzr, [sp, #140]
   8a7cc:	2912ffff 	stp	wzr, wzr, [sp, #148]
		args[0]=disasm_arg_Rt; args[1]=disasm_arg_Rn; args[2]=disasm_arg_Rm; args[3]=disasm_arg_Rd; 
   8a7d0:	b902c3e2 	str	w2, [sp, #704]
   8a7d4:	a9435bf5 	ldp	x21, x22, [sp, #48]
   8a7d8:	17ffed22 	b	85c60 <disasm+0x1c80>
		names="mul\0mneg\0";
   8a7dc:	d0000043 	adrp	x3, 94000 <sd_init+0x2470>
   8a7e0:	911a2063 	add	x3, x3, #0x688
		op=((ic32_15)&0x1); s=((ic32_31)&0x1); m=((ic32_16)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8a7e4:	120010a4 	and	w4, w5, #0x1f
   8a7e8:	12001059 	and	w25, w2, #0x1f
   8a7ec:	1200101a 	and	w26, w0, #0x1f
		args[0]=disasm_arg_Rt; args[1]=disasm_arg_Rn; args[2]=disasm_arg_Rm; 
   8a7f0:	528001c2 	mov	w2, #0xe                   	// #14
		names="mul\0mneg\0";
   8a7f4:	91216060 	add	x0, x3, #0x858
		op=((ic32_15)&0x1); s=((ic32_31)&0x1); m=((ic32_16)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8a7f8:	120000c1 	and	w1, w6, #0x1
		args[0]=disasm_arg_Rt; args[1]=disasm_arg_Rn; args[2]=disasm_arg_Rm; 
   8a7fc:	52812163 	mov	w3, #0x90b                 	// #2315
		op=((ic32_15)&0x1); s=((ic32_31)&0x1); m=((ic32_16)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8a800:	12001d3b 	and	w27, w9, #0xff
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8a804:	52800017 	mov	w23, #0x0                   	// #0
   8a808:	52800018 	mov	w24, #0x0                   	// #0
	uint16_t op=0, om=0, j=0;
   8a80c:	52800014 	mov	w20, #0x0                   	// #0
	uint32_t i=0;
   8a810:	290effff 	stp	wzr, wzr, [sp, #116]
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8a814:	290fffe4 	stp	w4, wzr, [sp, #124]
   8a818:	29117fff 	stp	wzr, wzr, [sp, #136]
   8a81c:	29127fff 	stp	wzr, wzr, [sp, #144]
   8a820:	b9009bff 	str	wzr, [sp, #152]
		args[0]=disasm_arg_Rt; args[1]=disasm_arg_Rn; args[2]=disasm_arg_Rm; 
   8a824:	790583e3 	strh	w3, [sp, #704]
   8a828:	390b0be2 	strb	w2, [sp, #706]
   8a82c:	a9435bf5 	ldp	x21, x22, [sp, #48]
   8a830:	17ffed0c 	b	85c60 <disasm+0x1c80>
		names="?\0?\0udiv\0sdiv\0?\0?\0?\0?\0lslv\0lsrv\0asrv\0rorv\0?\0?\0?\0?\0crc32b\0crc32h\0crc32w\0crc32x\0crc32cb\0crc32ch\0crc32cw\0crc32cx\0";
   8a834:	d0000043 	adrp	x3, 94000 <sd_init+0x2470>
   8a838:	911a2063 	add	x3, x3, #0x688
		op=((ic32_10)&0x1f); s=((ic32_31)&0x1); m=((ic32_16)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8a83c:	12001281 	and	w1, w20, #0x1f
   8a840:	120010a4 	and	w4, w5, #0x1f
   8a844:	12001059 	and	w25, w2, #0x1f
   8a848:	1200101a 	and	w26, w0, #0x1f
		args[0]=disasm_arg_Rt; args[1]=disasm_arg_Rn; args[2]=disasm_arg_Rm; 
   8a84c:	528001c2 	mov	w2, #0xe                   	// #14
		names="?\0?\0udiv\0sdiv\0?\0?\0?\0?\0lslv\0lsrv\0asrv\0rorv\0?\0?\0?\0?\0crc32b\0crc32h\0crc32w\0crc32x\0crc32cb\0crc32ch\0crc32cw\0crc32cx\0";
   8a850:	911fa060 	add	x0, x3, #0x7e8
		op=((ic32_10)&0x1f); s=((ic32_31)&0x1); m=((ic32_16)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8a854:	12001d3b 	and	w27, w9, #0xff
		args[0]=disasm_arg_Rt; args[1]=disasm_arg_Rn; args[2]=disasm_arg_Rm; 
   8a858:	52812163 	mov	w3, #0x90b                 	// #2315
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8a85c:	52800017 	mov	w23, #0x0                   	// #0
   8a860:	52800018 	mov	w24, #0x0                   	// #0
	uint16_t op=0, om=0, j=0;
   8a864:	52800014 	mov	w20, #0x0                   	// #0
	uint32_t i=0;
   8a868:	290effff 	stp	wzr, wzr, [sp, #116]
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8a86c:	290fffe4 	stp	w4, wzr, [sp, #124]
   8a870:	29117fff 	stp	wzr, wzr, [sp, #136]
   8a874:	29127fff 	stp	wzr, wzr, [sp, #144]
   8a878:	b9009bff 	str	wzr, [sp, #152]
		args[0]=disasm_arg_Rt; args[1]=disasm_arg_Rn; args[2]=disasm_arg_Rm; 
   8a87c:	790583e3 	strh	w3, [sp, #704]
   8a880:	390b0be2 	strb	w2, [sp, #706]
   8a884:	a9435bf5 	ldp	x21, x22, [sp, #48]
   8a888:	17ffecf6 	b	85c60 <disasm+0x1c80>
		s=((ic32_31)&0x1); m=((ic32_16)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8a88c:	120010a3 	and	w3, w5, #0x1f
		names="adc\0";
   8a890:	d0000041 	adrp	x1, 94000 <sd_init+0x2470>
   8a894:	911a2021 	add	x1, x1, #0x688
		s=((ic32_31)&0x1); m=((ic32_16)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8a898:	12001059 	and	w25, w2, #0x1f
   8a89c:	1200101a 	and	w26, w0, #0x1f
		args[0]=disasm_arg_Rt; args[1]=disasm_arg_Rn; args[2]=disasm_arg_Rm; 
   8a8a0:	528001c2 	mov	w2, #0xe                   	// #14
		names="adc\0";
   8a8a4:	911f8020 	add	x0, x1, #0x7e0
		s=((ic32_31)&0x1); m=((ic32_16)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8a8a8:	12001d3b 	and	w27, w9, #0xff
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8a8ac:	52800017 	mov	w23, #0x0                   	// #0
   8a8b0:	52800018 	mov	w24, #0x0                   	// #0
	uint16_t op=0, om=0, j=0;
   8a8b4:	52800014 	mov	w20, #0x0                   	// #0
   8a8b8:	52800001 	mov	w1, #0x0                   	// #0
	uint32_t i=0;
   8a8bc:	290effff 	stp	wzr, wzr, [sp, #116]
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8a8c0:	290fffe3 	stp	w3, wzr, [sp, #124]
		args[0]=disasm_arg_Rt; args[1]=disasm_arg_Rn; args[2]=disasm_arg_Rm; 
   8a8c4:	52812163 	mov	w3, #0x90b                 	// #2315
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8a8c8:	29117fff 	stp	wzr, wzr, [sp, #136]
   8a8cc:	29127fff 	stp	wzr, wzr, [sp, #144]
   8a8d0:	b9009bff 	str	wzr, [sp, #152]
		args[0]=disasm_arg_Rt; args[1]=disasm_arg_Rn; args[2]=disasm_arg_Rm; 
   8a8d4:	790583e3 	strh	w3, [sp, #704]
   8a8d8:	390b0be2 	strb	w2, [sp, #706]
   8a8dc:	a9435bf5 	ldp	x21, x22, [sp, #48]
   8a8e0:	17ffece0 	b	85c60 <disasm+0x1c80>
		op=((ic32_31)&0x1); i=((ic32_25)&1?(-1<<26):0)|((ic32)&0x3ffffff); 
   8a8e4:	f24002ff 	tst	x23, #0x1
   8a8e8:	12006403 	and	w3, w0, #0x3ffffff
   8a8ec:	52bf8002 	mov	w2, #0xfc000000            	// #-67108864
   8a8f0:	1a9f1042 	csel	w2, w2, wzr, ne  // ne = any
   8a8f4:	2a020062 	orr	w2, w3, w2
		names="b\0bl\0";
   8a8f8:	d0000040 	adrp	x0, 94000 <sd_init+0x2470>
   8a8fc:	911a2000 	add	x0, x0, #0x688
		op=((ic32_31)&0x1); i=((ic32_25)&1?(-1<<26):0)|((ic32)&0x3ffffff); 
   8a900:	12003d21 	and	w1, w9, #0xffff
		names="b\0bl\0";
   8a904:	911f6000 	add	x0, x0, #0x7d8
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8a908:	52800017 	mov	w23, #0x0                   	// #0
   8a90c:	52800018 	mov	w24, #0x0                   	// #0
   8a910:	52800019 	mov	w25, #0x0                   	// #0
   8a914:	5280001b 	mov	w27, #0x0                   	// #0
   8a918:	5280001a 	mov	w26, #0x0                   	// #0
	uint16_t op=0, om=0, j=0;
   8a91c:	52800014 	mov	w20, #0x0                   	// #0
		op=((ic32_31)&0x1); i=((ic32_25)&1?(-1<<26):0)|((ic32)&0x3ffffff); 
   8a920:	290e8bff 	stp	wzr, w2, [sp, #116]
		args[0]=disasm_arg_labeli4; 
   8a924:	52800202 	mov	w2, #0x10                  	// #16
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8a928:	290fffff 	stp	wzr, wzr, [sp, #124]
   8a92c:	29117fff 	stp	wzr, wzr, [sp, #136]
   8a930:	29127fff 	stp	wzr, wzr, [sp, #144]
   8a934:	b9009bff 	str	wzr, [sp, #152]
		args[0]=disasm_arg_labeli4; 
   8a938:	390b03e2 	strb	w2, [sp, #704]
   8a93c:	a9435bf5 	ldp	x21, x22, [sp, #48]
   8a940:	17ffecc8 	b	85c60 <disasm+0x1c80>
		s=((ic32_31)&0x1); m=((ic32_16)&0x1f); i=((ic32_15)&1?(-1<<6):0)|((ic32_10)&0x3f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8a944:	f24000df 	tst	x6, #0x1
   8a948:	12001694 	and	w20, w20, #0x3f
   8a94c:	128007e3 	mov	w3, #0xffffffc0            	// #-64
   8a950:	1a9f1063 	csel	w3, w3, wzr, ne  // ne = any
		names="extr\0";
   8a954:	d0000041 	adrp	x1, 94000 <sd_init+0x2470>
		s=((ic32_31)&0x1); m=((ic32_16)&0x1f); i=((ic32_15)&1?(-1<<6):0)|((ic32_10)&0x3f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8a958:	12001059 	and	w25, w2, #0x1f
		names="extr\0";
   8a95c:	911a2021 	add	x1, x1, #0x688
		s=((ic32_31)&0x1); m=((ic32_16)&0x1f); i=((ic32_15)&1?(-1<<6):0)|((ic32_10)&0x3f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8a960:	1200101a 	and	w26, w0, #0x1f
		args[0]=disasm_arg_Rt; args[1]=disasm_arg_Rn; args[2]=disasm_arg_Rm; args[3]=disasm_arg_i; 
   8a964:	52812162 	mov	w2, #0x90b                 	// #2315
		s=((ic32_31)&0x1); m=((ic32_16)&0x1f); i=((ic32_15)&1?(-1<<6):0)|((ic32_10)&0x3f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8a968:	2a030280 	orr	w0, w20, w3
   8a96c:	120010a4 	and	w4, w5, #0x1f
		args[0]=disasm_arg_Rt; args[1]=disasm_arg_Rn; args[2]=disasm_arg_Rm; args[3]=disasm_arg_i; 
   8a970:	72a0e1c2 	movk	w2, #0x70e, lsl #16
		s=((ic32_31)&0x1); m=((ic32_16)&0x1f); i=((ic32_15)&1?(-1<<6):0)|((ic32_10)&0x3f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8a974:	12001d3b 	and	w27, w9, #0xff
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8a978:	52800017 	mov	w23, #0x0                   	// #0
   8a97c:	52800018 	mov	w24, #0x0                   	// #0
	uint16_t op=0, om=0, j=0;
   8a980:	52800014 	mov	w20, #0x0                   	// #0
		s=((ic32_31)&0x1); m=((ic32_16)&0x1f); i=((ic32_15)&1?(-1<<6):0)|((ic32_10)&0x3f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8a984:	290e83ff 	stp	wzr, w0, [sp, #116]
		names="extr\0";
   8a988:	911f4020 	add	x0, x1, #0x7d0
	uint16_t op=0, om=0, j=0;
   8a98c:	52800001 	mov	w1, #0x0                   	// #0
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8a990:	290fffe4 	stp	w4, wzr, [sp, #124]
   8a994:	29117fff 	stp	wzr, wzr, [sp, #136]
   8a998:	29127fff 	stp	wzr, wzr, [sp, #144]
   8a99c:	b9009bff 	str	wzr, [sp, #152]
		args[0]=disasm_arg_Rt; args[1]=disasm_arg_Rn; args[2]=disasm_arg_Rm; args[3]=disasm_arg_i; 
   8a9a0:	b902c3e2 	str	w2, [sp, #704]
   8a9a4:	a9435bf5 	ldp	x21, x22, [sp, #48]
   8a9a8:	17ffecae 	b	85c60 <disasm+0x1c80>
		names="str\0ldr\0";
   8a9ac:	d0000043 	adrp	x3, 94000 <sd_init+0x2470>
   8a9b0:	911a2063 	add	x3, x3, #0x688
		op=((ic32_22)&0x1); s=((ic32_30)&0x1); j=((ic32_10)&0xfff); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8a9b4:	1200101a 	and	w26, w0, #0x1f
		names="str\0ldr\0";
   8a9b8:	9119e060 	add	x0, x3, #0x678
		args[0]=disasm_arg_Rt; args[1]=disasm_arg_offs; args[2]=disasm_arg_XnS; args[3]=disasm_arg_j_opt; args[4]=disasm_arg_offe; 
   8a9bc:	52852163 	mov	w3, #0x290b                	// #10507
		op=((ic32_22)&0x1); s=((ic32_30)&0x1); j=((ic32_10)&0xfff); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8a9c0:	12001059 	and	w25, w2, #0x1f
		args[0]=disasm_arg_Rt; args[1]=disasm_arg_offs; args[2]=disasm_arg_XnS; args[3]=disasm_arg_j_opt; args[4]=disasm_arg_offe; 
   8a9c4:	72ab8543 	movk	w3, #0x5c2a, lsl #16
   8a9c8:	52800562 	mov	w2, #0x2b                  	// #43
		op=((ic32_22)&0x1); s=((ic32_30)&0x1); j=((ic32_10)&0xfff); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8a9cc:	120000e1 	and	w1, w7, #0x1
   8a9d0:	1200009b 	and	w27, w4, #0x1
   8a9d4:	12002e94 	and	w20, w20, #0xfff
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8a9d8:	52800017 	mov	w23, #0x0                   	// #0
   8a9dc:	52800018 	mov	w24, #0x0                   	// #0
	uint32_t i=0;
   8a9e0:	290effff 	stp	wzr, wzr, [sp, #116]
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8a9e4:	290fffff 	stp	wzr, wzr, [sp, #124]
   8a9e8:	29117fff 	stp	wzr, wzr, [sp, #136]
   8a9ec:	29127fff 	stp	wzr, wzr, [sp, #144]
   8a9f0:	b9009bff 	str	wzr, [sp, #152]
		args[0]=disasm_arg_Rt; args[1]=disasm_arg_offs; args[2]=disasm_arg_XnS; args[3]=disasm_arg_j_opt; args[4]=disasm_arg_offe; 
   8a9f4:	b902c3e3 	str	w3, [sp, #704]
   8a9f8:	390b13e2 	strb	w2, [sp, #708]
   8a9fc:	a9435bf5 	ldp	x21, x22, [sp, #48]
   8aa00:	17ffec98 	b	85c60 <disasm+0x1c80>
		op=((ic32_18)&0x30)|((ic32_12)&0xf); s=((ic32_30)&0x1); d=((ic32_16)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8aa04:	53127c01 	lsr	w1, w0, #18
		names="ldadd\0ldclr\0ldeor\0ldset\0ldsmax\0ldsmin\0ldumax\0ldumin\0swp\0?\0?\0?\0?\0?\0?\0?\0ldaddl\0ldclrl\0ldeorl\0ldsetl\0ldsmaxl\0ldsminl\0ldumaxl\0lduminl\0swpl\0?\0?\0?\0?\0?\0?\0?\0ldadda\0ldclra\0ldeora\0ldseta\0ldsmaxa\0ldsmina\0ldumaxa\0ldumina\0swpa\0?\0?\0?\0?\0?\0?\0?\0ldaddal\0ldclral\0ldeoral\0ldsetal\0ldsmaxal\0ldsminal\0ldumaxal\0lduminal\0swpal\0";
   8aa08:	d0000043 	adrp	x3, 94000 <sd_init+0x2470>
   8aa0c:	911a2063 	add	x3, x3, #0x688
		op=((ic32_18)&0x30)|((ic32_12)&0xf); s=((ic32_30)&0x1); d=((ic32_16)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8aa10:	121c0421 	and	w1, w1, #0x30
   8aa14:	12000d4a 	and	w10, w10, #0xf
   8aa18:	1200101a 	and	w26, w0, #0x1f
		names="ldadd\0ldclr\0ldeor\0ldset\0ldsmax\0ldsmin\0ldumax\0ldumin\0swp\0?\0?\0?\0?\0?\0?\0?\0ldaddl\0ldclrl\0ldeorl\0ldsetl\0ldsmaxl\0ldsminl\0ldumaxl\0lduminl\0swpl\0?\0?\0?\0?\0?\0?\0?\0ldadda\0ldclra\0ldeora\0ldseta\0ldsmaxa\0ldsmina\0ldumaxa\0ldumina\0swpa\0?\0?\0?\0?\0?\0?\0?\0ldaddal\0ldclral\0ldeoral\0ldsetal\0ldsmaxal\0ldsminal\0ldumaxal\0lduminal\0swpal\0";
   8aa1c:	911a8060 	add	x0, x3, #0x6a0
		args[0]=disasm_arg_Rd; args[1]=disasm_arg_Rt; args[2]=disasm_arg_offs; args[3]=disasm_arg_XnS; args[4]=disasm_arg_offe; 
   8aa20:	528169e3 	mov	w3, #0xb4f                 	// #2895
		op=((ic32_18)&0x30)|((ic32_12)&0xf); s=((ic32_30)&0x1); d=((ic32_16)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8aa24:	1200009b 	and	w27, w4, #0x1
   8aa28:	12001059 	and	w25, w2, #0x1f
   8aa2c:	120010a4 	and	w4, w5, #0x1f
		args[0]=disasm_arg_Rd; args[1]=disasm_arg_Rt; args[2]=disasm_arg_offs; args[3]=disasm_arg_XnS; args[4]=disasm_arg_offe; 
   8aa30:	72a54523 	movk	w3, #0x2a29, lsl #16
   8aa34:	52800562 	mov	w2, #0x2b                  	// #43
		op=((ic32_18)&0x30)|((ic32_12)&0xf); s=((ic32_30)&0x1); d=((ic32_16)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8aa38:	2a0a0021 	orr	w1, w1, w10
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8aa3c:	52800017 	mov	w23, #0x0                   	// #0
   8aa40:	52800018 	mov	w24, #0x0                   	// #0
	uint16_t op=0, om=0, j=0;
   8aa44:	52800014 	mov	w20, #0x0                   	// #0
	uint32_t i=0;
   8aa48:	290effff 	stp	wzr, wzr, [sp, #116]
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8aa4c:	290fffff 	stp	wzr, wzr, [sp, #124]
   8aa50:	29117fe4 	stp	w4, wzr, [sp, #136]
   8aa54:	29127fff 	stp	wzr, wzr, [sp, #144]
   8aa58:	b9009bff 	str	wzr, [sp, #152]
		args[0]=disasm_arg_Rd; args[1]=disasm_arg_Rt; args[2]=disasm_arg_offs; args[3]=disasm_arg_XnS; args[4]=disasm_arg_offe; 
   8aa5c:	b902c3e3 	str	w3, [sp, #704]
   8aa60:	390b13e2 	strb	w2, [sp, #708]
   8aa64:	a9435bf5 	ldp	x21, x22, [sp, #48]
   8aa68:	17ffec7e 	b	85c60 <disasm+0x1c80>
		names="str\0ldr\0";
   8aa6c:	d0000043 	adrp	x3, 94000 <sd_init+0x2470>
   8aa70:	911a2063 	add	x3, x3, #0x688
		op=((ic32_22)&0x1); s=((ic32_30)&0x1); m=((ic32_16)&0x1f); o=((ic32_13)&0x7); j=((ic32_12)&0x1); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8aa74:	1200009b 	and	w27, w4, #0x1
   8aa78:	1200101a 	and	w26, w0, #0x1f
   8aa7c:	120010a4 	and	w4, w5, #0x1f
		names="str\0ldr\0";
   8aa80:	9119e060 	add	x0, x3, #0x678
		args[0]=disasm_arg_Rt; args[1]=disasm_arg_offs; args[2]=disasm_arg_XnS; args[3]=disasm_arg_Rom; args[4]=disasm_arg_amountjs; args[5]=disasm_arg_offe; 
   8aa84:	52852163 	mov	w3, #0x290b                	// #10507
		op=((ic32_22)&0x1); s=((ic32_30)&0x1); m=((ic32_16)&0x1f); o=((ic32_13)&0x7); j=((ic32_12)&0x1); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8aa88:	12001059 	and	w25, w2, #0x1f
		args[0]=disasm_arg_Rt; args[1]=disasm_arg_offs; args[2]=disasm_arg_XnS; args[3]=disasm_arg_Rom; args[4]=disasm_arg_amountjs; args[5]=disasm_arg_offe; 
   8aa8c:	72aba543 	movk	w3, #0x5d2a, lsl #16
   8aa90:	52856c02 	mov	w2, #0x2b60                	// #11104
		op=((ic32_22)&0x1); s=((ic32_30)&0x1); m=((ic32_16)&0x1f); o=((ic32_13)&0x7); j=((ic32_12)&0x1); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8aa94:	120000e1 	and	w1, w7, #0x1
   8aa98:	12000154 	and	w20, w10, #0x1
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8aa9c:	52800017 	mov	w23, #0x0                   	// #0
   8aaa0:	52800018 	mov	w24, #0x0                   	// #0
	uint32_t i=0;
   8aaa4:	290effff 	stp	wzr, wzr, [sp, #116]
		op=((ic32_22)&0x1); s=((ic32_30)&0x1); m=((ic32_16)&0x1f); o=((ic32_13)&0x7); j=((ic32_12)&0x1); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8aaa8:	b9007fe4 	str	w4, [sp, #124]
   8aaac:	12000964 	and	w4, w11, #0x7
   8aab0:	b90083e4 	str	w4, [sp, #128]
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8aab4:	29117fff 	stp	wzr, wzr, [sp, #136]
   8aab8:	29127fff 	stp	wzr, wzr, [sp, #144]
   8aabc:	b9009bff 	str	wzr, [sp, #152]
		args[0]=disasm_arg_Rt; args[1]=disasm_arg_offs; args[2]=disasm_arg_XnS; args[3]=disasm_arg_Rom; args[4]=disasm_arg_amountjs; args[5]=disasm_arg_offe; 
   8aac0:	b902c3e3 	str	w3, [sp, #704]
   8aac4:	79058be2 	strh	w2, [sp, #708]
   8aac8:	a9435bf5 	ldp	x21, x22, [sp, #48]
   8aacc:	17ffec65 	b	85c60 <disasm+0x1c80>
		op=((ic32_22)&0x1); s=((ic32_30)&0x1); i=((ic32_20)&1?(-1<<9):0)|((ic32_12)&0x1ff); p=((ic32_11)&0x1); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8aad0:	f240011f 	tst	x8, #0x1
   8aad4:	1200214a 	and	w10, w10, #0x1ff
   8aad8:	12803fe5 	mov	w5, #0xfffffe00            	// #-512
   8aadc:	1a9f10a5 	csel	w5, w5, wzr, ne  // ne = any
		names="str\0ldr\0";
   8aae0:	d0000043 	adrp	x3, 94000 <sd_init+0x2470>
		op=((ic32_22)&0x1); s=((ic32_30)&0x1); i=((ic32_20)&1?(-1<<9):0)|((ic32_12)&0x1ff); p=((ic32_11)&0x1); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8aae4:	1200101a 	and	w26, w0, #0x1f
		names="str\0ldr\0";
   8aae8:	911a2063 	add	x3, x3, #0x688
		op=((ic32_22)&0x1); s=((ic32_30)&0x1); i=((ic32_20)&1?(-1<<9):0)|((ic32_12)&0x1ff); p=((ic32_11)&0x1); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8aaec:	2a050140 	orr	w0, w10, w5
   8aaf0:	290e83ff 	stp	wzr, w0, [sp, #116]
		names="str\0ldr\0";
   8aaf4:	9119e060 	add	x0, x3, #0x678
		args[0]=disasm_arg_Rt; args[1]=disasm_arg_offs; args[2]=disasm_arg_XnS; args[3]=disasm_arg_i_opt; args[4]=disasm_arg_offe; 
   8aaf8:	52852163 	mov	w3, #0x290b                	// #10507
		op=((ic32_22)&0x1); s=((ic32_30)&0x1); i=((ic32_20)&1?(-1<<9):0)|((ic32_12)&0x1ff); p=((ic32_11)&0x1); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8aafc:	1200009b 	and	w27, w4, #0x1
   8ab00:	12001059 	and	w25, w2, #0x1f
   8ab04:	120001a4 	and	w4, w13, #0x1
		args[0]=disasm_arg_Rt; args[1]=disasm_arg_offs; args[2]=disasm_arg_XnS; args[3]=disasm_arg_i_opt; args[4]=disasm_arg_offe; 
   8ab08:	52800562 	mov	w2, #0x2b                  	// #43
   8ab0c:	72a22543 	movk	w3, #0x112a, lsl #16
		op=((ic32_22)&0x1); s=((ic32_30)&0x1); i=((ic32_20)&1?(-1<<9):0)|((ic32_12)&0x1ff); p=((ic32_11)&0x1); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8ab10:	120000e1 	and	w1, w7, #0x1
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8ab14:	52800017 	mov	w23, #0x0                   	// #0
   8ab18:	52800018 	mov	w24, #0x0                   	// #0
	uint16_t op=0, om=0, j=0;
   8ab1c:	52800014 	mov	w20, #0x0                   	// #0
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8ab20:	290fffff 	stp	wzr, wzr, [sp, #124]
   8ab24:	29117fff 	stp	wzr, wzr, [sp, #136]
   8ab28:	29127fe4 	stp	w4, wzr, [sp, #144]
   8ab2c:	b9009bff 	str	wzr, [sp, #152]
		args[0]=disasm_arg_Rt; args[1]=disasm_arg_offs; args[2]=disasm_arg_XnS; args[3]=disasm_arg_i_opt; args[4]=disasm_arg_offe; 
   8ab30:	b902c3e3 	str	w3, [sp, #704]
   8ab34:	390b13e2 	strb	w2, [sp, #708]
   8ab38:	a9435bf5 	ldp	x21, x22, [sp, #48]
   8ab3c:	17ffec49 	b	85c60 <disasm+0x1c80>
		op=((ic32_21)&0x2)|((ic32_11)&0x1); s=((ic32_30)&0x1); i=((ic32_20)&1?(-1<<9):0)|((ic32_12)&0x1ff); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8ab40:	f240011f 	tst	x8, #0x1
   8ab44:	1200214a 	and	w10, w10, #0x1ff
   8ab48:	12803fe5 	mov	w5, #0xfffffe00            	// #-512
   8ab4c:	1a9f10a5 	csel	w5, w5, wzr, ne  // ne = any
		names="stur\0sttr\0ldur\0ldtr\0";
   8ab50:	d0000043 	adrp	x3, 94000 <sd_init+0x2470>
		op=((ic32_21)&0x2)|((ic32_11)&0x1); s=((ic32_30)&0x1); i=((ic32_20)&1?(-1<<9):0)|((ic32_12)&0x1ff); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8ab54:	1200101a 	and	w26, w0, #0x1f
		names="stur\0sttr\0ldur\0ldtr\0";
   8ab58:	911a2063 	add	x3, x3, #0x688
		op=((ic32_21)&0x2)|((ic32_11)&0x1); s=((ic32_30)&0x1); i=((ic32_20)&1?(-1<<9):0)|((ic32_12)&0x1ff); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8ab5c:	2a050140 	orr	w0, w10, w5
   8ab60:	121f0181 	and	w1, w12, #0x2
   8ab64:	120001ad 	and	w13, w13, #0x1
   8ab68:	290e83ff 	stp	wzr, w0, [sp, #116]
		names="stur\0sttr\0ldur\0ldtr\0";
   8ab6c:	911a2060 	add	x0, x3, #0x688
		args[0]=disasm_arg_Rt; args[1]=disasm_arg_offs; args[2]=disasm_arg_XnS; args[3]=disasm_arg_i_opt; args[4]=disasm_arg_offe; 
   8ab70:	52852163 	mov	w3, #0x290b                	// #10507
		op=((ic32_21)&0x2)|((ic32_11)&0x1); s=((ic32_30)&0x1); i=((ic32_20)&1?(-1<<9):0)|((ic32_12)&0x1ff); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8ab74:	12001059 	and	w25, w2, #0x1f
		args[0]=disasm_arg_Rt; args[1]=disasm_arg_offs; args[2]=disasm_arg_XnS; args[3]=disasm_arg_i_opt; args[4]=disasm_arg_offe; 
   8ab78:	72a22543 	movk	w3, #0x112a, lsl #16
   8ab7c:	52800562 	mov	w2, #0x2b                  	// #43
		op=((ic32_21)&0x2)|((ic32_11)&0x1); s=((ic32_30)&0x1); i=((ic32_20)&1?(-1<<9):0)|((ic32_12)&0x1ff); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8ab80:	2a0d0021 	orr	w1, w1, w13
   8ab84:	1200009b 	and	w27, w4, #0x1
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8ab88:	52800017 	mov	w23, #0x0                   	// #0
   8ab8c:	52800018 	mov	w24, #0x0                   	// #0
	uint16_t op=0, om=0, j=0;
   8ab90:	52800014 	mov	w20, #0x0                   	// #0
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8ab94:	290fffff 	stp	wzr, wzr, [sp, #124]
   8ab98:	29117fff 	stp	wzr, wzr, [sp, #136]
   8ab9c:	29127fff 	stp	wzr, wzr, [sp, #144]
   8aba0:	b9009bff 	str	wzr, [sp, #152]
		args[0]=disasm_arg_Rt; args[1]=disasm_arg_offs; args[2]=disasm_arg_XnS; args[3]=disasm_arg_i_opt; args[4]=disasm_arg_offe; 
   8aba4:	b902c3e3 	str	w3, [sp, #704]
   8aba8:	390b13e2 	strb	w2, [sp, #708]
   8abac:	a9435bf5 	ldp	x21, x22, [sp, #48]
   8abb0:	17ffec2c 	b	85c60 <disasm+0x1c80>
		op=((ic32_22)&0x1); s=((ic32_30)&0x1); i=((ic32_20)&1?(-1<<9):0)|((ic32_12)&0x1ff); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8abb4:	f240011f 	tst	x8, #0x1
   8abb8:	1200214a 	and	w10, w10, #0x1ff
   8abbc:	12803fe5 	mov	w5, #0xfffffe00            	// #-512
   8abc0:	1a9f10a5 	csel	w5, w5, wzr, ne  // ne = any
		names="str\0ldr\0";
   8abc4:	d0000043 	adrp	x3, 94000 <sd_init+0x2470>
		op=((ic32_22)&0x1); s=((ic32_30)&0x1); i=((ic32_20)&1?(-1<<9):0)|((ic32_12)&0x1ff); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8abc8:	1200101a 	and	w26, w0, #0x1f
		names="str\0ldr\0";
   8abcc:	911a2063 	add	x3, x3, #0x688
		op=((ic32_22)&0x1); s=((ic32_30)&0x1); i=((ic32_20)&1?(-1<<9):0)|((ic32_12)&0x1ff); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8abd0:	2a050140 	orr	w0, w10, w5
   8abd4:	290e83ff 	stp	wzr, w0, [sp, #116]
		names="str\0ldr\0";
   8abd8:	9119e060 	add	x0, x3, #0x678
		args[0]=disasm_arg_Rt; args[1]=disasm_arg_offs; args[2]=disasm_arg_XnS; args[3]=disasm_arg_offe; args[4]=disasm_arg_i_opt; 
   8abdc:	52852163 	mov	w3, #0x290b                	// #10507
		op=((ic32_22)&0x1); s=((ic32_30)&0x1); i=((ic32_20)&1?(-1<<9):0)|((ic32_12)&0x1ff); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8abe0:	12001059 	and	w25, w2, #0x1f
		args[0]=disasm_arg_Rt; args[1]=disasm_arg_offs; args[2]=disasm_arg_XnS; args[3]=disasm_arg_offe; args[4]=disasm_arg_i_opt; 
   8abe4:	72a56543 	movk	w3, #0x2b2a, lsl #16
   8abe8:	52800222 	mov	w2, #0x11                  	// #17
		op=((ic32_22)&0x1); s=((ic32_30)&0x1); i=((ic32_20)&1?(-1<<9):0)|((ic32_12)&0x1ff); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8abec:	120000e1 	and	w1, w7, #0x1
   8abf0:	1200009b 	and	w27, w4, #0x1
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8abf4:	52800017 	mov	w23, #0x0                   	// #0
   8abf8:	52800018 	mov	w24, #0x0                   	// #0
	uint16_t op=0, om=0, j=0;
   8abfc:	52800014 	mov	w20, #0x0                   	// #0
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8ac00:	290fffff 	stp	wzr, wzr, [sp, #124]
   8ac04:	29117fff 	stp	wzr, wzr, [sp, #136]
   8ac08:	29127fff 	stp	wzr, wzr, [sp, #144]
   8ac0c:	b9009bff 	str	wzr, [sp, #152]
		args[0]=disasm_arg_Rt; args[1]=disasm_arg_offs; args[2]=disasm_arg_XnS; args[3]=disasm_arg_offe; args[4]=disasm_arg_i_opt; 
   8ac10:	b902c3e3 	str	w3, [sp, #704]
   8ac14:	390b13e2 	strb	w2, [sp, #708]
   8ac18:	a9435bf5 	ldp	x21, x22, [sp, #48]
   8ac1c:	17ffec11 	b	85c60 <disasm+0x1c80>
		op=((ic32_21)&0x6)|((ic32_15)&0x1); s=((ic32_30)&0x1); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8ac20:	121f0581 	and	w1, w12, #0x6
   8ac24:	120000c6 	and	w6, w6, #0x1
		names="?\0?\0ldxr\0ldaxr\0stllr\0stlr\0ldlar\0ldar\0";
   8ac28:	d0000043 	adrp	x3, 94000 <sd_init+0x2470>
		op=((ic32_21)&0x6)|((ic32_15)&0x1); s=((ic32_30)&0x1); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8ac2c:	12001059 	and	w25, w2, #0x1f
		names="?\0?\0ldxr\0ldaxr\0stllr\0stlr\0ldlar\0ldar\0";
   8ac30:	911a2063 	add	x3, x3, #0x688
		args[0]=disasm_arg_Rt; args[1]=disasm_arg_offs; args[2]=disasm_arg_XnS; args[3]=disasm_arg_offe; 
   8ac34:	52852162 	mov	w2, #0x290b                	// #10507
		op=((ic32_21)&0x6)|((ic32_15)&0x1); s=((ic32_30)&0x1); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8ac38:	1200101a 	and	w26, w0, #0x1f
		args[0]=disasm_arg_Rt; args[1]=disasm_arg_offs; args[2]=disasm_arg_XnS; args[3]=disasm_arg_offe; 
   8ac3c:	72a56542 	movk	w2, #0x2b2a, lsl #16
		op=((ic32_21)&0x6)|((ic32_15)&0x1); s=((ic32_30)&0x1); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8ac40:	2a060021 	orr	w1, w1, w6
   8ac44:	1200009b 	and	w27, w4, #0x1
		names="?\0?\0ldxr\0ldaxr\0stllr\0stlr\0ldlar\0ldar\0";
   8ac48:	91194060 	add	x0, x3, #0x650
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8ac4c:	52800017 	mov	w23, #0x0                   	// #0
   8ac50:	52800018 	mov	w24, #0x0                   	// #0
	uint16_t op=0, om=0, j=0;
   8ac54:	52800014 	mov	w20, #0x0                   	// #0
	uint32_t i=0;
   8ac58:	290effff 	stp	wzr, wzr, [sp, #116]
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8ac5c:	290fffff 	stp	wzr, wzr, [sp, #124]
   8ac60:	29117fff 	stp	wzr, wzr, [sp, #136]
   8ac64:	29127fff 	stp	wzr, wzr, [sp, #144]
   8ac68:	b9009bff 	str	wzr, [sp, #152]
		args[0]=disasm_arg_Rt; args[1]=disasm_arg_offs; args[2]=disasm_arg_XnS; args[3]=disasm_arg_offe; 
   8ac6c:	b902c3e2 	str	w2, [sp, #704]
   8ac70:	a9435bf5 	ldp	x21, x22, [sp, #48]
   8ac74:	17ffebfb 	b	85c60 <disasm+0x1c80>
		names="cas\0casl\0casa\0casal\0";
   8ac78:	d0000043 	adrp	x3, 94000 <sd_init+0x2470>
   8ac7c:	911a2063 	add	x3, x3, #0x688
		op=((ic32_21)&0x2)|((ic32_15)&0x1); s=((ic32_30)&0x1); d=((ic32_16)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8ac80:	121f0181 	and	w1, w12, #0x2
   8ac84:	120000c6 	and	w6, w6, #0x1
   8ac88:	1200101a 	and	w26, w0, #0x1f
		names="cas\0casl\0casa\0casal\0";
   8ac8c:	9118e060 	add	x0, x3, #0x638
		args[0]=disasm_arg_Rd; args[1]=disasm_arg_Rt; args[2]=disasm_arg_offs; args[3]=disasm_arg_XnS; args[4]=disasm_arg_offe; 
   8ac90:	528169e3 	mov	w3, #0xb4f                 	// #2895
		op=((ic32_21)&0x2)|((ic32_15)&0x1); s=((ic32_30)&0x1); d=((ic32_16)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8ac94:	1200009b 	and	w27, w4, #0x1
   8ac98:	12001059 	and	w25, w2, #0x1f
   8ac9c:	120010a4 	and	w4, w5, #0x1f
		args[0]=disasm_arg_Rd; args[1]=disasm_arg_Rt; args[2]=disasm_arg_offs; args[3]=disasm_arg_XnS; args[4]=disasm_arg_offe; 
   8aca0:	72a54523 	movk	w3, #0x2a29, lsl #16
   8aca4:	52800562 	mov	w2, #0x2b                  	// #43
		op=((ic32_21)&0x2)|((ic32_15)&0x1); s=((ic32_30)&0x1); d=((ic32_16)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8aca8:	2a060021 	orr	w1, w1, w6
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8acac:	52800017 	mov	w23, #0x0                   	// #0
   8acb0:	52800018 	mov	w24, #0x0                   	// #0
	uint16_t op=0, om=0, j=0;
   8acb4:	52800014 	mov	w20, #0x0                   	// #0
	uint32_t i=0;
   8acb8:	290effff 	stp	wzr, wzr, [sp, #116]
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8acbc:	290fffff 	stp	wzr, wzr, [sp, #124]
   8acc0:	29117fe4 	stp	w4, wzr, [sp, #136]
   8acc4:	29127fff 	stp	wzr, wzr, [sp, #144]
   8acc8:	b9009bff 	str	wzr, [sp, #152]
		args[0]=disasm_arg_Rd; args[1]=disasm_arg_Rt; args[2]=disasm_arg_offs; args[3]=disasm_arg_XnS; args[4]=disasm_arg_offe; 
   8accc:	b902c3e3 	str	w3, [sp, #704]
   8acd0:	390b13e2 	strb	w2, [sp, #708]
   8acd4:	a9435bf5 	ldp	x21, x22, [sp, #48]
   8acd8:	17ffebe2 	b	85c60 <disasm+0x1c80>
		names="ldxp\0ldaxp\0";
   8acdc:	d0000043 	adrp	x3, 94000 <sd_init+0x2470>
   8ace0:	911a2063 	add	x3, x3, #0x688
		op=((ic32_15)&0x1); s=((ic32_30)&0x1); m=((ic32_10)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8ace4:	1200101a 	and	w26, w0, #0x1f
		names="ldxp\0ldaxp\0";
   8ace8:	9118a060 	add	x0, x3, #0x628
		args[0]=disasm_arg_Rt; args[1]=disasm_arg_Rm; args[2]=disasm_arg_offs; args[3]=disasm_arg_XnS; args[4]=disasm_arg_offe; 
   8acec:	5281c163 	mov	w3, #0xe0b                 	// #3595
		op=((ic32_15)&0x1); s=((ic32_30)&0x1); m=((ic32_10)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8acf0:	1200009b 	and	w27, w4, #0x1
   8acf4:	12001059 	and	w25, w2, #0x1f
   8acf8:	12001284 	and	w4, w20, #0x1f
		args[0]=disasm_arg_Rt; args[1]=disasm_arg_Rm; args[2]=disasm_arg_offs; args[3]=disasm_arg_XnS; args[4]=disasm_arg_offe; 
   8acfc:	72a54523 	movk	w3, #0x2a29, lsl #16
   8ad00:	52800562 	mov	w2, #0x2b                  	// #43
		op=((ic32_15)&0x1); s=((ic32_30)&0x1); m=((ic32_10)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8ad04:	120000c1 	and	w1, w6, #0x1
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8ad08:	52800017 	mov	w23, #0x0                   	// #0
   8ad0c:	52800018 	mov	w24, #0x0                   	// #0
	uint16_t op=0, om=0, j=0;
   8ad10:	52800014 	mov	w20, #0x0                   	// #0
	uint32_t i=0;
   8ad14:	290effff 	stp	wzr, wzr, [sp, #116]
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8ad18:	290fffe4 	stp	w4, wzr, [sp, #124]
   8ad1c:	29117fff 	stp	wzr, wzr, [sp, #136]
   8ad20:	29127fff 	stp	wzr, wzr, [sp, #144]
   8ad24:	b9009bff 	str	wzr, [sp, #152]
		args[0]=disasm_arg_Rt; args[1]=disasm_arg_Rm; args[2]=disasm_arg_offs; args[3]=disasm_arg_XnS; args[4]=disasm_arg_offe; 
   8ad28:	b902c3e3 	str	w3, [sp, #704]
   8ad2c:	390b13e2 	strb	w2, [sp, #708]
   8ad30:	a9435bf5 	ldp	x21, x22, [sp, #48]
   8ad34:	17ffebcb 	b	85c60 <disasm+0x1c80>
		names="stxp\0stlxp\0";
   8ad38:	d0000043 	adrp	x3, 94000 <sd_init+0x2470>
   8ad3c:	911a2063 	add	x3, x3, #0x688
		op=((ic32_15)&0x1); s=((ic32_30)&0x1); d=((ic32_16)&0x1f); m=((ic32_10)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8ad40:	1200009b 	and	w27, w4, #0x1
   8ad44:	1200101a 	and	w26, w0, #0x1f
   8ad48:	120010a4 	and	w4, w5, #0x1f
		names="stxp\0stlxp\0";
   8ad4c:	91186060 	add	x0, x3, #0x618
		args[0]=disasm_arg_Wd; args[1]=disasm_arg_Rt; args[2]=disasm_arg_Rm; args[3]=disasm_arg_offs; args[4]=disasm_arg_XnS; args[5]=disasm_arg_offe; 
   8ad50:	52816a43 	mov	w3, #0xb52                 	// #2898
		op=((ic32_15)&0x1); s=((ic32_30)&0x1); d=((ic32_16)&0x1f); m=((ic32_10)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8ad54:	12001059 	and	w25, w2, #0x1f
		args[0]=disasm_arg_Wd; args[1]=disasm_arg_Rt; args[2]=disasm_arg_Rm; args[3]=disasm_arg_offs; args[4]=disasm_arg_XnS; args[5]=disasm_arg_offe; 
   8ad58:	72a521c3 	movk	w3, #0x290e, lsl #16
   8ad5c:	52856542 	mov	w2, #0x2b2a                	// #11050
		op=((ic32_15)&0x1); s=((ic32_30)&0x1); d=((ic32_16)&0x1f); m=((ic32_10)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8ad60:	120000c1 	and	w1, w6, #0x1
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8ad64:	52800017 	mov	w23, #0x0                   	// #0
   8ad68:	52800018 	mov	w24, #0x0                   	// #0
	uint32_t i=0;
   8ad6c:	290effff 	stp	wzr, wzr, [sp, #116]
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8ad70:	b90083ff 	str	wzr, [sp, #128]
   8ad74:	29117fe4 	stp	w4, wzr, [sp, #136]
		op=((ic32_15)&0x1); s=((ic32_30)&0x1); d=((ic32_16)&0x1f); m=((ic32_10)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8ad78:	12001284 	and	w4, w20, #0x1f
	uint16_t op=0, om=0, j=0;
   8ad7c:	52800014 	mov	w20, #0x0                   	// #0
		op=((ic32_15)&0x1); s=((ic32_30)&0x1); d=((ic32_16)&0x1f); m=((ic32_10)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8ad80:	b9007fe4 	str	w4, [sp, #124]
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8ad84:	29127fff 	stp	wzr, wzr, [sp, #144]
   8ad88:	b9009bff 	str	wzr, [sp, #152]
		args[0]=disasm_arg_Wd; args[1]=disasm_arg_Rt; args[2]=disasm_arg_Rm; args[3]=disasm_arg_offs; args[4]=disasm_arg_XnS; args[5]=disasm_arg_offe; 
   8ad8c:	b902c3e3 	str	w3, [sp, #704]
   8ad90:	79058be2 	strh	w2, [sp, #708]
   8ad94:	a9435bf5 	ldp	x21, x22, [sp, #48]
   8ad98:	17ffebb2 	b	85c60 <disasm+0x1c80>
		names="prfm\0";
   8ad9c:	d0000041 	adrp	x1, 94000 <sd_init+0x2470>
		args[0]=disasm_arg_prf_op; args[1]=disasm_arg_offs; args[2]=disasm_arg_XnS; args[3]=disasm_arg_j_opt; args[4]=disasm_arg_offe; 
   8ada0:	52852aa3 	mov	w3, #0x2955                	// #10581
		names="prfm\0";
   8ada4:	911a2021 	add	x1, x1, #0x688
		j=((ic32_10)&0xfff); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8ada8:	12001059 	and	w25, w2, #0x1f
   8adac:	1200101a 	and	w26, w0, #0x1f
		args[0]=disasm_arg_prf_op; args[1]=disasm_arg_offs; args[2]=disasm_arg_XnS; args[3]=disasm_arg_j_opt; args[4]=disasm_arg_offe; 
   8adb0:	72ab8543 	movk	w3, #0x5c2a, lsl #16
		names="prfm\0";
   8adb4:	91182020 	add	x0, x1, #0x608
		args[0]=disasm_arg_prf_op; args[1]=disasm_arg_offs; args[2]=disasm_arg_XnS; args[3]=disasm_arg_j_opt; args[4]=disasm_arg_offe; 
   8adb8:	52800562 	mov	w2, #0x2b                  	// #43
		j=((ic32_10)&0xfff); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8adbc:	12002e94 	and	w20, w20, #0xfff
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8adc0:	52800017 	mov	w23, #0x0                   	// #0
   8adc4:	52800018 	mov	w24, #0x0                   	// #0
   8adc8:	5280001b 	mov	w27, #0x0                   	// #0
	uint16_t op=0, om=0, j=0;
   8adcc:	52800001 	mov	w1, #0x0                   	// #0
	uint32_t i=0;
   8add0:	290effff 	stp	wzr, wzr, [sp, #116]
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8add4:	290fffff 	stp	wzr, wzr, [sp, #124]
   8add8:	29117fff 	stp	wzr, wzr, [sp, #136]
   8addc:	29127fff 	stp	wzr, wzr, [sp, #144]
   8ade0:	b9009bff 	str	wzr, [sp, #152]
		args[0]=disasm_arg_prf_op; args[1]=disasm_arg_offs; args[2]=disasm_arg_XnS; args[3]=disasm_arg_j_opt; args[4]=disasm_arg_offe; 
   8ade4:	b902c3e3 	str	w3, [sp, #704]
   8ade8:	390b13e2 	strb	w2, [sp, #708]
   8adec:	a9435bf5 	ldp	x21, x22, [sp, #48]
   8adf0:	17ffeb9c 	b	85c60 <disasm+0x1c80>
		m=((ic32_16)&0x1f); o=((ic32_13)&0x7); j=((ic32_12)&0x1); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8adf4:	120010a3 	and	w3, w5, #0x1f
   8adf8:	b9007fe3 	str	w3, [sp, #124]
   8adfc:	12000963 	and	w3, w11, #0x7
		names="prfm\0";
   8ae00:	d0000041 	adrp	x1, 94000 <sd_init+0x2470>
   8ae04:	911a2021 	add	x1, x1, #0x688
		m=((ic32_16)&0x1f); o=((ic32_13)&0x7); j=((ic32_12)&0x1); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8ae08:	b90083e3 	str	w3, [sp, #128]
		args[0]=disasm_arg_prf_op; args[1]=disasm_arg_offs; args[2]=disasm_arg_XnS; args[3]=disasm_arg_Rom; args[4]=disasm_arg_amountj3; args[5]=disasm_arg_offe; 
   8ae0c:	52852aa3 	mov	w3, #0x2955                	// #10581
		m=((ic32_16)&0x1f); o=((ic32_13)&0x7); j=((ic32_12)&0x1); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8ae10:	12001059 	and	w25, w2, #0x1f
   8ae14:	1200101a 	and	w26, w0, #0x1f
		args[0]=disasm_arg_prf_op; args[1]=disasm_arg_offs; args[2]=disasm_arg_XnS; args[3]=disasm_arg_Rom; args[4]=disasm_arg_amountj3; args[5]=disasm_arg_offe; 
   8ae18:	52856c42 	mov	w2, #0x2b62                	// #11106
		names="prfm\0";
   8ae1c:	91182020 	add	x0, x1, #0x608
		args[0]=disasm_arg_prf_op; args[1]=disasm_arg_offs; args[2]=disasm_arg_XnS; args[3]=disasm_arg_Rom; args[4]=disasm_arg_amountj3; args[5]=disasm_arg_offe; 
   8ae20:	72aba543 	movk	w3, #0x5d2a, lsl #16
		m=((ic32_16)&0x1f); o=((ic32_13)&0x7); j=((ic32_12)&0x1); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8ae24:	12000154 	and	w20, w10, #0x1
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8ae28:	52800017 	mov	w23, #0x0                   	// #0
   8ae2c:	52800018 	mov	w24, #0x0                   	// #0
   8ae30:	5280001b 	mov	w27, #0x0                   	// #0
	uint16_t op=0, om=0, j=0;
   8ae34:	52800001 	mov	w1, #0x0                   	// #0
	uint32_t i=0;
   8ae38:	290effff 	stp	wzr, wzr, [sp, #116]
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8ae3c:	29117fff 	stp	wzr, wzr, [sp, #136]
   8ae40:	29127fff 	stp	wzr, wzr, [sp, #144]
   8ae44:	b9009bff 	str	wzr, [sp, #152]
		args[0]=disasm_arg_prf_op; args[1]=disasm_arg_offs; args[2]=disasm_arg_XnS; args[3]=disasm_arg_Rom; args[4]=disasm_arg_amountj3; args[5]=disasm_arg_offe; 
   8ae48:	b902c3e3 	str	w3, [sp, #704]
   8ae4c:	79058be2 	strh	w2, [sp, #708]
   8ae50:	a9435bf5 	ldp	x21, x22, [sp, #48]
   8ae54:	17ffeb83 	b	85c60 <disasm+0x1c80>
		i=((ic32_20)&1?(-1<<9):0)|((ic32_12)&0x1ff); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8ae58:	f240011f 	tst	x8, #0x1
   8ae5c:	1200214a 	and	w10, w10, #0x1ff
   8ae60:	12803fe3 	mov	w3, #0xfffffe00            	// #-512
   8ae64:	1a9f1063 	csel	w3, w3, wzr, ne  // ne = any
		names="prfum\0";
   8ae68:	d0000041 	adrp	x1, 94000 <sd_init+0x2470>
		i=((ic32_20)&1?(-1<<9):0)|((ic32_12)&0x1ff); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8ae6c:	1200101a 	and	w26, w0, #0x1f
		names="prfum\0";
   8ae70:	911a2021 	add	x1, x1, #0x688
		i=((ic32_20)&1?(-1<<9):0)|((ic32_12)&0x1ff); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8ae74:	2a030140 	orr	w0, w10, w3
   8ae78:	290e83ff 	stp	wzr, w0, [sp, #116]
		names="prfum\0";
   8ae7c:	91184020 	add	x0, x1, #0x610
		args[0]=disasm_arg_prf_op; args[1]=disasm_arg_offs; args[2]=disasm_arg_XnS; args[3]=disasm_arg_i_opt; args[4]=disasm_arg_offe; 
   8ae80:	52852aa1 	mov	w1, #0x2955                	// #10581
		i=((ic32_20)&1?(-1<<9):0)|((ic32_12)&0x1ff); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8ae84:	12001059 	and	w25, w2, #0x1f
		args[0]=disasm_arg_prf_op; args[1]=disasm_arg_offs; args[2]=disasm_arg_XnS; args[3]=disasm_arg_i_opt; args[4]=disasm_arg_offe; 
   8ae88:	72a22541 	movk	w1, #0x112a, lsl #16
   8ae8c:	52800562 	mov	w2, #0x2b                  	// #43
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8ae90:	52800017 	mov	w23, #0x0                   	// #0
   8ae94:	52800018 	mov	w24, #0x0                   	// #0
   8ae98:	5280001b 	mov	w27, #0x0                   	// #0
	uint16_t op=0, om=0, j=0;
   8ae9c:	52800014 	mov	w20, #0x0                   	// #0
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8aea0:	290fffff 	stp	wzr, wzr, [sp, #124]
   8aea4:	29117fff 	stp	wzr, wzr, [sp, #136]
   8aea8:	29127fff 	stp	wzr, wzr, [sp, #144]
   8aeac:	b9009bff 	str	wzr, [sp, #152]
		args[0]=disasm_arg_prf_op; args[1]=disasm_arg_offs; args[2]=disasm_arg_XnS; args[3]=disasm_arg_i_opt; args[4]=disasm_arg_offe; 
   8aeb0:	b902c3e1 	str	w1, [sp, #704]
	uint16_t op=0, om=0, j=0;
   8aeb4:	52800001 	mov	w1, #0x0                   	// #0
		args[0]=disasm_arg_prf_op; args[1]=disasm_arg_offs; args[2]=disasm_arg_XnS; args[3]=disasm_arg_i_opt; args[4]=disasm_arg_offe; 
   8aeb8:	390b13e2 	strb	w2, [sp, #708]
   8aebc:	a9435bf5 	ldp	x21, x22, [sp, #48]
   8aec0:	17ffeb68 	b	85c60 <disasm+0x1c80>
		i=((ic32_23)&1?(-1<<19):0)|((ic32_5)&0x7ffff); t=((ic32)&0x1f); 
   8aec4:	f240021f 	tst	x16, #0x1
   8aec8:	12004842 	and	w2, w2, #0x7ffff
   8aecc:	52bfff03 	mov	w3, #0xfff80000            	// #-524288
   8aed0:	1a9f1063 	csel	w3, w3, wzr, ne  // ne = any
		names="prfm\0";
   8aed4:	d0000041 	adrp	x1, 94000 <sd_init+0x2470>
		i=((ic32_23)&1?(-1<<19):0)|((ic32_5)&0x7ffff); t=((ic32)&0x1f); 
   8aed8:	1200101a 	and	w26, w0, #0x1f
		names="prfm\0";
   8aedc:	911a2021 	add	x1, x1, #0x688
		i=((ic32_23)&1?(-1<<19):0)|((ic32_5)&0x7ffff); t=((ic32)&0x1f); 
   8aee0:	2a030040 	orr	w0, w2, w3
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8aee4:	52800017 	mov	w23, #0x0                   	// #0
		args[0]=disasm_arg_prf_op; args[1]=disasm_arg_labeli4; 
   8aee8:	52820aa2 	mov	w2, #0x1055                	// #4181
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8aeec:	52800018 	mov	w24, #0x0                   	// #0
   8aef0:	52800019 	mov	w25, #0x0                   	// #0
   8aef4:	5280001b 	mov	w27, #0x0                   	// #0
	uint16_t op=0, om=0, j=0;
   8aef8:	52800014 	mov	w20, #0x0                   	// #0
		i=((ic32_23)&1?(-1<<19):0)|((ic32_5)&0x7ffff); t=((ic32)&0x1f); 
   8aefc:	290e83ff 	stp	wzr, w0, [sp, #116]
		names="prfm\0";
   8af00:	91182020 	add	x0, x1, #0x608
	uint16_t op=0, om=0, j=0;
   8af04:	52800001 	mov	w1, #0x0                   	// #0
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8af08:	290fffff 	stp	wzr, wzr, [sp, #124]
   8af0c:	29117fff 	stp	wzr, wzr, [sp, #136]
   8af10:	29127fff 	stp	wzr, wzr, [sp, #144]
   8af14:	b9009bff 	str	wzr, [sp, #152]
		args[0]=disasm_arg_prf_op; args[1]=disasm_arg_labeli4; 
   8af18:	790583e2 	strh	w2, [sp, #704]
   8af1c:	a9435bf5 	ldp	x21, x22, [sp, #48]
   8af20:	17ffeb50 	b	85c60 <disasm+0x1c80>
		names="eret\0drps\0";
   8af24:	d0000040 	adrp	x0, 94000 <sd_init+0x2470>
   8af28:	911a2000 	add	x0, x0, #0x688
		op=((ic32_21)&0x1); 
   8af2c:	12000181 	and	w1, w12, #0x1
		names="eret\0drps\0";
   8af30:	9117e000 	add	x0, x0, #0x5f8
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8af34:	52800017 	mov	w23, #0x0                   	// #0
   8af38:	52800018 	mov	w24, #0x0                   	// #0
   8af3c:	52800019 	mov	w25, #0x0                   	// #0
   8af40:	5280001b 	mov	w27, #0x0                   	// #0
   8af44:	5280001a 	mov	w26, #0x0                   	// #0
	uint16_t op=0, om=0, j=0;
   8af48:	52800014 	mov	w20, #0x0                   	// #0
	uint32_t i=0;
   8af4c:	290effff 	stp	wzr, wzr, [sp, #116]
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8af50:	290fffff 	stp	wzr, wzr, [sp, #124]
   8af54:	29117fff 	stp	wzr, wzr, [sp, #136]
   8af58:	29127fff 	stp	wzr, wzr, [sp, #144]
   8af5c:	b9009bff 	str	wzr, [sp, #152]
   8af60:	a9435bf5 	ldp	x21, x22, [sp, #48]
   8af64:	17ffeb3f 	b	85c60 <disasm+0x1c80>
		names="br\0blr\0ret\0";
   8af68:	d0000040 	adrp	x0, 94000 <sd_init+0x2470>
   8af6c:	911a2000 	add	x0, x0, #0x688
		op=((ic32_21)&0x3); n=((ic32_5)&0x1f); 
   8af70:	12001059 	and	w25, w2, #0x1f
   8af74:	12000581 	and	w1, w12, #0x3
		args[0]=disasm_arg_Xn; 
   8af78:	52800462 	mov	w2, #0x23                  	// #35
		names="br\0blr\0ret\0";
   8af7c:	9117a000 	add	x0, x0, #0x5e8
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8af80:	52800017 	mov	w23, #0x0                   	// #0
   8af84:	52800018 	mov	w24, #0x0                   	// #0
   8af88:	5280001b 	mov	w27, #0x0                   	// #0
   8af8c:	5280001a 	mov	w26, #0x0                   	// #0
	uint16_t op=0, om=0, j=0;
   8af90:	52800014 	mov	w20, #0x0                   	// #0
	uint32_t i=0;
   8af94:	290effff 	stp	wzr, wzr, [sp, #116]
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8af98:	290fffff 	stp	wzr, wzr, [sp, #124]
   8af9c:	29117fff 	stp	wzr, wzr, [sp, #136]
   8afa0:	29127fff 	stp	wzr, wzr, [sp, #144]
   8afa4:	b9009bff 	str	wzr, [sp, #152]
		args[0]=disasm_arg_Xn; 
   8afa8:	390b03e2 	strb	w2, [sp, #704]
   8afac:	a9435bf5 	ldp	x21, x22, [sp, #48]
   8afb0:	17ffeb2c 	b	85c60 <disasm+0x1c80>
		p=((ic32_19)&0x3); k=((ic32_16)&0x7); n=((ic32_12)&0xf); m=((ic32_8)&0xf); j=((ic32_5)&0x7); t=((ic32)&0x1f); 
   8afb4:	12000764 	and	w4, w27, #0x3
		names="mrs\0";
   8afb8:	d0000041 	adrp	x1, 94000 <sd_init+0x2470>
   8afbc:	911a2021 	add	x1, x1, #0x688
		p=((ic32_19)&0x3); k=((ic32_16)&0x7); n=((ic32_12)&0xf); m=((ic32_8)&0xf); j=((ic32_5)&0x7); t=((ic32)&0x1f); 
   8afc0:	12000c63 	and	w3, w3, #0xf
   8afc4:	12000854 	and	w20, w2, #0x7
   8afc8:	1200101a 	and	w26, w0, #0x1f
		args[0]=disasm_arg_Xt; args[1]=disasm_arg_sysreg; 
   8afcc:	52840062 	mov	w2, #0x2003                	// #8195
		names="mrs\0";
   8afd0:	91178020 	add	x0, x1, #0x5e0
		p=((ic32_19)&0x3); k=((ic32_16)&0x7); n=((ic32_12)&0xf); m=((ic32_8)&0xf); j=((ic32_5)&0x7); t=((ic32)&0x1f); 
   8afd4:	12000d59 	and	w25, w10, #0xf
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8afd8:	52800017 	mov	w23, #0x0                   	// #0
   8afdc:	52800018 	mov	w24, #0x0                   	// #0
   8afe0:	5280001b 	mov	w27, #0x0                   	// #0
	uint16_t op=0, om=0, j=0;
   8afe4:	52800001 	mov	w1, #0x0                   	// #0
		p=((ic32_19)&0x3); k=((ic32_16)&0x7); n=((ic32_12)&0xf); m=((ic32_8)&0xf); j=((ic32_5)&0x7); t=((ic32)&0x1f); 
   8afe8:	290f0fff 	stp	wzr, w3, [sp, #120]
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8afec:	b90083ff 	str	wzr, [sp, #128]
   8aff0:	29117fff 	stp	wzr, wzr, [sp, #136]
   8aff4:	29127fe4 	stp	w4, wzr, [sp, #144]
		p=((ic32_19)&0x3); k=((ic32_16)&0x7); n=((ic32_12)&0xf); m=((ic32_8)&0xf); j=((ic32_5)&0x7); t=((ic32)&0x1f); 
   8aff8:	120008a4 	and	w4, w5, #0x7
   8affc:	b90077e4 	str	w4, [sp, #116]
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8b000:	b9009bff 	str	wzr, [sp, #152]
		args[0]=disasm_arg_Xt; args[1]=disasm_arg_sysreg; 
   8b004:	790583e2 	strh	w2, [sp, #704]
   8b008:	a9435bf5 	ldp	x21, x22, [sp, #48]
   8b00c:	17ffeb15 	b	85c60 <disasm+0x1c80>
		i=((ic32_18)&1?(-1<<3):0)|((ic32_16)&0x7); n=((ic32_12)&0xf); m=((ic32_8)&0xf); j=((ic32_5)&0x7); t=((ic32)&0x1f); 
   8b010:	f9404fe1 	ldr	x1, [sp, #152]
   8b014:	120008a5 	and	w5, w5, #0x7
   8b018:	128000e4 	mov	w4, #0xfffffff8            	// #-8
   8b01c:	1200101a 	and	w26, w0, #0x1f
   8b020:	12000c63 	and	w3, w3, #0xf
   8b024:	12000854 	and	w20, w2, #0x7
   8b028:	f240003f 	tst	x1, #0x1
		names="sysl\0";
   8b02c:	b0000041 	adrp	x1, 94000 <sd_init+0x2470>
		i=((ic32_18)&1?(-1<<3):0)|((ic32_16)&0x7); n=((ic32_12)&0xf); m=((ic32_8)&0xf); j=((ic32_5)&0x7); t=((ic32)&0x1f); 
   8b030:	1a9f1084 	csel	w4, w4, wzr, ne  // ne = any
		names="sysl\0";
   8b034:	911a2021 	add	x1, x1, #0x688
		i=((ic32_18)&1?(-1<<3):0)|((ic32_16)&0x7); n=((ic32_12)&0xf); m=((ic32_8)&0xf); j=((ic32_5)&0x7); t=((ic32)&0x1f); 
   8b038:	2a0400a0 	orr	w0, w5, w4
   8b03c:	290e83ff 	stp	wzr, w0, [sp, #116]
		names="sysl\0";
   8b040:	91176020 	add	x0, x1, #0x5d8
		args[0]=disasm_arg_Xt; args[1]=disasm_arg_i; args[2]=disasm_arg_Cn; args[3]=disasm_arg_Cm; args[4]=disasm_arg_j; 
   8b044:	5280e061 	mov	w1, #0x703                 	// #1795
   8b048:	72a44421 	movk	w1, #0x2221, lsl #16
   8b04c:	528001a2 	mov	w2, #0xd                   	// #13
		i=((ic32_18)&1?(-1<<3):0)|((ic32_16)&0x7); n=((ic32_12)&0xf); m=((ic32_8)&0xf); j=((ic32_5)&0x7); t=((ic32)&0x1f); 
   8b050:	12000d59 	and	w25, w10, #0xf
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8b054:	52800017 	mov	w23, #0x0                   	// #0
   8b058:	52800018 	mov	w24, #0x0                   	// #0
   8b05c:	5280001b 	mov	w27, #0x0                   	// #0
   8b060:	290fffe3 	stp	w3, wzr, [sp, #124]
   8b064:	29117fff 	stp	wzr, wzr, [sp, #136]
   8b068:	29127fff 	stp	wzr, wzr, [sp, #144]
   8b06c:	b9009bff 	str	wzr, [sp, #152]
		args[0]=disasm_arg_Xt; args[1]=disasm_arg_i; args[2]=disasm_arg_Cn; args[3]=disasm_arg_Cm; args[4]=disasm_arg_j; 
   8b070:	b902c3e1 	str	w1, [sp, #704]
	uint16_t op=0, om=0, j=0;
   8b074:	52800001 	mov	w1, #0x0                   	// #0
		args[0]=disasm_arg_Xt; args[1]=disasm_arg_i; args[2]=disasm_arg_Cn; args[3]=disasm_arg_Cm; args[4]=disasm_arg_j; 
   8b078:	390b13e2 	strb	w2, [sp, #708]
   8b07c:	a9435bf5 	ldp	x21, x22, [sp, #48]
   8b080:	17ffeaf8 	b	85c60 <disasm+0x1c80>
		p=((ic32_19)&0x3); k=((ic32_16)&0x7); n=((ic32_12)&0xf); m=((ic32_8)&0xf); j=((ic32_5)&0x7); t=((ic32)&0x1f); 
   8b084:	12000764 	and	w4, w27, #0x3
		names="msr\0";
   8b088:	b0000041 	adrp	x1, 94000 <sd_init+0x2470>
   8b08c:	911a2021 	add	x1, x1, #0x688
		p=((ic32_19)&0x3); k=((ic32_16)&0x7); n=((ic32_12)&0xf); m=((ic32_8)&0xf); j=((ic32_5)&0x7); t=((ic32)&0x1f); 
   8b090:	12000c63 	and	w3, w3, #0xf
   8b094:	12000854 	and	w20, w2, #0x7
   8b098:	1200101a 	and	w26, w0, #0x1f
		args[0]=disasm_arg_sysreg; args[1]=disasm_arg_Xt; 
   8b09c:	52806402 	mov	w2, #0x320                 	// #800
		names="msr\0";
   8b0a0:	9116c020 	add	x0, x1, #0x5b0
		p=((ic32_19)&0x3); k=((ic32_16)&0x7); n=((ic32_12)&0xf); m=((ic32_8)&0xf); j=((ic32_5)&0x7); t=((ic32)&0x1f); 
   8b0a4:	12000d59 	and	w25, w10, #0xf
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8b0a8:	52800017 	mov	w23, #0x0                   	// #0
   8b0ac:	52800018 	mov	w24, #0x0                   	// #0
   8b0b0:	5280001b 	mov	w27, #0x0                   	// #0
	uint16_t op=0, om=0, j=0;
   8b0b4:	52800001 	mov	w1, #0x0                   	// #0
		p=((ic32_19)&0x3); k=((ic32_16)&0x7); n=((ic32_12)&0xf); m=((ic32_8)&0xf); j=((ic32_5)&0x7); t=((ic32)&0x1f); 
   8b0b8:	290f0fff 	stp	wzr, w3, [sp, #120]
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8b0bc:	b90083ff 	str	wzr, [sp, #128]
   8b0c0:	29117fff 	stp	wzr, wzr, [sp, #136]
   8b0c4:	29127fe4 	stp	w4, wzr, [sp, #144]
		p=((ic32_19)&0x3); k=((ic32_16)&0x7); n=((ic32_12)&0xf); m=((ic32_8)&0xf); j=((ic32_5)&0x7); t=((ic32)&0x1f); 
   8b0c8:	120008a4 	and	w4, w5, #0x7
   8b0cc:	b90077e4 	str	w4, [sp, #116]
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8b0d0:	b9009bff 	str	wzr, [sp, #152]
		args[0]=disasm_arg_sysreg; args[1]=disasm_arg_Xt; 
   8b0d4:	790583e2 	strh	w2, [sp, #704]
   8b0d8:	a9435bf5 	ldp	x21, x22, [sp, #48]
   8b0dc:	17ffeae1 	b	85c60 <disasm+0x1c80>
		n=((ic32_14)&0x10)|((ic32>>7)&0x8)|((ic32_5)&0x7); t=((ic32)&0x1f); 
   8b0e0:	53077c01 	lsr	w1, w0, #7
   8b0e4:	121c0231 	and	w17, w17, #0x10
   8b0e8:	121d0021 	and	w1, w1, #0x8
   8b0ec:	12000842 	and	w2, w2, #0x7
   8b0f0:	2a110031 	orr	w17, w1, w17
		names="tlbi\0";
   8b0f4:	b0000041 	adrp	x1, 94000 <sd_init+0x2470>
   8b0f8:	911a2021 	add	x1, x1, #0x688
		n=((ic32_14)&0x10)|((ic32>>7)&0x8)|((ic32_5)&0x7); t=((ic32)&0x1f); 
   8b0fc:	2a020239 	orr	w25, w17, w2
   8b100:	1200101a 	and	w26, w0, #0x1f
		args[0]=disasm_arg_tl0; args[1]=disasm_arg_Xt_opt; 
   8b104:	528383a2 	mov	w2, #0x1c1d                	// #7197
		names="tlbi\0";
   8b108:	91174020 	add	x0, x1, #0x5d0
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8b10c:	52800017 	mov	w23, #0x0                   	// #0
   8b110:	52800018 	mov	w24, #0x0                   	// #0
   8b114:	5280001b 	mov	w27, #0x0                   	// #0
	uint16_t op=0, om=0, j=0;
   8b118:	52800014 	mov	w20, #0x0                   	// #0
   8b11c:	52800001 	mov	w1, #0x0                   	// #0
	uint32_t i=0;
   8b120:	290effff 	stp	wzr, wzr, [sp, #116]
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8b124:	290fffff 	stp	wzr, wzr, [sp, #124]
   8b128:	29117fff 	stp	wzr, wzr, [sp, #136]
   8b12c:	29127fff 	stp	wzr, wzr, [sp, #144]
   8b130:	b9009bff 	str	wzr, [sp, #152]
		args[0]=disasm_arg_tl0; args[1]=disasm_arg_Xt_opt; 
   8b134:	790583e2 	strh	w2, [sp, #704]
   8b138:	a9435bf5 	ldp	x21, x22, [sp, #48]
   8b13c:	17ffeac9 	b	85c60 <disasm+0x1c80>
		a=((ic32_14)&0x8)|((ic32_5)&0x7); t=((ic32)&0x1f); 
   8b140:	121d0231 	and	w17, w17, #0x8
   8b144:	12000842 	and	w2, w2, #0x7
   8b148:	2a020222 	orr	w2, w17, w2
		names="at\0";
   8b14c:	b0000041 	adrp	x1, 94000 <sd_init+0x2470>
   8b150:	911a2021 	add	x1, x1, #0x688
		a=((ic32_14)&0x8)|((ic32_5)&0x7); t=((ic32)&0x1f); 
   8b154:	1200101a 	and	w26, w0, #0x1f
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8b158:	52800017 	mov	w23, #0x0                   	// #0
		names="at\0";
   8b15c:	91170020 	add	x0, x1, #0x5c0
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8b160:	52800018 	mov	w24, #0x0                   	// #0
   8b164:	52800019 	mov	w25, #0x0                   	// #0
   8b168:	5280001b 	mov	w27, #0x0                   	// #0
	uint16_t op=0, om=0, j=0;
   8b16c:	52800014 	mov	w20, #0x0                   	// #0
   8b170:	52800001 	mov	w1, #0x0                   	// #0
	uint32_t i=0;
   8b174:	290effff 	stp	wzr, wzr, [sp, #116]
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8b178:	290fffff 	stp	wzr, wzr, [sp, #124]
   8b17c:	29117fff 	stp	wzr, wzr, [sp, #136]
		a=((ic32_14)&0x8)|((ic32_5)&0x7); t=((ic32)&0x1f); 
   8b180:	29120bff 	stp	wzr, w2, [sp, #144]
		args[0]=disasm_arg_a2; args[1]=disasm_arg_Xt; 
   8b184:	528062c2 	mov	w2, #0x316                 	// #790
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8b188:	b9009bff 	str	wzr, [sp, #152]
		args[0]=disasm_arg_a2; args[1]=disasm_arg_Xt; 
   8b18c:	790583e2 	strh	w2, [sp, #704]
   8b190:	a9435bf5 	ldp	x21, x22, [sp, #48]
   8b194:	17ffeab3 	b	85c60 <disasm+0x1c80>
		n=((ic32_8)&0x4)|((ic32>>6)&0x2)|((ic32_5)&0x1); t=((ic32)&0x1f); 
   8b198:	53067c01 	lsr	w1, w0, #6
   8b19c:	121e0063 	and	w3, w3, #0x4
   8b1a0:	121f0021 	and	w1, w1, #0x2
   8b1a4:	12000042 	and	w2, w2, #0x1
   8b1a8:	2a030021 	orr	w1, w1, w3
		names="tlbi\0";
   8b1ac:	b0000043 	adrp	x3, 94000 <sd_init+0x2470>
   8b1b0:	911a2063 	add	x3, x3, #0x688
		n=((ic32_8)&0x4)|((ic32>>6)&0x2)|((ic32_5)&0x1); t=((ic32)&0x1f); 
   8b1b4:	2a020039 	orr	w25, w1, w2
   8b1b8:	1200101a 	and	w26, w0, #0x1f
		args[0]=disasm_arg_tl2; args[1]=disasm_arg_Xt_opt; 
   8b1bc:	528383e2 	mov	w2, #0x1c1f                	// #7199
		names="tlbi\0";
   8b1c0:	91174060 	add	x0, x3, #0x5d0
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8b1c4:	52800017 	mov	w23, #0x0                   	// #0
   8b1c8:	52800018 	mov	w24, #0x0                   	// #0
   8b1cc:	5280001b 	mov	w27, #0x0                   	// #0
	uint16_t op=0, om=0, j=0;
   8b1d0:	52800014 	mov	w20, #0x0                   	// #0
   8b1d4:	52800001 	mov	w1, #0x0                   	// #0
	uint32_t i=0;
   8b1d8:	290effff 	stp	wzr, wzr, [sp, #116]
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8b1dc:	290fffff 	stp	wzr, wzr, [sp, #124]
   8b1e0:	29117fff 	stp	wzr, wzr, [sp, #136]
   8b1e4:	29127fff 	stp	wzr, wzr, [sp, #144]
   8b1e8:	b9009bff 	str	wzr, [sp, #152]
		args[0]=disasm_arg_tl2; args[1]=disasm_arg_Xt_opt; 
   8b1ec:	790583e2 	strh	w2, [sp, #704]
   8b1f0:	a9435bf5 	ldp	x21, x22, [sp, #48]
   8b1f4:	17ffea9b 	b	85c60 <disasm+0x1c80>
		n=((ic32_9)&0x2)|((ic32>>7)&0x1); t=((ic32)&0x1f); 
   8b1f8:	d3471c02 	ubfx	x2, x0, #7, #1
   8b1fc:	121f01ef 	and	w15, w15, #0x2
		names="tlbi\0";
   8b200:	b0000041 	adrp	x1, 94000 <sd_init+0x2470>
   8b204:	911a2021 	add	x1, x1, #0x688
		n=((ic32_9)&0x2)|((ic32>>7)&0x1); t=((ic32)&0x1f); 
   8b208:	2a0f0059 	orr	w25, w2, w15
   8b20c:	1200101a 	and	w26, w0, #0x1f
		args[0]=disasm_arg_tl1; args[1]=disasm_arg_Xt_opt; 
   8b210:	528383c2 	mov	w2, #0x1c1e                	// #7198
		names="tlbi\0";
   8b214:	91174020 	add	x0, x1, #0x5d0
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8b218:	52800017 	mov	w23, #0x0                   	// #0
   8b21c:	52800018 	mov	w24, #0x0                   	// #0
   8b220:	5280001b 	mov	w27, #0x0                   	// #0
	uint16_t op=0, om=0, j=0;
   8b224:	52800014 	mov	w20, #0x0                   	// #0
   8b228:	52800001 	mov	w1, #0x0                   	// #0
	uint32_t i=0;
   8b22c:	290effff 	stp	wzr, wzr, [sp, #116]
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8b230:	290fffff 	stp	wzr, wzr, [sp, #124]
   8b234:	29117fff 	stp	wzr, wzr, [sp, #136]
   8b238:	29127fff 	stp	wzr, wzr, [sp, #144]
   8b23c:	b9009bff 	str	wzr, [sp, #152]
		args[0]=disasm_arg_tl1; args[1]=disasm_arg_Xt_opt; 
   8b240:	790583e2 	strh	w2, [sp, #704]
   8b244:	a9435bf5 	ldp	x21, x22, [sp, #48]
   8b248:	17ffea86 	b	85c60 <disasm+0x1c80>
		c=((ic32_15)&0x2)|((ic32_10)&0x1); t=((ic32)&0x1f); 
   8b24c:	12000294 	and	w20, w20, #0x1
   8b250:	121f00c6 	and	w6, w6, #0x2
   8b254:	2a1400c2 	orr	w2, w6, w20
		names="ic\0";
   8b258:	b0000041 	adrp	x1, 94000 <sd_init+0x2470>
   8b25c:	911a2021 	add	x1, x1, #0x688
		c=((ic32_15)&0x2)|((ic32_10)&0x1); t=((ic32)&0x1f); 
   8b260:	1200101a 	and	w26, w0, #0x1f
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8b264:	52800017 	mov	w23, #0x0                   	// #0
		names="ic\0";
   8b268:	91172020 	add	x0, x1, #0x5c8
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8b26c:	52800018 	mov	w24, #0x0                   	// #0
   8b270:	52800019 	mov	w25, #0x0                   	// #0
   8b274:	5280001b 	mov	w27, #0x0                   	// #0
	uint16_t op=0, om=0, j=0;
   8b278:	52800014 	mov	w20, #0x0                   	// #0
   8b27c:	52800001 	mov	w1, #0x0                   	// #0
	uint32_t i=0;
   8b280:	290effff 	stp	wzr, wzr, [sp, #116]
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8b284:	290fffff 	stp	wzr, wzr, [sp, #124]
		c=((ic32_15)&0x2)|((ic32_10)&0x1); t=((ic32)&0x1f); 
   8b288:	29110bff 	stp	wzr, w2, [sp, #136]
		args[0]=disasm_arg_ic; args[1]=disasm_arg_Xt_opt; 
   8b28c:	52838362 	mov	w2, #0x1c1b                	// #7195
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8b290:	29127fff 	stp	wzr, wzr, [sp, #144]
   8b294:	b9009bff 	str	wzr, [sp, #152]
		args[0]=disasm_arg_ic; args[1]=disasm_arg_Xt_opt; 
   8b298:	790583e2 	strh	w2, [sp, #704]
   8b29c:	a9435bf5 	ldp	x21, x22, [sp, #48]
   8b2a0:	17ffea70 	b	85c60 <disasm+0x1c80>
		d=((ic32_9)&0x2)|((ic32_8)&0x1); t=((ic32)&0x1f); 
   8b2a4:	121f01ef 	and	w15, w15, #0x2
   8b2a8:	12000063 	and	w3, w3, #0x1
   8b2ac:	2a0301e2 	orr	w2, w15, w3
		names="dc\0";
   8b2b0:	b0000041 	adrp	x1, 94000 <sd_init+0x2470>
   8b2b4:	911a2021 	add	x1, x1, #0x688
		d=((ic32_9)&0x2)|((ic32_8)&0x1); t=((ic32)&0x1f); 
   8b2b8:	1200101a 	and	w26, w0, #0x1f
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8b2bc:	52800017 	mov	w23, #0x0                   	// #0
		names="dc\0";
   8b2c0:	9116e020 	add	x0, x1, #0x5b8
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8b2c4:	52800018 	mov	w24, #0x0                   	// #0
   8b2c8:	52800019 	mov	w25, #0x0                   	// #0
   8b2cc:	5280001b 	mov	w27, #0x0                   	// #0
	uint16_t op=0, om=0, j=0;
   8b2d0:	52800014 	mov	w20, #0x0                   	// #0
   8b2d4:	52800001 	mov	w1, #0x0                   	// #0
	uint32_t i=0;
   8b2d8:	290effff 	stp	wzr, wzr, [sp, #116]
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8b2dc:	290fffff 	stp	wzr, wzr, [sp, #124]
   8b2e0:	29117fe2 	stp	w2, wzr, [sp, #136]
		args[0]=disasm_arg_dc2; args[1]=disasm_arg_Xt; 
   8b2e4:	52806342 	mov	w2, #0x31a                 	// #794
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8b2e8:	29127fff 	stp	wzr, wzr, [sp, #144]
   8b2ec:	b9009bff 	str	wzr, [sp, #152]
		args[0]=disasm_arg_dc2; args[1]=disasm_arg_Xt; 
   8b2f0:	790583e2 	strh	w2, [sp, #704]
   8b2f4:	a9435bf5 	ldp	x21, x22, [sp, #48]
   8b2f8:	17ffea5a 	b	85c60 <disasm+0x1c80>
		names="dc\0";
   8b2fc:	b0000041 	adrp	x1, 94000 <sd_init+0x2470>
   8b300:	911a2021 	add	x1, x1, #0x688
		t=((ic32)&0x1f); 
   8b304:	1200101a 	and	w26, w0, #0x1f
		args[0]=disasm_arg_ZVA; args[1]=disasm_arg_Xt; 
   8b308:	52806322 	mov	w2, #0x319                 	// #793
		names="dc\0";
   8b30c:	9116e020 	add	x0, x1, #0x5b8
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8b310:	52800017 	mov	w23, #0x0                   	// #0
   8b314:	52800018 	mov	w24, #0x0                   	// #0
   8b318:	52800019 	mov	w25, #0x0                   	// #0
   8b31c:	5280001b 	mov	w27, #0x0                   	// #0
	uint16_t op=0, om=0, j=0;
   8b320:	52800014 	mov	w20, #0x0                   	// #0
   8b324:	52800001 	mov	w1, #0x0                   	// #0
	uint32_t i=0;
   8b328:	290effff 	stp	wzr, wzr, [sp, #116]
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8b32c:	290fffff 	stp	wzr, wzr, [sp, #124]
   8b330:	29117fff 	stp	wzr, wzr, [sp, #136]
   8b334:	29127fff 	stp	wzr, wzr, [sp, #144]
   8b338:	b9009bff 	str	wzr, [sp, #152]
		args[0]=disasm_arg_ZVA; args[1]=disasm_arg_Xt; 
   8b33c:	790583e2 	strh	w2, [sp, #704]
   8b340:	a9435bf5 	ldp	x21, x22, [sp, #48]
   8b344:	17ffea47 	b	85c60 <disasm+0x1c80>
		d=((ic32_10)&0x1); t=((ic32)&0x1f); 
   8b348:	12000282 	and	w2, w20, #0x1
		names="dc\0";
   8b34c:	b0000041 	adrp	x1, 94000 <sd_init+0x2470>
   8b350:	911a2021 	add	x1, x1, #0x688
		d=((ic32_10)&0x1); t=((ic32)&0x1f); 
   8b354:	1200101a 	and	w26, w0, #0x1f
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8b358:	52800017 	mov	w23, #0x0                   	// #0
		names="dc\0";
   8b35c:	9116e020 	add	x0, x1, #0x5b8
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8b360:	52800018 	mov	w24, #0x0                   	// #0
   8b364:	52800019 	mov	w25, #0x0                   	// #0
   8b368:	5280001b 	mov	w27, #0x0                   	// #0
	uint16_t op=0, om=0, j=0;
   8b36c:	52800014 	mov	w20, #0x0                   	// #0
   8b370:	52800001 	mov	w1, #0x0                   	// #0
	uint32_t i=0;
   8b374:	290effff 	stp	wzr, wzr, [sp, #116]
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8b378:	290fffff 	stp	wzr, wzr, [sp, #124]
   8b37c:	29117fe2 	stp	w2, wzr, [sp, #136]
		args[0]=disasm_arg_dc1; args[1]=disasm_arg_Xt; 
   8b380:	52806302 	mov	w2, #0x318                 	// #792
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8b384:	29127fff 	stp	wzr, wzr, [sp, #144]
   8b388:	b9009bff 	str	wzr, [sp, #152]
		args[0]=disasm_arg_dc1; args[1]=disasm_arg_Xt; 
   8b38c:	790583e2 	strh	w2, [sp, #704]
   8b390:	a9435bf5 	ldp	x21, x22, [sp, #48]
   8b394:	17ffea33 	b	85c60 <disasm+0x1c80>
		a=((ic32_5)&0x7); t=((ic32)&0x1f); 
   8b398:	12000842 	and	w2, w2, #0x7
		names="at\0";
   8b39c:	b0000041 	adrp	x1, 94000 <sd_init+0x2470>
   8b3a0:	911a2021 	add	x1, x1, #0x688
		a=((ic32_5)&0x7); t=((ic32)&0x1f); 
   8b3a4:	1200101a 	and	w26, w0, #0x1f
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8b3a8:	52800017 	mov	w23, #0x0                   	// #0
		names="at\0";
   8b3ac:	91170020 	add	x0, x1, #0x5c0
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8b3b0:	52800018 	mov	w24, #0x0                   	// #0
   8b3b4:	52800019 	mov	w25, #0x0                   	// #0
   8b3b8:	5280001b 	mov	w27, #0x0                   	// #0
	uint16_t op=0, om=0, j=0;
   8b3bc:	52800014 	mov	w20, #0x0                   	// #0
   8b3c0:	52800001 	mov	w1, #0x0                   	// #0
	uint32_t i=0;
   8b3c4:	290effff 	stp	wzr, wzr, [sp, #116]
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8b3c8:	290fffff 	stp	wzr, wzr, [sp, #124]
   8b3cc:	29117fff 	stp	wzr, wzr, [sp, #136]
		a=((ic32_5)&0x7); t=((ic32)&0x1f); 
   8b3d0:	29120bff 	stp	wzr, w2, [sp, #144]
		args[0]=disasm_arg_a1; args[1]=disasm_arg_Xt; 
   8b3d4:	528062a2 	mov	w2, #0x315                 	// #789
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8b3d8:	b9009bff 	str	wzr, [sp, #152]
		args[0]=disasm_arg_a1; args[1]=disasm_arg_Xt; 
   8b3dc:	790583e2 	strh	w2, [sp, #704]
   8b3e0:	a9435bf5 	ldp	x21, x22, [sp, #48]
   8b3e4:	17ffea1f 	b	85c60 <disasm+0x1c80>
		a=((ic32_5)&0x3); t=((ic32)&0x1f); 
   8b3e8:	12000442 	and	w2, w2, #0x3
		names="at\0";
   8b3ec:	b0000041 	adrp	x1, 94000 <sd_init+0x2470>
   8b3f0:	911a2021 	add	x1, x1, #0x688
		a=((ic32_5)&0x3); t=((ic32)&0x1f); 
   8b3f4:	1200101a 	and	w26, w0, #0x1f
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8b3f8:	52800017 	mov	w23, #0x0                   	// #0
		names="at\0";
   8b3fc:	91170020 	add	x0, x1, #0x5c0
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8b400:	52800018 	mov	w24, #0x0                   	// #0
   8b404:	52800019 	mov	w25, #0x0                   	// #0
   8b408:	5280001b 	mov	w27, #0x0                   	// #0
	uint16_t op=0, om=0, j=0;
   8b40c:	52800014 	mov	w20, #0x0                   	// #0
   8b410:	52800001 	mov	w1, #0x0                   	// #0
	uint32_t i=0;
   8b414:	290effff 	stp	wzr, wzr, [sp, #116]
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8b418:	290fffff 	stp	wzr, wzr, [sp, #124]
   8b41c:	29117fff 	stp	wzr, wzr, [sp, #136]
		a=((ic32_5)&0x3); t=((ic32)&0x1f); 
   8b420:	29120bff 	stp	wzr, w2, [sp, #144]
		args[0]=disasm_arg_a0; args[1]=disasm_arg_Xt; 
   8b424:	52806282 	mov	w2, #0x314                 	// #788
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8b428:	b9009bff 	str	wzr, [sp, #152]
		args[0]=disasm_arg_a0; args[1]=disasm_arg_Xt; 
   8b42c:	790583e2 	strh	w2, [sp, #704]
   8b430:	a9435bf5 	ldp	x21, x22, [sp, #48]
   8b434:	17ffea0b 	b	85c60 <disasm+0x1c80>
		d=((ic32_5)&0x3); t=((ic32)&0x1f); 
   8b438:	12000442 	and	w2, w2, #0x3
		names="dc\0";
   8b43c:	b0000041 	adrp	x1, 94000 <sd_init+0x2470>
   8b440:	911a2021 	add	x1, x1, #0x688
		d=((ic32_5)&0x3); t=((ic32)&0x1f); 
   8b444:	1200101a 	and	w26, w0, #0x1f
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8b448:	52800017 	mov	w23, #0x0                   	// #0
		names="dc\0";
   8b44c:	9116e020 	add	x0, x1, #0x5b8
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8b450:	52800018 	mov	w24, #0x0                   	// #0
   8b454:	52800019 	mov	w25, #0x0                   	// #0
   8b458:	5280001b 	mov	w27, #0x0                   	// #0
	uint16_t op=0, om=0, j=0;
   8b45c:	52800014 	mov	w20, #0x0                   	// #0
   8b460:	52800001 	mov	w1, #0x0                   	// #0
	uint32_t i=0;
   8b464:	290effff 	stp	wzr, wzr, [sp, #116]
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8b468:	290fffff 	stp	wzr, wzr, [sp, #124]
   8b46c:	29117fe2 	stp	w2, wzr, [sp, #136]
		args[0]=disasm_arg_dc0; args[1]=disasm_arg_Xt; 
   8b470:	528062e2 	mov	w2, #0x317                 	// #791
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8b474:	29127fff 	stp	wzr, wzr, [sp, #144]
   8b478:	b9009bff 	str	wzr, [sp, #152]
		args[0]=disasm_arg_dc0; args[1]=disasm_arg_Xt; 
   8b47c:	790583e2 	strh	w2, [sp, #704]
   8b480:	a9435bf5 	ldp	x21, x22, [sp, #48]
   8b484:	17ffe9f7 	b	85c60 <disasm+0x1c80>
		i=((ic32_11)&1?(-1<<4):0)|((ic32_8)&0xf); p=((ic32_5)&0x7); 
   8b488:	f24001bf 	tst	x13, #0x1
   8b48c:	12000c63 	and	w3, w3, #0xf
   8b490:	128001e1 	mov	w1, #0xfffffff0            	// #-16
   8b494:	1a9f1021 	csel	w1, w1, wzr, ne  // ne = any
   8b498:	12000842 	and	w2, w2, #0x7
   8b49c:	2a010061 	orr	w1, w3, w1
		names="msr\0";
   8b4a0:	b0000040 	adrp	x0, 94000 <sd_init+0x2470>
   8b4a4:	911a2000 	add	x0, x0, #0x688
   8b4a8:	9116c000 	add	x0, x0, #0x5b0
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8b4ac:	52800017 	mov	w23, #0x0                   	// #0
   8b4b0:	52800018 	mov	w24, #0x0                   	// #0
   8b4b4:	52800019 	mov	w25, #0x0                   	// #0
   8b4b8:	5280001b 	mov	w27, #0x0                   	// #0
   8b4bc:	5280001a 	mov	w26, #0x0                   	// #0
	uint16_t op=0, om=0, j=0;
   8b4c0:	52800014 	mov	w20, #0x0                   	// #0
		i=((ic32_11)&1?(-1<<4):0)|((ic32_8)&0xf); p=((ic32_5)&0x7); 
   8b4c4:	290e87ff 	stp	wzr, w1, [sp, #116]
	uint16_t op=0, om=0, j=0;
   8b4c8:	52800001 	mov	w1, #0x0                   	// #0
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8b4cc:	290fffff 	stp	wzr, wzr, [sp, #124]
   8b4d0:	29117fff 	stp	wzr, wzr, [sp, #136]
   8b4d4:	29127fe2 	stp	w2, wzr, [sp, #144]
		args[0]=disasm_arg_pstate; args[1]=disasm_arg_i; 
   8b4d8:	5280e242 	mov	w2, #0x712                 	// #1810
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8b4dc:	b9009bff 	str	wzr, [sp, #152]
		args[0]=disasm_arg_pstate; args[1]=disasm_arg_i; 
   8b4e0:	790583e2 	strh	w2, [sp, #704]
   8b4e4:	a9435bf5 	ldp	x21, x22, [sp, #48]
   8b4e8:	17ffe9de 	b	85c60 <disasm+0x1c80>
		names="dsb\0dmb\0?\0isb\0";
   8b4ec:	b0000040 	adrp	x0, 94000 <sd_init+0x2470>
   8b4f0:	911a2000 	add	x0, x0, #0x688
		op=((ic32_5)&0x3); j=((ic32_8)&0xf); 
   8b4f4:	12000441 	and	w1, w2, #0x3
   8b4f8:	12000c74 	and	w20, w3, #0xf
		args[0]=disasm_arg_sh; 
   8b4fc:	52800262 	mov	w2, #0x13                  	// #19
		names="dsb\0dmb\0?\0isb\0";
   8b500:	91168000 	add	x0, x0, #0x5a0
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8b504:	52800017 	mov	w23, #0x0                   	// #0
   8b508:	52800018 	mov	w24, #0x0                   	// #0
   8b50c:	52800019 	mov	w25, #0x0                   	// #0
   8b510:	5280001b 	mov	w27, #0x0                   	// #0
   8b514:	5280001a 	mov	w26, #0x0                   	// #0
	uint32_t i=0;
   8b518:	290effff 	stp	wzr, wzr, [sp, #116]
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8b51c:	290fffff 	stp	wzr, wzr, [sp, #124]
   8b520:	29117fff 	stp	wzr, wzr, [sp, #136]
   8b524:	29127fff 	stp	wzr, wzr, [sp, #144]
   8b528:	b9009bff 	str	wzr, [sp, #152]
		args[0]=disasm_arg_sh; 
   8b52c:	390b03e2 	strb	w2, [sp, #704]
   8b530:	a9435bf5 	ldp	x21, x22, [sp, #48]
   8b534:	17ffe9cb 	b	85c60 <disasm+0x1c80>
		i=((ic32_11)&1?(-1<<4):0)|((ic32_8)&0xf); 
   8b538:	f24001bf 	tst	x13, #0x1
   8b53c:	12000c63 	and	w3, w3, #0xf
   8b540:	128001e1 	mov	w1, #0xfffffff0            	// #-16
   8b544:	1a9f1021 	csel	w1, w1, wzr, ne  // ne = any
   8b548:	2a010061 	orr	w1, w3, w1
		names="clrex\0";
   8b54c:	b0000040 	adrp	x0, 94000 <sd_init+0x2470>
   8b550:	911a2000 	add	x0, x0, #0x688
		args[0]=disasm_arg_i_opt; 
   8b554:	52800222 	mov	w2, #0x11                  	// #17
		names="clrex\0";
   8b558:	91166000 	add	x0, x0, #0x598
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8b55c:	52800017 	mov	w23, #0x0                   	// #0
   8b560:	52800018 	mov	w24, #0x0                   	// #0
   8b564:	52800019 	mov	w25, #0x0                   	// #0
   8b568:	5280001b 	mov	w27, #0x0                   	// #0
   8b56c:	5280001a 	mov	w26, #0x0                   	// #0
	uint16_t op=0, om=0, j=0;
   8b570:	52800014 	mov	w20, #0x0                   	// #0
		i=((ic32_11)&1?(-1<<4):0)|((ic32_8)&0xf); 
   8b574:	290e87ff 	stp	wzr, w1, [sp, #116]
	uint16_t op=0, om=0, j=0;
   8b578:	52800001 	mov	w1, #0x0                   	// #0
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8b57c:	290fffff 	stp	wzr, wzr, [sp, #124]
   8b580:	29117fff 	stp	wzr, wzr, [sp, #136]
   8b584:	29127fff 	stp	wzr, wzr, [sp, #144]
   8b588:	b9009bff 	str	wzr, [sp, #152]
		args[0]=disasm_arg_i_opt; 
   8b58c:	390b03e2 	strb	w2, [sp, #704]
   8b590:	a9435bf5 	ldp	x21, x22, [sp, #48]
   8b594:	17ffe9b3 	b	85c60 <disasm+0x1c80>
		op=((ic32>>6)&0x8)|((ic32_5)&0x7); 
   8b598:	53067c01 	lsr	w1, w0, #6
   8b59c:	12000842 	and	w2, w2, #0x7
   8b5a0:	121d0021 	and	w1, w1, #0x8
		names="nop\0yield\0wfe\0wfi\0sev\0sevl\0?\0?\0esb\0psc\0";
   8b5a4:	b0000040 	adrp	x0, 94000 <sd_init+0x2470>
   8b5a8:	911a2000 	add	x0, x0, #0x688
		op=((ic32>>6)&0x8)|((ic32_5)&0x7); 
   8b5ac:	2a020021 	orr	w1, w1, w2
		names="nop\0yield\0wfe\0wfi\0sev\0sevl\0?\0?\0esb\0psc\0";
   8b5b0:	9115c000 	add	x0, x0, #0x570
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8b5b4:	52800017 	mov	w23, #0x0                   	// #0
   8b5b8:	52800018 	mov	w24, #0x0                   	// #0
   8b5bc:	52800019 	mov	w25, #0x0                   	// #0
   8b5c0:	5280001b 	mov	w27, #0x0                   	// #0
   8b5c4:	5280001a 	mov	w26, #0x0                   	// #0
	uint16_t op=0, om=0, j=0;
   8b5c8:	52800014 	mov	w20, #0x0                   	// #0
	uint32_t i=0;
   8b5cc:	290effff 	stp	wzr, wzr, [sp, #116]
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8b5d0:	290fffff 	stp	wzr, wzr, [sp, #124]
   8b5d4:	29117fff 	stp	wzr, wzr, [sp, #136]
   8b5d8:	29127fff 	stp	wzr, wzr, [sp, #144]
   8b5dc:	b9009bff 	str	wzr, [sp, #152]
   8b5e0:	a9435bf5 	ldp	x21, x22, [sp, #48]
   8b5e4:	17ffe99f 	b	85c60 <disasm+0x1c80>
		op=((ic32)&0x3); i=((ic32_20)&1?(-1<<16):0)|((ic32_5)&0xffff); 
   8b5e8:	f240011f 	tst	x8, #0x1
   8b5ec:	12003c42 	and	w2, w2, #0xffff
   8b5f0:	52bfffe4 	mov	w4, #0xffff0000            	// #-65536
   8b5f4:	1a9f1084 	csel	w4, w4, wzr, ne  // ne = any
		names="?\0dcsp1\0dcps2\0dcps3\0";
   8b5f8:	b0000043 	adrp	x3, 94000 <sd_init+0x2470>
		op=((ic32)&0x3); i=((ic32_20)&1?(-1<<16):0)|((ic32_5)&0xffff); 
   8b5fc:	12000401 	and	w1, w0, #0x3
		names="?\0dcsp1\0dcps2\0dcps3\0";
   8b600:	911a2063 	add	x3, x3, #0x688
		op=((ic32)&0x3); i=((ic32_20)&1?(-1<<16):0)|((ic32_5)&0xffff); 
   8b604:	2a040040 	orr	w0, w2, w4
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8b608:	52800017 	mov	w23, #0x0                   	// #0
		args[0]=disasm_arg_i_opt; 
   8b60c:	52800222 	mov	w2, #0x11                  	// #17
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8b610:	52800018 	mov	w24, #0x0                   	// #0
   8b614:	52800019 	mov	w25, #0x0                   	// #0
   8b618:	5280001b 	mov	w27, #0x0                   	// #0
   8b61c:	5280001a 	mov	w26, #0x0                   	// #0
	uint16_t op=0, om=0, j=0;
   8b620:	52800014 	mov	w20, #0x0                   	// #0
		op=((ic32)&0x3); i=((ic32_20)&1?(-1<<16):0)|((ic32_5)&0xffff); 
   8b624:	290e83ff 	stp	wzr, w0, [sp, #116]
		names="?\0dcsp1\0dcps2\0dcps3\0";
   8b628:	91156060 	add	x0, x3, #0x558
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8b62c:	290fffff 	stp	wzr, wzr, [sp, #124]
   8b630:	29117fff 	stp	wzr, wzr, [sp, #136]
   8b634:	29127fff 	stp	wzr, wzr, [sp, #144]
   8b638:	b9009bff 	str	wzr, [sp, #152]
		args[0]=disasm_arg_i_opt; 
   8b63c:	390b03e2 	strb	w2, [sp, #704]
   8b640:	a9435bf5 	ldp	x21, x22, [sp, #48]
   8b644:	17ffe987 	b	85c60 <disasm+0x1c80>
		names="hlt\0";
   8b648:	b0000040 	adrp	x0, 94000 <sd_init+0x2470>
   8b64c:	911a2000 	add	x0, x0, #0x688
   8b650:	91154000 	add	x0, x0, #0x550
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8b654:	52800017 	mov	w23, #0x0                   	// #0
   8b658:	52800018 	mov	w24, #0x0                   	// #0
   8b65c:	52800019 	mov	w25, #0x0                   	// #0
   8b660:	5280001b 	mov	w27, #0x0                   	// #0
   8b664:	5280001a 	mov	w26, #0x0                   	// #0
	uint16_t op=0, om=0, j=0;
   8b668:	52800014 	mov	w20, #0x0                   	// #0
   8b66c:	52800001 	mov	w1, #0x0                   	// #0
	uint32_t i=0;
   8b670:	290effff 	stp	wzr, wzr, [sp, #116]
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8b674:	290fffff 	stp	wzr, wzr, [sp, #124]
   8b678:	29117fff 	stp	wzr, wzr, [sp, #136]
   8b67c:	29127fff 	stp	wzr, wzr, [sp, #144]
   8b680:	b9009bff 	str	wzr, [sp, #152]
   8b684:	a9435bf5 	ldp	x21, x22, [sp, #48]
   8b688:	17ffe976 	b	85c60 <disasm+0x1c80>
		op=((ic32_19)&0x4)|((ic32)&0x3); i=((ic32_20)&1?(-1<<16):0)|((ic32_5)&0xffff); 
   8b68c:	f240011f 	tst	x8, #0x1
   8b690:	12003c42 	and	w2, w2, #0xffff
   8b694:	52bfffe3 	mov	w3, #0xffff0000            	// #-65536
   8b698:	1a9f1063 	csel	w3, w3, wzr, ne  // ne = any
   8b69c:	121e0366 	and	w6, w27, #0x4
   8b6a0:	12000401 	and	w1, w0, #0x3
   8b6a4:	2a030042 	orr	w2, w2, w3
		names="?\0svc\0hvc\0smc\0brk\0";
   8b6a8:	b0000040 	adrp	x0, 94000 <sd_init+0x2470>
   8b6ac:	911a2000 	add	x0, x0, #0x688
		op=((ic32_19)&0x4)|((ic32)&0x3); i=((ic32_20)&1?(-1<<16):0)|((ic32_5)&0xffff); 
   8b6b0:	2a0100c1 	orr	w1, w6, w1
		names="?\0svc\0hvc\0smc\0brk\0";
   8b6b4:	9114e000 	add	x0, x0, #0x538
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8b6b8:	52800017 	mov	w23, #0x0                   	// #0
   8b6bc:	52800018 	mov	w24, #0x0                   	// #0
   8b6c0:	52800019 	mov	w25, #0x0                   	// #0
   8b6c4:	5280001b 	mov	w27, #0x0                   	// #0
   8b6c8:	5280001a 	mov	w26, #0x0                   	// #0
	uint16_t op=0, om=0, j=0;
   8b6cc:	52800014 	mov	w20, #0x0                   	// #0
		op=((ic32_19)&0x4)|((ic32)&0x3); i=((ic32_20)&1?(-1<<16):0)|((ic32_5)&0xffff); 
   8b6d0:	290e8bff 	stp	wzr, w2, [sp, #116]
		args[0]=disasm_arg_i; 
   8b6d4:	528000e2 	mov	w2, #0x7                   	// #7
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8b6d8:	290fffff 	stp	wzr, wzr, [sp, #124]
   8b6dc:	29117fff 	stp	wzr, wzr, [sp, #136]
   8b6e0:	29127fff 	stp	wzr, wzr, [sp, #144]
   8b6e4:	b9009bff 	str	wzr, [sp, #152]
		args[0]=disasm_arg_i; 
   8b6e8:	390b03e2 	strb	w2, [sp, #704]
   8b6ec:	a9435bf5 	ldp	x21, x22, [sp, #48]
   8b6f0:	17ffe95c 	b	85c60 <disasm+0x1c80>
		names="sm4e\0";
   8b6f4:	b0000041 	adrp	x1, 94000 <sd_init+0x2470>
   8b6f8:	911a2021 	add	x1, x1, #0x688
		n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8b6fc:	12001059 	and	w25, w2, #0x1f
   8b700:	1200101a 	and	w26, w0, #0x1f
		args[0]=disasm_arg_Vt4s; args[1]=disasm_arg_Vn4s; 
   8b704:	528dedc2 	mov	w2, #0x6f6e                	// #28526
		names="sm4e\0";
   8b708:	9114c020 	add	x0, x1, #0x530
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8b70c:	52800017 	mov	w23, #0x0                   	// #0
   8b710:	52800018 	mov	w24, #0x0                   	// #0
   8b714:	5280001b 	mov	w27, #0x0                   	// #0
	uint16_t op=0, om=0, j=0;
   8b718:	52800014 	mov	w20, #0x0                   	// #0
   8b71c:	52800001 	mov	w1, #0x0                   	// #0
	uint32_t i=0;
   8b720:	290effff 	stp	wzr, wzr, [sp, #116]
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8b724:	290fffff 	stp	wzr, wzr, [sp, #124]
   8b728:	29117fff 	stp	wzr, wzr, [sp, #136]
   8b72c:	29127fff 	stp	wzr, wzr, [sp, #144]
   8b730:	b9009bff 	str	wzr, [sp, #152]
		args[0]=disasm_arg_Vt4s; args[1]=disasm_arg_Vn4s; 
   8b734:	790583e2 	strh	w2, [sp, #704]
   8b738:	a9435bf5 	ldp	x21, x22, [sp, #48]
   8b73c:	17ffe949 	b	85c60 <disasm+0x1c80>
		names="sha512su0\0";
   8b740:	b0000041 	adrp	x1, 94000 <sd_init+0x2470>
   8b744:	911a2021 	add	x1, x1, #0x688
		n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8b748:	12001059 	and	w25, w2, #0x1f
   8b74c:	1200101a 	and	w26, w0, #0x1f
		args[0]=disasm_arg_Vt2d; args[1]=disasm_arg_Vn2d; 
   8b750:	128ea9c2 	mov	w2, #0xffff8ab1            	// #-30031
		names="sha512su0\0";
   8b754:	91148020 	add	x0, x1, #0x520
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8b758:	52800017 	mov	w23, #0x0                   	// #0
   8b75c:	52800018 	mov	w24, #0x0                   	// #0
   8b760:	5280001b 	mov	w27, #0x0                   	// #0
	uint16_t op=0, om=0, j=0;
   8b764:	52800014 	mov	w20, #0x0                   	// #0
   8b768:	52800001 	mov	w1, #0x0                   	// #0
	uint32_t i=0;
   8b76c:	290effff 	stp	wzr, wzr, [sp, #116]
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8b770:	290fffff 	stp	wzr, wzr, [sp, #124]
   8b774:	29117fff 	stp	wzr, wzr, [sp, #136]
   8b778:	29127fff 	stp	wzr, wzr, [sp, #144]
   8b77c:	b9009bff 	str	wzr, [sp, #152]
		args[0]=disasm_arg_Vt2d; args[1]=disasm_arg_Vn2d; 
   8b780:	790583e2 	strh	w2, [sp, #704]
   8b784:	a9435bf5 	ldp	x21, x22, [sp, #48]
   8b788:	17ffe936 	b	85c60 <disasm+0x1c80>
		names="sm3partw1\0sm3partw2\0sm4ekey\0";
   8b78c:	b0000043 	adrp	x3, 94000 <sd_init+0x2470>
   8b790:	911a2063 	add	x3, x3, #0x688
		op=((ic32_10)&0x3); m=((ic32_16)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8b794:	12000681 	and	w1, w20, #0x3
   8b798:	120010a4 	and	w4, w5, #0x1f
   8b79c:	12001059 	and	w25, w2, #0x1f
   8b7a0:	1200101a 	and	w26, w0, #0x1f
		args[0]=disasm_arg_Vt4s; args[1]=disasm_arg_Vn4s; args[2]=disasm_arg_Vm4s; 
   8b7a4:	52800da2 	mov	w2, #0x6d                  	// #109
		names="sm3partw1\0sm3partw2\0sm4ekey\0";
   8b7a8:	91140060 	add	x0, x3, #0x500
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8b7ac:	52800017 	mov	w23, #0x0                   	// #0
		args[0]=disasm_arg_Vt4s; args[1]=disasm_arg_Vn4s; args[2]=disasm_arg_Vm4s; 
   8b7b0:	528dedc3 	mov	w3, #0x6f6e                	// #28526
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8b7b4:	52800018 	mov	w24, #0x0                   	// #0
   8b7b8:	5280001b 	mov	w27, #0x0                   	// #0
	uint16_t op=0, om=0, j=0;
   8b7bc:	52800014 	mov	w20, #0x0                   	// #0
	uint32_t i=0;
   8b7c0:	290effff 	stp	wzr, wzr, [sp, #116]
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8b7c4:	290fffe4 	stp	w4, wzr, [sp, #124]
   8b7c8:	29117fff 	stp	wzr, wzr, [sp, #136]
   8b7cc:	29127fff 	stp	wzr, wzr, [sp, #144]
   8b7d0:	b9009bff 	str	wzr, [sp, #152]
		args[0]=disasm_arg_Vt4s; args[1]=disasm_arg_Vn4s; args[2]=disasm_arg_Vm4s; 
   8b7d4:	790583e3 	strh	w3, [sp, #704]
   8b7d8:	390b0be2 	strb	w2, [sp, #706]
   8b7dc:	a9435bf5 	ldp	x21, x22, [sp, #48]
   8b7e0:	17ffe920 	b	85c60 <disasm+0x1c80>
		names="sha512su1\0rax1\0";
   8b7e4:	b0000043 	adrp	x3, 94000 <sd_init+0x2470>
   8b7e8:	911a2063 	add	x3, x3, #0x688
		op=((ic32_10)&0x1); m=((ic32_16)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8b7ec:	12000281 	and	w1, w20, #0x1
   8b7f0:	120010a4 	and	w4, w5, #0x1f
   8b7f4:	12001059 	and	w25, w2, #0x1f
   8b7f8:	1200101a 	and	w26, w0, #0x1f
		args[0]=disasm_arg_Vt2d; args[1]=disasm_arg_Vn2d; args[2]=disasm_arg_Vm2d; 
   8b7fc:	12800922 	mov	w2, #0xffffffb6            	// #-74
		names="sha512su1\0rax1\0";
   8b800:	9113c060 	add	x0, x3, #0x4f0
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8b804:	52800017 	mov	w23, #0x0                   	// #0
		args[0]=disasm_arg_Vt2d; args[1]=disasm_arg_Vn2d; args[2]=disasm_arg_Vm2d; 
   8b808:	128ea9c3 	mov	w3, #0xffff8ab1            	// #-30031
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8b80c:	52800018 	mov	w24, #0x0                   	// #0
   8b810:	5280001b 	mov	w27, #0x0                   	// #0
	uint16_t op=0, om=0, j=0;
   8b814:	52800014 	mov	w20, #0x0                   	// #0
	uint32_t i=0;
   8b818:	290effff 	stp	wzr, wzr, [sp, #116]
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8b81c:	290fffe4 	stp	w4, wzr, [sp, #124]
   8b820:	29117fff 	stp	wzr, wzr, [sp, #136]
   8b824:	29127fff 	stp	wzr, wzr, [sp, #144]
   8b828:	b9009bff 	str	wzr, [sp, #152]
		args[0]=disasm_arg_Vt2d; args[1]=disasm_arg_Vn2d; args[2]=disasm_arg_Vm2d; 
   8b82c:	790583e3 	strh	w3, [sp, #704]
   8b830:	390b0be2 	strb	w2, [sp, #706]
   8b834:	a9435bf5 	ldp	x21, x22, [sp, #48]
   8b838:	17ffe90a 	b	85c60 <disasm+0x1c80>
		names="sha512h\0sha512h2\0";
   8b83c:	b0000043 	adrp	x3, 94000 <sd_init+0x2470>
   8b840:	911a2063 	add	x3, x3, #0x688
		op=((ic32_10)&0x1); m=((ic32_16)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8b844:	12000281 	and	w1, w20, #0x1
   8b848:	120010a4 	and	w4, w5, #0x1f
   8b84c:	12001059 	and	w25, w2, #0x1f
   8b850:	1200101a 	and	w26, w0, #0x1f
		args[0]=disasm_arg_Qt; args[1]=disasm_arg_Qn; args[2]=disasm_arg_Vm2d; 
   8b854:	12800922 	mov	w2, #0xffffffb6            	// #-74
		names="sha512h\0sha512h2\0";
   8b858:	91136060 	add	x0, x3, #0x4d8
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8b85c:	52800017 	mov	w23, #0x0                   	// #0
		args[0]=disasm_arg_Qt; args[1]=disasm_arg_Qn; args[2]=disasm_arg_Vm2d; 
   8b860:	528e0d63 	mov	w3, #0x706b                	// #28779
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8b864:	52800018 	mov	w24, #0x0                   	// #0
   8b868:	5280001b 	mov	w27, #0x0                   	// #0
	uint16_t op=0, om=0, j=0;
   8b86c:	52800014 	mov	w20, #0x0                   	// #0
	uint32_t i=0;
   8b870:	290effff 	stp	wzr, wzr, [sp, #116]
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8b874:	290fffe4 	stp	w4, wzr, [sp, #124]
   8b878:	29117fff 	stp	wzr, wzr, [sp, #136]
   8b87c:	29127fff 	stp	wzr, wzr, [sp, #144]
   8b880:	b9009bff 	str	wzr, [sp, #152]
		args[0]=disasm_arg_Qt; args[1]=disasm_arg_Qn; args[2]=disasm_arg_Vm2d; 
   8b884:	790583e3 	strh	w3, [sp, #704]
   8b888:	390b0be2 	strb	w2, [sp, #706]
   8b88c:	a9435bf5 	ldp	x21, x22, [sp, #48]
   8b890:	17ffe8f4 	b	85c60 <disasm+0x1c80>
		names="sm3tt1a\0sm3tt1b\0sm3tt2a\0sm3tt2b\0";
   8b894:	b0000043 	adrp	x3, 94000 <sd_init+0x2470>
   8b898:	911a2063 	add	x3, x3, #0x688
		op=((ic32_10)&0x3); m=((ic32_16)&0x1f); j=((ic32_12)&0x3); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8b89c:	12000681 	and	w1, w20, #0x3
   8b8a0:	120010a4 	and	w4, w5, #0x1f
   8b8a4:	12001059 	and	w25, w2, #0x1f
   8b8a8:	1200101a 	and	w26, w0, #0x1f
		args[0]=disasm_arg_Vt4s; args[1]=disasm_arg_Vn4s; args[2]=disasm_arg_VmTs; 
   8b8ac:	12800c82 	mov	w2, #0xffffff9b            	// #-101
		names="sm3tt1a\0sm3tt1b\0sm3tt2a\0sm3tt2b\0";
   8b8b0:	9112c060 	add	x0, x3, #0x4b0
		op=((ic32_10)&0x3); m=((ic32_16)&0x1f); j=((ic32_12)&0x3); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8b8b4:	12000554 	and	w20, w10, #0x3
		args[0]=disasm_arg_Vt4s; args[1]=disasm_arg_Vn4s; args[2]=disasm_arg_VmTs; 
   8b8b8:	528dedc3 	mov	w3, #0x6f6e                	// #28526
		z=0;
   8b8bc:	52800017 	mov	w23, #0x0                   	// #0
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8b8c0:	52800018 	mov	w24, #0x0                   	// #0
   8b8c4:	5280001b 	mov	w27, #0x0                   	// #0
	uint32_t i=0;
   8b8c8:	290effff 	stp	wzr, wzr, [sp, #116]
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8b8cc:	290fffe4 	stp	w4, wzr, [sp, #124]
   8b8d0:	29117fff 	stp	wzr, wzr, [sp, #136]
   8b8d4:	29127fff 	stp	wzr, wzr, [sp, #144]
   8b8d8:	b9009bff 	str	wzr, [sp, #152]
		args[0]=disasm_arg_Vt4s; args[1]=disasm_arg_Vn4s; args[2]=disasm_arg_VmTs; 
   8b8dc:	790583e3 	strh	w3, [sp, #704]
   8b8e0:	390b0be2 	strb	w2, [sp, #706]
   8b8e4:	a9435bf5 	ldp	x21, x22, [sp, #48]
   8b8e8:	17ffe8de 	b	85c60 <disasm+0x1c80>
		m=((ic32_16)&0x1f); d=((ic32_10)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8b8ec:	120010a3 	and	w3, w5, #0x1f
		names="sm3ss1\0";
   8b8f0:	b0000041 	adrp	x1, 94000 <sd_init+0x2470>
		m=((ic32_16)&0x1f); d=((ic32_10)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8b8f4:	12001059 	and	w25, w2, #0x1f
		names="sm3ss1\0";
   8b8f8:	911a2021 	add	x1, x1, #0x688
		args[0]=disasm_arg_Vt4s; args[1]=disasm_arg_Vn4s; args[2]=disasm_arg_Vm4s; args[3]=disasm_arg_Vd4s; 
   8b8fc:	528dedc2 	mov	w2, #0x6f6e                	// #28526
		m=((ic32_16)&0x1f); d=((ic32_10)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8b900:	1200101a 	and	w26, w0, #0x1f
		args[0]=disasm_arg_Vt4s; args[1]=disasm_arg_Vn4s; args[2]=disasm_arg_Vm4s; args[3]=disasm_arg_Vd4s; 
   8b904:	72b72da2 	movk	w2, #0xb96d, lsl #16
		names="sm3ss1\0";
   8b908:	9112a020 	add	x0, x1, #0x4a8
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8b90c:	52800017 	mov	w23, #0x0                   	// #0
   8b910:	52800018 	mov	w24, #0x0                   	// #0
   8b914:	5280001b 	mov	w27, #0x0                   	// #0
	uint16_t op=0, om=0, j=0;
   8b918:	52800001 	mov	w1, #0x0                   	// #0
	uint32_t i=0;
   8b91c:	290effff 	stp	wzr, wzr, [sp, #116]
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8b920:	290fffe3 	stp	w3, wzr, [sp, #124]
		m=((ic32_16)&0x1f); d=((ic32_10)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8b924:	12001283 	and	w3, w20, #0x1f
	uint16_t op=0, om=0, j=0;
   8b928:	52800014 	mov	w20, #0x0                   	// #0
		m=((ic32_16)&0x1f); d=((ic32_10)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8b92c:	b9008be3 	str	w3, [sp, #136]
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8b930:	2911ffff 	stp	wzr, wzr, [sp, #140]
   8b934:	2912ffff 	stp	wzr, wzr, [sp, #148]
		args[0]=disasm_arg_Vt4s; args[1]=disasm_arg_Vn4s; args[2]=disasm_arg_Vm4s; args[3]=disasm_arg_Vd4s; 
   8b938:	b902c3e2 	str	w2, [sp, #704]
   8b93c:	a9435bf5 	ldp	x21, x22, [sp, #48]
   8b940:	17ffe8c8 	b	85c60 <disasm+0x1c80>
		op=((ic32_21)&0x1); m=((ic32_16)&0x1f); d=((ic32_10)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8b944:	120010a4 	and	w4, w5, #0x1f
		names="eor3\0bcax\0";
   8b948:	b0000043 	adrp	x3, 94000 <sd_init+0x2470>
		op=((ic32_21)&0x1); m=((ic32_16)&0x1f); d=((ic32_10)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8b94c:	12001059 	and	w25, w2, #0x1f
		names="eor3\0bcax\0";
   8b950:	911a2063 	add	x3, x3, #0x688
		args[0]=disasm_arg_Vt16b; args[1]=disasm_arg_Vn16b; args[2]=disasm_arg_Vm16b; args[3]=disasm_arg_Vd16b; 
   8b954:	528d4d22 	mov	w2, #0x6a69                	// #27241
		op=((ic32_21)&0x1); m=((ic32_16)&0x1f); d=((ic32_10)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8b958:	1200101a 	and	w26, w0, #0x1f
		args[0]=disasm_arg_Vt16b; args[1]=disasm_arg_Vn16b; args[2]=disasm_arg_Vm16b; args[3]=disasm_arg_Vd16b; 
   8b95c:	72b716e2 	movk	w2, #0xb8b7, lsl #16
		op=((ic32_21)&0x1); m=((ic32_16)&0x1f); d=((ic32_10)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8b960:	12000181 	and	w1, w12, #0x1
		names="eor3\0bcax\0";
   8b964:	91126060 	add	x0, x3, #0x498
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8b968:	52800017 	mov	w23, #0x0                   	// #0
   8b96c:	52800018 	mov	w24, #0x0                   	// #0
   8b970:	5280001b 	mov	w27, #0x0                   	// #0
	uint32_t i=0;
   8b974:	290effff 	stp	wzr, wzr, [sp, #116]
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8b978:	290fffe4 	stp	w4, wzr, [sp, #124]
		op=((ic32_21)&0x1); m=((ic32_16)&0x1f); d=((ic32_10)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8b97c:	12001284 	and	w4, w20, #0x1f
	uint16_t op=0, om=0, j=0;
   8b980:	52800014 	mov	w20, #0x0                   	// #0
		op=((ic32_21)&0x1); m=((ic32_16)&0x1f); d=((ic32_10)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8b984:	b9008be4 	str	w4, [sp, #136]
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8b988:	2911ffff 	stp	wzr, wzr, [sp, #140]
   8b98c:	2912ffff 	stp	wzr, wzr, [sp, #148]
		args[0]=disasm_arg_Vt16b; args[1]=disasm_arg_Vn16b; args[2]=disasm_arg_Vm16b; args[3]=disasm_arg_Vd16b; 
   8b990:	b902c3e2 	str	w2, [sp, #704]
   8b994:	a9435bf5 	ldp	x21, x22, [sp, #48]
   8b998:	17ffe8b2 	b	85c60 <disasm+0x1c80>
		names="ldrsw\0";
   8b99c:	b0000041 	adrp	x1, 94000 <sd_init+0x2470>
		args[0]=disasm_arg_Xt; args[1]=disasm_arg_offs; args[2]=disasm_arg_XnS; args[3]=disasm_arg_j_opt; args[4]=disasm_arg_offe; 
   8b9a0:	52852063 	mov	w3, #0x2903                	// #10499
		names="ldrsw\0";
   8b9a4:	911a2021 	add	x1, x1, #0x688
		j=((ic32_10)&0xfff); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8b9a8:	12001059 	and	w25, w2, #0x1f
   8b9ac:	1200101a 	and	w26, w0, #0x1f
		args[0]=disasm_arg_Xt; args[1]=disasm_arg_offs; args[2]=disasm_arg_XnS; args[3]=disasm_arg_j_opt; args[4]=disasm_arg_offe; 
   8b9b0:	72ab8543 	movk	w3, #0x5c2a, lsl #16
		names="ldrsw\0";
   8b9b4:	91110020 	add	x0, x1, #0x440
		args[0]=disasm_arg_Xt; args[1]=disasm_arg_offs; args[2]=disasm_arg_XnS; args[3]=disasm_arg_j_opt; args[4]=disasm_arg_offe; 
   8b9b8:	52800562 	mov	w2, #0x2b                  	// #43
		j=((ic32_10)&0xfff); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8b9bc:	12002e94 	and	w20, w20, #0xfff
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8b9c0:	52800017 	mov	w23, #0x0                   	// #0
   8b9c4:	52800018 	mov	w24, #0x0                   	// #0
   8b9c8:	5280001b 	mov	w27, #0x0                   	// #0
	uint16_t op=0, om=0, j=0;
   8b9cc:	52800001 	mov	w1, #0x0                   	// #0
	uint32_t i=0;
   8b9d0:	290effff 	stp	wzr, wzr, [sp, #116]
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8b9d4:	290fffff 	stp	wzr, wzr, [sp, #124]
   8b9d8:	29117fff 	stp	wzr, wzr, [sp, #136]
   8b9dc:	29127fff 	stp	wzr, wzr, [sp, #144]
   8b9e0:	b9009bff 	str	wzr, [sp, #152]
		args[0]=disasm_arg_Xt; args[1]=disasm_arg_offs; args[2]=disasm_arg_XnS; args[3]=disasm_arg_j_opt; args[4]=disasm_arg_offe; 
   8b9e4:	b902c3e3 	str	w3, [sp, #704]
   8b9e8:	390b13e2 	strb	w2, [sp, #708]
   8b9ec:	a9435bf5 	ldp	x21, x22, [sp, #48]
   8b9f0:	17ffe89c 	b	85c60 <disasm+0x1c80>
		m=((ic32_16)&0x1f); o=((ic32_13)&0x7); j=((ic32_12)&0x1); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8b9f4:	120010a3 	and	w3, w5, #0x1f
   8b9f8:	b9007fe3 	str	w3, [sp, #124]
   8b9fc:	12000963 	and	w3, w11, #0x7
		names="ldrsw\0";
   8ba00:	b0000041 	adrp	x1, 94000 <sd_init+0x2470>
   8ba04:	911a2021 	add	x1, x1, #0x688
		m=((ic32_16)&0x1f); o=((ic32_13)&0x7); j=((ic32_12)&0x1); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8ba08:	b90083e3 	str	w3, [sp, #128]
		args[0]=disasm_arg_Xt; args[1]=disasm_arg_offs; args[2]=disasm_arg_XnS; args[3]=disasm_arg_Rom; args[4]=disasm_arg_amountj2; args[5]=disasm_arg_offe; 
   8ba0c:	52852063 	mov	w3, #0x2903                	// #10499
		m=((ic32_16)&0x1f); o=((ic32_13)&0x7); j=((ic32_12)&0x1); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8ba10:	12001059 	and	w25, w2, #0x1f
   8ba14:	1200101a 	and	w26, w0, #0x1f
		args[0]=disasm_arg_Xt; args[1]=disasm_arg_offs; args[2]=disasm_arg_XnS; args[3]=disasm_arg_Rom; args[4]=disasm_arg_amountj2; args[5]=disasm_arg_offe; 
   8ba18:	52856c22 	mov	w2, #0x2b61                	// #11105
		names="ldrsw\0";
   8ba1c:	91110020 	add	x0, x1, #0x440
		args[0]=disasm_arg_Xt; args[1]=disasm_arg_offs; args[2]=disasm_arg_XnS; args[3]=disasm_arg_Rom; args[4]=disasm_arg_amountj2; args[5]=disasm_arg_offe; 
   8ba20:	72aba543 	movk	w3, #0x5d2a, lsl #16
		m=((ic32_16)&0x1f); o=((ic32_13)&0x7); j=((ic32_12)&0x1); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8ba24:	12000154 	and	w20, w10, #0x1
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8ba28:	52800017 	mov	w23, #0x0                   	// #0
   8ba2c:	52800018 	mov	w24, #0x0                   	// #0
   8ba30:	5280001b 	mov	w27, #0x0                   	// #0
	uint16_t op=0, om=0, j=0;
   8ba34:	52800001 	mov	w1, #0x0                   	// #0
	uint32_t i=0;
   8ba38:	290effff 	stp	wzr, wzr, [sp, #116]
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8ba3c:	29117fff 	stp	wzr, wzr, [sp, #136]
   8ba40:	29127fff 	stp	wzr, wzr, [sp, #144]
   8ba44:	b9009bff 	str	wzr, [sp, #152]
		args[0]=disasm_arg_Xt; args[1]=disasm_arg_offs; args[2]=disasm_arg_XnS; args[3]=disasm_arg_Rom; args[4]=disasm_arg_amountj2; args[5]=disasm_arg_offe; 
   8ba48:	b902c3e3 	str	w3, [sp, #704]
   8ba4c:	79058be2 	strh	w2, [sp, #708]
   8ba50:	a9435bf5 	ldp	x21, x22, [sp, #48]
   8ba54:	17ffe883 	b	85c60 <disasm+0x1c80>
		i=((ic32_20)&1?(-1<<9):0)|((ic32_12)&0x1ff); p=((ic32_11)&0x1); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8ba58:	f240011f 	tst	x8, #0x1
   8ba5c:	1200214a 	and	w10, w10, #0x1ff
   8ba60:	12803fe3 	mov	w3, #0xfffffe00            	// #-512
   8ba64:	1a9f1063 	csel	w3, w3, wzr, ne  // ne = any
		names="ldrsw\0";
   8ba68:	b0000041 	adrp	x1, 94000 <sd_init+0x2470>
		i=((ic32_20)&1?(-1<<9):0)|((ic32_12)&0x1ff); p=((ic32_11)&0x1); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8ba6c:	1200101a 	and	w26, w0, #0x1f
		names="ldrsw\0";
   8ba70:	911a2021 	add	x1, x1, #0x688
		i=((ic32_20)&1?(-1<<9):0)|((ic32_12)&0x1ff); p=((ic32_11)&0x1); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8ba74:	2a030140 	orr	w0, w10, w3
   8ba78:	290e83ff 	stp	wzr, w0, [sp, #116]
		names="ldrsw\0";
   8ba7c:	91110020 	add	x0, x1, #0x440
		args[0]=disasm_arg_Xt; args[1]=disasm_arg_offs; args[2]=disasm_arg_XnS; args[3]=disasm_arg_i_opt; args[4]=disasm_arg_offe; 
   8ba80:	52852061 	mov	w1, #0x2903                	// #10499
		i=((ic32_20)&1?(-1<<9):0)|((ic32_12)&0x1ff); p=((ic32_11)&0x1); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8ba84:	120001a4 	and	w4, w13, #0x1
		args[0]=disasm_arg_Xt; args[1]=disasm_arg_offs; args[2]=disasm_arg_XnS; args[3]=disasm_arg_i_opt; args[4]=disasm_arg_offe; 
   8ba88:	72a22541 	movk	w1, #0x112a, lsl #16
		i=((ic32_20)&1?(-1<<9):0)|((ic32_12)&0x1ff); p=((ic32_11)&0x1); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8ba8c:	12001059 	and	w25, w2, #0x1f
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8ba90:	52800017 	mov	w23, #0x0                   	// #0
		args[0]=disasm_arg_Xt; args[1]=disasm_arg_offs; args[2]=disasm_arg_XnS; args[3]=disasm_arg_i_opt; args[4]=disasm_arg_offe; 
   8ba94:	52800562 	mov	w2, #0x2b                  	// #43
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8ba98:	52800018 	mov	w24, #0x0                   	// #0
   8ba9c:	5280001b 	mov	w27, #0x0                   	// #0
	uint16_t op=0, om=0, j=0;
   8baa0:	52800014 	mov	w20, #0x0                   	// #0
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8baa4:	290fffff 	stp	wzr, wzr, [sp, #124]
   8baa8:	29117fff 	stp	wzr, wzr, [sp, #136]
   8baac:	29127fe4 	stp	w4, wzr, [sp, #144]
   8bab0:	b9009bff 	str	wzr, [sp, #152]
		args[0]=disasm_arg_Xt; args[1]=disasm_arg_offs; args[2]=disasm_arg_XnS; args[3]=disasm_arg_i_opt; args[4]=disasm_arg_offe; 
   8bab4:	b902c3e1 	str	w1, [sp, #704]
	uint16_t op=0, om=0, j=0;
   8bab8:	52800001 	mov	w1, #0x0                   	// #0
		args[0]=disasm_arg_Xt; args[1]=disasm_arg_offs; args[2]=disasm_arg_XnS; args[3]=disasm_arg_i_opt; args[4]=disasm_arg_offe; 
   8babc:	390b13e2 	strb	w2, [sp, #708]
   8bac0:	a9435bf5 	ldp	x21, x22, [sp, #48]
   8bac4:	17ffe867 	b	85c60 <disasm+0x1c80>
		i=((ic32_20)&1?(-1<<9):0)|((ic32_12)&0x1ff); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8bac8:	f240011f 	tst	x8, #0x1
   8bacc:	1200214a 	and	w10, w10, #0x1ff
   8bad0:	12803fe3 	mov	w3, #0xfffffe00            	// #-512
   8bad4:	1a9f1063 	csel	w3, w3, wzr, ne  // ne = any
		names="ldrsw\0";
   8bad8:	b0000041 	adrp	x1, 94000 <sd_init+0x2470>
		i=((ic32_20)&1?(-1<<9):0)|((ic32_12)&0x1ff); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8badc:	1200101a 	and	w26, w0, #0x1f
		names="ldrsw\0";
   8bae0:	911a2021 	add	x1, x1, #0x688
		i=((ic32_20)&1?(-1<<9):0)|((ic32_12)&0x1ff); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8bae4:	2a030140 	orr	w0, w10, w3
   8bae8:	290e83ff 	stp	wzr, w0, [sp, #116]
		names="ldrsw\0";
   8baec:	91110020 	add	x0, x1, #0x440
		args[0]=disasm_arg_Xt; args[1]=disasm_arg_offs; args[2]=disasm_arg_XnS; args[3]=disasm_arg_offe; args[4]=disasm_arg_i_opt; 
   8baf0:	52852061 	mov	w1, #0x2903                	// #10499
		i=((ic32_20)&1?(-1<<9):0)|((ic32_12)&0x1ff); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8baf4:	12001059 	and	w25, w2, #0x1f
		args[0]=disasm_arg_Xt; args[1]=disasm_arg_offs; args[2]=disasm_arg_XnS; args[3]=disasm_arg_offe; args[4]=disasm_arg_i_opt; 
   8baf8:	72a56541 	movk	w1, #0x2b2a, lsl #16
   8bafc:	52800222 	mov	w2, #0x11                  	// #17
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8bb00:	52800017 	mov	w23, #0x0                   	// #0
   8bb04:	52800018 	mov	w24, #0x0                   	// #0
   8bb08:	5280001b 	mov	w27, #0x0                   	// #0
	uint16_t op=0, om=0, j=0;
   8bb0c:	52800014 	mov	w20, #0x0                   	// #0
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8bb10:	290fffff 	stp	wzr, wzr, [sp, #124]
   8bb14:	29117fff 	stp	wzr, wzr, [sp, #136]
   8bb18:	29127fff 	stp	wzr, wzr, [sp, #144]
   8bb1c:	b9009bff 	str	wzr, [sp, #152]
		args[0]=disasm_arg_Xt; args[1]=disasm_arg_offs; args[2]=disasm_arg_XnS; args[3]=disasm_arg_offe; args[4]=disasm_arg_i_opt; 
   8bb20:	b902c3e1 	str	w1, [sp, #704]
	uint16_t op=0, om=0, j=0;
   8bb24:	52800001 	mov	w1, #0x0                   	// #0
		args[0]=disasm_arg_Xt; args[1]=disasm_arg_offs; args[2]=disasm_arg_XnS; args[3]=disasm_arg_offe; args[4]=disasm_arg_i_opt; 
   8bb28:	390b13e2 	strb	w2, [sp, #708]
   8bb2c:	a9435bf5 	ldp	x21, x22, [sp, #48]
   8bb30:	17ffe84c 	b	85c60 <disasm+0x1c80>
		names="smulh\0umulh\0";
   8bb34:	b0000043 	adrp	x3, 94000 <sd_init+0x2470>
   8bb38:	911a2063 	add	x3, x3, #0x688
		op=((ic32_23)&0x1); m=((ic32_16)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8bb3c:	120010a4 	and	w4, w5, #0x1f
   8bb40:	12001059 	and	w25, w2, #0x1f
   8bb44:	1200101a 	and	w26, w0, #0x1f
		args[0]=disasm_arg_Xt; args[1]=disasm_arg_Xn; args[2]=disasm_arg_Xm; 
   8bb48:	528005a2 	mov	w2, #0x2d                  	// #45
		names="smulh\0umulh\0";
   8bb4c:	91122060 	add	x0, x3, #0x488
		op=((ic32_23)&0x1); m=((ic32_16)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8bb50:	12000201 	and	w1, w16, #0x1
		args[0]=disasm_arg_Xt; args[1]=disasm_arg_Xn; args[2]=disasm_arg_Xm; 
   8bb54:	52846063 	mov	w3, #0x2303                	// #8963
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8bb58:	52800017 	mov	w23, #0x0                   	// #0
   8bb5c:	52800018 	mov	w24, #0x0                   	// #0
   8bb60:	5280001b 	mov	w27, #0x0                   	// #0
	uint16_t op=0, om=0, j=0;
   8bb64:	52800014 	mov	w20, #0x0                   	// #0
	uint32_t i=0;
   8bb68:	290effff 	stp	wzr, wzr, [sp, #116]
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8bb6c:	290fffe4 	stp	w4, wzr, [sp, #124]
   8bb70:	29117fff 	stp	wzr, wzr, [sp, #136]
   8bb74:	29127fff 	stp	wzr, wzr, [sp, #144]
   8bb78:	b9009bff 	str	wzr, [sp, #152]
		args[0]=disasm_arg_Xt; args[1]=disasm_arg_Xn; args[2]=disasm_arg_Xm; 
   8bb7c:	790583e3 	strh	w3, [sp, #704]
   8bb80:	390b0be2 	strb	w2, [sp, #706]
   8bb84:	a9435bf5 	ldp	x21, x22, [sp, #48]
   8bb88:	17ffe836 	b	85c60 <disasm+0x1c80>
		op=((ic32_22)&0x2)|((ic32_15)&0x1); m=((ic32_16)&0x1f); d=((ic32_10)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8bb8c:	120010a4 	and	w4, w5, #0x1f
   8bb90:	121f00e1 	and	w1, w7, #0x2
   8bb94:	120000c6 	and	w6, w6, #0x1
		names="smaddl\0smsubl\0umaddl\0umsubl\0";
   8bb98:	b0000043 	adrp	x3, 94000 <sd_init+0x2470>
		op=((ic32_22)&0x2)|((ic32_15)&0x1); m=((ic32_16)&0x1f); d=((ic32_10)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8bb9c:	12001059 	and	w25, w2, #0x1f
		names="smaddl\0smsubl\0umaddl\0umsubl\0";
   8bba0:	911a2063 	add	x3, x3, #0x688
		args[0]=disasm_arg_Xt; args[1]=disasm_arg_Wn; args[2]=disasm_arg_Wm; args[3]=disasm_arg_Xd; 
   8bba4:	528cc062 	mov	w2, #0x6603                	// #26115
		op=((ic32_22)&0x2)|((ic32_15)&0x1); m=((ic32_16)&0x1f); d=((ic32_10)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8bba8:	1200101a 	and	w26, w0, #0x1f
		args[0]=disasm_arg_Xt; args[1]=disasm_arg_Wn; args[2]=disasm_arg_Wm; args[3]=disasm_arg_Xd; 
   8bbac:	72ad0ce2 	movk	w2, #0x6867, lsl #16
		op=((ic32_22)&0x2)|((ic32_15)&0x1); m=((ic32_16)&0x1f); d=((ic32_10)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8bbb0:	2a060021 	orr	w1, w1, w6
		names="smaddl\0smsubl\0umaddl\0umsubl\0";
   8bbb4:	9111a060 	add	x0, x3, #0x468
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8bbb8:	52800017 	mov	w23, #0x0                   	// #0
   8bbbc:	52800018 	mov	w24, #0x0                   	// #0
   8bbc0:	5280001b 	mov	w27, #0x0                   	// #0
	uint32_t i=0;
   8bbc4:	290effff 	stp	wzr, wzr, [sp, #116]
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8bbc8:	290fffe4 	stp	w4, wzr, [sp, #124]
		op=((ic32_22)&0x2)|((ic32_15)&0x1); m=((ic32_16)&0x1f); d=((ic32_10)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8bbcc:	12001284 	and	w4, w20, #0x1f
	uint16_t op=0, om=0, j=0;
   8bbd0:	52800014 	mov	w20, #0x0                   	// #0
		op=((ic32_22)&0x2)|((ic32_15)&0x1); m=((ic32_16)&0x1f); d=((ic32_10)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8bbd4:	b9008be4 	str	w4, [sp, #136]
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8bbd8:	2911ffff 	stp	wzr, wzr, [sp, #140]
   8bbdc:	2912ffff 	stp	wzr, wzr, [sp, #148]
		args[0]=disasm_arg_Xt; args[1]=disasm_arg_Wn; args[2]=disasm_arg_Wm; args[3]=disasm_arg_Xd; 
   8bbe0:	b902c3e2 	str	w2, [sp, #704]
   8bbe4:	a9435bf5 	ldp	x21, x22, [sp, #48]
   8bbe8:	17ffe81e 	b	85c60 <disasm+0x1c80>
		op=((ic32_22)&0x2)|((ic32_15)&0x1); m=((ic32_16)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8bbec:	121f00e1 	and	w1, w7, #0x2
   8bbf0:	120000c6 	and	w6, w6, #0x1
		names="smull\0smnegl\0umull\0umnegl\0";
   8bbf4:	b0000043 	adrp	x3, 94000 <sd_init+0x2470>
   8bbf8:	911a2063 	add	x3, x3, #0x688
		op=((ic32_22)&0x2)|((ic32_15)&0x1); m=((ic32_16)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8bbfc:	120010a4 	and	w4, w5, #0x1f
   8bc00:	12001059 	and	w25, w2, #0x1f
   8bc04:	1200101a 	and	w26, w0, #0x1f
		args[0]=disasm_arg_Xt; args[1]=disasm_arg_Wn; args[2]=disasm_arg_Wm; 
   8bc08:	52800ce2 	mov	w2, #0x67                  	// #103
		names="smull\0smnegl\0umull\0umnegl\0";
   8bc0c:	91112060 	add	x0, x3, #0x448
		op=((ic32_22)&0x2)|((ic32_15)&0x1); m=((ic32_16)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8bc10:	2a060021 	orr	w1, w1, w6
		args[0]=disasm_arg_Xt; args[1]=disasm_arg_Wn; args[2]=disasm_arg_Wm; 
   8bc14:	528cc063 	mov	w3, #0x6603                	// #26115
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8bc18:	52800017 	mov	w23, #0x0                   	// #0
   8bc1c:	52800018 	mov	w24, #0x0                   	// #0
   8bc20:	5280001b 	mov	w27, #0x0                   	// #0
	uint16_t op=0, om=0, j=0;
   8bc24:	52800014 	mov	w20, #0x0                   	// #0
	uint32_t i=0;
   8bc28:	290effff 	stp	wzr, wzr, [sp, #116]
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8bc2c:	290fffe4 	stp	w4, wzr, [sp, #124]
   8bc30:	29117fff 	stp	wzr, wzr, [sp, #136]
   8bc34:	29127fff 	stp	wzr, wzr, [sp, #144]
   8bc38:	b9009bff 	str	wzr, [sp, #152]
		args[0]=disasm_arg_Xt; args[1]=disasm_arg_Wn; args[2]=disasm_arg_Wm; 
   8bc3c:	790583e3 	strh	w3, [sp, #704]
   8bc40:	390b0be2 	strb	w2, [sp, #706]
   8bc44:	a9435bf5 	ldp	x21, x22, [sp, #48]
   8bc48:	17ffe806 	b	85c60 <disasm+0x1c80>
		i=((ic32_23)&1?(-1<<19):0)|((ic32_5)&0x7ffff); t=((ic32)&0x1f); 
   8bc4c:	f240021f 	tst	x16, #0x1
   8bc50:	12004842 	and	w2, w2, #0x7ffff
   8bc54:	52bfff03 	mov	w3, #0xfff80000            	// #-524288
   8bc58:	1a9f1063 	csel	w3, w3, wzr, ne  // ne = any
		names="ldrsw\0";
   8bc5c:	b0000041 	adrp	x1, 94000 <sd_init+0x2470>
		i=((ic32_23)&1?(-1<<19):0)|((ic32_5)&0x7ffff); t=((ic32)&0x1f); 
   8bc60:	1200101a 	and	w26, w0, #0x1f
		names="ldrsw\0";
   8bc64:	911a2021 	add	x1, x1, #0x688
		i=((ic32_23)&1?(-1<<19):0)|((ic32_5)&0x7ffff); t=((ic32)&0x1f); 
   8bc68:	2a030040 	orr	w0, w2, w3
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8bc6c:	52800017 	mov	w23, #0x0                   	// #0
		args[0]=disasm_arg_Xt; args[1]=disasm_arg_labeli4; 
   8bc70:	52820062 	mov	w2, #0x1003                	// #4099
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8bc74:	52800018 	mov	w24, #0x0                   	// #0
   8bc78:	52800019 	mov	w25, #0x0                   	// #0
   8bc7c:	5280001b 	mov	w27, #0x0                   	// #0
	uint16_t op=0, om=0, j=0;
   8bc80:	52800014 	mov	w20, #0x0                   	// #0
		i=((ic32_23)&1?(-1<<19):0)|((ic32_5)&0x7ffff); t=((ic32)&0x1f); 
   8bc84:	290e83ff 	stp	wzr, w0, [sp, #116]
		names="ldrsw\0";
   8bc88:	91110020 	add	x0, x1, #0x440
	uint16_t op=0, om=0, j=0;
   8bc8c:	52800001 	mov	w1, #0x0                   	// #0
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8bc90:	290fffff 	stp	wzr, wzr, [sp, #124]
   8bc94:	29117fff 	stp	wzr, wzr, [sp, #136]
   8bc98:	29127fff 	stp	wzr, wzr, [sp, #144]
   8bc9c:	b9009bff 	str	wzr, [sp, #152]
		args[0]=disasm_arg_Xt; args[1]=disasm_arg_labeli4; 
   8bca0:	790583e2 	strh	w2, [sp, #704]
   8bca4:	a9435bf5 	ldp	x21, x22, [sp, #48]
   8bca8:	17ffe7ee 	b	85c60 <disasm+0x1c80>
		names="stxr\0stlxr\0";
   8bcac:	b0000043 	adrp	x3, 94000 <sd_init+0x2470>
   8bcb0:	911a2063 	add	x3, x3, #0x688
		op=((ic32_15)&0x1); d=((ic32_16)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8bcb4:	1200101a 	and	w26, w0, #0x1f
		names="stxr\0stlxr\0";
   8bcb8:	9110c060 	add	x0, x3, #0x430
		args[0]=disasm_arg_Wd; args[1]=disasm_arg_Wt; args[2]=disasm_arg_offs; args[3]=disasm_arg_XnS; args[4]=disasm_arg_offe; 
   8bcbc:	528a6a43 	mov	w3, #0x5352                	// #21330
		op=((ic32_15)&0x1); d=((ic32_16)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8bcc0:	120010a4 	and	w4, w5, #0x1f
   8bcc4:	12001059 	and	w25, w2, #0x1f
		args[0]=disasm_arg_Wd; args[1]=disasm_arg_Wt; args[2]=disasm_arg_offs; args[3]=disasm_arg_XnS; args[4]=disasm_arg_offe; 
   8bcc8:	72a54523 	movk	w3, #0x2a29, lsl #16
   8bccc:	52800562 	mov	w2, #0x2b                  	// #43
		op=((ic32_15)&0x1); d=((ic32_16)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8bcd0:	120000c1 	and	w1, w6, #0x1
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8bcd4:	52800017 	mov	w23, #0x0                   	// #0
   8bcd8:	52800018 	mov	w24, #0x0                   	// #0
   8bcdc:	5280001b 	mov	w27, #0x0                   	// #0
	uint16_t op=0, om=0, j=0;
   8bce0:	52800014 	mov	w20, #0x0                   	// #0
	uint32_t i=0;
   8bce4:	290effff 	stp	wzr, wzr, [sp, #116]
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8bce8:	290fffff 	stp	wzr, wzr, [sp, #124]
   8bcec:	29117fe4 	stp	w4, wzr, [sp, #136]
   8bcf0:	29127fff 	stp	wzr, wzr, [sp, #144]
   8bcf4:	b9009bff 	str	wzr, [sp, #152]
		args[0]=disasm_arg_Wd; args[1]=disasm_arg_Wt; args[2]=disasm_arg_offs; args[3]=disasm_arg_XnS; args[4]=disasm_arg_offe; 
   8bcf8:	b902c3e3 	str	w3, [sp, #704]
   8bcfc:	390b13e2 	strb	w2, [sp, #708]
   8bd00:	a9435bf5 	ldp	x21, x22, [sp, #48]
   8bd04:	17ffe7d7 	b	85c60 <disasm+0x1c80>
		op=((ic32_27)&0x4)|((ic32_14)&0x3); j=((ic32_11)&0x1); q=((ic32_30)&0x1); m=((ic32_16)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8bd08:	121e0021 	and	w1, w1, #0x4
   8bd0c:	12000631 	and	w17, w17, #0x3
		names="fmla\0fmls\0fmul\0?\0?\0?\0fmulx\0";
   8bd10:	90000043 	adrp	x3, 93000 <sd_init+0x1470>
   8bd14:	91162063 	add	x3, x3, #0x588
		op=((ic32_27)&0x4)|((ic32_14)&0x3); j=((ic32_11)&0x1); q=((ic32_30)&0x1); m=((ic32_16)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8bd18:	12000098 	and	w24, w4, #0x1
   8bd1c:	12001059 	and	w25, w2, #0x1f
   8bd20:	120010a4 	and	w4, w5, #0x1f
   8bd24:	1200101a 	and	w26, w0, #0x1f
		args[0]=disasm_arg_Vtzq; args[1]=disasm_arg_Vnzq; args[2]=disasm_arg_VmTs2; 
   8bd28:	12800c42 	mov	w2, #0xffffff9d            	// #-99
		names="fmla\0fmls\0fmul\0?\0?\0?\0fmulx\0";
   8bd2c:	912b6060 	add	x0, x3, #0xad8
		op=((ic32_27)&0x4)|((ic32_14)&0x3); j=((ic32_11)&0x1); q=((ic32_30)&0x1); m=((ic32_16)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8bd30:	2a110021 	orr	w1, w1, w17
		args[0]=disasm_arg_Vtzq; args[1]=disasm_arg_Vnzq; args[2]=disasm_arg_VmTs2; 
   8bd34:	528fcfa3 	mov	w3, #0x7e7d                	// #32381
		op=((ic32_27)&0x4)|((ic32_14)&0x3); j=((ic32_11)&0x1); q=((ic32_30)&0x1); m=((ic32_16)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8bd38:	120001b4 	and	w20, w13, #0x1
		z=1;
   8bd3c:	52800037 	mov	w23, #0x1                   	// #1
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8bd40:	5280001b 	mov	w27, #0x0                   	// #0
	uint32_t i=0;
   8bd44:	290effff 	stp	wzr, wzr, [sp, #116]
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8bd48:	290fffe4 	stp	w4, wzr, [sp, #124]
   8bd4c:	29117fff 	stp	wzr, wzr, [sp, #136]
   8bd50:	29127fff 	stp	wzr, wzr, [sp, #144]
   8bd54:	b9009bff 	str	wzr, [sp, #152]
		args[0]=disasm_arg_Vtzq; args[1]=disasm_arg_Vnzq; args[2]=disasm_arg_VmTs2; 
   8bd58:	790583e3 	strh	w3, [sp, #704]
   8bd5c:	390b0be2 	strb	w2, [sp, #706]
   8bd60:	a9435bf5 	ldp	x21, x22, [sp, #48]
   8bd64:	17ffe7bf 	b	85c60 <disasm+0x1c80>
		op=((ic32_27)&0x4)|((ic32_14)&0x3); j=((ic32_10)&0x2)|((ic32_21)&0x1); q=((ic32_30)&0x1); m=((ic32_16)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8bd68:	121e0021 	and	w1, w1, #0x4
   8bd6c:	12000631 	and	w17, w17, #0x3
   8bd70:	121f0294 	and	w20, w20, #0x2
   8bd74:	1200018c 	and	w12, w12, #0x1
		names="fmla\0fmls\0fmul\0sqrdmulh\0?\0?\0fmulx\0sqrdmlah\0";
   8bd78:	90000043 	adrp	x3, 93000 <sd_init+0x1470>
   8bd7c:	91162063 	add	x3, x3, #0x588
		op=((ic32_27)&0x4)|((ic32_14)&0x3); j=((ic32_10)&0x2)|((ic32_21)&0x1); q=((ic32_30)&0x1); m=((ic32_16)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8bd80:	12000098 	and	w24, w4, #0x1
   8bd84:	12001059 	and	w25, w2, #0x1f
   8bd88:	120010a4 	and	w4, w5, #0x1f
   8bd8c:	1200101a 	and	w26, w0, #0x1f
		args[0]=disasm_arg_Vtzq; args[1]=disasm_arg_Vnzq; args[2]=disasm_arg_VmTs2; 
   8bd90:	12800c42 	mov	w2, #0xffffff9d            	// #-99
		names="fmla\0fmls\0fmul\0sqrdmulh\0?\0?\0fmulx\0sqrdmlah\0";
   8bd94:	912e8060 	add	x0, x3, #0xba0
		op=((ic32_27)&0x4)|((ic32_14)&0x3); j=((ic32_10)&0x2)|((ic32_21)&0x1); q=((ic32_30)&0x1); m=((ic32_16)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8bd98:	2a110021 	orr	w1, w1, w17
		args[0]=disasm_arg_Vtzq; args[1]=disasm_arg_Vnzq; args[2]=disasm_arg_VmTs2; 
   8bd9c:	528fcfa3 	mov	w3, #0x7e7d                	// #32381
		op=((ic32_27)&0x4)|((ic32_14)&0x3); j=((ic32_10)&0x2)|((ic32_21)&0x1); q=((ic32_30)&0x1); m=((ic32_16)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8bda0:	2a0c0294 	orr	w20, w20, w12
		z=0;
   8bda4:	52800017 	mov	w23, #0x0                   	// #0
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8bda8:	5280001b 	mov	w27, #0x0                   	// #0
	uint32_t i=0;
   8bdac:	290effff 	stp	wzr, wzr, [sp, #116]
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8bdb0:	290fffe4 	stp	w4, wzr, [sp, #124]
   8bdb4:	29117fff 	stp	wzr, wzr, [sp, #136]
   8bdb8:	29127fff 	stp	wzr, wzr, [sp, #144]
   8bdbc:	b9009bff 	str	wzr, [sp, #152]
		args[0]=disasm_arg_Vtzq; args[1]=disasm_arg_Vnzq; args[2]=disasm_arg_VmTs2; 
   8bdc0:	790583e3 	strh	w3, [sp, #704]
   8bdc4:	390b0be2 	strb	w2, [sp, #706]
   8bdc8:	a9435bf5 	ldp	x21, x22, [sp, #48]
   8bdcc:	17ffe7a5 	b	85c60 <disasm+0x1c80>
		op=((ic32_29)&0x1); j=((ic32_10)&0x2)|((ic32_21)&0x1); q=((ic32_30)&0x1); m=((ic32_16)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8bdd0:	121f0294 	and	w20, w20, #0x2
   8bdd4:	1200018c 	and	w12, w12, #0x1
		names="sdot\0udot\0";
   8bdd8:	b0000043 	adrp	x3, 94000 <sd_init+0x2470>
   8bddc:	911a2063 	add	x3, x3, #0x688
		op=((ic32_29)&0x1); j=((ic32_10)&0x2)|((ic32_21)&0x1); q=((ic32_30)&0x1); m=((ic32_16)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8bde0:	120002a1 	and	w1, w21, #0x1
   8bde4:	12000098 	and	w24, w4, #0x1
   8bde8:	12001059 	and	w25, w2, #0x1f
   8bdec:	120010a4 	and	w4, w5, #0x1f
   8bdf0:	1200101a 	and	w26, w0, #0x1f
		args[0]=disasm_arg_Vtzq; args[1]=disasm_arg_VnT; args[2]=disasm_arg_VmTs4b; 
   8bdf4:	12800942 	mov	w2, #0xffffffb5            	// #-75
		names="sdot\0udot\0";
   8bdf8:	91022060 	add	x0, x3, #0x88
		op=((ic32_29)&0x1); j=((ic32_10)&0x2)|((ic32_21)&0x1); q=((ic32_30)&0x1); m=((ic32_16)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8bdfc:	2a0c0294 	orr	w20, w20, w12
		args[0]=disasm_arg_Vtzq; args[1]=disasm_arg_VnT; args[2]=disasm_arg_VmTs4b; 
   8be00:	128f7043 	mov	w3, #0xffff847d            	// #-31619
		z=0;
   8be04:	52800017 	mov	w23, #0x0                   	// #0
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8be08:	5280001b 	mov	w27, #0x0                   	// #0
	uint32_t i=0;
   8be0c:	290effff 	stp	wzr, wzr, [sp, #116]
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8be10:	290fffe4 	stp	w4, wzr, [sp, #124]
   8be14:	29117fff 	stp	wzr, wzr, [sp, #136]
   8be18:	29127fff 	stp	wzr, wzr, [sp, #144]
   8be1c:	b9009bff 	str	wzr, [sp, #152]
		args[0]=disasm_arg_Vtzq; args[1]=disasm_arg_VnT; args[2]=disasm_arg_VmTs4b; 
   8be20:	790583e3 	strh	w3, [sp, #704]
   8be24:	390b0be2 	strb	w2, [sp, #706]
   8be28:	a9435bf5 	ldp	x21, x22, [sp, #48]
   8be2c:	17ffe78d 	b	85c60 <disasm+0x1c80>
		op=((ic32_27)&0x4)|((ic32_12)&0x3); q=((ic32_30)&0x1); j=((ic32_16)&0x7f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8be30:	121e0021 	and	w1, w1, #0x4
   8be34:	1200054a 	and	w10, w10, #0x3
		names="?\0shl\0?\0sqshl\0sri\0sli\0sqshlu\0uqshl\0";
   8be38:	b0000043 	adrp	x3, 94000 <sd_init+0x2470>
   8be3c:	911a2063 	add	x3, x3, #0x688
		op=((ic32_27)&0x4)|((ic32_12)&0x3); q=((ic32_30)&0x1); j=((ic32_16)&0x7f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8be40:	12001059 	and	w25, w2, #0x1f
   8be44:	1200101a 	and	w26, w0, #0x1f
		args[0]=disasm_arg_Vtj2; args[1]=disasm_arg_Vnj2; args[2]=disasm_arg_shlshift; 
   8be48:	12800d42 	mov	w2, #0xffffff95            	// #-107
		names="?\0shl\0?\0sqshl\0sri\0sli\0sqshlu\0uqshl\0";
   8be4c:	91102060 	add	x0, x3, #0x408
		op=((ic32_27)&0x4)|((ic32_12)&0x3); q=((ic32_30)&0x1); j=((ic32_16)&0x7f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8be50:	2a0a0021 	orr	w1, w1, w10
		args[0]=disasm_arg_Vtj2; args[1]=disasm_arg_Vnj2; args[2]=disasm_arg_shlshift; 
   8be54:	128d6d83 	mov	w3, #0xffff9493            	// #-27501
		op=((ic32_27)&0x4)|((ic32_12)&0x3); q=((ic32_30)&0x1); j=((ic32_16)&0x7f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8be58:	12000098 	and	w24, w4, #0x1
   8be5c:	120018b4 	and	w20, w5, #0x7f
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8be60:	52800017 	mov	w23, #0x0                   	// #0
   8be64:	5280001b 	mov	w27, #0x0                   	// #0
	uint32_t i=0;
   8be68:	290effff 	stp	wzr, wzr, [sp, #116]
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8be6c:	290fffff 	stp	wzr, wzr, [sp, #124]
   8be70:	29117fff 	stp	wzr, wzr, [sp, #136]
   8be74:	29127fff 	stp	wzr, wzr, [sp, #144]
   8be78:	b9009bff 	str	wzr, [sp, #152]
		args[0]=disasm_arg_Vtj2; args[1]=disasm_arg_Vnj2; args[2]=disasm_arg_shlshift; 
   8be7c:	790583e3 	strh	w3, [sp, #704]
   8be80:	390b0be2 	strb	w2, [sp, #706]
   8be84:	a9435bf5 	ldp	x21, x22, [sp, #48]
   8be88:	17ffe776 	b	85c60 <disasm+0x1c80>
		op=((ic32_27)&0x4)|((ic32_14)&0x3); j=((ic32_9)&0x4)|((ic32_20)&0x3); q=((ic32_30)&0x1); m=((ic32_16)&0xf); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8be8c:	121e0021 	and	w1, w1, #0x4
   8be90:	12000631 	and	w17, w17, #0x3
   8be94:	121e01ef 	and	w15, w15, #0x4
   8be98:	12000508 	and	w8, w8, #0x3
		names="fmla\0fmls\0fmul\0?\0?\0?\0fmulx\0";
   8be9c:	90000043 	adrp	x3, 93000 <sd_init+0x1470>
   8bea0:	91162063 	add	x3, x3, #0x588
		op=((ic32_27)&0x4)|((ic32_14)&0x3); j=((ic32_9)&0x4)|((ic32_20)&0x3); q=((ic32_30)&0x1); m=((ic32_16)&0xf); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8bea4:	12000098 	and	w24, w4, #0x1
   8bea8:	12001059 	and	w25, w2, #0x1f
   8beac:	12000ca4 	and	w4, w5, #0xf
   8beb0:	1200101a 	and	w26, w0, #0x1f
		args[0]=disasm_arg_VtH1; args[1]=disasm_arg_VnH1; args[2]=disasm_arg_VmHs; 
   8beb4:	12800c62 	mov	w2, #0xffffff9c            	// #-100
		names="fmla\0fmls\0fmul\0?\0?\0?\0fmulx\0";
   8beb8:	912b6060 	add	x0, x3, #0xad8
		op=((ic32_27)&0x4)|((ic32_14)&0x3); j=((ic32_9)&0x4)|((ic32_20)&0x3); q=((ic32_30)&0x1); m=((ic32_16)&0xf); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8bebc:	2a110021 	orr	w1, w1, w17
		args[0]=disasm_arg_VtH1; args[1]=disasm_arg_VnH1; args[2]=disasm_arg_VmHs; 
   8bec0:	528f6f43 	mov	w3, #0x7b7a                	// #31610
		op=((ic32_27)&0x4)|((ic32_14)&0x3); j=((ic32_9)&0x4)|((ic32_20)&0x3); q=((ic32_30)&0x1); m=((ic32_16)&0xf); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8bec4:	2a0801f4 	orr	w20, w15, w8
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8bec8:	52800017 	mov	w23, #0x0                   	// #0
   8becc:	5280001b 	mov	w27, #0x0                   	// #0
	uint32_t i=0;
   8bed0:	290effff 	stp	wzr, wzr, [sp, #116]
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8bed4:	290fffe4 	stp	w4, wzr, [sp, #124]
   8bed8:	29117fff 	stp	wzr, wzr, [sp, #136]
   8bedc:	29127fff 	stp	wzr, wzr, [sp, #144]
   8bee0:	b9009bff 	str	wzr, [sp, #152]
		args[0]=disasm_arg_VtH1; args[1]=disasm_arg_VnH1; args[2]=disasm_arg_VmHs; 
   8bee4:	790583e3 	strh	w3, [sp, #704]
   8bee8:	390b0be2 	strb	w2, [sp, #706]
   8beec:	a9435bf5 	ldp	x21, x22, [sp, #48]
   8bef0:	17ffe75c 	b	85c60 <disasm+0x1c80>
		op=((ic32_29)&0x1); q=((ic32_30)&0x1); j=((ic32_11)&0xe0)|((ic32_5)&0x1f); k=((ic32_12)&0x1); t=((ic32)&0x1f); 
   8bef4:	12001042 	and	w2, w2, #0x1f
   8bef8:	121b09ad 	and	w13, w13, #0xe0
		names="movi\0mvni\0";
   8befc:	b0000043 	adrp	x3, 94000 <sd_init+0x2470>
		op=((ic32_29)&0x1); q=((ic32_30)&0x1); j=((ic32_11)&0xe0)|((ic32_5)&0x1f); k=((ic32_12)&0x1); t=((ic32)&0x1f); 
   8bf00:	2a0201b4 	orr	w20, w13, w2
		names="movi\0mvni\0";
   8bf04:	911a2063 	add	x3, x3, #0x688
		op=((ic32_29)&0x1); q=((ic32_30)&0x1); j=((ic32_11)&0xe0)|((ic32_5)&0x1f); k=((ic32_12)&0x1); t=((ic32)&0x1f); 
   8bf08:	12000142 	and	w2, w10, #0x1
   8bf0c:	120002a1 	and	w1, w21, #0x1
   8bf10:	1200101a 	and	w26, w0, #0x1f
   8bf14:	12000098 	and	w24, w4, #0x1
		names="movi\0mvni\0";
   8bf18:	910fe060 	add	x0, x3, #0x3f8
		z=2;
   8bf1c:	52800057 	mov	w23, #0x2                   	// #2
		args[0]=disasm_arg_VtT; args[1]=disasm_arg_imm8; args[2]=disasm_arg_amountk2_opt; 
   8bf20:	128a5b43 	mov	w3, #0xffffad25            	// #-21211
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8bf24:	52800019 	mov	w25, #0x0                   	// #0
   8bf28:	5280001b 	mov	w27, #0x0                   	// #0
	uint32_t i=0;
   8bf2c:	290effe2 	stp	w2, wzr, [sp, #116]
		args[0]=disasm_arg_VtT; args[1]=disasm_arg_imm8; args[2]=disasm_arg_amountk2_opt; 
   8bf30:	12800a02 	mov	w2, #0xffffffaf            	// #-81
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8bf34:	290fffff 	stp	wzr, wzr, [sp, #124]
   8bf38:	29117fff 	stp	wzr, wzr, [sp, #136]
   8bf3c:	29127fff 	stp	wzr, wzr, [sp, #144]
   8bf40:	b9009bff 	str	wzr, [sp, #152]
		args[0]=disasm_arg_VtT; args[1]=disasm_arg_imm8; args[2]=disasm_arg_amountk2_opt; 
   8bf44:	790583e3 	strh	w3, [sp, #704]
   8bf48:	390b0be2 	strb	w2, [sp, #706]
   8bf4c:	a9435bf5 	ldp	x21, x22, [sp, #48]
   8bf50:	17ffe744 	b	85c60 <disasm+0x1c80>
		op=((ic32_28)&0x2)|((ic32_12)&0x1); q=((ic32_30)&0x1); j=((ic32_11)&0xe0)|((ic32_5)&0x1f); k=((ic32_13)&0x1); t=((ic32)&0x1f); 
   8bf54:	12001042 	and	w2, w2, #0x1f
   8bf58:	121b09ad 	and	w13, w13, #0xe0
   8bf5c:	121f0318 	and	w24, w24, #0x2
   8bf60:	12000141 	and	w1, w10, #0x1
		names="movi\0orr\0mvni\0bic\0";
   8bf64:	b0000043 	adrp	x3, 94000 <sd_init+0x2470>
		op=((ic32_28)&0x2)|((ic32_12)&0x1); q=((ic32_30)&0x1); j=((ic32_11)&0xe0)|((ic32_5)&0x1f); k=((ic32_13)&0x1); t=((ic32)&0x1f); 
   8bf68:	2a0201b4 	orr	w20, w13, w2
		names="movi\0orr\0mvni\0bic\0";
   8bf6c:	911a2063 	add	x3, x3, #0x688
		op=((ic32_28)&0x2)|((ic32_12)&0x1); q=((ic32_30)&0x1); j=((ic32_11)&0xe0)|((ic32_5)&0x1f); k=((ic32_13)&0x1); t=((ic32)&0x1f); 
   8bf70:	12000162 	and	w2, w11, #0x1
   8bf74:	2a010301 	orr	w1, w24, w1
   8bf78:	1200101a 	and	w26, w0, #0x1f
   8bf7c:	12000098 	and	w24, w4, #0x1
		names="movi\0orr\0mvni\0bic\0";
   8bf80:	910f8060 	add	x0, x3, #0x3e0
		z=1;
   8bf84:	52800037 	mov	w23, #0x1                   	// #1
		args[0]=disasm_arg_VtT; args[1]=disasm_arg_imm8; args[2]=disasm_arg_amountk_opt; 
   8bf88:	128a5b43 	mov	w3, #0xffffad25            	// #-21211
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8bf8c:	52800019 	mov	w25, #0x0                   	// #0
   8bf90:	5280001b 	mov	w27, #0x0                   	// #0
	uint32_t i=0;
   8bf94:	290effe2 	stp	w2, wzr, [sp, #116]
		args[0]=disasm_arg_VtT; args[1]=disasm_arg_imm8; args[2]=disasm_arg_amountk_opt; 
   8bf98:	12800a22 	mov	w2, #0xffffffae            	// #-82
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8bf9c:	290fffff 	stp	wzr, wzr, [sp, #124]
   8bfa0:	29117fff 	stp	wzr, wzr, [sp, #136]
   8bfa4:	29127fff 	stp	wzr, wzr, [sp, #144]
   8bfa8:	b9009bff 	str	wzr, [sp, #152]
		args[0]=disasm_arg_VtT; args[1]=disasm_arg_imm8; args[2]=disasm_arg_amountk_opt; 
   8bfac:	790583e3 	strh	w3, [sp, #704]
   8bfb0:	390b0be2 	strb	w2, [sp, #706]
   8bfb4:	a9435bf5 	ldp	x21, x22, [sp, #48]
   8bfb8:	17ffe72a 	b	85c60 <disasm+0x1c80>
		op=((ic32_28)&0x2)|((ic32_12)&0x1); q=((ic32_30)&0x1); j=((ic32_11)&0xe0)|((ic32_5)&0x1f); k=((ic32_13)&0x3); t=((ic32)&0x1f); 
   8bfbc:	12001042 	and	w2, w2, #0x1f
   8bfc0:	121b09ad 	and	w13, w13, #0xe0
   8bfc4:	121f0301 	and	w1, w24, #0x2
   8bfc8:	1200014a 	and	w10, w10, #0x1
		names="movi\0orr\0mvni\0bic\0";
   8bfcc:	b0000043 	adrp	x3, 94000 <sd_init+0x2470>
		op=((ic32_28)&0x2)|((ic32_12)&0x1); q=((ic32_30)&0x1); j=((ic32_11)&0xe0)|((ic32_5)&0x1f); k=((ic32_13)&0x3); t=((ic32)&0x1f); 
   8bfd0:	2a0201b4 	orr	w20, w13, w2
		names="movi\0orr\0mvni\0bic\0";
   8bfd4:	911a2063 	add	x3, x3, #0x688
		op=((ic32_28)&0x2)|((ic32_12)&0x1); q=((ic32_30)&0x1); j=((ic32_11)&0xe0)|((ic32_5)&0x1f); k=((ic32_13)&0x3); t=((ic32)&0x1f); 
   8bfd8:	12000562 	and	w2, w11, #0x3
   8bfdc:	1200101a 	and	w26, w0, #0x1f
   8bfe0:	2a0a0021 	orr	w1, w1, w10
		names="movi\0orr\0mvni\0bic\0";
   8bfe4:	910f8060 	add	x0, x3, #0x3e0
		op=((ic32_28)&0x2)|((ic32_12)&0x1); q=((ic32_30)&0x1); j=((ic32_11)&0xe0)|((ic32_5)&0x1f); k=((ic32_13)&0x3); t=((ic32)&0x1f); 
   8bfe8:	12000098 	and	w24, w4, #0x1
		args[0]=disasm_arg_VtT; args[1]=disasm_arg_imm8; args[2]=disasm_arg_amountk_opt; 
   8bfec:	128a5b43 	mov	w3, #0xffffad25            	// #-21211
		z=2;
   8bff0:	52800057 	mov	w23, #0x2                   	// #2
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8bff4:	52800019 	mov	w25, #0x0                   	// #0
   8bff8:	5280001b 	mov	w27, #0x0                   	// #0
	uint32_t i=0;
   8bffc:	290effe2 	stp	w2, wzr, [sp, #116]
		args[0]=disasm_arg_VtT; args[1]=disasm_arg_imm8; args[2]=disasm_arg_amountk_opt; 
   8c000:	12800a22 	mov	w2, #0xffffffae            	// #-82
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8c004:	290fffff 	stp	wzr, wzr, [sp, #124]
   8c008:	29117fff 	stp	wzr, wzr, [sp, #136]
   8c00c:	29127fff 	stp	wzr, wzr, [sp, #144]
   8c010:	b9009bff 	str	wzr, [sp, #152]
		args[0]=disasm_arg_VtT; args[1]=disasm_arg_imm8; args[2]=disasm_arg_amountk_opt; 
   8c014:	790583e3 	strh	w3, [sp, #704]
   8c018:	390b0be2 	strb	w2, [sp, #706]
   8c01c:	a9435bf5 	ldp	x21, x22, [sp, #48]
   8c020:	17ffe710 	b	85c60 <disasm+0x1c80>
		op=((ic32_25)&0x10)|((ic32_18)&0x8)|((ic32_11)&0x7); q=((ic32_30)&0x1); z=((ic32_22)&0x3); m=((ic32_16)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8c024:	53127c03 	lsr	w3, w0, #18
   8c028:	121c02e1 	and	w1, w23, #0x10
   8c02c:	121d007e 	and	w30, w3, #0x8
   8c030:	120009a6 	and	w6, w13, #0x7
   8c034:	2a1e0021 	orr	w1, w1, w30
		names="?\0?\0sdot\0?\0?\0?\0?\0?\0add\0cmtst\0mla\0mul\0smaxp\0sminp\0sqdmulh\0addp\0sqrdmlah\0sqrdmlsh\0udot\0?\0?\0?\0?\0?\0sub\0cmeq\0mls\0pmul\0umaxp\0uminp\0cqrdmulh\0";
   8c038:	90000043 	adrp	x3, 94000 <sd_init+0x2470>
   8c03c:	911a2063 	add	x3, x3, #0x688
		op=((ic32_25)&0x10)|((ic32_18)&0x8)|((ic32_11)&0x7); q=((ic32_30)&0x1); z=((ic32_22)&0x3); m=((ic32_16)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8c040:	12000098 	and	w24, w4, #0x1
   8c044:	12001059 	and	w25, w2, #0x1f
   8c048:	120010a4 	and	w4, w5, #0x1f
   8c04c:	1200101a 	and	w26, w0, #0x1f
		args[0]=disasm_arg_VtT; args[1]=disasm_arg_VnT; args[2]=disasm_arg_VmT; 
   8c050:	12800f42 	mov	w2, #0xffffff85            	// #-123
		names="?\0?\0sdot\0?\0?\0?\0?\0?\0add\0cmtst\0mla\0mul\0smaxp\0sminp\0sqdmulh\0addp\0sqrdmlah\0sqrdmlsh\0udot\0?\0?\0?\0?\0?\0sub\0cmeq\0mls\0pmul\0umaxp\0uminp\0cqrdmulh\0";
   8c054:	910d6060 	add	x0, x3, #0x358
		op=((ic32_25)&0x10)|((ic32_18)&0x8)|((ic32_11)&0x7); q=((ic32_30)&0x1); z=((ic32_22)&0x3); m=((ic32_16)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8c058:	2a060021 	orr	w1, w1, w6
		args[0]=disasm_arg_VtT; args[1]=disasm_arg_VnT; args[2]=disasm_arg_VmT; 
   8c05c:	128f7b43 	mov	w3, #0xffff8425            	// #-31707
		op=((ic32_25)&0x10)|((ic32_18)&0x8)|((ic32_11)&0x7); q=((ic32_30)&0x1); z=((ic32_22)&0x3); m=((ic32_16)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8c060:	120004f7 	and	w23, w7, #0x3
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8c064:	5280001b 	mov	w27, #0x0                   	// #0
	uint16_t op=0, om=0, j=0;
   8c068:	52800014 	mov	w20, #0x0                   	// #0
	uint32_t i=0;
   8c06c:	290effff 	stp	wzr, wzr, [sp, #116]
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8c070:	290fffe4 	stp	w4, wzr, [sp, #124]
   8c074:	29117fff 	stp	wzr, wzr, [sp, #136]
   8c078:	29127fff 	stp	wzr, wzr, [sp, #144]
   8c07c:	b9009bff 	str	wzr, [sp, #152]
		args[0]=disasm_arg_VtT; args[1]=disasm_arg_VnT; args[2]=disasm_arg_VmT; 
   8c080:	790583e3 	strh	w3, [sp, #704]
   8c084:	390b0be2 	strb	w2, [sp, #706]
   8c088:	a9435bf5 	ldp	x21, x22, [sp, #48]
   8c08c:	17ffe6f5 	b	85c60 <disasm+0x1c80>
		op=((ic32_25)&0x10)|((ic32_20)&0x8)|((ic32_11)&0x7); q=((ic32_30)&0x1); z=((ic32_22)&0x1); m=((ic32_16)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8c090:	121c02e1 	and	w1, w23, #0x10
   8c094:	121d0108 	and	w8, w8, #0x8
   8c098:	2a080021 	orr	w1, w1, w8
   8c09c:	120009a6 	and	w6, w13, #0x7
		names="fmaxnm\0fmla\0fadd\0?\0fcmeq\0?\0fmax\0frecps\0fminnm\0fmls\0fsub\0?\0?\0?\0fmin\0frsqrts\0fmaxnmp\0?\0faddp\0fmul\0fcmge\0facge\0fmaxp\0fdiv\0fminnmp\0?\0fabd\0?\0fcmgt\0facgt\0fminp\0";
   8c0a0:	90000043 	adrp	x3, 94000 <sd_init+0x2470>
   8c0a4:	911a2063 	add	x3, x3, #0x688
		op=((ic32_25)&0x10)|((ic32_20)&0x8)|((ic32_11)&0x7); q=((ic32_30)&0x1); z=((ic32_22)&0x1); m=((ic32_16)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8c0a8:	12000098 	and	w24, w4, #0x1
   8c0ac:	12001059 	and	w25, w2, #0x1f
   8c0b0:	120010a4 	and	w4, w5, #0x1f
   8c0b4:	1200101a 	and	w26, w0, #0x1f
		args[0]=disasm_arg_Vtzq; args[1]=disasm_arg_Vnzq; args[2]=disasm_arg_Vmzq; 
   8c0b8:	52800fe2 	mov	w2, #0x7f                  	// #127
		names="fmaxnm\0fmla\0fadd\0?\0fcmeq\0?\0fmax\0frecps\0fminnm\0fmls\0fsub\0?\0?\0?\0fmin\0frsqrts\0fmaxnmp\0?\0faddp\0fmul\0fcmge\0facge\0fmaxp\0fdiv\0fminnmp\0?\0fabd\0?\0fcmgt\0facgt\0fminp\0";
   8c0bc:	910ae060 	add	x0, x3, #0x2b8
		op=((ic32_25)&0x10)|((ic32_20)&0x8)|((ic32_11)&0x7); q=((ic32_30)&0x1); z=((ic32_22)&0x1); m=((ic32_16)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8c0c0:	2a060021 	orr	w1, w1, w6
		args[0]=disasm_arg_Vtzq; args[1]=disasm_arg_Vnzq; args[2]=disasm_arg_Vmzq; 
   8c0c4:	528fcfa3 	mov	w3, #0x7e7d                	// #32381
		op=((ic32_25)&0x10)|((ic32_20)&0x8)|((ic32_11)&0x7); q=((ic32_30)&0x1); z=((ic32_22)&0x1); m=((ic32_16)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8c0c8:	120000f7 	and	w23, w7, #0x1
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8c0cc:	5280001b 	mov	w27, #0x0                   	// #0
	uint16_t op=0, om=0, j=0;
   8c0d0:	52800014 	mov	w20, #0x0                   	// #0
	uint32_t i=0;
   8c0d4:	290effff 	stp	wzr, wzr, [sp, #116]
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8c0d8:	290fffe4 	stp	w4, wzr, [sp, #124]
   8c0dc:	29117fff 	stp	wzr, wzr, [sp, #136]
   8c0e0:	29127fff 	stp	wzr, wzr, [sp, #144]
   8c0e4:	b9009bff 	str	wzr, [sp, #152]
		args[0]=disasm_arg_Vtzq; args[1]=disasm_arg_Vnzq; args[2]=disasm_arg_Vmzq; 
   8c0e8:	790583e3 	strh	w3, [sp, #704]
   8c0ec:	390b0be2 	strb	w2, [sp, #706]
   8c0f0:	a9435bf5 	ldp	x21, x22, [sp, #48]
   8c0f4:	17ffe6db 	b	85c60 <disasm+0x1c80>
		op=((ic32_27)&0x4)|((ic32_22)&0x3); q=((ic32_30)&0x1); m=((ic32_16)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8c0f8:	121e0021 	and	w1, w1, #0x4
   8c0fc:	120004e7 	and	w7, w7, #0x3
		names="and\0bic\0orr\0orn\0eor\0bsl\0bit\0bif\0";
   8c100:	90000043 	adrp	x3, 94000 <sd_init+0x2470>
   8c104:	911a2063 	add	x3, x3, #0x688
		op=((ic32_27)&0x4)|((ic32_22)&0x3); q=((ic32_30)&0x1); m=((ic32_16)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8c108:	12000098 	and	w24, w4, #0x1
   8c10c:	12001059 	and	w25, w2, #0x1f
   8c110:	120010a4 	and	w4, w5, #0x1f
   8c114:	1200101a 	and	w26, w0, #0x1f
		args[0]=disasm_arg_VtT; args[1]=disasm_arg_VnT; args[2]=disasm_arg_VmT; 
   8c118:	12800f42 	mov	w2, #0xffffff85            	// #-123
		names="and\0bic\0orr\0orn\0eor\0bsl\0bit\0bif\0";
   8c11c:	910a4060 	add	x0, x3, #0x290
		op=((ic32_27)&0x4)|((ic32_22)&0x3); q=((ic32_30)&0x1); m=((ic32_16)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8c120:	2a070021 	orr	w1, w1, w7
		args[0]=disasm_arg_VtT; args[1]=disasm_arg_VnT; args[2]=disasm_arg_VmT; 
   8c124:	128f7b43 	mov	w3, #0xffff8425            	// #-31707
		z=0;
   8c128:	52800017 	mov	w23, #0x0                   	// #0
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8c12c:	5280001b 	mov	w27, #0x0                   	// #0
	uint16_t op=0, om=0, j=0;
   8c130:	52800014 	mov	w20, #0x0                   	// #0
	uint32_t i=0;
   8c134:	290effff 	stp	wzr, wzr, [sp, #116]
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8c138:	290fffe4 	stp	w4, wzr, [sp, #124]
   8c13c:	29117fff 	stp	wzr, wzr, [sp, #136]
   8c140:	29127fff 	stp	wzr, wzr, [sp, #144]
   8c144:	b9009bff 	str	wzr, [sp, #152]
		args[0]=disasm_arg_VtT; args[1]=disasm_arg_VnT; args[2]=disasm_arg_VmT; 
   8c148:	790583e3 	strh	w3, [sp, #704]
   8c14c:	390b0be2 	strb	w2, [sp, #706]
   8c150:	a9435bf5 	ldp	x21, x22, [sp, #48]
   8c154:	17ffe6c3 	b	85c60 <disasm+0x1c80>
		op=((ic32_27)&0x4)|((ic32_15)&0x2)|((ic32_12)&0x1); q=((ic32_30)&0x1); z=((ic32_22)&0x3); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8c158:	121f00c6 	and	w6, w6, #0x2
   8c15c:	121e0021 	and	w1, w1, #0x4
   8c160:	2a060021 	orr	w1, w1, w6
		names="smaxv\0?\0sminv\0addv\0umaxv\0?\0uminv\0";
   8c164:	90000043 	adrp	x3, 94000 <sd_init+0x2470>
		op=((ic32_27)&0x4)|((ic32_15)&0x2)|((ic32_12)&0x1); q=((ic32_30)&0x1); z=((ic32_22)&0x3); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8c168:	12000146 	and	w6, w10, #0x1
		names="smaxv\0?\0sminv\0addv\0umaxv\0?\0uminv\0";
   8c16c:	911a2063 	add	x3, x3, #0x688
		op=((ic32_27)&0x4)|((ic32_15)&0x2)|((ic32_12)&0x1); q=((ic32_30)&0x1); z=((ic32_22)&0x3); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8c170:	12001059 	and	w25, w2, #0x1f
   8c174:	1200101a 	and	w26, w0, #0x1f
		args[0]=disasm_arg_FPz3t; args[1]=disasm_arg_VnT; 
   8c178:	128f6f22 	mov	w2, #0xffff8486            	// #-31610
		op=((ic32_27)&0x4)|((ic32_15)&0x2)|((ic32_12)&0x1); q=((ic32_30)&0x1); z=((ic32_22)&0x3); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8c17c:	2a060021 	orr	w1, w1, w6
   8c180:	12000098 	and	w24, w4, #0x1
   8c184:	120004f7 	and	w23, w7, #0x3
		names="smaxv\0?\0sminv\0addv\0umaxv\0?\0uminv\0";
   8c188:	9109a060 	add	x0, x3, #0x268
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8c18c:	5280001b 	mov	w27, #0x0                   	// #0
	uint16_t op=0, om=0, j=0;
   8c190:	52800014 	mov	w20, #0x0                   	// #0
	uint32_t i=0;
   8c194:	290effff 	stp	wzr, wzr, [sp, #116]
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8c198:	290fffff 	stp	wzr, wzr, [sp, #124]
   8c19c:	29117fff 	stp	wzr, wzr, [sp, #136]
   8c1a0:	29127fff 	stp	wzr, wzr, [sp, #144]
   8c1a4:	b9009bff 	str	wzr, [sp, #152]
		args[0]=disasm_arg_FPz3t; args[1]=disasm_arg_VnT; 
   8c1a8:	790583e2 	strh	w2, [sp, #704]
   8c1ac:	a9435bf5 	ldp	x21, x22, [sp, #48]
   8c1b0:	17ffe6ac 	b	85c60 <disasm+0x1c80>
		names="saddlv\0uaddlv\0";
   8c1b4:	90000043 	adrp	x3, 94000 <sd_init+0x2470>
   8c1b8:	911a2063 	add	x3, x3, #0x688
		op=((ic32_29)&0x1); q=((ic32_30)&0x1); z=((ic32_22)&0x3); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8c1bc:	120002a1 	and	w1, w21, #0x1
   8c1c0:	12001059 	and	w25, w2, #0x1f
   8c1c4:	1200101a 	and	w26, w0, #0x1f
		args[0]=disasm_arg_FPz4t; args[1]=disasm_arg_VnT; 
   8c1c8:	128f6e42 	mov	w2, #0xffff848d            	// #-31603
		op=((ic32_29)&0x1); q=((ic32_30)&0x1); z=((ic32_22)&0x3); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8c1cc:	12000098 	and	w24, w4, #0x1
   8c1d0:	120004f7 	and	w23, w7, #0x3
		names="saddlv\0uaddlv\0";
   8c1d4:	91096060 	add	x0, x3, #0x258
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8c1d8:	5280001b 	mov	w27, #0x0                   	// #0
	uint16_t op=0, om=0, j=0;
   8c1dc:	52800014 	mov	w20, #0x0                   	// #0
	uint32_t i=0;
   8c1e0:	290effff 	stp	wzr, wzr, [sp, #116]
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8c1e4:	290fffff 	stp	wzr, wzr, [sp, #124]
   8c1e8:	29117fff 	stp	wzr, wzr, [sp, #136]
   8c1ec:	29127fff 	stp	wzr, wzr, [sp, #144]
   8c1f0:	b9009bff 	str	wzr, [sp, #152]
		args[0]=disasm_arg_FPz4t; args[1]=disasm_arg_VnT; 
   8c1f4:	790583e2 	strh	w2, [sp, #704]
   8c1f8:	a9435bf5 	ldp	x21, x22, [sp, #48]
   8c1fc:	17ffe699 	b	85c60 <disasm+0x1c80>
		op=((ic32_24)&0x20)|((ic32_19)&0x10)|((ic32_13)&0x8)|((ic32_12)&0x7); q=((ic32_30)&0x1); z=((ic32_22)&0x1); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8c200:	121b02c1 	and	w1, w22, #0x20
   8c204:	121c037b 	and	w27, w27, #0x10
   8c208:	121d0166 	and	w6, w11, #0x8
   8c20c:	1200094a 	and	w10, w10, #0x7
   8c210:	2a1b0021 	orr	w1, w1, w27
   8c214:	2a0a00c6 	orr	w6, w6, w10
		names="?\0?\0?\0?\0?\0?\0?\0?\0frintn\0frintm\0fcvtns\0fcvtms\0fcvtas\0scvtf\0?\0fabs\0?\0?\0?\0?\0fcmgt\0fcmeq\0fcmlt\0?\0frintp\0frintz\0fcvtps\0fcvtzs\0urecpe\0frecpe\0?\0frecpx\0?\0?\0?\0?\0?\0?\0?\0?\0?\0frintx\0fcvtnu\0fcvtmu\0fcvtau\0ucvtf\0?\0?\0?\0?\0?\0?\0fcmge\0fcmle\0?\0fneg\0frinta\0frinti\0fcvtpu\0fcvtzu\0?\0frsqrte\0?\0fsqrt\0";
   8c218:	90000043 	adrp	x3, 94000 <sd_init+0x2470>
   8c21c:	911a2063 	add	x3, x3, #0x688
		op=((ic32_24)&0x20)|((ic32_19)&0x10)|((ic32_13)&0x8)|((ic32_12)&0x7); q=((ic32_30)&0x1); z=((ic32_22)&0x1); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8c220:	12001059 	and	w25, w2, #0x1f
   8c224:	1200101a 	and	w26, w0, #0x1f
		args[0]=disasm_arg_Vtzq; args[1]=disasm_arg_Vnzq; 
   8c228:	528fcfa2 	mov	w2, #0x7e7d                	// #32381
		op=((ic32_24)&0x20)|((ic32_19)&0x10)|((ic32_13)&0x8)|((ic32_12)&0x7); q=((ic32_30)&0x1); z=((ic32_22)&0x1); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8c22c:	2a0100c1 	orr	w1, w6, w1
   8c230:	12000098 	and	w24, w4, #0x1
   8c234:	120000f7 	and	w23, w7, #0x1
		names="?\0?\0?\0?\0?\0?\0?\0?\0frintn\0frintm\0fcvtns\0fcvtms\0fcvtas\0scvtf\0?\0fabs\0?\0?\0?\0?\0fcmgt\0fcmeq\0fcmlt\0?\0frintp\0frintz\0fcvtps\0fcvtzs\0urecpe\0frecpe\0?\0frecpx\0?\0?\0?\0?\0?\0?\0?\0?\0?\0frintx\0fcvtnu\0fcvtmu\0fcvtau\0ucvtf\0?\0?\0?\0?\0?\0?\0fcmge\0fcmle\0?\0fneg\0frinta\0frinti\0fcvtpu\0fcvtzu\0?\0frsqrte\0?\0fsqrt\0";
   8c238:	91050060 	add	x0, x3, #0x140
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8c23c:	5280001b 	mov	w27, #0x0                   	// #0
	uint16_t op=0, om=0, j=0;
   8c240:	52800014 	mov	w20, #0x0                   	// #0
	uint32_t i=0;
   8c244:	290effff 	stp	wzr, wzr, [sp, #116]
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8c248:	290fffff 	stp	wzr, wzr, [sp, #124]
   8c24c:	29117fff 	stp	wzr, wzr, [sp, #136]
   8c250:	29127fff 	stp	wzr, wzr, [sp, #144]
   8c254:	b9009bff 	str	wzr, [sp, #152]
		args[0]=disasm_arg_Vtzq; args[1]=disasm_arg_Vnzq; 
   8c258:	790583e2 	strh	w2, [sp, #704]
   8c25c:	a9435bf5 	ldp	x21, x22, [sp, #48]
   8c260:	17ffe680 	b	85c60 <disasm+0x1c80>
		op=((ic32_25)&0x10)|((ic32_12)&0xf); q=((ic32_30)&0x1); z=((ic32_22)&0x3); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8c264:	121c02e1 	and	w1, w23, #0x10
   8c268:	12000d4a 	and	w10, w10, #0xf
		names="rev64\0rev16\0saddlp\0suqadd\0cls\0cnt\0sadalp\0sqabs\0cmgt\0cmeq\0cmlt\0abs\0?\0?\0?\0?\0rev32\0?\0uaddlp\0usqadd\0clz\0?\0uadalp\0sqneg\0cmge\0cmle\0?\0neg\0";
   8c26c:	90000043 	adrp	x3, 94000 <sd_init+0x2470>
   8c270:	911a2063 	add	x3, x3, #0x688
		op=((ic32_25)&0x10)|((ic32_12)&0xf); q=((ic32_30)&0x1); z=((ic32_22)&0x3); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8c274:	12001059 	and	w25, w2, #0x1f
   8c278:	1200101a 	and	w26, w0, #0x1f
		args[0]=disasm_arg_VtT; args[1]=disasm_arg_VnT; 
   8c27c:	128f7b42 	mov	w2, #0xffff8425            	// #-31707
		op=((ic32_25)&0x10)|((ic32_12)&0xf); q=((ic32_30)&0x1); z=((ic32_22)&0x3); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8c280:	2a0a0021 	orr	w1, w1, w10
   8c284:	12000098 	and	w24, w4, #0x1
   8c288:	120004f7 	and	w23, w7, #0x3
		names="rev64\0rev16\0saddlp\0suqadd\0cls\0cnt\0sadalp\0sqabs\0cmgt\0cmeq\0cmlt\0abs\0?\0?\0?\0?\0rev32\0?\0uaddlp\0usqadd\0clz\0?\0uadalp\0sqneg\0cmge\0cmle\0?\0neg\0";
   8c28c:	9102e060 	add	x0, x3, #0xb8
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8c290:	5280001b 	mov	w27, #0x0                   	// #0
	uint16_t op=0, om=0, j=0;
   8c294:	52800014 	mov	w20, #0x0                   	// #0
	uint32_t i=0;
   8c298:	290effff 	stp	wzr, wzr, [sp, #116]
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8c29c:	290fffff 	stp	wzr, wzr, [sp, #124]
   8c2a0:	29117fff 	stp	wzr, wzr, [sp, #136]
   8c2a4:	29127fff 	stp	wzr, wzr, [sp, #144]
   8c2a8:	b9009bff 	str	wzr, [sp, #152]
		args[0]=disasm_arg_VtT; args[1]=disasm_arg_VnT; 
   8c2ac:	790583e2 	strh	w2, [sp, #704]
   8c2b0:	a9435bf5 	ldp	x21, x22, [sp, #48]
   8c2b4:	17ffe66b 	b	85c60 <disasm+0x1c80>
		op=((ic32_27)&0x4)|((ic32_12)&0x3); q=((ic32_30)&0x1); z=((ic32_22)&0x3); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8c2b8:	121e0021 	and	w1, w1, #0x4
   8c2bc:	1200054a 	and	w10, w10, #0x3
		names="cmgt\0cmeq\0cmlt\0abs\0cmge\0cmle\0?\0neg\0";
   8c2c0:	f0000023 	adrp	x3, 93000 <sd_init+0x1470>
   8c2c4:	91162063 	add	x3, x3, #0x588
		op=((ic32_27)&0x4)|((ic32_12)&0x3); q=((ic32_30)&0x1); z=((ic32_22)&0x3); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8c2c8:	12001059 	and	w25, w2, #0x1f
   8c2cc:	1200101a 	and	w26, w0, #0x1f
		args[0]=disasm_arg_VtT; args[1]=disasm_arg_VnT; args[2]=disasm_arg_simd0; 
   8c2d0:	12800fe2 	mov	w2, #0xffffff80            	// #-128
		names="cmgt\0cmeq\0cmlt\0abs\0cmge\0cmle\0?\0neg\0";
   8c2d4:	91266060 	add	x0, x3, #0x998
		op=((ic32_27)&0x4)|((ic32_12)&0x3); q=((ic32_30)&0x1); z=((ic32_22)&0x3); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8c2d8:	2a0a0021 	orr	w1, w1, w10
		args[0]=disasm_arg_VtT; args[1]=disasm_arg_VnT; args[2]=disasm_arg_simd0; 
   8c2dc:	128f7b43 	mov	w3, #0xffff8425            	// #-31707
		op=((ic32_27)&0x4)|((ic32_12)&0x3); q=((ic32_30)&0x1); z=((ic32_22)&0x3); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8c2e0:	12000098 	and	w24, w4, #0x1
   8c2e4:	120004f7 	and	w23, w7, #0x3
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8c2e8:	5280001b 	mov	w27, #0x0                   	// #0
	uint16_t op=0, om=0, j=0;
   8c2ec:	52800014 	mov	w20, #0x0                   	// #0
	uint32_t i=0;
   8c2f0:	290effff 	stp	wzr, wzr, [sp, #116]
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8c2f4:	290fffff 	stp	wzr, wzr, [sp, #124]
   8c2f8:	29117fff 	stp	wzr, wzr, [sp, #136]
   8c2fc:	29127fff 	stp	wzr, wzr, [sp, #144]
   8c300:	b9009bff 	str	wzr, [sp, #152]
		args[0]=disasm_arg_VtT; args[1]=disasm_arg_VnT; args[2]=disasm_arg_simd0; 
   8c304:	790583e3 	strh	w3, [sp, #704]
   8c308:	390b0be2 	strb	w2, [sp, #706]
   8c30c:	a9435bf5 	ldp	x21, x22, [sp, #48]
   8c310:	17ffe654 	b	85c60 <disasm+0x1c80>
		op=((ic32_28)&0x2)|((ic32_14)&0x1); q=((ic32_30)&0x1); z=((ic32_22)&0x3); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8c314:	121f0301 	and	w1, w24, #0x2
   8c318:	12000231 	and	w17, w17, #0x1
		names="saddlp\0sadalp\0uaddlp\0uadalp\0";
   8c31c:	90000043 	adrp	x3, 94000 <sd_init+0x2470>
   8c320:	911a2063 	add	x3, x3, #0x688
		op=((ic32_28)&0x2)|((ic32_14)&0x1); q=((ic32_30)&0x1); z=((ic32_22)&0x3); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8c324:	12001059 	and	w25, w2, #0x1f
   8c328:	1200101a 	and	w26, w0, #0x1f
		args[0]=disasm_arg_Vtzq2; args[1]=disasm_arg_VnT; 
   8c32c:	128f6b42 	mov	w2, #0xffff84a5            	// #-31579
		op=((ic32_28)&0x2)|((ic32_14)&0x1); q=((ic32_30)&0x1); z=((ic32_22)&0x3); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8c330:	2a110021 	orr	w1, w1, w17
   8c334:	12000098 	and	w24, w4, #0x1
   8c338:	120004f7 	and	w23, w7, #0x3
		names="saddlp\0sadalp\0uaddlp\0uadalp\0";
   8c33c:	91026060 	add	x0, x3, #0x98
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8c340:	5280001b 	mov	w27, #0x0                   	// #0
	uint16_t op=0, om=0, j=0;
   8c344:	52800014 	mov	w20, #0x0                   	// #0
	uint32_t i=0;
   8c348:	290effff 	stp	wzr, wzr, [sp, #116]
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8c34c:	290fffff 	stp	wzr, wzr, [sp, #124]
   8c350:	29117fff 	stp	wzr, wzr, [sp, #136]
   8c354:	29127fff 	stp	wzr, wzr, [sp, #144]
   8c358:	b9009bff 	str	wzr, [sp, #152]
		args[0]=disasm_arg_Vtzq2; args[1]=disasm_arg_VnT; 
   8c35c:	790583e2 	strh	w2, [sp, #704]
   8c360:	a9435bf5 	ldp	x21, x22, [sp, #48]
   8c364:	17ffe63f 	b	85c60 <disasm+0x1c80>
		names="sdot\0udot\0";
   8c368:	90000043 	adrp	x3, 94000 <sd_init+0x2470>
   8c36c:	911a2063 	add	x3, x3, #0x688
		op=((ic32_29)&0x1); q=((ic32_30)&0x1); z=((ic32_22)&0x3); m=((ic32_16)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8c370:	120002a1 	and	w1, w21, #0x1
   8c374:	12000098 	and	w24, w4, #0x1
   8c378:	12001059 	and	w25, w2, #0x1f
   8c37c:	120010a4 	and	w4, w5, #0x1f
   8c380:	1200101a 	and	w26, w0, #0x1f
		args[0]=disasm_arg_VtT; args[1]=disasm_arg_Vnzq; args[2]=disasm_arg_Vmzq; 
   8c384:	52800fe2 	mov	w2, #0x7f                  	// #127
		names="sdot\0udot\0";
   8c388:	91022060 	add	x0, x3, #0x88
		op=((ic32_29)&0x1); q=((ic32_30)&0x1); z=((ic32_22)&0x3); m=((ic32_16)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8c38c:	120004f7 	and	w23, w7, #0x3
		args[0]=disasm_arg_VtT; args[1]=disasm_arg_Vnzq; args[2]=disasm_arg_Vmzq; 
   8c390:	528fc4a3 	mov	w3, #0x7e25                	// #32293
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8c394:	5280001b 	mov	w27, #0x0                   	// #0
	uint16_t op=0, om=0, j=0;
   8c398:	52800014 	mov	w20, #0x0                   	// #0
	uint32_t i=0;
   8c39c:	290effff 	stp	wzr, wzr, [sp, #116]
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8c3a0:	290fffe4 	stp	w4, wzr, [sp, #124]
   8c3a4:	29117fff 	stp	wzr, wzr, [sp, #136]
   8c3a8:	29127fff 	stp	wzr, wzr, [sp, #144]
   8c3ac:	b9009bff 	str	wzr, [sp, #152]
		args[0]=disasm_arg_VtT; args[1]=disasm_arg_Vnzq; args[2]=disasm_arg_Vmzq; 
   8c3b0:	790583e3 	strh	w3, [sp, #704]
   8c3b4:	390b0be2 	strb	w2, [sp, #706]
   8c3b8:	a9435bf5 	ldp	x21, x22, [sp, #48]
   8c3bc:	17ffe629 	b	85c60 <disasm+0x1c80>
		op=((ic32_25)&0x10)|((ic32_20)&0x8)|((ic32_12)&0x7); q=((ic32_30)&0x1); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8c3c0:	121c02e1 	and	w1, w23, #0x10
   8c3c4:	121d0108 	and	w8, w8, #0x8
   8c3c8:	2a080021 	orr	w1, w1, w8
   8c3cc:	12000946 	and	w6, w10, #0x7
		names="frintn\0frintm\0fcvtns\0fcvtms\0fcvtas\0scvtf\0?\0fabs\0frintp\0frintz\0fcvtps\0fcvtzs\0?\0frecpe\0?\0frecpx\0?\0frintx\0fcvtnu\0fcvtmu\0fcvtau\0ucvtf\0?\0?\0frinta\0frinti\0fcvtpu\0fcvtzu\0?\0frsqrte\0?\0fsqrt\0";
   8c3d0:	90000043 	adrp	x3, 94000 <sd_init+0x2470>
   8c3d4:	911a2063 	add	x3, x3, #0x688
		op=((ic32_25)&0x10)|((ic32_20)&0x8)|((ic32_12)&0x7); q=((ic32_30)&0x1); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8c3d8:	12001059 	and	w25, w2, #0x1f
   8c3dc:	1200101a 	and	w26, w0, #0x1f
		args[0]=disasm_arg_VtH1; args[1]=disasm_arg_VnH1; 
   8c3e0:	528f6f42 	mov	w2, #0x7b7a                	// #31610
		op=((ic32_25)&0x10)|((ic32_20)&0x8)|((ic32_12)&0x7); q=((ic32_30)&0x1); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8c3e4:	2a060021 	orr	w1, w1, w6
   8c3e8:	12000098 	and	w24, w4, #0x1
		names="frintn\0frintm\0fcvtns\0fcvtms\0fcvtas\0scvtf\0?\0fabs\0frintp\0frintz\0fcvtps\0fcvtzs\0?\0frecpe\0?\0frecpx\0?\0frintx\0fcvtnu\0fcvtmu\0fcvtau\0ucvtf\0?\0?\0frinta\0frinti\0fcvtpu\0fcvtzu\0?\0frsqrte\0?\0fsqrt\0";
   8c3ec:	d100c060 	sub	x0, x3, #0x30
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8c3f0:	52800017 	mov	w23, #0x0                   	// #0
   8c3f4:	5280001b 	mov	w27, #0x0                   	// #0
	uint16_t op=0, om=0, j=0;
   8c3f8:	52800014 	mov	w20, #0x0                   	// #0
	uint32_t i=0;
   8c3fc:	290effff 	stp	wzr, wzr, [sp, #116]
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8c400:	290fffff 	stp	wzr, wzr, [sp, #124]
   8c404:	29117fff 	stp	wzr, wzr, [sp, #136]
   8c408:	29127fff 	stp	wzr, wzr, [sp, #144]
   8c40c:	b9009bff 	str	wzr, [sp, #152]
		args[0]=disasm_arg_VtH1; args[1]=disasm_arg_VnH1; 
   8c410:	790583e2 	strh	w2, [sp, #704]
   8c414:	a9435bf5 	ldp	x21, x22, [sp, #48]
   8c418:	17ffe612 	b	85c60 <disasm+0x1c80>
		op=((ic32_25)&0x10)|((ic32_20)&0x8)|((ic32_11)&0x7); q=((ic32_30)&0x1); m=((ic32_16)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8c41c:	121c02e1 	and	w1, w23, #0x10
   8c420:	121d0108 	and	w8, w8, #0x8
   8c424:	2a080021 	orr	w1, w1, w8
   8c428:	120009a6 	and	w6, w13, #0x7
		names="fmaxnm\0fmla\0fadd\0fmulx\0fcmeq\0?\0fmax\0frecps\0fminnm\0fmls\0fsub\0?\0?\0?\0fmin\0frsqrts\0fmaxnmp\0?\0faddp\0fmul\0fcmge\0facge\0fmaxp\0fdiv\0fminnmp\0?\0fabd\0?\0fcmgt\0facgt\0fminp\0";
   8c42c:	90000043 	adrp	x3, 94000 <sd_init+0x2470>
   8c430:	911a2063 	add	x3, x3, #0x688
		op=((ic32_25)&0x10)|((ic32_20)&0x8)|((ic32_11)&0x7); q=((ic32_30)&0x1); m=((ic32_16)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8c434:	12000098 	and	w24, w4, #0x1
   8c438:	12001059 	and	w25, w2, #0x1f
   8c43c:	120010a4 	and	w4, w5, #0x1f
   8c440:	1200101a 	and	w26, w0, #0x1f
		args[0]=disasm_arg_VtT; args[1]=disasm_arg_VnT; args[2]=disasm_arg_VmT; 
   8c444:	12800f42 	mov	w2, #0xffffff85            	// #-123
		names="fmaxnm\0fmla\0fadd\0fmulx\0fcmeq\0?\0fmax\0frecps\0fminnm\0fmls\0fsub\0?\0?\0?\0fmin\0frsqrts\0fmaxnmp\0?\0faddp\0fmul\0fcmge\0facge\0fmaxp\0fdiv\0fminnmp\0?\0fabd\0?\0fcmgt\0facgt\0fminp\0";
   8c448:	d1034060 	sub	x0, x3, #0xd0
		op=((ic32_25)&0x10)|((ic32_20)&0x8)|((ic32_11)&0x7); q=((ic32_30)&0x1); m=((ic32_16)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8c44c:	2a060021 	orr	w1, w1, w6
		args[0]=disasm_arg_VtT; args[1]=disasm_arg_VnT; args[2]=disasm_arg_VmT; 
   8c450:	128f7b43 	mov	w3, #0xffff8425            	// #-31707
		z=1;
   8c454:	52800037 	mov	w23, #0x1                   	// #1
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8c458:	5280001b 	mov	w27, #0x0                   	// #0
	uint16_t op=0, om=0, j=0;
   8c45c:	52800014 	mov	w20, #0x0                   	// #0
	uint32_t i=0;
   8c460:	290effff 	stp	wzr, wzr, [sp, #116]
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8c464:	290fffe4 	stp	w4, wzr, [sp, #124]
   8c468:	29117fff 	stp	wzr, wzr, [sp, #136]
   8c46c:	29127fff 	stp	wzr, wzr, [sp, #144]
   8c470:	b9009bff 	str	wzr, [sp, #152]
		args[0]=disasm_arg_VtT; args[1]=disasm_arg_VnT; args[2]=disasm_arg_VmT; 
   8c474:	790583e3 	strh	w3, [sp, #704]
   8c478:	390b0be2 	strb	w2, [sp, #706]
   8c47c:	a9435bf5 	ldp	x21, x22, [sp, #48]
   8c480:	17ffe5f8 	b	85c60 <disasm+0x1c80>
		op=((ic32_27)&0x4)|((ic32_12)&0x3); q=((ic32_30)&0x1); z=((ic32_22)&0x1); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8c484:	121e0021 	and	w1, w1, #0x4
   8c488:	1200054a 	and	w10, w10, #0x3
		names="fcmgt\0fcmeq\0fcmlt\0?\0fcmge\0fcmle\0?\0fneg\0";
   8c48c:	90000043 	adrp	x3, 94000 <sd_init+0x2470>
   8c490:	911a2063 	add	x3, x3, #0x688
		op=((ic32_27)&0x4)|((ic32_12)&0x3); q=((ic32_30)&0x1); z=((ic32_22)&0x1); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8c494:	12001059 	and	w25, w2, #0x1f
   8c498:	1200101a 	and	w26, w0, #0x1f
		args[0]=disasm_arg_Vtzq; args[1]=disasm_arg_Vnzq; args[2]=disasm_arg_simd0; 
   8c49c:	12800fe2 	mov	w2, #0xffffff80            	// #-128
		names="fcmgt\0fcmeq\0fcmlt\0?\0fcmge\0fcmle\0?\0fneg\0";
   8c4a0:	d103e060 	sub	x0, x3, #0xf8
		op=((ic32_27)&0x4)|((ic32_12)&0x3); q=((ic32_30)&0x1); z=((ic32_22)&0x1); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8c4a4:	2a0a0021 	orr	w1, w1, w10
		args[0]=disasm_arg_Vtzq; args[1]=disasm_arg_Vnzq; args[2]=disasm_arg_simd0; 
   8c4a8:	528fcfa3 	mov	w3, #0x7e7d                	// #32381
		op=((ic32_27)&0x4)|((ic32_12)&0x3); q=((ic32_30)&0x1); z=((ic32_22)&0x1); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8c4ac:	12000098 	and	w24, w4, #0x1
   8c4b0:	120000f7 	and	w23, w7, #0x1
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8c4b4:	5280001b 	mov	w27, #0x0                   	// #0
	uint16_t op=0, om=0, j=0;
   8c4b8:	52800014 	mov	w20, #0x0                   	// #0
	uint32_t i=0;
   8c4bc:	290effff 	stp	wzr, wzr, [sp, #116]
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8c4c0:	290fffff 	stp	wzr, wzr, [sp, #124]
   8c4c4:	29117fff 	stp	wzr, wzr, [sp, #136]
   8c4c8:	29127fff 	stp	wzr, wzr, [sp, #144]
   8c4cc:	b9009bff 	str	wzr, [sp, #152]
		args[0]=disasm_arg_Vtzq; args[1]=disasm_arg_Vnzq; args[2]=disasm_arg_simd0; 
   8c4d0:	790583e3 	strh	w3, [sp, #704]
   8c4d4:	390b0be2 	strb	w2, [sp, #706]
   8c4d8:	a9435bf5 	ldp	x21, x22, [sp, #48]
   8c4dc:	17ffe5e1 	b	85c60 <disasm+0x1c80>
		op=((ic32_27)&0x4)|((ic32_12)&0x3); q=((ic32_30)&0x1); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8c4e0:	121e0021 	and	w1, w1, #0x4
   8c4e4:	1200054a 	and	w10, w10, #0x3
		names="fcmgt\0fcmeq\0fcmlt\0?\0fcmge\0fcmle\0?\0fneg\0";
   8c4e8:	90000043 	adrp	x3, 94000 <sd_init+0x2470>
   8c4ec:	911a2063 	add	x3, x3, #0x688
		op=((ic32_27)&0x4)|((ic32_12)&0x3); q=((ic32_30)&0x1); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8c4f0:	12001059 	and	w25, w2, #0x1f
   8c4f4:	1200101a 	and	w26, w0, #0x1f
		args[0]=disasm_arg_VtH1; args[1]=disasm_arg_VnH1; args[2]=disasm_arg_simd0; 
   8c4f8:	12800fe2 	mov	w2, #0xffffff80            	// #-128
		names="fcmgt\0fcmeq\0fcmlt\0?\0fcmge\0fcmle\0?\0fneg\0";
   8c4fc:	d103e060 	sub	x0, x3, #0xf8
		op=((ic32_27)&0x4)|((ic32_12)&0x3); q=((ic32_30)&0x1); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8c500:	2a0a0021 	orr	w1, w1, w10
		args[0]=disasm_arg_VtH1; args[1]=disasm_arg_VnH1; args[2]=disasm_arg_simd0; 
   8c504:	528f6f43 	mov	w3, #0x7b7a                	// #31610
		op=((ic32_27)&0x4)|((ic32_12)&0x3); q=((ic32_30)&0x1); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8c508:	12000098 	and	w24, w4, #0x1
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8c50c:	52800017 	mov	w23, #0x0                   	// #0
   8c510:	5280001b 	mov	w27, #0x0                   	// #0
	uint16_t op=0, om=0, j=0;
   8c514:	52800014 	mov	w20, #0x0                   	// #0
	uint32_t i=0;
   8c518:	290effff 	stp	wzr, wzr, [sp, #116]
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8c51c:	290fffff 	stp	wzr, wzr, [sp, #124]
   8c520:	29117fff 	stp	wzr, wzr, [sp, #136]
   8c524:	29127fff 	stp	wzr, wzr, [sp, #144]
   8c528:	b9009bff 	str	wzr, [sp, #152]
		args[0]=disasm_arg_VtH1; args[1]=disasm_arg_VnH1; args[2]=disasm_arg_simd0; 
   8c52c:	790583e3 	strh	w3, [sp, #704]
   8c530:	390b0be2 	strb	w2, [sp, #706]
   8c534:	a9435bf5 	ldp	x21, x22, [sp, #48]
   8c538:	17ffe5ca 	b	85c60 <disasm+0x1c80>
		names="ldrsb\0ldrsh\0";
   8c53c:	f0000023 	adrp	x3, 93000 <sd_init+0x1470>
   8c540:	91162063 	add	x3, x3, #0x588
		op=((ic32_30)&0x1); s=((ic32_22)&0x1); j=((ic32_10)&0xfff); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8c544:	1200101a 	and	w26, w0, #0x1f
		names="ldrsb\0ldrsh\0";
   8c548:	913e6060 	add	x0, x3, #0xf98
		args[0]=disasm_arg_nRt; args[1]=disasm_arg_offs; args[2]=disasm_arg_XnS; args[3]=disasm_arg_j_opt; args[4]=disasm_arg_offe; 
   8c54c:	52852b43 	mov	w3, #0x295a                	// #10586
		op=((ic32_30)&0x1); s=((ic32_22)&0x1); j=((ic32_10)&0xfff); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8c550:	12001059 	and	w25, w2, #0x1f
		args[0]=disasm_arg_nRt; args[1]=disasm_arg_offs; args[2]=disasm_arg_XnS; args[3]=disasm_arg_j_opt; args[4]=disasm_arg_offe; 
   8c554:	72ab8543 	movk	w3, #0x5c2a, lsl #16
   8c558:	52800562 	mov	w2, #0x2b                  	// #43
		op=((ic32_30)&0x1); s=((ic32_22)&0x1); j=((ic32_10)&0xfff); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8c55c:	12000081 	and	w1, w4, #0x1
   8c560:	120000fb 	and	w27, w7, #0x1
   8c564:	12002e94 	and	w20, w20, #0xfff
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8c568:	52800017 	mov	w23, #0x0                   	// #0
   8c56c:	52800018 	mov	w24, #0x0                   	// #0
	uint32_t i=0;
   8c570:	290effff 	stp	wzr, wzr, [sp, #116]
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8c574:	290fffff 	stp	wzr, wzr, [sp, #124]
   8c578:	29117fff 	stp	wzr, wzr, [sp, #136]
   8c57c:	29127fff 	stp	wzr, wzr, [sp, #144]
   8c580:	b9009bff 	str	wzr, [sp, #152]
		args[0]=disasm_arg_nRt; args[1]=disasm_arg_offs; args[2]=disasm_arg_XnS; args[3]=disasm_arg_j_opt; args[4]=disasm_arg_offe; 
   8c584:	b902c3e3 	str	w3, [sp, #704]
   8c588:	390b13e2 	strb	w2, [sp, #708]
   8c58c:	a9435bf5 	ldp	x21, x22, [sp, #48]
   8c590:	17ffe5b4 	b	85c60 <disasm+0x1c80>
		names="strb\0ldrb\0strh\0ldrh\0";
   8c594:	f0000023 	adrp	x3, 93000 <sd_init+0x1470>
   8c598:	91162063 	add	x3, x3, #0x588
		op=((ic32_29)&0x2)|((ic32_22)&0x1); j=((ic32_10)&0xfff); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8c59c:	121f02a1 	and	w1, w21, #0x2
   8c5a0:	120000e7 	and	w7, w7, #0x1
   8c5a4:	1200101a 	and	w26, w0, #0x1f
		names="strb\0ldrb\0strh\0ldrh\0";
   8c5a8:	913e0060 	add	x0, x3, #0xf80
		args[0]=disasm_arg_Wt; args[1]=disasm_arg_offs; args[2]=disasm_arg_XnS; args[3]=disasm_arg_j_opt; args[4]=disasm_arg_offe; 
   8c5ac:	52852a63 	mov	w3, #0x2953                	// #10579
		op=((ic32_29)&0x2)|((ic32_22)&0x1); j=((ic32_10)&0xfff); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8c5b0:	12001059 	and	w25, w2, #0x1f
		args[0]=disasm_arg_Wt; args[1]=disasm_arg_offs; args[2]=disasm_arg_XnS; args[3]=disasm_arg_j_opt; args[4]=disasm_arg_offe; 
   8c5b4:	72ab8543 	movk	w3, #0x5c2a, lsl #16
   8c5b8:	52800562 	mov	w2, #0x2b                  	// #43
		op=((ic32_29)&0x2)|((ic32_22)&0x1); j=((ic32_10)&0xfff); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8c5bc:	2a070021 	orr	w1, w1, w7
   8c5c0:	12002e94 	and	w20, w20, #0xfff
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8c5c4:	52800017 	mov	w23, #0x0                   	// #0
   8c5c8:	52800018 	mov	w24, #0x0                   	// #0
   8c5cc:	5280001b 	mov	w27, #0x0                   	// #0
	uint32_t i=0;
   8c5d0:	290effff 	stp	wzr, wzr, [sp, #116]
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8c5d4:	290fffff 	stp	wzr, wzr, [sp, #124]
   8c5d8:	29117fff 	stp	wzr, wzr, [sp, #136]
   8c5dc:	29127fff 	stp	wzr, wzr, [sp, #144]
   8c5e0:	b9009bff 	str	wzr, [sp, #152]
		args[0]=disasm_arg_Wt; args[1]=disasm_arg_offs; args[2]=disasm_arg_XnS; args[3]=disasm_arg_j_opt; args[4]=disasm_arg_offe; 
   8c5e4:	b902c3e3 	str	w3, [sp, #704]
   8c5e8:	390b13e2 	strb	w2, [sp, #708]
   8c5ec:	a9435bf5 	ldp	x21, x22, [sp, #48]
   8c5f0:	17ffe59c 	b	85c60 <disasm+0x1c80>
		op=((ic32_27)&0x8)|((ic32_21)&0x6)|((ic32_11)&0x1); i=((ic32_20)&1?(-1<<9):0)|((ic32_12)&0x1ff); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8c5f4:	f240011f 	tst	x8, #0x1
   8c5f8:	1200214a 	and	w10, w10, #0x1ff
   8c5fc:	12803fe4 	mov	w4, #0xfffffe00            	// #-512
   8c600:	1a9f1084 	csel	w4, w4, wzr, ne  // ne = any
   8c604:	121f0585 	and	w5, w12, #0x6
   8c608:	120001ad 	and	w13, w13, #0x1
		names="sturb\0sttrb\0ldurb\0ldtrb\0?\0ldtrsb\0?\0ldtrsb\0sturh\0sttrh\0ldurh\0ldtrh\0";
   8c60c:	f0000023 	adrp	x3, 93000 <sd_init+0x1470>
		op=((ic32_27)&0x8)|((ic32_21)&0x6)|((ic32_11)&0x1); i=((ic32_20)&1?(-1<<9):0)|((ic32_12)&0x1ff); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8c610:	1200101a 	and	w26, w0, #0x1f
		names="sturb\0sttrb\0ldurb\0ldtrb\0?\0ldtrsb\0?\0ldtrsb\0sturh\0sttrh\0ldurh\0ldtrh\0";
   8c614:	91162063 	add	x3, x3, #0x588
		op=((ic32_27)&0x8)|((ic32_21)&0x6)|((ic32_11)&0x1); i=((ic32_20)&1?(-1<<9):0)|((ic32_12)&0x1ff); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8c618:	2a040140 	orr	w0, w10, w4
   8c61c:	121d0021 	and	w1, w1, #0x8
   8c620:	2a0d00a5 	orr	w5, w5, w13
   8c624:	290e83ff 	stp	wzr, w0, [sp, #116]
		names="sturb\0sttrb\0ldurb\0ldtrb\0?\0ldtrsb\0?\0ldtrsb\0sturh\0sttrh\0ldurh\0ldtrh\0";
   8c628:	913f0060 	add	x0, x3, #0xfc0
		args[0]=disasm_arg_Wt; args[1]=disasm_arg_offs; args[2]=disasm_arg_XnS; args[3]=disasm_arg_i_opt; args[4]=disasm_arg_offe; 
   8c62c:	52852a63 	mov	w3, #0x2953                	// #10579
		op=((ic32_27)&0x8)|((ic32_21)&0x6)|((ic32_11)&0x1); i=((ic32_20)&1?(-1<<9):0)|((ic32_12)&0x1ff); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8c630:	12001059 	and	w25, w2, #0x1f
		args[0]=disasm_arg_Wt; args[1]=disasm_arg_offs; args[2]=disasm_arg_XnS; args[3]=disasm_arg_i_opt; args[4]=disasm_arg_offe; 
   8c634:	72a22543 	movk	w3, #0x112a, lsl #16
   8c638:	52800562 	mov	w2, #0x2b                  	// #43
		op=((ic32_27)&0x8)|((ic32_21)&0x6)|((ic32_11)&0x1); i=((ic32_20)&1?(-1<<9):0)|((ic32_12)&0x1ff); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8c63c:	2a0100a1 	orr	w1, w5, w1
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8c640:	52800017 	mov	w23, #0x0                   	// #0
   8c644:	52800018 	mov	w24, #0x0                   	// #0
   8c648:	5280001b 	mov	w27, #0x0                   	// #0
	uint16_t op=0, om=0, j=0;
   8c64c:	52800014 	mov	w20, #0x0                   	// #0
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8c650:	290fffff 	stp	wzr, wzr, [sp, #124]
   8c654:	29117fff 	stp	wzr, wzr, [sp, #136]
   8c658:	29127fff 	stp	wzr, wzr, [sp, #144]
   8c65c:	b9009bff 	str	wzr, [sp, #152]
		args[0]=disasm_arg_Wt; args[1]=disasm_arg_offs; args[2]=disasm_arg_XnS; args[3]=disasm_arg_i_opt; args[4]=disasm_arg_offe; 
   8c660:	b902c3e3 	str	w3, [sp, #704]
   8c664:	390b13e2 	strb	w2, [sp, #708]
   8c668:	a9435bf5 	ldp	x21, x22, [sp, #48]
   8c66c:	17ffe57d 	b	85c60 <disasm+0x1c80>
		names="ldrsb\0ldrsh\0";
   8c670:	f0000023 	adrp	x3, 93000 <sd_init+0x1470>
   8c674:	91162063 	add	x3, x3, #0x588
		op=((ic32_30)&0x1); s=((ic32_22)&0x1); m=((ic32_16)&0x1f); o=((ic32_13)&0x7); j=((ic32_12)&0x1); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8c678:	12000081 	and	w1, w4, #0x1
   8c67c:	1200101a 	and	w26, w0, #0x1f
   8c680:	120010a4 	and	w4, w5, #0x1f
		names="ldrsb\0ldrsh\0";
   8c684:	913e6060 	add	x0, x3, #0xf98
		args[0]=disasm_arg_nRt; args[1]=disasm_arg_offs; args[2]=disasm_arg_XnS; args[3]=disasm_arg_Rom; args[4]=disasm_arg_amountj; args[5]=disasm_arg_offe; 
   8c688:	52852b43 	mov	w3, #0x295a                	// #10586
		op=((ic32_30)&0x1); s=((ic32_22)&0x1); m=((ic32_16)&0x1f); o=((ic32_13)&0x7); j=((ic32_12)&0x1); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8c68c:	12001059 	and	w25, w2, #0x1f
		args[0]=disasm_arg_nRt; args[1]=disasm_arg_offs; args[2]=disasm_arg_XnS; args[3]=disasm_arg_Rom; args[4]=disasm_arg_amountj; args[5]=disasm_arg_offe; 
   8c690:	72aba543 	movk	w3, #0x5d2a, lsl #16
   8c694:	52856bc2 	mov	w2, #0x2b5e                	// #11102
		op=((ic32_30)&0x1); s=((ic32_22)&0x1); m=((ic32_16)&0x1f); o=((ic32_13)&0x7); j=((ic32_12)&0x1); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8c698:	120000fb 	and	w27, w7, #0x1
   8c69c:	12000154 	and	w20, w10, #0x1
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8c6a0:	52800017 	mov	w23, #0x0                   	// #0
   8c6a4:	52800018 	mov	w24, #0x0                   	// #0
	uint32_t i=0;
   8c6a8:	290effff 	stp	wzr, wzr, [sp, #116]
		op=((ic32_30)&0x1); s=((ic32_22)&0x1); m=((ic32_16)&0x1f); o=((ic32_13)&0x7); j=((ic32_12)&0x1); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8c6ac:	b9007fe4 	str	w4, [sp, #124]
   8c6b0:	12000964 	and	w4, w11, #0x7
   8c6b4:	b90083e4 	str	w4, [sp, #128]
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8c6b8:	29117fff 	stp	wzr, wzr, [sp, #136]
   8c6bc:	29127fff 	stp	wzr, wzr, [sp, #144]
   8c6c0:	b9009bff 	str	wzr, [sp, #152]
		args[0]=disasm_arg_nRt; args[1]=disasm_arg_offs; args[2]=disasm_arg_XnS; args[3]=disasm_arg_Rom; args[4]=disasm_arg_amountj; args[5]=disasm_arg_offe; 
   8c6c4:	b902c3e3 	str	w3, [sp, #704]
   8c6c8:	79058be2 	strh	w2, [sp, #708]
   8c6cc:	a9435bf5 	ldp	x21, x22, [sp, #48]
   8c6d0:	17ffe564 	b	85c60 <disasm+0x1c80>
		op=((ic32_30)&0x1); s=((ic32_22)&0x1); i=((ic32_20)&1?(-1<<9):0)|((ic32_12)&0x1ff); p=((ic32_11)&0x1); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8c6d4:	f240011f 	tst	x8, #0x1
   8c6d8:	1200214a 	and	w10, w10, #0x1ff
   8c6dc:	12803fe5 	mov	w5, #0xfffffe00            	// #-512
   8c6e0:	1a9f10a5 	csel	w5, w5, wzr, ne  // ne = any
		names="ldrsb\0ldrsh\0";
   8c6e4:	f0000023 	adrp	x3, 93000 <sd_init+0x1470>
		op=((ic32_30)&0x1); s=((ic32_22)&0x1); i=((ic32_20)&1?(-1<<9):0)|((ic32_12)&0x1ff); p=((ic32_11)&0x1); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8c6e8:	1200101a 	and	w26, w0, #0x1f
		names="ldrsb\0ldrsh\0";
   8c6ec:	91162063 	add	x3, x3, #0x588
		op=((ic32_30)&0x1); s=((ic32_22)&0x1); i=((ic32_20)&1?(-1<<9):0)|((ic32_12)&0x1ff); p=((ic32_11)&0x1); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8c6f0:	2a050140 	orr	w0, w10, w5
   8c6f4:	290e83ff 	stp	wzr, w0, [sp, #116]
		names="ldrsb\0ldrsh\0";
   8c6f8:	913e6060 	add	x0, x3, #0xf98
		args[0]=disasm_arg_nRt; args[1]=disasm_arg_offs; args[2]=disasm_arg_XnS; args[3]=disasm_arg_i_opt; args[4]=disasm_arg_offe; 
   8c6fc:	52852b43 	mov	w3, #0x295a                	// #10586
		op=((ic32_30)&0x1); s=((ic32_22)&0x1); i=((ic32_20)&1?(-1<<9):0)|((ic32_12)&0x1ff); p=((ic32_11)&0x1); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8c700:	12000081 	and	w1, w4, #0x1
   8c704:	12001059 	and	w25, w2, #0x1f
   8c708:	120001a4 	and	w4, w13, #0x1
		args[0]=disasm_arg_nRt; args[1]=disasm_arg_offs; args[2]=disasm_arg_XnS; args[3]=disasm_arg_i_opt; args[4]=disasm_arg_offe; 
   8c70c:	52800562 	mov	w2, #0x2b                  	// #43
   8c710:	72a22543 	movk	w3, #0x112a, lsl #16
		op=((ic32_30)&0x1); s=((ic32_22)&0x1); i=((ic32_20)&1?(-1<<9):0)|((ic32_12)&0x1ff); p=((ic32_11)&0x1); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8c714:	120000fb 	and	w27, w7, #0x1
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8c718:	52800017 	mov	w23, #0x0                   	// #0
   8c71c:	52800018 	mov	w24, #0x0                   	// #0
	uint16_t op=0, om=0, j=0;
   8c720:	52800014 	mov	w20, #0x0                   	// #0
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8c724:	290fffff 	stp	wzr, wzr, [sp, #124]
   8c728:	29117fff 	stp	wzr, wzr, [sp, #136]
   8c72c:	29127fe4 	stp	w4, wzr, [sp, #144]
   8c730:	b9009bff 	str	wzr, [sp, #152]
		args[0]=disasm_arg_nRt; args[1]=disasm_arg_offs; args[2]=disasm_arg_XnS; args[3]=disasm_arg_i_opt; args[4]=disasm_arg_offe; 
   8c734:	b902c3e3 	str	w3, [sp, #704]
   8c738:	390b13e2 	strb	w2, [sp, #708]
   8c73c:	a9435bf5 	ldp	x21, x22, [sp, #48]
   8c740:	17ffe548 	b	85c60 <disasm+0x1c80>
		op=((ic32_29)&0x2)|((ic32_11)&0x1); s=((ic32_22)&0x1); i=((ic32_20)&1?(-1<<9):0)|((ic32_12)&0x1ff); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8c744:	f240011f 	tst	x8, #0x1
   8c748:	1200214a 	and	w10, w10, #0x1ff
   8c74c:	12803fe4 	mov	w4, #0xfffffe00            	// #-512
   8c750:	1a9f1084 	csel	w4, w4, wzr, ne  // ne = any
		names="ldursb\0?\0ldursh\0ldtrsh\0";
   8c754:	f0000023 	adrp	x3, 93000 <sd_init+0x1470>
		op=((ic32_29)&0x2)|((ic32_11)&0x1); s=((ic32_22)&0x1); i=((ic32_20)&1?(-1<<9):0)|((ic32_12)&0x1ff); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8c758:	1200101a 	and	w26, w0, #0x1f
		names="ldursb\0?\0ldursh\0ldtrsh\0";
   8c75c:	91162063 	add	x3, x3, #0x588
		op=((ic32_29)&0x2)|((ic32_11)&0x1); s=((ic32_22)&0x1); i=((ic32_20)&1?(-1<<9):0)|((ic32_12)&0x1ff); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8c760:	2a040140 	orr	w0, w10, w4
   8c764:	121f02a1 	and	w1, w21, #0x2
   8c768:	120001ad 	and	w13, w13, #0x1
   8c76c:	290e83ff 	stp	wzr, w0, [sp, #116]
		names="ldursb\0?\0ldursh\0ldtrsh\0";
   8c770:	913ea060 	add	x0, x3, #0xfa8
		args[0]=disasm_arg_nRt; args[1]=disasm_arg_offs; args[2]=disasm_arg_XnS; args[3]=disasm_arg_i_opt; args[4]=disasm_arg_offe; 
   8c774:	52852b43 	mov	w3, #0x295a                	// #10586
		op=((ic32_29)&0x2)|((ic32_11)&0x1); s=((ic32_22)&0x1); i=((ic32_20)&1?(-1<<9):0)|((ic32_12)&0x1ff); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8c778:	12001059 	and	w25, w2, #0x1f
		args[0]=disasm_arg_nRt; args[1]=disasm_arg_offs; args[2]=disasm_arg_XnS; args[3]=disasm_arg_i_opt; args[4]=disasm_arg_offe; 
   8c77c:	72a22543 	movk	w3, #0x112a, lsl #16
   8c780:	52800562 	mov	w2, #0x2b                  	// #43
		op=((ic32_29)&0x2)|((ic32_11)&0x1); s=((ic32_22)&0x1); i=((ic32_20)&1?(-1<<9):0)|((ic32_12)&0x1ff); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8c784:	2a0d0021 	orr	w1, w1, w13
   8c788:	120000fb 	and	w27, w7, #0x1
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8c78c:	52800017 	mov	w23, #0x0                   	// #0
   8c790:	52800018 	mov	w24, #0x0                   	// #0
	uint16_t op=0, om=0, j=0;
   8c794:	52800014 	mov	w20, #0x0                   	// #0
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8c798:	290fffff 	stp	wzr, wzr, [sp, #124]
   8c79c:	29117fff 	stp	wzr, wzr, [sp, #136]
   8c7a0:	29127fff 	stp	wzr, wzr, [sp, #144]
   8c7a4:	b9009bff 	str	wzr, [sp, #152]
		args[0]=disasm_arg_nRt; args[1]=disasm_arg_offs; args[2]=disasm_arg_XnS; args[3]=disasm_arg_i_opt; args[4]=disasm_arg_offe; 
   8c7a8:	b902c3e3 	str	w3, [sp, #704]
   8c7ac:	390b13e2 	strb	w2, [sp, #708]
   8c7b0:	a9435bf5 	ldp	x21, x22, [sp, #48]
   8c7b4:	17ffe52b 	b	85c60 <disasm+0x1c80>
		op=((ic32_30)&0x1); s=((ic32_22)&0x1); i=((ic32_20)&1?(-1<<9):0)|((ic32_12)&0x1ff); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8c7b8:	f240011f 	tst	x8, #0x1
   8c7bc:	1200214a 	and	w10, w10, #0x1ff
   8c7c0:	12803fe5 	mov	w5, #0xfffffe00            	// #-512
   8c7c4:	1a9f10a5 	csel	w5, w5, wzr, ne  // ne = any
		names="ldrsb\0ldrsh\0";
   8c7c8:	f0000023 	adrp	x3, 93000 <sd_init+0x1470>
		op=((ic32_30)&0x1); s=((ic32_22)&0x1); i=((ic32_20)&1?(-1<<9):0)|((ic32_12)&0x1ff); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8c7cc:	1200101a 	and	w26, w0, #0x1f
		names="ldrsb\0ldrsh\0";
   8c7d0:	91162063 	add	x3, x3, #0x588
		op=((ic32_30)&0x1); s=((ic32_22)&0x1); i=((ic32_20)&1?(-1<<9):0)|((ic32_12)&0x1ff); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8c7d4:	2a050140 	orr	w0, w10, w5
   8c7d8:	290e83ff 	stp	wzr, w0, [sp, #116]
		names="ldrsb\0ldrsh\0";
   8c7dc:	913e6060 	add	x0, x3, #0xf98
		args[0]=disasm_arg_nRt; args[1]=disasm_arg_offs; args[2]=disasm_arg_XnS; args[3]=disasm_arg_offe; args[4]=disasm_arg_i_opt; 
   8c7e0:	52852b43 	mov	w3, #0x295a                	// #10586
		op=((ic32_30)&0x1); s=((ic32_22)&0x1); i=((ic32_20)&1?(-1<<9):0)|((ic32_12)&0x1ff); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8c7e4:	12001059 	and	w25, w2, #0x1f
		args[0]=disasm_arg_nRt; args[1]=disasm_arg_offs; args[2]=disasm_arg_XnS; args[3]=disasm_arg_offe; args[4]=disasm_arg_i_opt; 
   8c7e8:	72a56543 	movk	w3, #0x2b2a, lsl #16
   8c7ec:	52800222 	mov	w2, #0x11                  	// #17
		op=((ic32_30)&0x1); s=((ic32_22)&0x1); i=((ic32_20)&1?(-1<<9):0)|((ic32_12)&0x1ff); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8c7f0:	12000081 	and	w1, w4, #0x1
   8c7f4:	120000fb 	and	w27, w7, #0x1
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8c7f8:	52800017 	mov	w23, #0x0                   	// #0
   8c7fc:	52800018 	mov	w24, #0x0                   	// #0
	uint16_t op=0, om=0, j=0;
   8c800:	52800014 	mov	w20, #0x0                   	// #0
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8c804:	290fffff 	stp	wzr, wzr, [sp, #124]
   8c808:	29117fff 	stp	wzr, wzr, [sp, #136]
   8c80c:	29127fff 	stp	wzr, wzr, [sp, #144]
   8c810:	b9009bff 	str	wzr, [sp, #152]
		args[0]=disasm_arg_nRt; args[1]=disasm_arg_offs; args[2]=disasm_arg_XnS; args[3]=disasm_arg_offe; args[4]=disasm_arg_i_opt; 
   8c814:	b902c3e3 	str	w3, [sp, #704]
   8c818:	390b13e2 	strb	w2, [sp, #708]
   8c81c:	a9435bf5 	ldp	x21, x22, [sp, #48]
   8c820:	17ffe510 	b	85c60 <disasm+0x1c80>
		names="strb\0ldrb\0strh\0ldrh\0";
   8c824:	f0000023 	adrp	x3, 93000 <sd_init+0x1470>
   8c828:	91162063 	add	x3, x3, #0x588
		op=((ic32_29)&0x2)|((ic32_22)&0x1); m=((ic32_16)&0x1f); o=((ic32_13)&0x7); j=((ic32_12)&0x1); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8c82c:	121f02a1 	and	w1, w21, #0x2
   8c830:	120010a4 	and	w4, w5, #0x1f
   8c834:	120000e7 	and	w7, w7, #0x1
   8c838:	1200101a 	and	w26, w0, #0x1f
		names="strb\0ldrb\0strh\0ldrh\0";
   8c83c:	913e0060 	add	x0, x3, #0xf80
		args[0]=disasm_arg_Wt; args[1]=disasm_arg_offs; args[2]=disasm_arg_XnS; args[3]=disasm_arg_Rom; args[4]=disasm_arg_amountj; args[5]=disasm_arg_offe; 
   8c840:	52852a63 	mov	w3, #0x2953                	// #10579
		op=((ic32_29)&0x2)|((ic32_22)&0x1); m=((ic32_16)&0x1f); o=((ic32_13)&0x7); j=((ic32_12)&0x1); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8c844:	12001059 	and	w25, w2, #0x1f
		args[0]=disasm_arg_Wt; args[1]=disasm_arg_offs; args[2]=disasm_arg_XnS; args[3]=disasm_arg_Rom; args[4]=disasm_arg_amountj; args[5]=disasm_arg_offe; 
   8c848:	72aba543 	movk	w3, #0x5d2a, lsl #16
   8c84c:	52856bc2 	mov	w2, #0x2b5e                	// #11102
		op=((ic32_29)&0x2)|((ic32_22)&0x1); m=((ic32_16)&0x1f); o=((ic32_13)&0x7); j=((ic32_12)&0x1); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8c850:	2a070021 	orr	w1, w1, w7
   8c854:	12000154 	and	w20, w10, #0x1
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8c858:	52800017 	mov	w23, #0x0                   	// #0
   8c85c:	52800018 	mov	w24, #0x0                   	// #0
   8c860:	5280001b 	mov	w27, #0x0                   	// #0
	uint32_t i=0;
   8c864:	290effff 	stp	wzr, wzr, [sp, #116]
		op=((ic32_29)&0x2)|((ic32_22)&0x1); m=((ic32_16)&0x1f); o=((ic32_13)&0x7); j=((ic32_12)&0x1); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8c868:	b9007fe4 	str	w4, [sp, #124]
   8c86c:	12000964 	and	w4, w11, #0x7
   8c870:	b90083e4 	str	w4, [sp, #128]
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8c874:	29117fff 	stp	wzr, wzr, [sp, #136]
   8c878:	29127fff 	stp	wzr, wzr, [sp, #144]
   8c87c:	b9009bff 	str	wzr, [sp, #152]
		args[0]=disasm_arg_Wt; args[1]=disasm_arg_offs; args[2]=disasm_arg_XnS; args[3]=disasm_arg_Rom; args[4]=disasm_arg_amountj; args[5]=disasm_arg_offe; 
   8c880:	b902c3e3 	str	w3, [sp, #704]
   8c884:	79058be2 	strh	w2, [sp, #708]
   8c888:	a9435bf5 	ldp	x21, x22, [sp, #48]
   8c88c:	17ffe4f5 	b	85c60 <disasm+0x1c80>
		op=((ic32_29)&0x2)|((ic32_22)&0x1); i=((ic32_20)&1?(-1<<9):0)|((ic32_12)&0x1ff); p=((ic32_11)&0x1); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8c890:	f240011f 	tst	x8, #0x1
   8c894:	1200214a 	and	w10, w10, #0x1ff
   8c898:	12803fe4 	mov	w4, #0xfffffe00            	// #-512
   8c89c:	1a9f1084 	csel	w4, w4, wzr, ne  // ne = any
		names="strb\0ldrb\0strh\0ldrh\0";
   8c8a0:	f0000023 	adrp	x3, 93000 <sd_init+0x1470>
		op=((ic32_29)&0x2)|((ic32_22)&0x1); i=((ic32_20)&1?(-1<<9):0)|((ic32_12)&0x1ff); p=((ic32_11)&0x1); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8c8a4:	1200101a 	and	w26, w0, #0x1f
		names="strb\0ldrb\0strh\0ldrh\0";
   8c8a8:	91162063 	add	x3, x3, #0x588
		op=((ic32_29)&0x2)|((ic32_22)&0x1); i=((ic32_20)&1?(-1<<9):0)|((ic32_12)&0x1ff); p=((ic32_11)&0x1); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8c8ac:	2a040140 	orr	w0, w10, w4
   8c8b0:	121f02a1 	and	w1, w21, #0x2
   8c8b4:	120000e7 	and	w7, w7, #0x1
   8c8b8:	290e83ff 	stp	wzr, w0, [sp, #116]
		names="strb\0ldrb\0strh\0ldrh\0";
   8c8bc:	913e0060 	add	x0, x3, #0xf80
		args[0]=disasm_arg_Wt; args[1]=disasm_arg_offs; args[2]=disasm_arg_XnS; args[3]=disasm_arg_i_opt; args[4]=disasm_arg_offe; 
   8c8c0:	52852a63 	mov	w3, #0x2953                	// #10579
		op=((ic32_29)&0x2)|((ic32_22)&0x1); i=((ic32_20)&1?(-1<<9):0)|((ic32_12)&0x1ff); p=((ic32_11)&0x1); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8c8c4:	120001a5 	and	w5, w13, #0x1
   8c8c8:	12001059 	and	w25, w2, #0x1f
		args[0]=disasm_arg_Wt; args[1]=disasm_arg_offs; args[2]=disasm_arg_XnS; args[3]=disasm_arg_i_opt; args[4]=disasm_arg_offe; 
   8c8cc:	72a22543 	movk	w3, #0x112a, lsl #16
   8c8d0:	52800562 	mov	w2, #0x2b                  	// #43
		op=((ic32_29)&0x2)|((ic32_22)&0x1); i=((ic32_20)&1?(-1<<9):0)|((ic32_12)&0x1ff); p=((ic32_11)&0x1); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8c8d4:	2a070021 	orr	w1, w1, w7
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8c8d8:	52800017 	mov	w23, #0x0                   	// #0
   8c8dc:	52800018 	mov	w24, #0x0                   	// #0
   8c8e0:	5280001b 	mov	w27, #0x0                   	// #0
	uint16_t op=0, om=0, j=0;
   8c8e4:	52800014 	mov	w20, #0x0                   	// #0
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8c8e8:	290fffff 	stp	wzr, wzr, [sp, #124]
   8c8ec:	29117fff 	stp	wzr, wzr, [sp, #136]
   8c8f0:	29127fe5 	stp	w5, wzr, [sp, #144]
   8c8f4:	b9009bff 	str	wzr, [sp, #152]
		args[0]=disasm_arg_Wt; args[1]=disasm_arg_offs; args[2]=disasm_arg_XnS; args[3]=disasm_arg_i_opt; args[4]=disasm_arg_offe; 
   8c8f8:	b902c3e3 	str	w3, [sp, #704]
   8c8fc:	390b13e2 	strb	w2, [sp, #708]
   8c900:	a9435bf5 	ldp	x21, x22, [sp, #48]
   8c904:	17ffe4d7 	b	85c60 <disasm+0x1c80>
		op=((ic32_29)&0x2)|((ic32_22)&0x1); i=((ic32_20)&1?(-1<<9):0)|((ic32_12)&0x1ff); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8c908:	f240011f 	tst	x8, #0x1
   8c90c:	1200214a 	and	w10, w10, #0x1ff
   8c910:	12803fe4 	mov	w4, #0xfffffe00            	// #-512
   8c914:	1a9f1084 	csel	w4, w4, wzr, ne  // ne = any
		names="strb\0ldrb\0strh\0ldrh\0";
   8c918:	f0000023 	adrp	x3, 93000 <sd_init+0x1470>
		op=((ic32_29)&0x2)|((ic32_22)&0x1); i=((ic32_20)&1?(-1<<9):0)|((ic32_12)&0x1ff); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8c91c:	1200101a 	and	w26, w0, #0x1f
		names="strb\0ldrb\0strh\0ldrh\0";
   8c920:	91162063 	add	x3, x3, #0x588
		op=((ic32_29)&0x2)|((ic32_22)&0x1); i=((ic32_20)&1?(-1<<9):0)|((ic32_12)&0x1ff); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8c924:	2a040140 	orr	w0, w10, w4
   8c928:	121f02a1 	and	w1, w21, #0x2
   8c92c:	120000e7 	and	w7, w7, #0x1
   8c930:	290e83ff 	stp	wzr, w0, [sp, #116]
		names="strb\0ldrb\0strh\0ldrh\0";
   8c934:	913e0060 	add	x0, x3, #0xf80
		args[0]=disasm_arg_Wt; args[1]=disasm_arg_offs; args[2]=disasm_arg_XnS; args[3]=disasm_arg_offe; args[4]=disasm_arg_i_opt; 
   8c938:	52852a63 	mov	w3, #0x2953                	// #10579
		op=((ic32_29)&0x2)|((ic32_22)&0x1); i=((ic32_20)&1?(-1<<9):0)|((ic32_12)&0x1ff); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8c93c:	12001059 	and	w25, w2, #0x1f
		args[0]=disasm_arg_Wt; args[1]=disasm_arg_offs; args[2]=disasm_arg_XnS; args[3]=disasm_arg_offe; args[4]=disasm_arg_i_opt; 
   8c940:	72a56543 	movk	w3, #0x2b2a, lsl #16
   8c944:	52800222 	mov	w2, #0x11                  	// #17
		op=((ic32_29)&0x2)|((ic32_22)&0x1); i=((ic32_20)&1?(-1<<9):0)|((ic32_12)&0x1ff); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8c948:	2a070021 	orr	w1, w1, w7
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8c94c:	52800017 	mov	w23, #0x0                   	// #0
   8c950:	52800018 	mov	w24, #0x0                   	// #0
   8c954:	5280001b 	mov	w27, #0x0                   	// #0
	uint16_t op=0, om=0, j=0;
   8c958:	52800014 	mov	w20, #0x0                   	// #0
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8c95c:	290fffff 	stp	wzr, wzr, [sp, #124]
   8c960:	29117fff 	stp	wzr, wzr, [sp, #136]
   8c964:	29127fff 	stp	wzr, wzr, [sp, #144]
   8c968:	b9009bff 	str	wzr, [sp, #152]
		args[0]=disasm_arg_Wt; args[1]=disasm_arg_offs; args[2]=disasm_arg_XnS; args[3]=disasm_arg_offe; args[4]=disasm_arg_i_opt; 
   8c96c:	b902c3e3 	str	w3, [sp, #704]
   8c970:	390b13e2 	strb	w2, [sp, #708]
   8c974:	a9435bf5 	ldp	x21, x22, [sp, #48]
   8c978:	17ffe4ba 	b	85c60 <disasm+0x1c80>
		op=((ic32_14)&0x1); j=((ic32_10)&0x2)|((ic32_21)&0x1); q=((ic32_30)&0x1); z=((ic32_22)&0x3); m=((ic32_16)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8c97c:	121f0294 	and	w20, w20, #0x2
   8c980:	1200018c 	and	w12, w12, #0x1
		names="mla\0mls\0";
   8c984:	f0000023 	adrp	x3, 93000 <sd_init+0x1470>
   8c988:	91162063 	add	x3, x3, #0x588
		op=((ic32_14)&0x1); j=((ic32_10)&0x2)|((ic32_21)&0x1); q=((ic32_30)&0x1); z=((ic32_22)&0x3); m=((ic32_16)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8c98c:	12000098 	and	w24, w4, #0x1
   8c990:	12001059 	and	w25, w2, #0x1f
   8c994:	120010a4 	and	w4, w5, #0x1f
   8c998:	1200101a 	and	w26, w0, #0x1f
		args[0]=disasm_arg_VtT; args[1]=disasm_arg_VnT; args[2]=disasm_arg_VmTs; 
   8c99c:	12800c82 	mov	w2, #0xffffff9b            	// #-101
		names="mla\0mls\0";
   8c9a0:	913dc060 	add	x0, x3, #0xf70
		op=((ic32_14)&0x1); j=((ic32_10)&0x2)|((ic32_21)&0x1); q=((ic32_30)&0x1); z=((ic32_22)&0x3); m=((ic32_16)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8c9a4:	2a0c0294 	orr	w20, w20, w12
		args[0]=disasm_arg_VtT; args[1]=disasm_arg_VnT; args[2]=disasm_arg_VmTs; 
   8c9a8:	128f7b43 	mov	w3, #0xffff8425            	// #-31707
		op=((ic32_14)&0x1); j=((ic32_10)&0x2)|((ic32_21)&0x1); q=((ic32_30)&0x1); z=((ic32_22)&0x3); m=((ic32_16)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8c9ac:	12000221 	and	w1, w17, #0x1
   8c9b0:	120004f7 	and	w23, w7, #0x3
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8c9b4:	5280001b 	mov	w27, #0x0                   	// #0
	uint32_t i=0;
   8c9b8:	290effff 	stp	wzr, wzr, [sp, #116]
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8c9bc:	290fffe4 	stp	w4, wzr, [sp, #124]
   8c9c0:	29117fff 	stp	wzr, wzr, [sp, #136]
   8c9c4:	29127fff 	stp	wzr, wzr, [sp, #144]
   8c9c8:	b9009bff 	str	wzr, [sp, #152]
		args[0]=disasm_arg_VtT; args[1]=disasm_arg_VnT; args[2]=disasm_arg_VmTs; 
   8c9cc:	790583e3 	strh	w3, [sp, #704]
   8c9d0:	390b0be2 	strb	w2, [sp, #706]
   8c9d4:	a9435bf5 	ldp	x21, x22, [sp, #48]
   8c9d8:	17ffe4a2 	b	85c60 <disasm+0x1c80>
		op=((ic32_13)&0x1); j=((ic32_10)&0x2)|((ic32_21)&0x1); q=((ic32_30)&0x1); m=((ic32_16)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8c9dc:	121f0294 	and	w20, w20, #0x2
   8c9e0:	1200018c 	and	w12, w12, #0x1
		names="sqrdmlah\0sqrdmlsh\0";
   8c9e4:	f0000023 	adrp	x3, 93000 <sd_init+0x1470>
   8c9e8:	91162063 	add	x3, x3, #0x588
		op=((ic32_13)&0x1); j=((ic32_10)&0x2)|((ic32_21)&0x1); q=((ic32_30)&0x1); m=((ic32_16)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8c9ec:	12000098 	and	w24, w4, #0x1
   8c9f0:	12001059 	and	w25, w2, #0x1f
   8c9f4:	120010a4 	and	w4, w5, #0x1f
   8c9f8:	1200101a 	and	w26, w0, #0x1f
		args[0]=disasm_arg_Vtz; args[1]=disasm_arg_VnT; args[2]=disasm_arg_VmTs; 
   8c9fc:	12800c82 	mov	w2, #0xffffff9b            	// #-101
		names="sqrdmlah\0sqrdmlsh\0";
   8ca00:	911ac060 	add	x0, x3, #0x6b0
		op=((ic32_13)&0x1); j=((ic32_10)&0x2)|((ic32_21)&0x1); q=((ic32_30)&0x1); m=((ic32_16)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8ca04:	2a0c0294 	orr	w20, w20, w12
		args[0]=disasm_arg_Vtz; args[1]=disasm_arg_VnT; args[2]=disasm_arg_VmTs; 
   8ca08:	128f6e23 	mov	w3, #0xffff848e            	// #-31602
		op=((ic32_13)&0x1); j=((ic32_10)&0x2)|((ic32_21)&0x1); q=((ic32_30)&0x1); m=((ic32_16)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8ca0c:	12000161 	and	w1, w11, #0x1
		z=2;
   8ca10:	52800057 	mov	w23, #0x2                   	// #2
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8ca14:	5280001b 	mov	w27, #0x0                   	// #0
	uint32_t i=0;
   8ca18:	290effff 	stp	wzr, wzr, [sp, #116]
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8ca1c:	290fffe4 	stp	w4, wzr, [sp, #124]
   8ca20:	29117fff 	stp	wzr, wzr, [sp, #136]
   8ca24:	29127fff 	stp	wzr, wzr, [sp, #144]
   8ca28:	b9009bff 	str	wzr, [sp, #152]
		args[0]=disasm_arg_Vtz; args[1]=disasm_arg_VnT; args[2]=disasm_arg_VmTs; 
   8ca2c:	790583e3 	strh	w3, [sp, #704]
   8ca30:	390b0be2 	strb	w2, [sp, #706]
   8ca34:	a9435bf5 	ldp	x21, x22, [sp, #48]
   8ca38:	17ffe48a 	b	85c60 <disasm+0x1c80>
		names="ushr\0usra\0urshr\0ursra\0sri\0sli\0sqshlu\0uqshl\0?\0?\0?\0?\0?\0?\0ucvtf\0";
   8ca3c:	f0000023 	adrp	x3, 93000 <sd_init+0x1470>
   8ca40:	91162063 	add	x3, x3, #0x588
		op=((ic32_12)&0xf); q=((ic32_30)&0x1); j=((ic32_16)&0x7f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8ca44:	12001059 	and	w25, w2, #0x1f
   8ca48:	1200101a 	and	w26, w0, #0x1f
		args[0]=disasm_arg_Vtj2; args[1]=disasm_arg_Vnj2; args[2]=disasm_arg_shrshift; 
   8ca4c:	12800da2 	mov	w2, #0xffffff92            	// #-110
		names="ushr\0usra\0urshr\0ursra\0sri\0sli\0sqshlu\0uqshl\0?\0?\0?\0?\0?\0?\0ucvtf\0";
   8ca50:	913cc060 	add	x0, x3, #0xf30
		op=((ic32_12)&0xf); q=((ic32_30)&0x1); j=((ic32_16)&0x7f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8ca54:	12000d41 	and	w1, w10, #0xf
		args[0]=disasm_arg_Vtj2; args[1]=disasm_arg_Vnj2; args[2]=disasm_arg_shrshift; 
   8ca58:	128d6d83 	mov	w3, #0xffff9493            	// #-27501
		op=((ic32_12)&0xf); q=((ic32_30)&0x1); j=((ic32_16)&0x7f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8ca5c:	12000098 	and	w24, w4, #0x1
   8ca60:	120018b4 	and	w20, w5, #0x7f
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8ca64:	52800017 	mov	w23, #0x0                   	// #0
   8ca68:	5280001b 	mov	w27, #0x0                   	// #0
	uint32_t i=0;
   8ca6c:	290effff 	stp	wzr, wzr, [sp, #116]
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8ca70:	290fffff 	stp	wzr, wzr, [sp, #124]
   8ca74:	29117fff 	stp	wzr, wzr, [sp, #136]
   8ca78:	29127fff 	stp	wzr, wzr, [sp, #144]
   8ca7c:	b9009bff 	str	wzr, [sp, #152]
		args[0]=disasm_arg_Vtj2; args[1]=disasm_arg_Vnj2; args[2]=disasm_arg_shrshift; 
   8ca80:	790583e3 	strh	w3, [sp, #704]
   8ca84:	390b0be2 	strb	w2, [sp, #706]
   8ca88:	a9435bf5 	ldp	x21, x22, [sp, #48]
   8ca8c:	17ffe475 	b	85c60 <disasm+0x1c80>
		names="fcvtzu\0";
   8ca90:	f0000021 	adrp	x1, 93000 <sd_init+0x1470>
   8ca94:	91162021 	add	x1, x1, #0x588
		q=((ic32_30)&0x1); j=((ic32_16)&0x7f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8ca98:	12001059 	and	w25, w2, #0x1f
   8ca9c:	1200101a 	and	w26, w0, #0x1f
		args[0]=disasm_arg_Vtj2; args[1]=disasm_arg_Vnj2; args[2]=disasm_arg_shrshift; 
   8caa0:	128d6d83 	mov	w3, #0xffff9493            	// #-27501
		names="fcvtzu\0";
   8caa4:	913ca020 	add	x0, x1, #0xf28
		args[0]=disasm_arg_Vtj2; args[1]=disasm_arg_Vnj2; args[2]=disasm_arg_shrshift; 
   8caa8:	12800da2 	mov	w2, #0xffffff92            	// #-110
		q=((ic32_30)&0x1); j=((ic32_16)&0x7f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8caac:	12000098 	and	w24, w4, #0x1
   8cab0:	120018b4 	and	w20, w5, #0x7f
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8cab4:	52800017 	mov	w23, #0x0                   	// #0
   8cab8:	5280001b 	mov	w27, #0x0                   	// #0
	uint16_t op=0, om=0, j=0;
   8cabc:	52800001 	mov	w1, #0x0                   	// #0
	uint32_t i=0;
   8cac0:	290effff 	stp	wzr, wzr, [sp, #116]
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8cac4:	290fffff 	stp	wzr, wzr, [sp, #124]
   8cac8:	29117fff 	stp	wzr, wzr, [sp, #136]
   8cacc:	29127fff 	stp	wzr, wzr, [sp, #144]
   8cad0:	b9009bff 	str	wzr, [sp, #152]
		args[0]=disasm_arg_Vtj2; args[1]=disasm_arg_Vnj2; args[2]=disasm_arg_shrshift; 
   8cad4:	790583e3 	strh	w3, [sp, #704]
   8cad8:	390b0be2 	strb	w2, [sp, #706]
   8cadc:	a9435bf5 	ldp	x21, x22, [sp, #48]
   8cae0:	17ffe460 	b	85c60 <disasm+0x1c80>
		op=((ic32_13)&0x1); j=((ic32_9)&0x4)|((ic32_20)&0x3); q=((ic32_30)&0x1); m=((ic32_16)&0xf); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8cae4:	121e01ef 	and	w15, w15, #0x4
   8cae8:	12000508 	and	w8, w8, #0x3
		names="sqrdmlah\0sqrdmlsh\0";
   8caec:	f0000023 	adrp	x3, 93000 <sd_init+0x1470>
   8caf0:	91162063 	add	x3, x3, #0x588
		op=((ic32_13)&0x1); j=((ic32_9)&0x4)|((ic32_20)&0x3); q=((ic32_30)&0x1); m=((ic32_16)&0xf); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8caf4:	12000098 	and	w24, w4, #0x1
   8caf8:	12001059 	and	w25, w2, #0x1f
   8cafc:	12000ca4 	and	w4, w5, #0xf
   8cb00:	1200101a 	and	w26, w0, #0x1f
		args[0]=disasm_arg_Vtz; args[1]=disasm_arg_VnT; args[2]=disasm_arg_VmTs; 
   8cb04:	12800c82 	mov	w2, #0xffffff9b            	// #-101
		names="sqrdmlah\0sqrdmlsh\0";
   8cb08:	911ac060 	add	x0, x3, #0x6b0
		op=((ic32_13)&0x1); j=((ic32_9)&0x4)|((ic32_20)&0x3); q=((ic32_30)&0x1); m=((ic32_16)&0xf); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8cb0c:	2a0801f4 	orr	w20, w15, w8
		args[0]=disasm_arg_Vtz; args[1]=disasm_arg_VnT; args[2]=disasm_arg_VmTs; 
   8cb10:	128f6e23 	mov	w3, #0xffff848e            	// #-31602
		op=((ic32_13)&0x1); j=((ic32_9)&0x4)|((ic32_20)&0x3); q=((ic32_30)&0x1); m=((ic32_16)&0xf); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8cb14:	12000161 	and	w1, w11, #0x1
		z=1;
   8cb18:	52800037 	mov	w23, #0x1                   	// #1
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8cb1c:	5280001b 	mov	w27, #0x0                   	// #0
	uint32_t i=0;
   8cb20:	290effff 	stp	wzr, wzr, [sp, #116]
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8cb24:	290fffe4 	stp	w4, wzr, [sp, #124]
   8cb28:	29117fff 	stp	wzr, wzr, [sp, #136]
   8cb2c:	29127fff 	stp	wzr, wzr, [sp, #144]
   8cb30:	b9009bff 	str	wzr, [sp, #152]
		args[0]=disasm_arg_Vtz; args[1]=disasm_arg_VnT; args[2]=disasm_arg_VmTs; 
   8cb34:	790583e3 	strh	w3, [sp, #704]
   8cb38:	390b0be2 	strb	w2, [sp, #706]
   8cb3c:	a9435bf5 	ldp	x21, x22, [sp, #48]
   8cb40:	17ffe448 	b	85c60 <disasm+0x1c80>
		names="uhadd\0uqadd\0urhadd\0?\0uhsub\0uqsub\0cmhi\0cmhs\0ushl\0uqshl\0urshl\0uqrshl\0umax\0umin\0uabd\0uaba\0sub\0cmeq\0mls\0pmul\0umaxp\0uminp\0cqrdmulh\0";
   8cb44:	f0000023 	adrp	x3, 93000 <sd_init+0x1470>
   8cb48:	91162063 	add	x3, x3, #0x588
		op=((ic32_11)&0x1f); q=((ic32_30)&0x1); z=((ic32_22)&0x3); m=((ic32_16)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8cb4c:	12000098 	and	w24, w4, #0x1
   8cb50:	12001059 	and	w25, w2, #0x1f
   8cb54:	120010a4 	and	w4, w5, #0x1f
   8cb58:	1200101a 	and	w26, w0, #0x1f
		args[0]=disasm_arg_VtT; args[1]=disasm_arg_VnT; args[2]=disasm_arg_VmT; 
   8cb5c:	12800f42 	mov	w2, #0xffffff85            	// #-123
		names="uhadd\0uqadd\0urhadd\0?\0uhsub\0uqsub\0cmhi\0cmhs\0ushl\0uqshl\0urshl\0uqrshl\0umax\0umin\0uabd\0uaba\0sub\0cmeq\0mls\0pmul\0umaxp\0uminp\0cqrdmulh\0";
   8cb60:	913aa060 	add	x0, x3, #0xea8
		op=((ic32_11)&0x1f); q=((ic32_30)&0x1); z=((ic32_22)&0x3); m=((ic32_16)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8cb64:	120011a1 	and	w1, w13, #0x1f
		args[0]=disasm_arg_VtT; args[1]=disasm_arg_VnT; args[2]=disasm_arg_VmT; 
   8cb68:	128f7b43 	mov	w3, #0xffff8425            	// #-31707
		op=((ic32_11)&0x1f); q=((ic32_30)&0x1); z=((ic32_22)&0x3); m=((ic32_16)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8cb6c:	120004f7 	and	w23, w7, #0x3
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8cb70:	5280001b 	mov	w27, #0x0                   	// #0
	uint16_t op=0, om=0, j=0;
   8cb74:	52800014 	mov	w20, #0x0                   	// #0
	uint32_t i=0;
   8cb78:	290effff 	stp	wzr, wzr, [sp, #116]
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8cb7c:	290fffe4 	stp	w4, wzr, [sp, #124]
   8cb80:	29117fff 	stp	wzr, wzr, [sp, #136]
   8cb84:	29127fff 	stp	wzr, wzr, [sp, #144]
   8cb88:	b9009bff 	str	wzr, [sp, #152]
		args[0]=disasm_arg_VtT; args[1]=disasm_arg_VnT; args[2]=disasm_arg_VmT; 
   8cb8c:	790583e3 	strh	w3, [sp, #704]
   8cb90:	390b0be2 	strb	w2, [sp, #706]
   8cb94:	a9435bf5 	ldp	x21, x22, [sp, #48]
   8cb98:	17ffe432 	b	85c60 <disasm+0x1c80>
		names="fsqrt\0";
   8cb9c:	f0000021 	adrp	x1, 93000 <sd_init+0x1470>
   8cba0:	91162021 	add	x1, x1, #0x588
		q=((ic32_30)&0x1); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8cba4:	12001059 	and	w25, w2, #0x1f
   8cba8:	1200101a 	and	w26, w0, #0x1f
		args[0]=disasm_arg_VtT; args[1]=disasm_arg_VnT; 
   8cbac:	128f7b42 	mov	w2, #0xffff8425            	// #-31707
		names="fsqrt\0";
   8cbb0:	913a8020 	add	x0, x1, #0xea0
		q=((ic32_30)&0x1); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8cbb4:	12000098 	and	w24, w4, #0x1
		z=1;
   8cbb8:	52800037 	mov	w23, #0x1                   	// #1
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8cbbc:	5280001b 	mov	w27, #0x0                   	// #0
	uint16_t op=0, om=0, j=0;
   8cbc0:	52800014 	mov	w20, #0x0                   	// #0
   8cbc4:	52800001 	mov	w1, #0x0                   	// #0
	uint32_t i=0;
   8cbc8:	290effff 	stp	wzr, wzr, [sp, #116]
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8cbcc:	290fffff 	stp	wzr, wzr, [sp, #124]
   8cbd0:	29117fff 	stp	wzr, wzr, [sp, #136]
   8cbd4:	29127fff 	stp	wzr, wzr, [sp, #144]
   8cbd8:	b9009bff 	str	wzr, [sp, #152]
		args[0]=disasm_arg_VtT; args[1]=disasm_arg_VnT; 
   8cbdc:	790583e2 	strh	w2, [sp, #704]
   8cbe0:	a9435bf5 	ldp	x21, x22, [sp, #48]
   8cbe4:	17ffe41f 	b	85c60 <disasm+0x1c80>
		names="frinta\0frinti\0";
   8cbe8:	f0000023 	adrp	x3, 93000 <sd_init+0x1470>
   8cbec:	91162063 	add	x3, x3, #0x588
		op=((ic32_12)&0x1); q=((ic32_30)&0x1); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8cbf0:	12001059 	and	w25, w2, #0x1f
   8cbf4:	1200101a 	and	w26, w0, #0x1f
		args[0]=disasm_arg_VtT; args[1]=disasm_arg_VnT; 
   8cbf8:	128f7b42 	mov	w2, #0xffff8425            	// #-31707
		op=((ic32_12)&0x1); q=((ic32_30)&0x1); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8cbfc:	12000141 	and	w1, w10, #0x1
   8cc00:	12000098 	and	w24, w4, #0x1
		names="frinta\0frinti\0";
   8cc04:	913a4060 	add	x0, x3, #0xe90
		z=1;
   8cc08:	52800037 	mov	w23, #0x1                   	// #1
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8cc0c:	5280001b 	mov	w27, #0x0                   	// #0
	uint16_t op=0, om=0, j=0;
   8cc10:	52800014 	mov	w20, #0x0                   	// #0
	uint32_t i=0;
   8cc14:	290effff 	stp	wzr, wzr, [sp, #116]
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8cc18:	290fffff 	stp	wzr, wzr, [sp, #124]
   8cc1c:	29117fff 	stp	wzr, wzr, [sp, #136]
   8cc20:	29127fff 	stp	wzr, wzr, [sp, #144]
   8cc24:	b9009bff 	str	wzr, [sp, #152]
		args[0]=disasm_arg_VtT; args[1]=disasm_arg_VnT; 
   8cc28:	790583e2 	strh	w2, [sp, #704]
   8cc2c:	a9435bf5 	ldp	x21, x22, [sp, #48]
   8cc30:	17ffe40c 	b	85c60 <disasm+0x1c80>
		names="fneg\0";
   8cc34:	f0000021 	adrp	x1, 93000 <sd_init+0x1470>
   8cc38:	91162021 	add	x1, x1, #0x588
		q=((ic32_30)&0x1); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8cc3c:	12001059 	and	w25, w2, #0x1f
   8cc40:	1200101a 	and	w26, w0, #0x1f
		args[0]=disasm_arg_VtT; args[1]=disasm_arg_VnT; 
   8cc44:	128f7b42 	mov	w2, #0xffff8425            	// #-31707
		names="fneg\0";
   8cc48:	913a2020 	add	x0, x1, #0xe88
		q=((ic32_30)&0x1); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8cc4c:	12000098 	and	w24, w4, #0x1
		z=1;
   8cc50:	52800037 	mov	w23, #0x1                   	// #1
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8cc54:	5280001b 	mov	w27, #0x0                   	// #0
	uint16_t op=0, om=0, j=0;
   8cc58:	52800014 	mov	w20, #0x0                   	// #0
   8cc5c:	52800001 	mov	w1, #0x0                   	// #0
	uint32_t i=0;
   8cc60:	290effff 	stp	wzr, wzr, [sp, #116]
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8cc64:	290fffff 	stp	wzr, wzr, [sp, #124]
   8cc68:	29117fff 	stp	wzr, wzr, [sp, #136]
   8cc6c:	29127fff 	stp	wzr, wzr, [sp, #144]
   8cc70:	b9009bff 	str	wzr, [sp, #152]
		args[0]=disasm_arg_VtT; args[1]=disasm_arg_VnT; 
   8cc74:	790583e2 	strh	w2, [sp, #704]
   8cc78:	a9435bf5 	ldp	x21, x22, [sp, #48]
   8cc7c:	17ffe3f9 	b	85c60 <disasm+0x1c80>
		names="fcmgt\0facgt\0";
   8cc80:	f0000023 	adrp	x3, 93000 <sd_init+0x1470>
   8cc84:	91162063 	add	x3, x3, #0x588
		op=((ic32_11)&0x1); q=((ic32_30)&0x1); m=((ic32_16)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8cc88:	12000098 	and	w24, w4, #0x1
   8cc8c:	12001059 	and	w25, w2, #0x1f
   8cc90:	120010a4 	and	w4, w5, #0x1f
   8cc94:	1200101a 	and	w26, w0, #0x1f
		args[0]=disasm_arg_VtH1; args[1]=disasm_arg_VnH1; args[2]=disasm_arg_VmH1; 
   8cc98:	52800f82 	mov	w2, #0x7c                  	// #124
		names="fcmgt\0facgt\0";
   8cc9c:	911a8060 	add	x0, x3, #0x6a0
		op=((ic32_11)&0x1); q=((ic32_30)&0x1); m=((ic32_16)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8cca0:	120001a1 	and	w1, w13, #0x1
		args[0]=disasm_arg_VtH1; args[1]=disasm_arg_VnH1; args[2]=disasm_arg_VmH1; 
   8cca4:	528f6f43 	mov	w3, #0x7b7a                	// #31610
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8cca8:	52800017 	mov	w23, #0x0                   	// #0
   8ccac:	5280001b 	mov	w27, #0x0                   	// #0
	uint16_t op=0, om=0, j=0;
   8ccb0:	52800014 	mov	w20, #0x0                   	// #0
	uint32_t i=0;
   8ccb4:	290effff 	stp	wzr, wzr, [sp, #116]
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8ccb8:	290fffe4 	stp	w4, wzr, [sp, #124]
   8ccbc:	29117fff 	stp	wzr, wzr, [sp, #136]
   8ccc0:	29127fff 	stp	wzr, wzr, [sp, #144]
   8ccc4:	b9009bff 	str	wzr, [sp, #152]
		args[0]=disasm_arg_VtH1; args[1]=disasm_arg_VnH1; args[2]=disasm_arg_VmH1; 
   8ccc8:	790583e3 	strh	w3, [sp, #704]
   8cccc:	390b0be2 	strb	w2, [sp, #706]
   8ccd0:	a9435bf5 	ldp	x21, x22, [sp, #48]
   8ccd4:	17ffe3e3 	b	85c60 <disasm+0x1c80>
		q=((ic32_30)&0x1); m=((ic32_16)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8ccd8:	120010a3 	and	w3, w5, #0x1f
		names="fabd\0";
   8ccdc:	f0000021 	adrp	x1, 93000 <sd_init+0x1470>
   8cce0:	91162021 	add	x1, x1, #0x588
		q=((ic32_30)&0x1); m=((ic32_16)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8cce4:	12001059 	and	w25, w2, #0x1f
   8cce8:	1200101a 	and	w26, w0, #0x1f
		args[0]=disasm_arg_VtH1; args[1]=disasm_arg_VnH1; args[2]=disasm_arg_VmH1; 
   8ccec:	52800f82 	mov	w2, #0x7c                  	// #124
		names="fabd\0";
   8ccf0:	911a6020 	add	x0, x1, #0x698
		q=((ic32_30)&0x1); m=((ic32_16)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8ccf4:	12000098 	and	w24, w4, #0x1
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8ccf8:	52800017 	mov	w23, #0x0                   	// #0
   8ccfc:	5280001b 	mov	w27, #0x0                   	// #0
	uint16_t op=0, om=0, j=0;
   8cd00:	52800014 	mov	w20, #0x0                   	// #0
   8cd04:	52800001 	mov	w1, #0x0                   	// #0
	uint32_t i=0;
   8cd08:	290effff 	stp	wzr, wzr, [sp, #116]
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8cd0c:	290fffe3 	stp	w3, wzr, [sp, #124]
		args[0]=disasm_arg_VtH1; args[1]=disasm_arg_VnH1; args[2]=disasm_arg_VmH1; 
   8cd10:	528f6f43 	mov	w3, #0x7b7a                	// #31610
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8cd14:	29117fff 	stp	wzr, wzr, [sp, #136]
   8cd18:	29127fff 	stp	wzr, wzr, [sp, #144]
   8cd1c:	b9009bff 	str	wzr, [sp, #152]
		args[0]=disasm_arg_VtH1; args[1]=disasm_arg_VnH1; args[2]=disasm_arg_VmH1; 
   8cd20:	790583e3 	strh	w3, [sp, #704]
   8cd24:	390b0be2 	strb	w2, [sp, #706]
   8cd28:	a9435bf5 	ldp	x21, x22, [sp, #48]
   8cd2c:	17ffe3cd 	b	85c60 <disasm+0x1c80>
		names="not\0rbit\0";
   8cd30:	f0000023 	adrp	x3, 93000 <sd_init+0x1470>
   8cd34:	91162063 	add	x3, x3, #0x588
		op=((ic32_22)&0x1); q=((ic32_30)&0x1); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8cd38:	12001059 	and	w25, w2, #0x1f
   8cd3c:	1200101a 	and	w26, w0, #0x1f
		args[0]=disasm_arg_VtT; args[1]=disasm_arg_VnT; 
   8cd40:	128f7b42 	mov	w2, #0xffff8425            	// #-31707
		op=((ic32_22)&0x1); q=((ic32_30)&0x1); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8cd44:	120000e1 	and	w1, w7, #0x1
   8cd48:	12000098 	and	w24, w4, #0x1
		names="not\0rbit\0";
   8cd4c:	9139e060 	add	x0, x3, #0xe78
		z=0;
   8cd50:	52800017 	mov	w23, #0x0                   	// #0
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8cd54:	5280001b 	mov	w27, #0x0                   	// #0
	uint16_t op=0, om=0, j=0;
   8cd58:	52800014 	mov	w20, #0x0                   	// #0
	uint32_t i=0;
   8cd5c:	290effff 	stp	wzr, wzr, [sp, #116]
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8cd60:	290fffff 	stp	wzr, wzr, [sp, #124]
   8cd64:	29117fff 	stp	wzr, wzr, [sp, #136]
   8cd68:	29127fff 	stp	wzr, wzr, [sp, #144]
   8cd6c:	b9009bff 	str	wzr, [sp, #152]
		args[0]=disasm_arg_VtT; args[1]=disasm_arg_VnT; 
   8cd70:	790583e2 	strh	w2, [sp, #704]
   8cd74:	a9435bf5 	ldp	x21, x22, [sp, #48]
   8cd78:	17ffe3ba 	b	85c60 <disasm+0x1c80>
		names="frintx\0";
   8cd7c:	f0000021 	adrp	x1, 93000 <sd_init+0x1470>
   8cd80:	91162021 	add	x1, x1, #0x588
		q=((ic32_30)&0x1); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8cd84:	12001059 	and	w25, w2, #0x1f
   8cd88:	1200101a 	and	w26, w0, #0x1f
		args[0]=disasm_arg_VtT; args[1]=disasm_arg_VnT; 
   8cd8c:	128f7b42 	mov	w2, #0xffff8425            	// #-31707
		names="frintx\0";
   8cd90:	9139c020 	add	x0, x1, #0xe70
		q=((ic32_30)&0x1); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8cd94:	12000098 	and	w24, w4, #0x1
		z=1;
   8cd98:	52800037 	mov	w23, #0x1                   	// #1
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8cd9c:	5280001b 	mov	w27, #0x0                   	// #0
	uint16_t op=0, om=0, j=0;
   8cda0:	52800014 	mov	w20, #0x0                   	// #0
   8cda4:	52800001 	mov	w1, #0x0                   	// #0
	uint32_t i=0;
   8cda8:	290effff 	stp	wzr, wzr, [sp, #116]
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8cdac:	290fffff 	stp	wzr, wzr, [sp, #124]
   8cdb0:	29117fff 	stp	wzr, wzr, [sp, #136]
   8cdb4:	29127fff 	stp	wzr, wzr, [sp, #144]
   8cdb8:	b9009bff 	str	wzr, [sp, #152]
		args[0]=disasm_arg_VtT; args[1]=disasm_arg_VnT; 
   8cdbc:	790583e2 	strh	w2, [sp, #704]
   8cdc0:	a9435bf5 	ldp	x21, x22, [sp, #48]
   8cdc4:	17ffe3a7 	b	85c60 <disasm+0x1c80>
		names="fcmge\0facge\0";
   8cdc8:	f0000023 	adrp	x3, 93000 <sd_init+0x1470>
   8cdcc:	91162063 	add	x3, x3, #0x588
		op=((ic32_11)&0x1); q=((ic32_30)&0x1); m=((ic32_16)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8cdd0:	12000098 	and	w24, w4, #0x1
   8cdd4:	12001059 	and	w25, w2, #0x1f
   8cdd8:	120010a4 	and	w4, w5, #0x1f
   8cddc:	1200101a 	and	w26, w0, #0x1f
		args[0]=disasm_arg_VtH1; args[1]=disasm_arg_VnH1; args[2]=disasm_arg_VmH1; 
   8cde0:	52800f82 	mov	w2, #0x7c                  	// #124
		names="fcmge\0facge\0";
   8cde4:	911a2060 	add	x0, x3, #0x688
		op=((ic32_11)&0x1); q=((ic32_30)&0x1); m=((ic32_16)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8cde8:	120001a1 	and	w1, w13, #0x1
		args[0]=disasm_arg_VtH1; args[1]=disasm_arg_VnH1; args[2]=disasm_arg_VmH1; 
   8cdec:	528f6f43 	mov	w3, #0x7b7a                	// #31610
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8cdf0:	52800017 	mov	w23, #0x0                   	// #0
   8cdf4:	5280001b 	mov	w27, #0x0                   	// #0
	uint16_t op=0, om=0, j=0;
   8cdf8:	52800014 	mov	w20, #0x0                   	// #0
	uint32_t i=0;
   8cdfc:	290effff 	stp	wzr, wzr, [sp, #116]
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8ce00:	290fffe4 	stp	w4, wzr, [sp, #124]
   8ce04:	29117fff 	stp	wzr, wzr, [sp, #136]
   8ce08:	29127fff 	stp	wzr, wzr, [sp, #144]
   8ce0c:	b9009bff 	str	wzr, [sp, #152]
		args[0]=disasm_arg_VtH1; args[1]=disasm_arg_VnH1; args[2]=disasm_arg_VmH1; 
   8ce10:	790583e3 	strh	w3, [sp, #704]
   8ce14:	390b0be2 	strb	w2, [sp, #706]
   8ce18:	a9435bf5 	ldp	x21, x22, [sp, #48]
   8ce1c:	17ffe391 	b	85c60 <disasm+0x1c80>
		q=((ic32_30)&0x1); m=((ic32_16)&0x1f); i=((ic32_14)&1?(-1<<4):0)|((ic32_11)&0xf); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8ce20:	f240023f 	tst	x17, #0x1
   8ce24:	12000dad 	and	w13, w13, #0xf
   8ce28:	128001e3 	mov	w3, #0xfffffff0            	// #-16
   8ce2c:	1a9f1063 	csel	w3, w3, wzr, ne  // ne = any
		names="ext\0";
   8ce30:	f0000021 	adrp	x1, 93000 <sd_init+0x1470>
		q=((ic32_30)&0x1); m=((ic32_16)&0x1f); i=((ic32_14)&1?(-1<<4):0)|((ic32_11)&0xf); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8ce34:	12001059 	and	w25, w2, #0x1f
		names="ext\0";
   8ce38:	91162021 	add	x1, x1, #0x588
		q=((ic32_30)&0x1); m=((ic32_16)&0x1f); i=((ic32_14)&1?(-1<<4):0)|((ic32_11)&0xf); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8ce3c:	1200101a 	and	w26, w0, #0x1f
		args[0]=disasm_arg_VtT; args[1]=disasm_arg_VnT; args[2]=disasm_arg_VmT; args[3]=disasm_arg_i; 
   8ce40:	529084a2 	mov	w2, #0x8425                	// #33829
		q=((ic32_30)&0x1); m=((ic32_16)&0x1f); i=((ic32_14)&1?(-1<<4):0)|((ic32_11)&0xf); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8ce44:	2a0301a0 	orr	w0, w13, w3
   8ce48:	12000098 	and	w24, w4, #0x1
		args[0]=disasm_arg_VtT; args[1]=disasm_arg_VnT; args[2]=disasm_arg_VmT; args[3]=disasm_arg_i; 
   8ce4c:	72a0f0a2 	movk	w2, #0x785, lsl #16
		q=((ic32_30)&0x1); m=((ic32_16)&0x1f); i=((ic32_14)&1?(-1<<4):0)|((ic32_11)&0xf); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8ce50:	120010a4 	and	w4, w5, #0x1f
		z=0;
   8ce54:	52800017 	mov	w23, #0x0                   	// #0
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8ce58:	5280001b 	mov	w27, #0x0                   	// #0
	uint16_t op=0, om=0, j=0;
   8ce5c:	52800014 	mov	w20, #0x0                   	// #0
		q=((ic32_30)&0x1); m=((ic32_16)&0x1f); i=((ic32_14)&1?(-1<<4):0)|((ic32_11)&0xf); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8ce60:	290e83ff 	stp	wzr, w0, [sp, #116]
		names="ext\0";
   8ce64:	9139a020 	add	x0, x1, #0xe68
	uint16_t op=0, om=0, j=0;
   8ce68:	52800001 	mov	w1, #0x0                   	// #0
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8ce6c:	290fffe4 	stp	w4, wzr, [sp, #124]
   8ce70:	29117fff 	stp	wzr, wzr, [sp, #136]
   8ce74:	29127fff 	stp	wzr, wzr, [sp, #144]
   8ce78:	b9009bff 	str	wzr, [sp, #152]
		args[0]=disasm_arg_VtT; args[1]=disasm_arg_VnT; args[2]=disasm_arg_VmT; args[3]=disasm_arg_i; 
   8ce7c:	b902c3e2 	str	w2, [sp, #704]
   8ce80:	a9435bf5 	ldp	x21, x22, [sp, #48]
   8ce84:	17ffe377 	b	85c60 <disasm+0x1c80>
		q=((ic32_30)&0x1); j=((ic32_16)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8ce88:	1200009b 	and	w27, w4, #0x1
		names="dup\0";
   8ce8c:	f0000021 	adrp	x1, 93000 <sd_init+0x1470>
   8ce90:	91162021 	add	x1, x1, #0x588
		q=((ic32_30)&0x1); j=((ic32_16)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8ce94:	12001059 	and	w25, w2, #0x1f
   8ce98:	1200101a 	and	w26, w0, #0x1f
		args[0]=disasm_arg_Vtjq; args[1]=disasm_arg_Rn; 
   8ce9c:	52812ea2 	mov	w2, #0x975                 	// #2421
		names="dup\0";
   8cea0:	910fa020 	add	x0, x1, #0x3e8
		q=((ic32_30)&0x1); j=((ic32_16)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8cea4:	120010b4 	and	w20, w5, #0x1f
   8cea8:	2a1b03f8 	mov	w24, w27
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8ceac:	52800017 	mov	w23, #0x0                   	// #0
	uint16_t op=0, om=0, j=0;
   8ceb0:	52800001 	mov	w1, #0x0                   	// #0
	uint32_t i=0;
   8ceb4:	290effff 	stp	wzr, wzr, [sp, #116]
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8ceb8:	290fffff 	stp	wzr, wzr, [sp, #124]
   8cebc:	29117fff 	stp	wzr, wzr, [sp, #136]
   8cec0:	29127fff 	stp	wzr, wzr, [sp, #144]
   8cec4:	b9009bff 	str	wzr, [sp, #152]
		args[0]=disasm_arg_Vtjq; args[1]=disasm_arg_Rn; 
   8cec8:	790583e2 	strh	w2, [sp, #704]
   8cecc:	a9435bf5 	ldp	x21, x22, [sp, #48]
   8ced0:	17ffe364 	b	85c60 <disasm+0x1c80>
		s=((ic32_30)&0x1); i=((ic32_23)&1?(-1<<19):0)|((ic32_5)&0x7ffff); t=((ic32)&0x1f); 
   8ced4:	f240021f 	tst	x16, #0x1
   8ced8:	12004842 	and	w2, w2, #0x7ffff
   8cedc:	52bfff03 	mov	w3, #0xfff80000            	// #-524288
   8cee0:	1a9f1063 	csel	w3, w3, wzr, ne  // ne = any
		names="ldr\0";
   8cee4:	f0000021 	adrp	x1, 93000 <sd_init+0x1470>
		s=((ic32_30)&0x1); i=((ic32_23)&1?(-1<<19):0)|((ic32_5)&0x7ffff); t=((ic32)&0x1f); 
   8cee8:	1200101a 	and	w26, w0, #0x1f
		names="ldr\0";
   8ceec:	91162021 	add	x1, x1, #0x588
		s=((ic32_30)&0x1); i=((ic32_23)&1?(-1<<19):0)|((ic32_5)&0x7ffff); t=((ic32)&0x1f); 
   8cef0:	2a030040 	orr	w0, w2, w3
   8cef4:	1200009b 	and	w27, w4, #0x1
		args[0]=disasm_arg_Rt; args[1]=disasm_arg_labeli4; 
   8cef8:	52820162 	mov	w2, #0x100b                	// #4107
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8cefc:	52800017 	mov	w23, #0x0                   	// #0
   8cf00:	52800018 	mov	w24, #0x0                   	// #0
   8cf04:	52800019 	mov	w25, #0x0                   	// #0
	uint16_t op=0, om=0, j=0;
   8cf08:	52800014 	mov	w20, #0x0                   	// #0
		s=((ic32_30)&0x1); i=((ic32_23)&1?(-1<<19):0)|((ic32_5)&0x7ffff); t=((ic32)&0x1f); 
   8cf0c:	290e83ff 	stp	wzr, w0, [sp, #116]
		names="ldr\0";
   8cf10:	91398020 	add	x0, x1, #0xe60
	uint16_t op=0, om=0, j=0;
   8cf14:	52800001 	mov	w1, #0x0                   	// #0
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8cf18:	290fffff 	stp	wzr, wzr, [sp, #124]
   8cf1c:	29117fff 	stp	wzr, wzr, [sp, #136]
   8cf20:	29127fff 	stp	wzr, wzr, [sp, #144]
   8cf24:	b9009bff 	str	wzr, [sp, #152]
		args[0]=disasm_arg_Rt; args[1]=disasm_arg_labeli4; 
   8cf28:	790583e2 	strh	w2, [sp, #704]
   8cf2c:	a9435bf5 	ldp	x21, x22, [sp, #48]
   8cf30:	17ffe34c 	b	85c60 <disasm+0x1c80>
		op=((ic32_13)&0x2)|((ic32_12)&0x1); j=((ic32_10)&0x2)|((ic32_21)&0x1); q=((ic32_30)&0x1); m=((ic32_16)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8cf34:	121f0161 	and	w1, w11, #0x2
   8cf38:	1200014a 	and	w10, w10, #0x1
   8cf3c:	121f0294 	and	w20, w20, #0x2
   8cf40:	1200018c 	and	w12, w12, #0x1
		names="mul\0fmul\0sqdmulh\0sqrdmulh\0";
   8cf44:	f0000023 	adrp	x3, 93000 <sd_init+0x1470>
   8cf48:	91162063 	add	x3, x3, #0x588
		op=((ic32_13)&0x2)|((ic32_12)&0x1); j=((ic32_10)&0x2)|((ic32_21)&0x1); q=((ic32_30)&0x1); m=((ic32_16)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8cf4c:	12000098 	and	w24, w4, #0x1
   8cf50:	12001059 	and	w25, w2, #0x1f
   8cf54:	120010a4 	and	w4, w5, #0x1f
   8cf58:	1200101a 	and	w26, w0, #0x1f
		args[0]=disasm_arg_VtT; args[1]=disasm_arg_VnT; args[2]=disasm_arg_VmTs; 
   8cf5c:	12800c82 	mov	w2, #0xffffff9b            	// #-101
		names="mul\0fmul\0sqdmulh\0sqrdmulh\0";
   8cf60:	91390060 	add	x0, x3, #0xe40
		op=((ic32_13)&0x2)|((ic32_12)&0x1); j=((ic32_10)&0x2)|((ic32_21)&0x1); q=((ic32_30)&0x1); m=((ic32_16)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8cf64:	2a0a0021 	orr	w1, w1, w10
		args[0]=disasm_arg_VtT; args[1]=disasm_arg_VnT; args[2]=disasm_arg_VmTs; 
   8cf68:	128f7b43 	mov	w3, #0xffff8425            	// #-31707
		op=((ic32_13)&0x2)|((ic32_12)&0x1); j=((ic32_10)&0x2)|((ic32_21)&0x1); q=((ic32_30)&0x1); m=((ic32_16)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8cf6c:	2a0c0294 	orr	w20, w20, w12
		z=2;
   8cf70:	52800057 	mov	w23, #0x2                   	// #2
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8cf74:	5280001b 	mov	w27, #0x0                   	// #0
	uint32_t i=0;
   8cf78:	290effff 	stp	wzr, wzr, [sp, #116]
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8cf7c:	290fffe4 	stp	w4, wzr, [sp, #124]
   8cf80:	29117fff 	stp	wzr, wzr, [sp, #136]
   8cf84:	29127fff 	stp	wzr, wzr, [sp, #144]
   8cf88:	b9009bff 	str	wzr, [sp, #152]
		args[0]=disasm_arg_VtT; args[1]=disasm_arg_VnT; args[2]=disasm_arg_VmTs; 
   8cf8c:	790583e3 	strh	w3, [sp, #704]
   8cf90:	390b0be2 	strb	w2, [sp, #706]
   8cf94:	a9435bf5 	ldp	x21, x22, [sp, #48]
   8cf98:	17ffe332 	b	85c60 <disasm+0x1c80>
		names="fcvtzs\0";
   8cf9c:	f0000021 	adrp	x1, 93000 <sd_init+0x1470>
   8cfa0:	91162021 	add	x1, x1, #0x588
		q=((ic32_30)&0x1); j=((ic32_16)&0x7f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8cfa4:	12001059 	and	w25, w2, #0x1f
   8cfa8:	1200101a 	and	w26, w0, #0x1f
		args[0]=disasm_arg_Vtj2; args[1]=disasm_arg_Vnj2; args[2]=disasm_arg_shrshift; 
   8cfac:	128d6d83 	mov	w3, #0xffff9493            	// #-27501
		names="fcvtzs\0";
   8cfb0:	9138e020 	add	x0, x1, #0xe38
		args[0]=disasm_arg_Vtj2; args[1]=disasm_arg_Vnj2; args[2]=disasm_arg_shrshift; 
   8cfb4:	12800da2 	mov	w2, #0xffffff92            	// #-110
		q=((ic32_30)&0x1); j=((ic32_16)&0x7f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8cfb8:	12000098 	and	w24, w4, #0x1
   8cfbc:	120018b4 	and	w20, w5, #0x7f
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8cfc0:	52800017 	mov	w23, #0x0                   	// #0
   8cfc4:	5280001b 	mov	w27, #0x0                   	// #0
	uint16_t op=0, om=0, j=0;
   8cfc8:	52800001 	mov	w1, #0x0                   	// #0
	uint32_t i=0;
   8cfcc:	290effff 	stp	wzr, wzr, [sp, #116]
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8cfd0:	290fffff 	stp	wzr, wzr, [sp, #124]
   8cfd4:	29117fff 	stp	wzr, wzr, [sp, #136]
   8cfd8:	29127fff 	stp	wzr, wzr, [sp, #144]
   8cfdc:	b9009bff 	str	wzr, [sp, #152]
		args[0]=disasm_arg_Vtj2; args[1]=disasm_arg_Vnj2; args[2]=disasm_arg_shrshift; 
   8cfe0:	790583e3 	strh	w3, [sp, #704]
   8cfe4:	390b0be2 	strb	w2, [sp, #706]
   8cfe8:	a9435bf5 	ldp	x21, x22, [sp, #48]
   8cfec:	17ffe31d 	b	85c60 <disasm+0x1c80>
		names="scvtf\0";
   8cff0:	f0000021 	adrp	x1, 93000 <sd_init+0x1470>
   8cff4:	91162021 	add	x1, x1, #0x588
		q=((ic32_30)&0x1); j=((ic32_16)&0x7f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8cff8:	12001059 	and	w25, w2, #0x1f
   8cffc:	1200101a 	and	w26, w0, #0x1f
		args[0]=disasm_arg_Vtj2; args[1]=disasm_arg_Vnj2; args[2]=disasm_arg_shrshift; 
   8d000:	128d6d83 	mov	w3, #0xffff9493            	// #-27501
		names="scvtf\0";
   8d004:	9138c020 	add	x0, x1, #0xe30
		args[0]=disasm_arg_Vtj2; args[1]=disasm_arg_Vnj2; args[2]=disasm_arg_shrshift; 
   8d008:	12800da2 	mov	w2, #0xffffff92            	// #-110
		q=((ic32_30)&0x1); j=((ic32_16)&0x7f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8d00c:	12000098 	and	w24, w4, #0x1
   8d010:	120018b4 	and	w20, w5, #0x7f
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8d014:	52800017 	mov	w23, #0x0                   	// #0
   8d018:	5280001b 	mov	w27, #0x0                   	// #0
	uint16_t op=0, om=0, j=0;
   8d01c:	52800001 	mov	w1, #0x0                   	// #0
	uint32_t i=0;
   8d020:	290effff 	stp	wzr, wzr, [sp, #116]
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8d024:	290fffff 	stp	wzr, wzr, [sp, #124]
   8d028:	29117fff 	stp	wzr, wzr, [sp, #136]
   8d02c:	29127fff 	stp	wzr, wzr, [sp, #144]
   8d030:	b9009bff 	str	wzr, [sp, #152]
		args[0]=disasm_arg_Vtj2; args[1]=disasm_arg_Vnj2; args[2]=disasm_arg_shrshift; 
   8d034:	790583e3 	strh	w3, [sp, #704]
   8d038:	390b0be2 	strb	w2, [sp, #706]
   8d03c:	a9435bf5 	ldp	x21, x22, [sp, #48]
   8d040:	17ffe308 	b	85c60 <disasm+0x1c80>
		names="sshr\0ssra\0srshr\0srsra\0";
   8d044:	d0000023 	adrp	x3, 93000 <sd_init+0x1470>
   8d048:	91162063 	add	x3, x3, #0x588
		op=((ic32_12)&0x3); q=((ic32_30)&0x1); j=((ic32_16)&0x7f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8d04c:	12001059 	and	w25, w2, #0x1f
   8d050:	1200101a 	and	w26, w0, #0x1f
		args[0]=disasm_arg_Vtj2; args[1]=disasm_arg_Vnj2; args[2]=disasm_arg_shrshift; 
   8d054:	12800da2 	mov	w2, #0xffffff92            	// #-110
		names="sshr\0ssra\0srshr\0srsra\0";
   8d058:	91386060 	add	x0, x3, #0xe18
		op=((ic32_12)&0x3); q=((ic32_30)&0x1); j=((ic32_16)&0x7f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8d05c:	12000541 	and	w1, w10, #0x3
		args[0]=disasm_arg_Vtj2; args[1]=disasm_arg_Vnj2; args[2]=disasm_arg_shrshift; 
   8d060:	128d6d83 	mov	w3, #0xffff9493            	// #-27501
		op=((ic32_12)&0x3); q=((ic32_30)&0x1); j=((ic32_16)&0x7f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8d064:	12000098 	and	w24, w4, #0x1
   8d068:	120018b4 	and	w20, w5, #0x7f
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8d06c:	52800017 	mov	w23, #0x0                   	// #0
   8d070:	5280001b 	mov	w27, #0x0                   	// #0
	uint32_t i=0;
   8d074:	290effff 	stp	wzr, wzr, [sp, #116]
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8d078:	290fffff 	stp	wzr, wzr, [sp, #124]
   8d07c:	29117fff 	stp	wzr, wzr, [sp, #136]
   8d080:	29127fff 	stp	wzr, wzr, [sp, #144]
   8d084:	b9009bff 	str	wzr, [sp, #152]
		args[0]=disasm_arg_Vtj2; args[1]=disasm_arg_Vnj2; args[2]=disasm_arg_shrshift; 
   8d088:	790583e3 	strh	w3, [sp, #704]
   8d08c:	390b0be2 	strb	w2, [sp, #706]
   8d090:	a9435bf5 	ldp	x21, x22, [sp, #48]
   8d094:	17ffe2f3 	b	85c60 <disasm+0x1c80>
		op=((ic32_13)&0x2)|((ic32_12)&0x1); j=((ic32_9)&0x4)|((ic32_20)&0x3); q=((ic32_30)&0x1); m=((ic32_16)&0xf); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8d098:	121f0161 	and	w1, w11, #0x2
   8d09c:	1200014a 	and	w10, w10, #0x1
   8d0a0:	121e01ef 	and	w15, w15, #0x4
   8d0a4:	12000508 	and	w8, w8, #0x3
		names="mul\0?\0sqdmulh\0sqrdmulh\0";
   8d0a8:	d0000023 	adrp	x3, 93000 <sd_init+0x1470>
   8d0ac:	91162063 	add	x3, x3, #0x588
		op=((ic32_13)&0x2)|((ic32_12)&0x1); j=((ic32_9)&0x4)|((ic32_20)&0x3); q=((ic32_30)&0x1); m=((ic32_16)&0xf); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8d0b0:	12000098 	and	w24, w4, #0x1
   8d0b4:	12001059 	and	w25, w2, #0x1f
   8d0b8:	12000ca4 	and	w4, w5, #0xf
   8d0bc:	1200101a 	and	w26, w0, #0x1f
		args[0]=disasm_arg_VtT; args[1]=disasm_arg_VnT; args[2]=disasm_arg_VmTs; 
   8d0c0:	12800c82 	mov	w2, #0xffffff9b            	// #-101
		names="mul\0?\0sqdmulh\0sqrdmulh\0";
   8d0c4:	91380060 	add	x0, x3, #0xe00
		op=((ic32_13)&0x2)|((ic32_12)&0x1); j=((ic32_9)&0x4)|((ic32_20)&0x3); q=((ic32_30)&0x1); m=((ic32_16)&0xf); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8d0c8:	2a0a0021 	orr	w1, w1, w10
		args[0]=disasm_arg_VtT; args[1]=disasm_arg_VnT; args[2]=disasm_arg_VmTs; 
   8d0cc:	128f7b43 	mov	w3, #0xffff8425            	// #-31707
		op=((ic32_13)&0x2)|((ic32_12)&0x1); j=((ic32_9)&0x4)|((ic32_20)&0x3); q=((ic32_30)&0x1); m=((ic32_16)&0xf); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8d0d0:	2a0801f4 	orr	w20, w15, w8
		z=1;
   8d0d4:	52800037 	mov	w23, #0x1                   	// #1
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8d0d8:	5280001b 	mov	w27, #0x0                   	// #0
	uint32_t i=0;
   8d0dc:	290effff 	stp	wzr, wzr, [sp, #116]
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8d0e0:	290fffe4 	stp	w4, wzr, [sp, #124]
   8d0e4:	29117fff 	stp	wzr, wzr, [sp, #136]
   8d0e8:	29127fff 	stp	wzr, wzr, [sp, #144]
   8d0ec:	b9009bff 	str	wzr, [sp, #152]
		args[0]=disasm_arg_VtT; args[1]=disasm_arg_VnT; args[2]=disasm_arg_VmTs; 
   8d0f0:	790583e3 	strh	w3, [sp, #704]
   8d0f4:	390b0be2 	strb	w2, [sp, #706]
   8d0f8:	a9435bf5 	ldp	x21, x22, [sp, #48]
   8d0fc:	17ffe2d9 	b	85c60 <disasm+0x1c80>
		q=((ic32_30)&0x1); j=((ic32_11)&0xe0)|((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8d100:	12001042 	and	w2, w2, #0x1f
   8d104:	121b09ad 	and	w13, w13, #0xe0
		names="fmov\0";
   8d108:	d0000021 	adrp	x1, 93000 <sd_init+0x1470>
   8d10c:	91162021 	add	x1, x1, #0x588
		q=((ic32_30)&0x1); j=((ic32_11)&0xe0)|((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8d110:	2a0201b4 	orr	w20, w13, w2
   8d114:	1200101a 	and	w26, w0, #0x1f
		args[0]=disasm_arg_VtT; args[1]=disasm_arg_F16; 
   8d118:	1289bb42 	mov	w2, #0xffffb225            	// #-19931
		names="fmov\0";
   8d11c:	d101a020 	sub	x0, x1, #0x68
		q=((ic32_30)&0x1); j=((ic32_11)&0xe0)|((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8d120:	12000098 	and	w24, w4, #0x1
		z=1;
   8d124:	52800037 	mov	w23, #0x1                   	// #1
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8d128:	52800019 	mov	w25, #0x0                   	// #0
   8d12c:	5280001b 	mov	w27, #0x0                   	// #0
	uint16_t op=0, om=0, j=0;
   8d130:	52800001 	mov	w1, #0x0                   	// #0
	uint32_t i=0;
   8d134:	290effff 	stp	wzr, wzr, [sp, #116]
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8d138:	290fffff 	stp	wzr, wzr, [sp, #124]
   8d13c:	29117fff 	stp	wzr, wzr, [sp, #136]
   8d140:	29127fff 	stp	wzr, wzr, [sp, #144]
   8d144:	b9009bff 	str	wzr, [sp, #152]
		args[0]=disasm_arg_VtT; args[1]=disasm_arg_F16; 
   8d148:	790583e2 	strh	w2, [sp, #704]
   8d14c:	a9435bf5 	ldp	x21, x22, [sp, #48]
   8d150:	17ffe2c4 	b	85c60 <disasm+0x1c80>
		q=((ic32_30)&0x1); j=((ic32_11)&0xe0)|((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8d154:	12001042 	and	w2, w2, #0x1f
   8d158:	121b09ad 	and	w13, w13, #0xe0
		names="fmov\0";
   8d15c:	d0000021 	adrp	x1, 93000 <sd_init+0x1470>
   8d160:	91162021 	add	x1, x1, #0x588
		q=((ic32_30)&0x1); j=((ic32_11)&0xe0)|((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8d164:	2a0201b4 	orr	w20, w13, w2
   8d168:	1200101a 	and	w26, w0, #0x1f
		args[0]=disasm_arg_VtT; args[1]=disasm_arg_F32; 
   8d16c:	12899b42 	mov	w2, #0xffffb325            	// #-19675
		names="fmov\0";
   8d170:	d101a020 	sub	x0, x1, #0x68
		q=((ic32_30)&0x1); j=((ic32_11)&0xe0)|((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8d174:	12000098 	and	w24, w4, #0x1
		z=2;
   8d178:	52800057 	mov	w23, #0x2                   	// #2
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8d17c:	52800019 	mov	w25, #0x0                   	// #0
   8d180:	5280001b 	mov	w27, #0x0                   	// #0
	uint16_t op=0, om=0, j=0;
   8d184:	52800001 	mov	w1, #0x0                   	// #0
	uint32_t i=0;
   8d188:	290effff 	stp	wzr, wzr, [sp, #116]
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8d18c:	290fffff 	stp	wzr, wzr, [sp, #124]
   8d190:	29117fff 	stp	wzr, wzr, [sp, #136]
   8d194:	29127fff 	stp	wzr, wzr, [sp, #144]
   8d198:	b9009bff 	str	wzr, [sp, #152]
		args[0]=disasm_arg_VtT; args[1]=disasm_arg_F32; 
   8d19c:	790583e2 	strh	w2, [sp, #704]
   8d1a0:	a9435bf5 	ldp	x21, x22, [sp, #48]
   8d1a4:	17ffe2af 	b	85c60 <disasm+0x1c80>
		q=((ic32_30)&0x1); j=((ic32_11)&0xe0)|((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8d1a8:	12001042 	and	w2, w2, #0x1f
   8d1ac:	121b09ad 	and	w13, w13, #0xe0
		names="movi\0";
   8d1b0:	d0000021 	adrp	x1, 93000 <sd_init+0x1470>
   8d1b4:	91162021 	add	x1, x1, #0x588
		q=((ic32_30)&0x1); j=((ic32_11)&0xe0)|((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8d1b8:	2a0201b4 	orr	w20, w13, w2
   8d1bc:	1200101a 	and	w26, w0, #0x1f
		args[0]=disasm_arg_VtT; args[1]=disasm_arg_imm8; 
   8d1c0:	128a5b42 	mov	w2, #0xffffad25            	// #-21211
		names="movi\0";
   8d1c4:	91004020 	add	x0, x1, #0x10
		q=((ic32_30)&0x1); j=((ic32_11)&0xe0)|((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8d1c8:	12000098 	and	w24, w4, #0x1
		z=0;
   8d1cc:	52800017 	mov	w23, #0x0                   	// #0
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8d1d0:	52800019 	mov	w25, #0x0                   	// #0
   8d1d4:	5280001b 	mov	w27, #0x0                   	// #0
	uint16_t op=0, om=0, j=0;
   8d1d8:	52800001 	mov	w1, #0x0                   	// #0
	uint32_t i=0;
   8d1dc:	290effff 	stp	wzr, wzr, [sp, #116]
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8d1e0:	290fffff 	stp	wzr, wzr, [sp, #124]
   8d1e4:	29117fff 	stp	wzr, wzr, [sp, #136]
   8d1e8:	29127fff 	stp	wzr, wzr, [sp, #144]
   8d1ec:	b9009bff 	str	wzr, [sp, #152]
		args[0]=disasm_arg_VtT; args[1]=disasm_arg_imm8; 
   8d1f0:	790583e2 	strh	w2, [sp, #704]
   8d1f4:	a9435bf5 	ldp	x21, x22, [sp, #48]
   8d1f8:	17ffe29a 	b	85c60 <disasm+0x1c80>
		op=((ic32_16)&0x20)|((ic32_10)&0x1f); q=((ic32_30)&0x1); z=((ic32_22)&0x3); m=((ic32_16)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8d1fc:	12001294 	and	w20, w20, #0x1f
   8d200:	121b00a1 	and	w1, w5, #0x20
		names="?\0?\0?\0?\0?\0?\0uzp1\0?\0?\0?\0trn1\0?\0?\0?\0zip1\0?\0?\0?\0?\0?\0?\0?\0uzp2\0?\0?\0?\0trn2\0?\0?\0?\0zip2\0?\0?\0shadd\0?\0sqadd\0?\0srhadd\0?\0?\0?\0?\0?\0sqsub\0?\0cmgt\0?\0cmge\0?\0sshl\0?\0sqshl\0?\0srshl\0?\0sqrshl\0?\0smax\0?\0smin\0?\0sabd\0?\0saba\0";
   8d204:	d0000023 	adrp	x3, 93000 <sd_init+0x1470>
		op=((ic32_16)&0x20)|((ic32_10)&0x1f); q=((ic32_30)&0x1); z=((ic32_22)&0x3); m=((ic32_16)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8d208:	1200101a 	and	w26, w0, #0x1f
		names="?\0?\0?\0?\0?\0?\0uzp1\0?\0?\0?\0trn1\0?\0?\0?\0zip1\0?\0?\0?\0?\0?\0?\0?\0uzp2\0?\0?\0?\0trn2\0?\0?\0?\0zip2\0?\0?\0shadd\0?\0sqadd\0?\0srhadd\0?\0?\0?\0?\0?\0sqsub\0?\0cmgt\0?\0cmge\0?\0sshl\0?\0sqshl\0?\0srshl\0?\0sqrshl\0?\0smax\0?\0smin\0?\0sabd\0?\0saba\0";
   8d20c:	91162063 	add	x3, x3, #0x588
		op=((ic32_16)&0x20)|((ic32_10)&0x1f); q=((ic32_30)&0x1); z=((ic32_22)&0x3); m=((ic32_16)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8d210:	120010a0 	and	w0, w5, #0x1f
   8d214:	12001059 	and	w25, w2, #0x1f
   8d218:	2a140021 	orr	w1, w1, w20
		args[0]=disasm_arg_VtT; args[1]=disasm_arg_VnT; args[2]=disasm_arg_VmT; 
   8d21c:	12800f42 	mov	w2, #0xffffff85            	// #-123
		op=((ic32_16)&0x20)|((ic32_10)&0x1f); q=((ic32_30)&0x1); z=((ic32_22)&0x3); m=((ic32_16)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8d220:	12000098 	and	w24, w4, #0x1
   8d224:	120004f7 	and	w23, w7, #0x3
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8d228:	5280001b 	mov	w27, #0x0                   	// #0
	uint16_t op=0, om=0, j=0;
   8d22c:	52800014 	mov	w20, #0x0                   	// #0
	uint32_t i=0;
   8d230:	290effff 	stp	wzr, wzr, [sp, #116]
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8d234:	290fffe0 	stp	w0, wzr, [sp, #124]
		names="?\0?\0?\0?\0?\0?\0uzp1\0?\0?\0?\0trn1\0?\0?\0?\0zip1\0?\0?\0?\0?\0?\0?\0?\0uzp2\0?\0?\0?\0trn2\0?\0?\0?\0zip2\0?\0?\0shadd\0?\0sqadd\0?\0srhadd\0?\0?\0?\0?\0?\0sqsub\0?\0cmgt\0?\0cmge\0?\0sshl\0?\0sqshl\0?\0srshl\0?\0sqrshl\0?\0smax\0?\0smin\0?\0sabd\0?\0saba\0";
   8d238:	9134e060 	add	x0, x3, #0xd38
		args[0]=disasm_arg_VtT; args[1]=disasm_arg_VnT; args[2]=disasm_arg_VmT; 
   8d23c:	128f7b43 	mov	w3, #0xffff8425            	// #-31707
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8d240:	29117fff 	stp	wzr, wzr, [sp, #136]
   8d244:	29127fff 	stp	wzr, wzr, [sp, #144]
   8d248:	b9009bff 	str	wzr, [sp, #152]
		args[0]=disasm_arg_VtT; args[1]=disasm_arg_VnT; args[2]=disasm_arg_VmT; 
   8d24c:	790583e3 	strh	w3, [sp, #704]
   8d250:	390b0be2 	strb	w2, [sp, #706]
   8d254:	a9435bf5 	ldp	x21, x22, [sp, #48]
   8d258:	17ffe282 	b	85c60 <disasm+0x1c80>
		names="frecps\0frsqrts\0";
   8d25c:	d0000023 	adrp	x3, 93000 <sd_init+0x1470>
   8d260:	91162063 	add	x3, x3, #0x588
		op=((ic32_23)&0x1); q=((ic32_30)&0x1); m=((ic32_16)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8d264:	12000098 	and	w24, w4, #0x1
   8d268:	12001059 	and	w25, w2, #0x1f
   8d26c:	120010a4 	and	w4, w5, #0x1f
   8d270:	1200101a 	and	w26, w0, #0x1f
		args[0]=disasm_arg_VtH1; args[1]=disasm_arg_VnH1; args[2]=disasm_arg_VmH1; 
   8d274:	52800f82 	mov	w2, #0x7c                  	// #124
		names="frecps\0frsqrts\0";
   8d278:	9112c060 	add	x0, x3, #0x4b0
		op=((ic32_23)&0x1); q=((ic32_30)&0x1); m=((ic32_16)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8d27c:	12000201 	and	w1, w16, #0x1
		args[0]=disasm_arg_VtH1; args[1]=disasm_arg_VnH1; args[2]=disasm_arg_VmH1; 
   8d280:	528f6f43 	mov	w3, #0x7b7a                	// #31610
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8d284:	52800017 	mov	w23, #0x0                   	// #0
   8d288:	5280001b 	mov	w27, #0x0                   	// #0
	uint16_t op=0, om=0, j=0;
   8d28c:	52800014 	mov	w20, #0x0                   	// #0
	uint32_t i=0;
   8d290:	290effff 	stp	wzr, wzr, [sp, #116]
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8d294:	290fffe4 	stp	w4, wzr, [sp, #124]
   8d298:	29117fff 	stp	wzr, wzr, [sp, #136]
   8d29c:	29127fff 	stp	wzr, wzr, [sp, #144]
   8d2a0:	b9009bff 	str	wzr, [sp, #152]
		args[0]=disasm_arg_VtH1; args[1]=disasm_arg_VnH1; args[2]=disasm_arg_VmH1; 
   8d2a4:	790583e3 	strh	w3, [sp, #704]
   8d2a8:	390b0be2 	strb	w2, [sp, #706]
   8d2ac:	a9435bf5 	ldp	x21, x22, [sp, #48]
   8d2b0:	17ffe26c 	b	85c60 <disasm+0x1c80>
		op=((ic32_21)&0x4)|((ic32_12)&0x3); q=((ic32_30)&0x1); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8d2b4:	121e0181 	and	w1, w12, #0x4
   8d2b8:	1200054a 	and	w10, w10, #0x3
		names="fmaxnmv\0?\0?\0fmaxv\0fminnmv\0?\0?\0fminv\0";
   8d2bc:	d0000023 	adrp	x3, 93000 <sd_init+0x1470>
   8d2c0:	91162063 	add	x3, x3, #0x588
		op=((ic32_21)&0x4)|((ic32_12)&0x3); q=((ic32_30)&0x1); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8d2c4:	12001059 	and	w25, w2, #0x1f
   8d2c8:	1200101a 	and	w26, w0, #0x1f
		args[0]=disasm_arg_Ht; args[1]=disasm_arg_Vnzq2; 
   8d2cc:	128af122 	mov	w2, #0xffffa876            	// #-22410
		op=((ic32_21)&0x4)|((ic32_12)&0x3); q=((ic32_30)&0x1); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8d2d0:	2a0a0021 	orr	w1, w1, w10
   8d2d4:	12000098 	and	w24, w4, #0x1
		names="fmaxnmv\0?\0?\0fmaxv\0fminnmv\0?\0?\0fminv\0";
   8d2d8:	9113e060 	add	x0, x3, #0x4f8
		z=0;
   8d2dc:	52800017 	mov	w23, #0x0                   	// #0
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8d2e0:	5280001b 	mov	w27, #0x0                   	// #0
	uint16_t op=0, om=0, j=0;
   8d2e4:	52800014 	mov	w20, #0x0                   	// #0
	uint32_t i=0;
   8d2e8:	290effff 	stp	wzr, wzr, [sp, #116]
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8d2ec:	290fffff 	stp	wzr, wzr, [sp, #124]
   8d2f0:	29117fff 	stp	wzr, wzr, [sp, #136]
   8d2f4:	29127fff 	stp	wzr, wzr, [sp, #144]
   8d2f8:	b9009bff 	str	wzr, [sp, #152]
		args[0]=disasm_arg_Ht; args[1]=disasm_arg_Vnzq2; 
   8d2fc:	790583e2 	strh	w2, [sp, #704]
   8d300:	a9435bf5 	ldp	x21, x22, [sp, #48]
   8d304:	17ffe257 	b	85c60 <disasm+0x1c80>
		names="frintp\0frintz\0";
   8d308:	d0000023 	adrp	x3, 93000 <sd_init+0x1470>
   8d30c:	91162063 	add	x3, x3, #0x588
		op=((ic32_12)&0x1); q=((ic32_30)&0x1); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8d310:	12001059 	and	w25, w2, #0x1f
   8d314:	1200101a 	and	w26, w0, #0x1f
		args[0]=disasm_arg_VtT; args[1]=disasm_arg_VnT; 
   8d318:	128f7b42 	mov	w2, #0xffff8425            	// #-31707
		op=((ic32_12)&0x1); q=((ic32_30)&0x1); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8d31c:	12000141 	and	w1, w10, #0x1
   8d320:	12000098 	and	w24, w4, #0x1
		names="frintp\0frintz\0";
   8d324:	9134a060 	add	x0, x3, #0xd28
		z=1;
   8d328:	52800037 	mov	w23, #0x1                   	// #1
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8d32c:	5280001b 	mov	w27, #0x0                   	// #0
	uint16_t op=0, om=0, j=0;
   8d330:	52800014 	mov	w20, #0x0                   	// #0
	uint32_t i=0;
   8d334:	290effff 	stp	wzr, wzr, [sp, #116]
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8d338:	290fffff 	stp	wzr, wzr, [sp, #124]
   8d33c:	29117fff 	stp	wzr, wzr, [sp, #136]
   8d340:	29127fff 	stp	wzr, wzr, [sp, #144]
   8d344:	b9009bff 	str	wzr, [sp, #152]
		args[0]=disasm_arg_VtT; args[1]=disasm_arg_VnT; 
   8d348:	790583e2 	strh	w2, [sp, #704]
   8d34c:	a9435bf5 	ldp	x21, x22, [sp, #48]
   8d350:	17ffe244 	b	85c60 <disasm+0x1c80>
		q=((ic32_30)&0x1); z=((ic32_22)&0x1); m=((ic32_16)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8d354:	120010a3 	and	w3, w5, #0x1f
		names="fmulx\0";
   8d358:	d0000021 	adrp	x1, 93000 <sd_init+0x1470>
   8d35c:	91162021 	add	x1, x1, #0x588
		q=((ic32_30)&0x1); z=((ic32_22)&0x1); m=((ic32_16)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8d360:	12001059 	and	w25, w2, #0x1f
   8d364:	1200101a 	and	w26, w0, #0x1f
		args[0]=disasm_arg_Vtzq; args[1]=disasm_arg_Vnzq; args[2]=disasm_arg_Vmzq; 
   8d368:	52800fe2 	mov	w2, #0x7f                  	// #127
		names="fmulx\0";
   8d36c:	9111c020 	add	x0, x1, #0x470
		q=((ic32_30)&0x1); z=((ic32_22)&0x1); m=((ic32_16)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8d370:	12000098 	and	w24, w4, #0x1
   8d374:	120000f7 	and	w23, w7, #0x1
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8d378:	5280001b 	mov	w27, #0x0                   	// #0
	uint16_t op=0, om=0, j=0;
   8d37c:	52800014 	mov	w20, #0x0                   	// #0
   8d380:	52800001 	mov	w1, #0x0                   	// #0
	uint32_t i=0;
   8d384:	290effff 	stp	wzr, wzr, [sp, #116]
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8d388:	290fffe3 	stp	w3, wzr, [sp, #124]
		args[0]=disasm_arg_Vtzq; args[1]=disasm_arg_Vnzq; args[2]=disasm_arg_Vmzq; 
   8d38c:	528fcfa3 	mov	w3, #0x7e7d                	// #32381
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8d390:	29117fff 	stp	wzr, wzr, [sp, #136]
   8d394:	29127fff 	stp	wzr, wzr, [sp, #144]
   8d398:	b9009bff 	str	wzr, [sp, #152]
		args[0]=disasm_arg_Vtzq; args[1]=disasm_arg_Vnzq; args[2]=disasm_arg_Vmzq; 
   8d39c:	790583e3 	strh	w3, [sp, #704]
   8d3a0:	390b0be2 	strb	w2, [sp, #706]
   8d3a4:	a9435bf5 	ldp	x21, x22, [sp, #48]
   8d3a8:	17ffe22e 	b	85c60 <disasm+0x1c80>
		names="fabs\0";
   8d3ac:	d0000021 	adrp	x1, 93000 <sd_init+0x1470>
   8d3b0:	91162021 	add	x1, x1, #0x588
		q=((ic32_30)&0x1); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8d3b4:	12001059 	and	w25, w2, #0x1f
   8d3b8:	1200101a 	and	w26, w0, #0x1f
		args[0]=disasm_arg_VtT; args[1]=disasm_arg_VnT; 
   8d3bc:	128f7b42 	mov	w2, #0xffff8425            	// #-31707
		names="fabs\0";
   8d3c0:	91348020 	add	x0, x1, #0xd20
		q=((ic32_30)&0x1); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8d3c4:	12000098 	and	w24, w4, #0x1
		z=1;
   8d3c8:	52800037 	mov	w23, #0x1                   	// #1
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8d3cc:	5280001b 	mov	w27, #0x0                   	// #0
	uint16_t op=0, om=0, j=0;
   8d3d0:	52800014 	mov	w20, #0x0                   	// #0
   8d3d4:	52800001 	mov	w1, #0x0                   	// #0
	uint32_t i=0;
   8d3d8:	290effff 	stp	wzr, wzr, [sp, #116]
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8d3dc:	290fffff 	stp	wzr, wzr, [sp, #124]
   8d3e0:	29117fff 	stp	wzr, wzr, [sp, #136]
   8d3e4:	29127fff 	stp	wzr, wzr, [sp, #144]
   8d3e8:	b9009bff 	str	wzr, [sp, #152]
		args[0]=disasm_arg_VtT; args[1]=disasm_arg_VnT; 
   8d3ec:	790583e2 	strh	w2, [sp, #704]
   8d3f0:	a9435bf5 	ldp	x21, x22, [sp, #48]
   8d3f4:	17ffe21b 	b	85c60 <disasm+0x1c80>
		names="frintn\0frintm\0";
   8d3f8:	d0000023 	adrp	x3, 93000 <sd_init+0x1470>
   8d3fc:	91162063 	add	x3, x3, #0x588
		op=((ic32_12)&0x1); q=((ic32_30)&0x1); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8d400:	12001059 	and	w25, w2, #0x1f
   8d404:	1200101a 	and	w26, w0, #0x1f
		args[0]=disasm_arg_VtT; args[1]=disasm_arg_VnT; 
   8d408:	128f7b42 	mov	w2, #0xffff8425            	// #-31707
		op=((ic32_12)&0x1); q=((ic32_30)&0x1); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8d40c:	12000141 	and	w1, w10, #0x1
   8d410:	12000098 	and	w24, w4, #0x1
		names="frintn\0frintm\0";
   8d414:	91344060 	add	x0, x3, #0xd10
		z=1;
   8d418:	52800037 	mov	w23, #0x1                   	// #1
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8d41c:	5280001b 	mov	w27, #0x0                   	// #0
	uint16_t op=0, om=0, j=0;
   8d420:	52800014 	mov	w20, #0x0                   	// #0
	uint32_t i=0;
   8d424:	290effff 	stp	wzr, wzr, [sp, #116]
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8d428:	290fffff 	stp	wzr, wzr, [sp, #124]
   8d42c:	29117fff 	stp	wzr, wzr, [sp, #136]
   8d430:	29127fff 	stp	wzr, wzr, [sp, #144]
   8d434:	b9009bff 	str	wzr, [sp, #152]
		args[0]=disasm_arg_VtT; args[1]=disasm_arg_VnT; 
   8d438:	790583e2 	strh	w2, [sp, #704]
   8d43c:	a9435bf5 	ldp	x21, x22, [sp, #48]
   8d440:	17ffe208 	b	85c60 <disasm+0x1c80>
		q=((ic32_30)&0x1); m=((ic32_16)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8d444:	120010a3 	and	w3, w5, #0x1f
		names="fcmeq\0";
   8d448:	d0000021 	adrp	x1, 93000 <sd_init+0x1470>
   8d44c:	91162021 	add	x1, x1, #0x588
		q=((ic32_30)&0x1); m=((ic32_16)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8d450:	12001059 	and	w25, w2, #0x1f
   8d454:	1200101a 	and	w26, w0, #0x1f
		args[0]=disasm_arg_VtH1; args[1]=disasm_arg_VnH1; args[2]=disasm_arg_VmH1; 
   8d458:	52800f82 	mov	w2, #0x7c                  	// #124
		names="fcmeq\0";
   8d45c:	9111e020 	add	x0, x1, #0x478
		q=((ic32_30)&0x1); m=((ic32_16)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8d460:	12000098 	and	w24, w4, #0x1
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8d464:	52800017 	mov	w23, #0x0                   	// #0
   8d468:	5280001b 	mov	w27, #0x0                   	// #0
	uint16_t op=0, om=0, j=0;
   8d46c:	52800014 	mov	w20, #0x0                   	// #0
   8d470:	52800001 	mov	w1, #0x0                   	// #0
	uint32_t i=0;
   8d474:	290effff 	stp	wzr, wzr, [sp, #116]
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8d478:	290fffe3 	stp	w3, wzr, [sp, #124]
		args[0]=disasm_arg_VtH1; args[1]=disasm_arg_VnH1; args[2]=disasm_arg_VmH1; 
   8d47c:	528f6f43 	mov	w3, #0x7b7a                	// #31610
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8d480:	29117fff 	stp	wzr, wzr, [sp, #136]
   8d484:	29127fff 	stp	wzr, wzr, [sp, #144]
   8d488:	b9009bff 	str	wzr, [sp, #152]
		args[0]=disasm_arg_VtH1; args[1]=disasm_arg_VnH1; args[2]=disasm_arg_VmH1; 
   8d48c:	790583e3 	strh	w3, [sp, #704]
   8d490:	390b0be2 	strb	w2, [sp, #706]
   8d494:	a9435bf5 	ldp	x21, x22, [sp, #48]
   8d498:	17ffe1f2 	b	85c60 <disasm+0x1c80>
		q=((ic32_30)&0x1); m=((ic32_16)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8d49c:	120010a3 	and	w3, w5, #0x1f
		names="fmulx\0";
   8d4a0:	d0000021 	adrp	x1, 93000 <sd_init+0x1470>
   8d4a4:	91162021 	add	x1, x1, #0x588
		q=((ic32_30)&0x1); m=((ic32_16)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8d4a8:	12001059 	and	w25, w2, #0x1f
   8d4ac:	1200101a 	and	w26, w0, #0x1f
		args[0]=disasm_arg_VtH1; args[1]=disasm_arg_VnH1; args[2]=disasm_arg_VmH1; 
   8d4b0:	52800f82 	mov	w2, #0x7c                  	// #124
		names="fmulx\0";
   8d4b4:	9111c020 	add	x0, x1, #0x470
		q=((ic32_30)&0x1); m=((ic32_16)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8d4b8:	12000098 	and	w24, w4, #0x1
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8d4bc:	52800017 	mov	w23, #0x0                   	// #0
   8d4c0:	5280001b 	mov	w27, #0x0                   	// #0
	uint16_t op=0, om=0, j=0;
   8d4c4:	52800014 	mov	w20, #0x0                   	// #0
   8d4c8:	52800001 	mov	w1, #0x0                   	// #0
	uint32_t i=0;
   8d4cc:	290effff 	stp	wzr, wzr, [sp, #116]
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8d4d0:	290fffe3 	stp	w3, wzr, [sp, #124]
		args[0]=disasm_arg_VtH1; args[1]=disasm_arg_VnH1; args[2]=disasm_arg_VmH1; 
   8d4d4:	528f6f43 	mov	w3, #0x7b7a                	// #31610
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8d4d8:	29117fff 	stp	wzr, wzr, [sp, #136]
   8d4dc:	29127fff 	stp	wzr, wzr, [sp, #144]
   8d4e0:	b9009bff 	str	wzr, [sp, #152]
		args[0]=disasm_arg_VtH1; args[1]=disasm_arg_VnH1; args[2]=disasm_arg_VmH1; 
   8d4e4:	790583e3 	strh	w3, [sp, #704]
   8d4e8:	390b0be2 	strb	w2, [sp, #706]
   8d4ec:	a9435bf5 	ldp	x21, x22, [sp, #48]
   8d4f0:	17ffe1dc 	b	85c60 <disasm+0x1c80>
		names="tbl\0tbx\0";
   8d4f4:	d0000023 	adrp	x3, 93000 <sd_init+0x1470>
   8d4f8:	91162063 	add	x3, x3, #0x588
		op=((ic32_12)&0x1); q=((ic32_30)&0x1); m=((ic32_16)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8d4fc:	12000098 	and	w24, w4, #0x1
   8d500:	12001059 	and	w25, w2, #0x1f
   8d504:	120010a4 	and	w4, w5, #0x1f
   8d508:	1200101a 	and	w26, w0, #0x1f
		args[0]=disasm_arg_VtT; args[1]=disasm_arg_Vn416b; args[2]=disasm_arg_VmT; 
   8d50c:	12800f42 	mov	w2, #0xffffff85            	// #-123
		names="tbl\0tbx\0";
   8d510:	9133c060 	add	x0, x3, #0xcf0
		op=((ic32_12)&0x1); q=((ic32_30)&0x1); m=((ic32_16)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8d514:	12000141 	and	w1, w10, #0x1
		args[0]=disasm_arg_VtT; args[1]=disasm_arg_Vn416b; args[2]=disasm_arg_VmT; 
   8d518:	128bdb43 	mov	w3, #0xffffa125            	// #-24283
		z=0;
   8d51c:	52800017 	mov	w23, #0x0                   	// #0
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8d520:	5280001b 	mov	w27, #0x0                   	// #0
	uint16_t op=0, om=0, j=0;
   8d524:	52800014 	mov	w20, #0x0                   	// #0
	uint32_t i=0;
   8d528:	290effff 	stp	wzr, wzr, [sp, #116]
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8d52c:	290fffe4 	stp	w4, wzr, [sp, #124]
   8d530:	29117fff 	stp	wzr, wzr, [sp, #136]
   8d534:	29127fff 	stp	wzr, wzr, [sp, #144]
   8d538:	b9009bff 	str	wzr, [sp, #152]
		args[0]=disasm_arg_VtT; args[1]=disasm_arg_Vn416b; args[2]=disasm_arg_VmT; 
   8d53c:	790583e3 	strh	w3, [sp, #704]
   8d540:	390b0be2 	strb	w2, [sp, #706]
   8d544:	a9435bf5 	ldp	x21, x22, [sp, #48]
   8d548:	17ffe1c6 	b	85c60 <disasm+0x1c80>
		names="tbl\0tbx\0";
   8d54c:	d0000023 	adrp	x3, 93000 <sd_init+0x1470>
   8d550:	91162063 	add	x3, x3, #0x588
		op=((ic32_12)&0x1); q=((ic32_30)&0x1); m=((ic32_16)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8d554:	12000098 	and	w24, w4, #0x1
   8d558:	12001059 	and	w25, w2, #0x1f
   8d55c:	120010a4 	and	w4, w5, #0x1f
   8d560:	1200101a 	and	w26, w0, #0x1f
		args[0]=disasm_arg_VtT; args[1]=disasm_arg_Vn316b; args[2]=disasm_arg_VmT; 
   8d564:	12800f42 	mov	w2, #0xffffff85            	// #-123
		names="tbl\0tbx\0";
   8d568:	9133c060 	add	x0, x3, #0xcf0
		op=((ic32_12)&0x1); q=((ic32_30)&0x1); m=((ic32_16)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8d56c:	12000141 	and	w1, w10, #0x1
		args[0]=disasm_arg_VtT; args[1]=disasm_arg_Vn316b; args[2]=disasm_arg_VmT; 
   8d570:	128bfb43 	mov	w3, #0xffffa025            	// #-24539
		z=0;
   8d574:	52800017 	mov	w23, #0x0                   	// #0
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8d578:	5280001b 	mov	w27, #0x0                   	// #0
	uint16_t op=0, om=0, j=0;
   8d57c:	52800014 	mov	w20, #0x0                   	// #0
	uint32_t i=0;
   8d580:	290effff 	stp	wzr, wzr, [sp, #116]
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8d584:	290fffe4 	stp	w4, wzr, [sp, #124]
   8d588:	29117fff 	stp	wzr, wzr, [sp, #136]
   8d58c:	29127fff 	stp	wzr, wzr, [sp, #144]
   8d590:	b9009bff 	str	wzr, [sp, #152]
		args[0]=disasm_arg_VtT; args[1]=disasm_arg_Vn316b; args[2]=disasm_arg_VmT; 
   8d594:	790583e3 	strh	w3, [sp, #704]
   8d598:	390b0be2 	strb	w2, [sp, #706]
   8d59c:	a9435bf5 	ldp	x21, x22, [sp, #48]
   8d5a0:	17ffe1b0 	b	85c60 <disasm+0x1c80>
		names="smov\0umov\0";
   8d5a4:	d0000023 	adrp	x3, 93000 <sd_init+0x1470>
   8d5a8:	91162063 	add	x3, x3, #0x588
		op=((ic32_12)&0x1); s=((ic32_30)&0x1); j=((ic32_16)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8d5ac:	1200101a 	and	w26, w0, #0x1f
		names="smov\0umov\0";
   8d5b0:	91340060 	add	x0, x3, #0xd00
		args[0]=disasm_arg_Rt; args[1]=disasm_arg_Vnj; args[2]=disasm_arg_offs; args[3]=disasm_arg_FPidx; args[4]=disasm_arg_offe; 
   8d5b4:	528e6163 	mov	w3, #0x730b                	// #29451
		op=((ic32_12)&0x1); s=((ic32_30)&0x1); j=((ic32_16)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8d5b8:	12001059 	and	w25, w2, #0x1f
		args[0]=disasm_arg_Rt; args[1]=disasm_arg_Vnj; args[2]=disasm_arg_offs; args[3]=disasm_arg_FPidx; args[4]=disasm_arg_offe; 
   8d5bc:	72ae8523 	movk	w3, #0x7429, lsl #16
   8d5c0:	52800562 	mov	w2, #0x2b                  	// #43
		op=((ic32_12)&0x1); s=((ic32_30)&0x1); j=((ic32_16)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8d5c4:	12000141 	and	w1, w10, #0x1
   8d5c8:	1200009b 	and	w27, w4, #0x1
   8d5cc:	120010b4 	and	w20, w5, #0x1f
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8d5d0:	52800017 	mov	w23, #0x0                   	// #0
   8d5d4:	52800018 	mov	w24, #0x0                   	// #0
	uint32_t i=0;
   8d5d8:	290effff 	stp	wzr, wzr, [sp, #116]
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8d5dc:	290fffff 	stp	wzr, wzr, [sp, #124]
   8d5e0:	29117fff 	stp	wzr, wzr, [sp, #136]
   8d5e4:	29127fff 	stp	wzr, wzr, [sp, #144]
   8d5e8:	b9009bff 	str	wzr, [sp, #152]
		args[0]=disasm_arg_Rt; args[1]=disasm_arg_Vnj; args[2]=disasm_arg_offs; args[3]=disasm_arg_FPidx; args[4]=disasm_arg_offe; 
   8d5ec:	b902c3e3 	str	w3, [sp, #704]
   8d5f0:	390b13e2 	strb	w2, [sp, #708]
   8d5f4:	a9435bf5 	ldp	x21, x22, [sp, #48]
   8d5f8:	17ffe19a 	b	85c60 <disasm+0x1c80>
		names="tbl\0tbx\0";
   8d5fc:	d0000023 	adrp	x3, 93000 <sd_init+0x1470>
   8d600:	91162063 	add	x3, x3, #0x588
		op=((ic32_12)&0x1); q=((ic32_30)&0x1); m=((ic32_16)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8d604:	12000098 	and	w24, w4, #0x1
   8d608:	12001059 	and	w25, w2, #0x1f
   8d60c:	120010a4 	and	w4, w5, #0x1f
   8d610:	1200101a 	and	w26, w0, #0x1f
		args[0]=disasm_arg_VtT; args[1]=disasm_arg_Vn216b; args[2]=disasm_arg_VmT; 
   8d614:	12800f42 	mov	w2, #0xffffff85            	// #-123
		names="tbl\0tbx\0";
   8d618:	9133c060 	add	x0, x3, #0xcf0
		op=((ic32_12)&0x1); q=((ic32_30)&0x1); m=((ic32_16)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8d61c:	12000141 	and	w1, w10, #0x1
		args[0]=disasm_arg_VtT; args[1]=disasm_arg_Vn216b; args[2]=disasm_arg_VmT; 
   8d620:	128c1b43 	mov	w3, #0xffff9f25            	// #-24795
		z=0;
   8d624:	52800017 	mov	w23, #0x0                   	// #0
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8d628:	5280001b 	mov	w27, #0x0                   	// #0
	uint16_t op=0, om=0, j=0;
   8d62c:	52800014 	mov	w20, #0x0                   	// #0
	uint32_t i=0;
   8d630:	290effff 	stp	wzr, wzr, [sp, #116]
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8d634:	290fffe4 	stp	w4, wzr, [sp, #124]
   8d638:	29117fff 	stp	wzr, wzr, [sp, #136]
   8d63c:	29127fff 	stp	wzr, wzr, [sp, #144]
   8d640:	b9009bff 	str	wzr, [sp, #152]
		args[0]=disasm_arg_VtT; args[1]=disasm_arg_Vn216b; args[2]=disasm_arg_VmT; 
   8d644:	790583e3 	strh	w3, [sp, #704]
   8d648:	390b0be2 	strb	w2, [sp, #706]
   8d64c:	a9435bf5 	ldp	x21, x22, [sp, #48]
   8d650:	17ffe184 	b	85c60 <disasm+0x1c80>
		names="tbl\0tbx\0";
   8d654:	d0000023 	adrp	x3, 93000 <sd_init+0x1470>
   8d658:	91162063 	add	x3, x3, #0x588
		op=((ic32_12)&0x1); q=((ic32_30)&0x1); m=((ic32_16)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8d65c:	12000098 	and	w24, w4, #0x1
   8d660:	12001059 	and	w25, w2, #0x1f
   8d664:	120010a4 	and	w4, w5, #0x1f
   8d668:	1200101a 	and	w26, w0, #0x1f
		args[0]=disasm_arg_VtT; args[1]=disasm_arg_Vn116b; args[2]=disasm_arg_VmT; 
   8d66c:	12800f42 	mov	w2, #0xffffff85            	// #-123
		names="tbl\0tbx\0";
   8d670:	9133c060 	add	x0, x3, #0xcf0
		op=((ic32_12)&0x1); q=((ic32_30)&0x1); m=((ic32_16)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8d674:	12000141 	and	w1, w10, #0x1
		args[0]=disasm_arg_VtT; args[1]=disasm_arg_Vn116b; args[2]=disasm_arg_VmT; 
   8d678:	128c3b43 	mov	w3, #0xffff9e25            	// #-25051
		z=0;
   8d67c:	52800017 	mov	w23, #0x0                   	// #0
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8d680:	5280001b 	mov	w27, #0x0                   	// #0
	uint16_t op=0, om=0, j=0;
   8d684:	52800014 	mov	w20, #0x0                   	// #0
	uint32_t i=0;
   8d688:	290effff 	stp	wzr, wzr, [sp, #116]
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8d68c:	290fffe4 	stp	w4, wzr, [sp, #124]
   8d690:	29117fff 	stp	wzr, wzr, [sp, #136]
   8d694:	29127fff 	stp	wzr, wzr, [sp, #144]
   8d698:	b9009bff 	str	wzr, [sp, #152]
		args[0]=disasm_arg_VtT; args[1]=disasm_arg_Vn116b; args[2]=disasm_arg_VmT; 
   8d69c:	790583e3 	strh	w3, [sp, #704]
   8d6a0:	390b0be2 	strb	w2, [sp, #706]
   8d6a4:	a9435bf5 	ldp	x21, x22, [sp, #48]
   8d6a8:	17ffe16e 	b	85c60 <disasm+0x1c80>
		names="dup\0";
   8d6ac:	d0000021 	adrp	x1, 93000 <sd_init+0x1470>
		args[0]=disasm_arg_Vtjq; args[1]=disasm_arg_Vnj; args[2]=disasm_arg_offs; args[3]=disasm_arg_FPidx; args[4]=disasm_arg_offe; 
   8d6b0:	528e6ea3 	mov	w3, #0x7375                	// #29557
		names="dup\0";
   8d6b4:	91162021 	add	x1, x1, #0x588
		q=((ic32_30)&0x1); j=((ic32_16)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8d6b8:	12001059 	and	w25, w2, #0x1f
   8d6bc:	1200101a 	and	w26, w0, #0x1f
		args[0]=disasm_arg_Vtjq; args[1]=disasm_arg_Vnj; args[2]=disasm_arg_offs; args[3]=disasm_arg_FPidx; args[4]=disasm_arg_offe; 
   8d6c0:	72ae8523 	movk	w3, #0x7429, lsl #16
		names="dup\0";
   8d6c4:	910fa020 	add	x0, x1, #0x3e8
		args[0]=disasm_arg_Vtjq; args[1]=disasm_arg_Vnj; args[2]=disasm_arg_offs; args[3]=disasm_arg_FPidx; args[4]=disasm_arg_offe; 
   8d6c8:	52800562 	mov	w2, #0x2b                  	// #43
		q=((ic32_30)&0x1); j=((ic32_16)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8d6cc:	12000098 	and	w24, w4, #0x1
   8d6d0:	120010b4 	and	w20, w5, #0x1f
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8d6d4:	52800017 	mov	w23, #0x0                   	// #0
   8d6d8:	5280001b 	mov	w27, #0x0                   	// #0
	uint16_t op=0, om=0, j=0;
   8d6dc:	52800001 	mov	w1, #0x0                   	// #0
	uint32_t i=0;
   8d6e0:	290effff 	stp	wzr, wzr, [sp, #116]
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8d6e4:	290fffff 	stp	wzr, wzr, [sp, #124]
   8d6e8:	29117fff 	stp	wzr, wzr, [sp, #136]
   8d6ec:	29127fff 	stp	wzr, wzr, [sp, #144]
   8d6f0:	b9009bff 	str	wzr, [sp, #152]
		args[0]=disasm_arg_Vtjq; args[1]=disasm_arg_Vnj; args[2]=disasm_arg_offs; args[3]=disasm_arg_FPidx; args[4]=disasm_arg_offe; 
   8d6f4:	b902c3e3 	str	w3, [sp, #704]
   8d6f8:	390b13e2 	strb	w2, [sp, #708]
   8d6fc:	a9435bf5 	ldp	x21, x22, [sp, #48]
   8d700:	17ffe158 	b	85c60 <disasm+0x1c80>
		names="st4\0ld4\0";
   8d704:	d0000023 	adrp	x3, 93000 <sd_init+0x1470>
   8d708:	91162063 	add	x3, x3, #0x588
		op=((ic32_22)&0x1); q=((ic32_30)&0x1); m=((ic32_16)&0x1f); s=((ic32_12)&0x1); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8d70c:	1200101a 	and	w26, w0, #0x1f
		names="st4\0ld4\0";
   8d710:	91338060 	add	x0, x3, #0xce0
		args[0]=disasm_arg_Vt4S; args[1]=disasm_arg_offs; args[2]=disasm_arg_XnS; args[3]=disasm_arg_offe; args[4]=disasm_arg_Xm; 
   8d714:	52852903 	mov	w3, #0x2948                	// #10568
		op=((ic32_22)&0x1); q=((ic32_30)&0x1); m=((ic32_16)&0x1f); s=((ic32_12)&0x1); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8d718:	12000098 	and	w24, w4, #0x1
   8d71c:	12001059 	and	w25, w2, #0x1f
   8d720:	120010a4 	and	w4, w5, #0x1f
		args[0]=disasm_arg_Vt4S; args[1]=disasm_arg_offs; args[2]=disasm_arg_XnS; args[3]=disasm_arg_offe; args[4]=disasm_arg_Xm; 
   8d724:	72a56543 	movk	w3, #0x2b2a, lsl #16
   8d728:	528005a2 	mov	w2, #0x2d                  	// #45
		op=((ic32_22)&0x1); q=((ic32_30)&0x1); m=((ic32_16)&0x1f); s=((ic32_12)&0x1); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8d72c:	120000e1 	and	w1, w7, #0x1
   8d730:	1200015b 	and	w27, w10, #0x1
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8d734:	52800017 	mov	w23, #0x0                   	// #0
	uint16_t op=0, om=0, j=0;
   8d738:	52800014 	mov	w20, #0x0                   	// #0
	uint32_t i=0;
   8d73c:	290effff 	stp	wzr, wzr, [sp, #116]
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8d740:	290fffe4 	stp	w4, wzr, [sp, #124]
   8d744:	29117fff 	stp	wzr, wzr, [sp, #136]
   8d748:	29127fff 	stp	wzr, wzr, [sp, #144]
   8d74c:	b9009bff 	str	wzr, [sp, #152]
		args[0]=disasm_arg_Vt4S; args[1]=disasm_arg_offs; args[2]=disasm_arg_XnS; args[3]=disasm_arg_offe; args[4]=disasm_arg_Xm; 
   8d750:	b902c3e3 	str	w3, [sp, #704]
   8d754:	390b13e2 	strb	w2, [sp, #708]
   8d758:	a9435bf5 	ldp	x21, x22, [sp, #48]
   8d75c:	17ffe141 	b	85c60 <disasm+0x1c80>
		names="st4\0ld4\0";
   8d760:	d0000023 	adrp	x3, 93000 <sd_init+0x1470>
   8d764:	91162063 	add	x3, x3, #0x588
		op=((ic32_22)&0x1); q=((ic32_30)&0x1); m=((ic32_16)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8d768:	1200101a 	and	w26, w0, #0x1f
		names="st4\0ld4\0";
   8d76c:	91338060 	add	x0, x3, #0xce0
		args[0]=disasm_arg_Vt4D; args[1]=disasm_arg_offs; args[2]=disasm_arg_XnS; args[3]=disasm_arg_offe; args[4]=disasm_arg_Xm; 
   8d770:	52852923 	mov	w3, #0x2949                	// #10569
		op=((ic32_22)&0x1); q=((ic32_30)&0x1); m=((ic32_16)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8d774:	12000098 	and	w24, w4, #0x1
   8d778:	12001059 	and	w25, w2, #0x1f
   8d77c:	120010a4 	and	w4, w5, #0x1f
		args[0]=disasm_arg_Vt4D; args[1]=disasm_arg_offs; args[2]=disasm_arg_XnS; args[3]=disasm_arg_offe; args[4]=disasm_arg_Xm; 
   8d780:	72a56543 	movk	w3, #0x2b2a, lsl #16
   8d784:	528005a2 	mov	w2, #0x2d                  	// #45
		op=((ic32_22)&0x1); q=((ic32_30)&0x1); m=((ic32_16)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8d788:	120000e1 	and	w1, w7, #0x1
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8d78c:	52800017 	mov	w23, #0x0                   	// #0
   8d790:	5280001b 	mov	w27, #0x0                   	// #0
	uint16_t op=0, om=0, j=0;
   8d794:	52800014 	mov	w20, #0x0                   	// #0
	uint32_t i=0;
   8d798:	290effff 	stp	wzr, wzr, [sp, #116]
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8d79c:	290fffe4 	stp	w4, wzr, [sp, #124]
   8d7a0:	29117fff 	stp	wzr, wzr, [sp, #136]
   8d7a4:	29127fff 	stp	wzr, wzr, [sp, #144]
   8d7a8:	b9009bff 	str	wzr, [sp, #152]
		args[0]=disasm_arg_Vt4D; args[1]=disasm_arg_offs; args[2]=disasm_arg_XnS; args[3]=disasm_arg_offe; args[4]=disasm_arg_Xm; 
   8d7ac:	b902c3e3 	str	w3, [sp, #704]
   8d7b0:	390b13e2 	strb	w2, [sp, #708]
   8d7b4:	a9435bf5 	ldp	x21, x22, [sp, #48]
   8d7b8:	17ffe12a 	b	85c60 <disasm+0x1c80>
		names="st2\0ld2\0";
   8d7bc:	d0000023 	adrp	x3, 93000 <sd_init+0x1470>
   8d7c0:	91162063 	add	x3, x3, #0x588
		op=((ic32_22)&0x1); q=((ic32_30)&0x1); m=((ic32_16)&0x1f); s=((ic32_12)&0x1); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8d7c4:	1200101a 	and	w26, w0, #0x1f
		names="st2\0ld2\0";
   8d7c8:	91334060 	add	x0, x3, #0xcd0
		args[0]=disasm_arg_Vt2S; args[1]=disasm_arg_offs; args[2]=disasm_arg_XnS; args[3]=disasm_arg_offe; args[4]=disasm_arg_Xm; 
   8d7cc:	52852863 	mov	w3, #0x2943                	// #10563
		op=((ic32_22)&0x1); q=((ic32_30)&0x1); m=((ic32_16)&0x1f); s=((ic32_12)&0x1); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8d7d0:	12000098 	and	w24, w4, #0x1
   8d7d4:	12001059 	and	w25, w2, #0x1f
   8d7d8:	120010a4 	and	w4, w5, #0x1f
		args[0]=disasm_arg_Vt2S; args[1]=disasm_arg_offs; args[2]=disasm_arg_XnS; args[3]=disasm_arg_offe; args[4]=disasm_arg_Xm; 
   8d7dc:	72a56543 	movk	w3, #0x2b2a, lsl #16
   8d7e0:	528005a2 	mov	w2, #0x2d                  	// #45
		op=((ic32_22)&0x1); q=((ic32_30)&0x1); m=((ic32_16)&0x1f); s=((ic32_12)&0x1); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8d7e4:	120000e1 	and	w1, w7, #0x1
   8d7e8:	1200015b 	and	w27, w10, #0x1
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8d7ec:	52800017 	mov	w23, #0x0                   	// #0
	uint16_t op=0, om=0, j=0;
   8d7f0:	52800014 	mov	w20, #0x0                   	// #0
	uint32_t i=0;
   8d7f4:	290effff 	stp	wzr, wzr, [sp, #116]
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8d7f8:	290fffe4 	stp	w4, wzr, [sp, #124]
   8d7fc:	29117fff 	stp	wzr, wzr, [sp, #136]
   8d800:	29127fff 	stp	wzr, wzr, [sp, #144]
   8d804:	b9009bff 	str	wzr, [sp, #152]
		args[0]=disasm_arg_Vt2S; args[1]=disasm_arg_offs; args[2]=disasm_arg_XnS; args[3]=disasm_arg_offe; args[4]=disasm_arg_Xm; 
   8d808:	b902c3e3 	str	w3, [sp, #704]
   8d80c:	390b13e2 	strb	w2, [sp, #708]
   8d810:	a9435bf5 	ldp	x21, x22, [sp, #48]
   8d814:	17ffe113 	b	85c60 <disasm+0x1c80>
		names="st2\0ld2\0";
   8d818:	d0000023 	adrp	x3, 93000 <sd_init+0x1470>
   8d81c:	91162063 	add	x3, x3, #0x588
		op=((ic32_22)&0x1); q=((ic32_30)&0x1); m=((ic32_16)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8d820:	1200101a 	and	w26, w0, #0x1f
		names="st2\0ld2\0";
   8d824:	91334060 	add	x0, x3, #0xcd0
		args[0]=disasm_arg_Vt2D; args[1]=disasm_arg_offs; args[2]=disasm_arg_XnS; args[3]=disasm_arg_offe; args[4]=disasm_arg_Xm; 
   8d828:	52852883 	mov	w3, #0x2944                	// #10564
		op=((ic32_22)&0x1); q=((ic32_30)&0x1); m=((ic32_16)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8d82c:	12000098 	and	w24, w4, #0x1
   8d830:	12001059 	and	w25, w2, #0x1f
   8d834:	120010a4 	and	w4, w5, #0x1f
		args[0]=disasm_arg_Vt2D; args[1]=disasm_arg_offs; args[2]=disasm_arg_XnS; args[3]=disasm_arg_offe; args[4]=disasm_arg_Xm; 
   8d838:	72a56543 	movk	w3, #0x2b2a, lsl #16
   8d83c:	528005a2 	mov	w2, #0x2d                  	// #45
		op=((ic32_22)&0x1); q=((ic32_30)&0x1); m=((ic32_16)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8d840:	120000e1 	and	w1, w7, #0x1
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8d844:	52800017 	mov	w23, #0x0                   	// #0
   8d848:	5280001b 	mov	w27, #0x0                   	// #0
	uint16_t op=0, om=0, j=0;
   8d84c:	52800014 	mov	w20, #0x0                   	// #0
	uint32_t i=0;
   8d850:	290effff 	stp	wzr, wzr, [sp, #116]
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8d854:	290fffe4 	stp	w4, wzr, [sp, #124]
   8d858:	29117fff 	stp	wzr, wzr, [sp, #136]
   8d85c:	29127fff 	stp	wzr, wzr, [sp, #144]
   8d860:	b9009bff 	str	wzr, [sp, #152]
		args[0]=disasm_arg_Vt2D; args[1]=disasm_arg_offs; args[2]=disasm_arg_XnS; args[3]=disasm_arg_offe; args[4]=disasm_arg_Xm; 
   8d864:	b902c3e3 	str	w3, [sp, #704]
   8d868:	390b13e2 	strb	w2, [sp, #708]
   8d86c:	a9435bf5 	ldp	x21, x22, [sp, #48]
   8d870:	17ffe0fc 	b	85c60 <disasm+0x1c80>
		names="st4\0ld4\0";
   8d874:	d0000023 	adrp	x3, 93000 <sd_init+0x1470>
   8d878:	91162063 	add	x3, x3, #0x588
		op=((ic32_22)&0x1); q=((ic32_30)&0x1); m=((ic32_16)&0x1f); s=((ic32_12)&0x1); z=((ic32_10)&0x3); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8d87c:	1200101a 	and	w26, w0, #0x1f
		names="st4\0ld4\0";
   8d880:	91338060 	add	x0, x3, #0xce0
		args[0]=disasm_arg_Vt4H; args[1]=disasm_arg_offs; args[2]=disasm_arg_XnS; args[3]=disasm_arg_offe; args[4]=disasm_arg_Xm; 
   8d884:	528528e3 	mov	w3, #0x2947                	// #10567
		op=((ic32_22)&0x1); q=((ic32_30)&0x1); m=((ic32_16)&0x1f); s=((ic32_12)&0x1); z=((ic32_10)&0x3); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8d888:	12000098 	and	w24, w4, #0x1
   8d88c:	12000697 	and	w23, w20, #0x3
   8d890:	120010a4 	and	w4, w5, #0x1f
   8d894:	12001059 	and	w25, w2, #0x1f
		args[0]=disasm_arg_Vt4H; args[1]=disasm_arg_offs; args[2]=disasm_arg_XnS; args[3]=disasm_arg_offe; args[4]=disasm_arg_Xm; 
   8d898:	72a56543 	movk	w3, #0x2b2a, lsl #16
   8d89c:	528005a2 	mov	w2, #0x2d                  	// #45
		op=((ic32_22)&0x1); q=((ic32_30)&0x1); m=((ic32_16)&0x1f); s=((ic32_12)&0x1); z=((ic32_10)&0x3); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8d8a0:	120000e1 	and	w1, w7, #0x1
   8d8a4:	1200015b 	and	w27, w10, #0x1
	uint16_t op=0, om=0, j=0;
   8d8a8:	52800014 	mov	w20, #0x0                   	// #0
	uint32_t i=0;
   8d8ac:	290effff 	stp	wzr, wzr, [sp, #116]
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8d8b0:	290fffe4 	stp	w4, wzr, [sp, #124]
   8d8b4:	29117fff 	stp	wzr, wzr, [sp, #136]
   8d8b8:	29127fff 	stp	wzr, wzr, [sp, #144]
   8d8bc:	b9009bff 	str	wzr, [sp, #152]
		args[0]=disasm_arg_Vt4H; args[1]=disasm_arg_offs; args[2]=disasm_arg_XnS; args[3]=disasm_arg_offe; args[4]=disasm_arg_Xm; 
   8d8c0:	b902c3e3 	str	w3, [sp, #704]
   8d8c4:	390b13e2 	strb	w2, [sp, #708]
   8d8c8:	a9435bf5 	ldp	x21, x22, [sp, #48]
   8d8cc:	17ffe0e5 	b	85c60 <disasm+0x1c80>
		names="st2\0ld2\0";
   8d8d0:	d0000023 	adrp	x3, 93000 <sd_init+0x1470>
   8d8d4:	91162063 	add	x3, x3, #0x588
		op=((ic32_22)&0x1); q=((ic32_30)&0x1); m=((ic32_16)&0x1f); s=((ic32_12)&0x1); z=((ic32_10)&0x3); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8d8d8:	1200101a 	and	w26, w0, #0x1f
		names="st2\0ld2\0";
   8d8dc:	91334060 	add	x0, x3, #0xcd0
		args[0]=disasm_arg_Vt2H; args[1]=disasm_arg_offs; args[2]=disasm_arg_XnS; args[3]=disasm_arg_offe; args[4]=disasm_arg_Xm; 
   8d8e0:	52852843 	mov	w3, #0x2942                	// #10562
		op=((ic32_22)&0x1); q=((ic32_30)&0x1); m=((ic32_16)&0x1f); s=((ic32_12)&0x1); z=((ic32_10)&0x3); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8d8e4:	12000098 	and	w24, w4, #0x1
   8d8e8:	12000697 	and	w23, w20, #0x3
   8d8ec:	120010a4 	and	w4, w5, #0x1f
   8d8f0:	12001059 	and	w25, w2, #0x1f
		args[0]=disasm_arg_Vt2H; args[1]=disasm_arg_offs; args[2]=disasm_arg_XnS; args[3]=disasm_arg_offe; args[4]=disasm_arg_Xm; 
   8d8f4:	72a56543 	movk	w3, #0x2b2a, lsl #16
   8d8f8:	528005a2 	mov	w2, #0x2d                  	// #45
		op=((ic32_22)&0x1); q=((ic32_30)&0x1); m=((ic32_16)&0x1f); s=((ic32_12)&0x1); z=((ic32_10)&0x3); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8d8fc:	120000e1 	and	w1, w7, #0x1
   8d900:	1200015b 	and	w27, w10, #0x1
	uint16_t op=0, om=0, j=0;
   8d904:	52800014 	mov	w20, #0x0                   	// #0
	uint32_t i=0;
   8d908:	290effff 	stp	wzr, wzr, [sp, #116]
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8d90c:	290fffe4 	stp	w4, wzr, [sp, #124]
   8d910:	29117fff 	stp	wzr, wzr, [sp, #136]
   8d914:	29127fff 	stp	wzr, wzr, [sp, #144]
   8d918:	b9009bff 	str	wzr, [sp, #152]
		args[0]=disasm_arg_Vt2H; args[1]=disasm_arg_offs; args[2]=disasm_arg_XnS; args[3]=disasm_arg_offe; args[4]=disasm_arg_Xm; 
   8d91c:	b902c3e3 	str	w3, [sp, #704]
   8d920:	390b13e2 	strb	w2, [sp, #708]
   8d924:	a9435bf5 	ldp	x21, x22, [sp, #48]
   8d928:	17ffe0ce 	b	85c60 <disasm+0x1c80>
		names="st4\0ld4\0";
   8d92c:	d0000023 	adrp	x3, 93000 <sd_init+0x1470>
   8d930:	91162063 	add	x3, x3, #0x588
		op=((ic32_22)&0x1); q=((ic32_30)&0x1); m=((ic32_16)&0x1f); s=((ic32_12)&0x1); z=((ic32_10)&0x3); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8d934:	1200101a 	and	w26, w0, #0x1f
		names="st4\0ld4\0";
   8d938:	91338060 	add	x0, x3, #0xce0
		args[0]=disasm_arg_Vt4B; args[1]=disasm_arg_offs; args[2]=disasm_arg_XnS; args[3]=disasm_arg_offe; args[4]=disasm_arg_Xm; 
   8d93c:	528528c3 	mov	w3, #0x2946                	// #10566
		op=((ic32_22)&0x1); q=((ic32_30)&0x1); m=((ic32_16)&0x1f); s=((ic32_12)&0x1); z=((ic32_10)&0x3); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8d940:	12000098 	and	w24, w4, #0x1
   8d944:	12000697 	and	w23, w20, #0x3
   8d948:	120010a4 	and	w4, w5, #0x1f
   8d94c:	12001059 	and	w25, w2, #0x1f
		args[0]=disasm_arg_Vt4B; args[1]=disasm_arg_offs; args[2]=disasm_arg_XnS; args[3]=disasm_arg_offe; args[4]=disasm_arg_Xm; 
   8d950:	72a56543 	movk	w3, #0x2b2a, lsl #16
   8d954:	528005a2 	mov	w2, #0x2d                  	// #45
		op=((ic32_22)&0x1); q=((ic32_30)&0x1); m=((ic32_16)&0x1f); s=((ic32_12)&0x1); z=((ic32_10)&0x3); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8d958:	120000e1 	and	w1, w7, #0x1
   8d95c:	1200015b 	and	w27, w10, #0x1
	uint16_t op=0, om=0, j=0;
   8d960:	52800014 	mov	w20, #0x0                   	// #0
	uint32_t i=0;
   8d964:	290effff 	stp	wzr, wzr, [sp, #116]
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8d968:	290fffe4 	stp	w4, wzr, [sp, #124]
   8d96c:	29117fff 	stp	wzr, wzr, [sp, #136]
   8d970:	29127fff 	stp	wzr, wzr, [sp, #144]
   8d974:	b9009bff 	str	wzr, [sp, #152]
		args[0]=disasm_arg_Vt4B; args[1]=disasm_arg_offs; args[2]=disasm_arg_XnS; args[3]=disasm_arg_offe; args[4]=disasm_arg_Xm; 
   8d978:	b902c3e3 	str	w3, [sp, #704]
   8d97c:	390b13e2 	strb	w2, [sp, #708]
   8d980:	a9435bf5 	ldp	x21, x22, [sp, #48]
   8d984:	17ffe0b7 	b	85c60 <disasm+0x1c80>
		names="st2\0ld2\0";
   8d988:	d0000023 	adrp	x3, 93000 <sd_init+0x1470>
   8d98c:	91162063 	add	x3, x3, #0x588
		op=((ic32_22)&0x1); q=((ic32_30)&0x1); m=((ic32_16)&0x1f); s=((ic32_12)&0x1); z=((ic32_10)&0x3); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8d990:	1200101a 	and	w26, w0, #0x1f
		names="st2\0ld2\0";
   8d994:	91334060 	add	x0, x3, #0xcd0
		args[0]=disasm_arg_Vt2B; args[1]=disasm_arg_offs; args[2]=disasm_arg_XnS; args[3]=disasm_arg_offe; args[4]=disasm_arg_Xm; 
   8d998:	52852823 	mov	w3, #0x2941                	// #10561
		op=((ic32_22)&0x1); q=((ic32_30)&0x1); m=((ic32_16)&0x1f); s=((ic32_12)&0x1); z=((ic32_10)&0x3); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8d99c:	12000098 	and	w24, w4, #0x1
   8d9a0:	12000697 	and	w23, w20, #0x3
   8d9a4:	120010a4 	and	w4, w5, #0x1f
   8d9a8:	12001059 	and	w25, w2, #0x1f
		args[0]=disasm_arg_Vt2B; args[1]=disasm_arg_offs; args[2]=disasm_arg_XnS; args[3]=disasm_arg_offe; args[4]=disasm_arg_Xm; 
   8d9ac:	72a56543 	movk	w3, #0x2b2a, lsl #16
   8d9b0:	528005a2 	mov	w2, #0x2d                  	// #45
		op=((ic32_22)&0x1); q=((ic32_30)&0x1); m=((ic32_16)&0x1f); s=((ic32_12)&0x1); z=((ic32_10)&0x3); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8d9b4:	120000e1 	and	w1, w7, #0x1
   8d9b8:	1200015b 	and	w27, w10, #0x1
	uint16_t op=0, om=0, j=0;
   8d9bc:	52800014 	mov	w20, #0x0                   	// #0
	uint32_t i=0;
   8d9c0:	290effff 	stp	wzr, wzr, [sp, #116]
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8d9c4:	290fffe4 	stp	w4, wzr, [sp, #124]
   8d9c8:	29117fff 	stp	wzr, wzr, [sp, #136]
   8d9cc:	29127fff 	stp	wzr, wzr, [sp, #144]
   8d9d0:	b9009bff 	str	wzr, [sp, #152]
		args[0]=disasm_arg_Vt2B; args[1]=disasm_arg_offs; args[2]=disasm_arg_XnS; args[3]=disasm_arg_offe; args[4]=disasm_arg_Xm; 
   8d9d4:	b902c3e3 	str	w3, [sp, #704]
   8d9d8:	390b13e2 	strb	w2, [sp, #708]
   8d9dc:	a9435bf5 	ldp	x21, x22, [sp, #48]
   8d9e0:	17ffe0a0 	b	85c60 <disasm+0x1c80>
		names="st4\0ld4\0";
   8d9e4:	d0000023 	adrp	x3, 93000 <sd_init+0x1470>
   8d9e8:	91162063 	add	x3, x3, #0x588
		op=((ic32_22)&0x1); q=((ic32_30)&0x1); s=((ic32_12)&0x1); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8d9ec:	1200101a 	and	w26, w0, #0x1f
		names="st4\0ld4\0";
   8d9f0:	91338060 	add	x0, x3, #0xce0
		args[0]=disasm_arg_Vt4S; args[1]=disasm_arg_offs; args[2]=disasm_arg_XnS; args[3]=disasm_arg_offe; args[4]=disasm_arg_i16; 
   8d9f4:	52852903 	mov	w3, #0x2948                	// #10568
		op=((ic32_22)&0x1); q=((ic32_30)&0x1); s=((ic32_12)&0x1); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8d9f8:	12001059 	and	w25, w2, #0x1f
		args[0]=disasm_arg_Vt4S; args[1]=disasm_arg_offs; args[2]=disasm_arg_XnS; args[3]=disasm_arg_offe; args[4]=disasm_arg_i16; 
   8d9fc:	72a56543 	movk	w3, #0x2b2a, lsl #16
   8da00:	528008a2 	mov	w2, #0x45                  	// #69
		op=((ic32_22)&0x1); q=((ic32_30)&0x1); s=((ic32_12)&0x1); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8da04:	120000e1 	and	w1, w7, #0x1
   8da08:	12000098 	and	w24, w4, #0x1
   8da0c:	1200015b 	and	w27, w10, #0x1
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8da10:	52800017 	mov	w23, #0x0                   	// #0
	uint16_t op=0, om=0, j=0;
   8da14:	52800014 	mov	w20, #0x0                   	// #0
	uint32_t i=0;
   8da18:	290effff 	stp	wzr, wzr, [sp, #116]
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8da1c:	290fffff 	stp	wzr, wzr, [sp, #124]
   8da20:	29117fff 	stp	wzr, wzr, [sp, #136]
   8da24:	29127fff 	stp	wzr, wzr, [sp, #144]
   8da28:	b9009bff 	str	wzr, [sp, #152]
		args[0]=disasm_arg_Vt4S; args[1]=disasm_arg_offs; args[2]=disasm_arg_XnS; args[3]=disasm_arg_offe; args[4]=disasm_arg_i16; 
   8da2c:	b902c3e3 	str	w3, [sp, #704]
   8da30:	390b13e2 	strb	w2, [sp, #708]
   8da34:	a9435bf5 	ldp	x21, x22, [sp, #48]
   8da38:	17ffe08a 	b	85c60 <disasm+0x1c80>
		names="st4\0ld4\0";
   8da3c:	d0000023 	adrp	x3, 93000 <sd_init+0x1470>
   8da40:	91162063 	add	x3, x3, #0x588
		op=((ic32_22)&0x1); q=((ic32_30)&0x1); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8da44:	1200101a 	and	w26, w0, #0x1f
		names="st4\0ld4\0";
   8da48:	91338060 	add	x0, x3, #0xce0
		args[0]=disasm_arg_Vt4D; args[1]=disasm_arg_offs; args[2]=disasm_arg_XnS; args[3]=disasm_arg_offe; args[4]=disasm_arg_i32; 
   8da4c:	52852923 	mov	w3, #0x2949                	// #10569
		op=((ic32_22)&0x1); q=((ic32_30)&0x1); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8da50:	12001059 	and	w25, w2, #0x1f
		args[0]=disasm_arg_Vt4D; args[1]=disasm_arg_offs; args[2]=disasm_arg_XnS; args[3]=disasm_arg_offe; args[4]=disasm_arg_i32; 
   8da54:	72a56543 	movk	w3, #0x2b2a, lsl #16
   8da58:	52800942 	mov	w2, #0x4a                  	// #74
		op=((ic32_22)&0x1); q=((ic32_30)&0x1); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8da5c:	120000e1 	and	w1, w7, #0x1
   8da60:	12000098 	and	w24, w4, #0x1
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8da64:	52800017 	mov	w23, #0x0                   	// #0
   8da68:	5280001b 	mov	w27, #0x0                   	// #0
	uint16_t op=0, om=0, j=0;
   8da6c:	52800014 	mov	w20, #0x0                   	// #0
	uint32_t i=0;
   8da70:	290effff 	stp	wzr, wzr, [sp, #116]
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8da74:	290fffff 	stp	wzr, wzr, [sp, #124]
   8da78:	29117fff 	stp	wzr, wzr, [sp, #136]
   8da7c:	29127fff 	stp	wzr, wzr, [sp, #144]
   8da80:	b9009bff 	str	wzr, [sp, #152]
		args[0]=disasm_arg_Vt4D; args[1]=disasm_arg_offs; args[2]=disasm_arg_XnS; args[3]=disasm_arg_offe; args[4]=disasm_arg_i32; 
   8da84:	b902c3e3 	str	w3, [sp, #704]
   8da88:	390b13e2 	strb	w2, [sp, #708]
   8da8c:	a9435bf5 	ldp	x21, x22, [sp, #48]
   8da90:	17ffe074 	b	85c60 <disasm+0x1c80>
		names="st2\0ld2\0";
   8da94:	d0000023 	adrp	x3, 93000 <sd_init+0x1470>
   8da98:	91162063 	add	x3, x3, #0x588
		op=((ic32_22)&0x1); q=((ic32_30)&0x1); s=((ic32_12)&0x1); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8da9c:	1200101a 	and	w26, w0, #0x1f
		names="st2\0ld2\0";
   8daa0:	91334060 	add	x0, x3, #0xcd0
		args[0]=disasm_arg_Vt2S; args[1]=disasm_arg_offs; args[2]=disasm_arg_XnS; args[3]=disasm_arg_offe; args[4]=disasm_arg_i8; 
   8daa4:	52852863 	mov	w3, #0x2943                	// #10563
		op=((ic32_22)&0x1); q=((ic32_30)&0x1); s=((ic32_12)&0x1); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8daa8:	12001059 	and	w25, w2, #0x1f
		args[0]=disasm_arg_Vt2S; args[1]=disasm_arg_offs; args[2]=disasm_arg_XnS; args[3]=disasm_arg_offe; args[4]=disasm_arg_i8; 
   8daac:	72a56543 	movk	w3, #0x2b2a, lsl #16
   8dab0:	52800702 	mov	w2, #0x38                  	// #56
		op=((ic32_22)&0x1); q=((ic32_30)&0x1); s=((ic32_12)&0x1); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8dab4:	120000e1 	and	w1, w7, #0x1
   8dab8:	12000098 	and	w24, w4, #0x1
   8dabc:	1200015b 	and	w27, w10, #0x1
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8dac0:	52800017 	mov	w23, #0x0                   	// #0
	uint16_t op=0, om=0, j=0;
   8dac4:	52800014 	mov	w20, #0x0                   	// #0
	uint32_t i=0;
   8dac8:	290effff 	stp	wzr, wzr, [sp, #116]
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8dacc:	290fffff 	stp	wzr, wzr, [sp, #124]
   8dad0:	29117fff 	stp	wzr, wzr, [sp, #136]
   8dad4:	29127fff 	stp	wzr, wzr, [sp, #144]
   8dad8:	b9009bff 	str	wzr, [sp, #152]
		args[0]=disasm_arg_Vt2S; args[1]=disasm_arg_offs; args[2]=disasm_arg_XnS; args[3]=disasm_arg_offe; args[4]=disasm_arg_i8; 
   8dadc:	b902c3e3 	str	w3, [sp, #704]
   8dae0:	390b13e2 	strb	w2, [sp, #708]
   8dae4:	a9435bf5 	ldp	x21, x22, [sp, #48]
   8dae8:	17ffe05e 	b	85c60 <disasm+0x1c80>
		names="st2\0ld2\0";
   8daec:	d0000023 	adrp	x3, 93000 <sd_init+0x1470>
   8daf0:	91162063 	add	x3, x3, #0x588
		op=((ic32_22)&0x1); q=((ic32_30)&0x1); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8daf4:	1200101a 	and	w26, w0, #0x1f
		names="st2\0ld2\0";
   8daf8:	91334060 	add	x0, x3, #0xcd0
		args[0]=disasm_arg_Vt2D; args[1]=disasm_arg_offs; args[2]=disasm_arg_XnS; args[3]=disasm_arg_offe; args[4]=disasm_arg_i16; 
   8dafc:	52852883 	mov	w3, #0x2944                	// #10564
		op=((ic32_22)&0x1); q=((ic32_30)&0x1); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8db00:	12001059 	and	w25, w2, #0x1f
		args[0]=disasm_arg_Vt2D; args[1]=disasm_arg_offs; args[2]=disasm_arg_XnS; args[3]=disasm_arg_offe; args[4]=disasm_arg_i16; 
   8db04:	72a56543 	movk	w3, #0x2b2a, lsl #16
   8db08:	528008a2 	mov	w2, #0x45                  	// #69
		op=((ic32_22)&0x1); q=((ic32_30)&0x1); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8db0c:	120000e1 	and	w1, w7, #0x1
   8db10:	12000098 	and	w24, w4, #0x1
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8db14:	52800017 	mov	w23, #0x0                   	// #0
   8db18:	5280001b 	mov	w27, #0x0                   	// #0
	uint16_t op=0, om=0, j=0;
   8db1c:	52800014 	mov	w20, #0x0                   	// #0
	uint32_t i=0;
   8db20:	290effff 	stp	wzr, wzr, [sp, #116]
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8db24:	290fffff 	stp	wzr, wzr, [sp, #124]
   8db28:	29117fff 	stp	wzr, wzr, [sp, #136]
   8db2c:	29127fff 	stp	wzr, wzr, [sp, #144]
   8db30:	b9009bff 	str	wzr, [sp, #152]
		args[0]=disasm_arg_Vt2D; args[1]=disasm_arg_offs; args[2]=disasm_arg_XnS; args[3]=disasm_arg_offe; args[4]=disasm_arg_i16; 
   8db34:	b902c3e3 	str	w3, [sp, #704]
   8db38:	390b13e2 	strb	w2, [sp, #708]
   8db3c:	a9435bf5 	ldp	x21, x22, [sp, #48]
   8db40:	17ffe048 	b	85c60 <disasm+0x1c80>
		names="st4\0ld4\0";
   8db44:	d0000023 	adrp	x3, 93000 <sd_init+0x1470>
   8db48:	91162063 	add	x3, x3, #0x588
		op=((ic32_22)&0x1); q=((ic32_30)&0x1); s=((ic32_12)&0x1); z=((ic32_10)&0x3); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8db4c:	1200101a 	and	w26, w0, #0x1f
		names="st4\0ld4\0";
   8db50:	91338060 	add	x0, x3, #0xce0
		args[0]=disasm_arg_Vt4H; args[1]=disasm_arg_offs; args[2]=disasm_arg_XnS; args[3]=disasm_arg_offe; args[4]=disasm_arg_i8; 
   8db54:	528528e3 	mov	w3, #0x2947                	// #10567
		op=((ic32_22)&0x1); q=((ic32_30)&0x1); s=((ic32_12)&0x1); z=((ic32_10)&0x3); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8db58:	12000697 	and	w23, w20, #0x3
   8db5c:	12001059 	and	w25, w2, #0x1f
		args[0]=disasm_arg_Vt4H; args[1]=disasm_arg_offs; args[2]=disasm_arg_XnS; args[3]=disasm_arg_offe; args[4]=disasm_arg_i8; 
   8db60:	72a56543 	movk	w3, #0x2b2a, lsl #16
   8db64:	52800702 	mov	w2, #0x38                  	// #56
		op=((ic32_22)&0x1); q=((ic32_30)&0x1); s=((ic32_12)&0x1); z=((ic32_10)&0x3); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8db68:	120000e1 	and	w1, w7, #0x1
   8db6c:	12000098 	and	w24, w4, #0x1
   8db70:	1200015b 	and	w27, w10, #0x1
	uint16_t op=0, om=0, j=0;
   8db74:	52800014 	mov	w20, #0x0                   	// #0
	uint32_t i=0;
   8db78:	290effff 	stp	wzr, wzr, [sp, #116]
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8db7c:	290fffff 	stp	wzr, wzr, [sp, #124]
   8db80:	29117fff 	stp	wzr, wzr, [sp, #136]
   8db84:	29127fff 	stp	wzr, wzr, [sp, #144]
   8db88:	b9009bff 	str	wzr, [sp, #152]
		args[0]=disasm_arg_Vt4H; args[1]=disasm_arg_offs; args[2]=disasm_arg_XnS; args[3]=disasm_arg_offe; args[4]=disasm_arg_i8; 
   8db8c:	b902c3e3 	str	w3, [sp, #704]
   8db90:	390b13e2 	strb	w2, [sp, #708]
   8db94:	a9435bf5 	ldp	x21, x22, [sp, #48]
   8db98:	17ffe032 	b	85c60 <disasm+0x1c80>
		names="st2\0ld2\0";
   8db9c:	d0000023 	adrp	x3, 93000 <sd_init+0x1470>
   8dba0:	91162063 	add	x3, x3, #0x588
		op=((ic32_22)&0x1); q=((ic32_30)&0x1); s=((ic32_12)&0x1); z=((ic32_10)&0x3); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8dba4:	1200101a 	and	w26, w0, #0x1f
		names="st2\0ld2\0";
   8dba8:	91334060 	add	x0, x3, #0xcd0
		args[0]=disasm_arg_Vt2H; args[1]=disasm_arg_offs; args[2]=disasm_arg_XnS; args[3]=disasm_arg_offe; args[4]=disasm_arg_i4; 
   8dbac:	52852843 	mov	w3, #0x2942                	// #10562
		op=((ic32_22)&0x1); q=((ic32_30)&0x1); s=((ic32_12)&0x1); z=((ic32_10)&0x3); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8dbb0:	12000697 	and	w23, w20, #0x3
   8dbb4:	12001059 	and	w25, w2, #0x1f
		args[0]=disasm_arg_Vt2H; args[1]=disasm_arg_offs; args[2]=disasm_arg_XnS; args[3]=disasm_arg_offe; args[4]=disasm_arg_i4; 
   8dbb8:	72a56543 	movk	w3, #0x2b2a, lsl #16
   8dbbc:	528006e2 	mov	w2, #0x37                  	// #55
		op=((ic32_22)&0x1); q=((ic32_30)&0x1); s=((ic32_12)&0x1); z=((ic32_10)&0x3); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8dbc0:	120000e1 	and	w1, w7, #0x1
   8dbc4:	12000098 	and	w24, w4, #0x1
   8dbc8:	1200015b 	and	w27, w10, #0x1
	uint16_t op=0, om=0, j=0;
   8dbcc:	52800014 	mov	w20, #0x0                   	// #0
	uint32_t i=0;
   8dbd0:	290effff 	stp	wzr, wzr, [sp, #116]
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8dbd4:	290fffff 	stp	wzr, wzr, [sp, #124]
   8dbd8:	29117fff 	stp	wzr, wzr, [sp, #136]
   8dbdc:	29127fff 	stp	wzr, wzr, [sp, #144]
   8dbe0:	b9009bff 	str	wzr, [sp, #152]
		args[0]=disasm_arg_Vt2H; args[1]=disasm_arg_offs; args[2]=disasm_arg_XnS; args[3]=disasm_arg_offe; args[4]=disasm_arg_i4; 
   8dbe4:	b902c3e3 	str	w3, [sp, #704]
   8dbe8:	390b13e2 	strb	w2, [sp, #708]
   8dbec:	a9435bf5 	ldp	x21, x22, [sp, #48]
   8dbf0:	17ffe01c 	b	85c60 <disasm+0x1c80>
		names="st4\0ld4\0";
   8dbf4:	d0000023 	adrp	x3, 93000 <sd_init+0x1470>
   8dbf8:	91162063 	add	x3, x3, #0x588
		op=((ic32_22)&0x1); q=((ic32_30)&0x1); s=((ic32_12)&0x1); z=((ic32_10)&0x3); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8dbfc:	1200101a 	and	w26, w0, #0x1f
		names="st4\0ld4\0";
   8dc00:	91338060 	add	x0, x3, #0xce0
		args[0]=disasm_arg_Vt4B; args[1]=disasm_arg_offs; args[2]=disasm_arg_XnS; args[3]=disasm_arg_offe; args[4]=disasm_arg_i4; 
   8dc04:	528528c3 	mov	w3, #0x2946                	// #10566
		op=((ic32_22)&0x1); q=((ic32_30)&0x1); s=((ic32_12)&0x1); z=((ic32_10)&0x3); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8dc08:	12000697 	and	w23, w20, #0x3
   8dc0c:	12001059 	and	w25, w2, #0x1f
		args[0]=disasm_arg_Vt4B; args[1]=disasm_arg_offs; args[2]=disasm_arg_XnS; args[3]=disasm_arg_offe; args[4]=disasm_arg_i4; 
   8dc10:	72a56543 	movk	w3, #0x2b2a, lsl #16
   8dc14:	528006e2 	mov	w2, #0x37                  	// #55
		op=((ic32_22)&0x1); q=((ic32_30)&0x1); s=((ic32_12)&0x1); z=((ic32_10)&0x3); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8dc18:	120000e1 	and	w1, w7, #0x1
   8dc1c:	12000098 	and	w24, w4, #0x1
   8dc20:	1200015b 	and	w27, w10, #0x1
	uint16_t op=0, om=0, j=0;
   8dc24:	52800014 	mov	w20, #0x0                   	// #0
	uint32_t i=0;
   8dc28:	290effff 	stp	wzr, wzr, [sp, #116]
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8dc2c:	290fffff 	stp	wzr, wzr, [sp, #124]
   8dc30:	29117fff 	stp	wzr, wzr, [sp, #136]
   8dc34:	29127fff 	stp	wzr, wzr, [sp, #144]
   8dc38:	b9009bff 	str	wzr, [sp, #152]
		args[0]=disasm_arg_Vt4B; args[1]=disasm_arg_offs; args[2]=disasm_arg_XnS; args[3]=disasm_arg_offe; args[4]=disasm_arg_i4; 
   8dc3c:	b902c3e3 	str	w3, [sp, #704]
   8dc40:	390b13e2 	strb	w2, [sp, #708]
   8dc44:	a9435bf5 	ldp	x21, x22, [sp, #48]
   8dc48:	17ffe006 	b	85c60 <disasm+0x1c80>
		names="st2\0ld2\0";
   8dc4c:	d0000023 	adrp	x3, 93000 <sd_init+0x1470>
   8dc50:	91162063 	add	x3, x3, #0x588
		op=((ic32_22)&0x1); q=((ic32_30)&0x1); s=((ic32_12)&0x1); z=((ic32_10)&0x3); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8dc54:	1200101a 	and	w26, w0, #0x1f
		names="st2\0ld2\0";
   8dc58:	91334060 	add	x0, x3, #0xcd0
		args[0]=disasm_arg_Vt2B; args[1]=disasm_arg_offs; args[2]=disasm_arg_XnS; args[3]=disasm_arg_offe; args[4]=disasm_arg_i2; 
   8dc5c:	52852823 	mov	w3, #0x2941                	// #10561
		op=((ic32_22)&0x1); q=((ic32_30)&0x1); s=((ic32_12)&0x1); z=((ic32_10)&0x3); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8dc60:	12000697 	and	w23, w20, #0x3
   8dc64:	12001059 	and	w25, w2, #0x1f
		args[0]=disasm_arg_Vt2B; args[1]=disasm_arg_offs; args[2]=disasm_arg_XnS; args[3]=disasm_arg_offe; args[4]=disasm_arg_i2; 
   8dc68:	72a56543 	movk	w3, #0x2b2a, lsl #16
   8dc6c:	528006c2 	mov	w2, #0x36                  	// #54
		op=((ic32_22)&0x1); q=((ic32_30)&0x1); s=((ic32_12)&0x1); z=((ic32_10)&0x3); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8dc70:	120000e1 	and	w1, w7, #0x1
   8dc74:	12000098 	and	w24, w4, #0x1
   8dc78:	1200015b 	and	w27, w10, #0x1
	uint16_t op=0, om=0, j=0;
   8dc7c:	52800014 	mov	w20, #0x0                   	// #0
	uint32_t i=0;
   8dc80:	290effff 	stp	wzr, wzr, [sp, #116]
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8dc84:	290fffff 	stp	wzr, wzr, [sp, #124]
   8dc88:	29117fff 	stp	wzr, wzr, [sp, #136]
   8dc8c:	29127fff 	stp	wzr, wzr, [sp, #144]
   8dc90:	b9009bff 	str	wzr, [sp, #152]
		args[0]=disasm_arg_Vt2B; args[1]=disasm_arg_offs; args[2]=disasm_arg_XnS; args[3]=disasm_arg_offe; args[4]=disasm_arg_i2; 
   8dc94:	b902c3e3 	str	w3, [sp, #704]
   8dc98:	390b13e2 	strb	w2, [sp, #708]
   8dc9c:	a9435bf5 	ldp	x21, x22, [sp, #48]
   8dca0:	17ffdff0 	b	85c60 <disasm+0x1c80>
		names="st3\0ld3\0";
   8dca4:	d0000023 	adrp	x3, 93000 <sd_init+0x1470>
   8dca8:	91162063 	add	x3, x3, #0x588
		op=((ic32_22)&0x1); q=((ic32_30)&0x1); m=((ic32_16)&0x1f); s=((ic32_12)&0x1); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8dcac:	1200101a 	and	w26, w0, #0x1f
		names="st3\0ld3\0";
   8dcb0:	91330060 	add	x0, x3, #0xcc0
		args[0]=disasm_arg_Vt3S; args[1]=disasm_arg_offs; args[2]=disasm_arg_XnS; args[3]=disasm_arg_offe; args[4]=disasm_arg_Xm; 
   8dcb4:	52852763 	mov	w3, #0x293b                	// #10555
		op=((ic32_22)&0x1); q=((ic32_30)&0x1); m=((ic32_16)&0x1f); s=((ic32_12)&0x1); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8dcb8:	12000098 	and	w24, w4, #0x1
   8dcbc:	12001059 	and	w25, w2, #0x1f
   8dcc0:	120010a4 	and	w4, w5, #0x1f
		args[0]=disasm_arg_Vt3S; args[1]=disasm_arg_offs; args[2]=disasm_arg_XnS; args[3]=disasm_arg_offe; args[4]=disasm_arg_Xm; 
   8dcc4:	72a56543 	movk	w3, #0x2b2a, lsl #16
   8dcc8:	528005a2 	mov	w2, #0x2d                  	// #45
		op=((ic32_22)&0x1); q=((ic32_30)&0x1); m=((ic32_16)&0x1f); s=((ic32_12)&0x1); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8dccc:	120000e1 	and	w1, w7, #0x1
   8dcd0:	1200015b 	and	w27, w10, #0x1
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8dcd4:	52800017 	mov	w23, #0x0                   	// #0
	uint16_t op=0, om=0, j=0;
   8dcd8:	52800014 	mov	w20, #0x0                   	// #0
	uint32_t i=0;
   8dcdc:	290effff 	stp	wzr, wzr, [sp, #116]
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8dce0:	290fffe4 	stp	w4, wzr, [sp, #124]
   8dce4:	29117fff 	stp	wzr, wzr, [sp, #136]
   8dce8:	29127fff 	stp	wzr, wzr, [sp, #144]
   8dcec:	b9009bff 	str	wzr, [sp, #152]
		args[0]=disasm_arg_Vt3S; args[1]=disasm_arg_offs; args[2]=disasm_arg_XnS; args[3]=disasm_arg_offe; args[4]=disasm_arg_Xm; 
   8dcf0:	b902c3e3 	str	w3, [sp, #704]
   8dcf4:	390b13e2 	strb	w2, [sp, #708]
   8dcf8:	a9435bf5 	ldp	x21, x22, [sp, #48]
   8dcfc:	17ffdfd9 	b	85c60 <disasm+0x1c80>
		names="st3\0ld3\0";
   8dd00:	d0000023 	adrp	x3, 93000 <sd_init+0x1470>
   8dd04:	91162063 	add	x3, x3, #0x588
		op=((ic32_22)&0x1); q=((ic32_30)&0x1); m=((ic32_16)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8dd08:	1200101a 	and	w26, w0, #0x1f
		names="st3\0ld3\0";
   8dd0c:	91330060 	add	x0, x3, #0xcc0
		args[0]=disasm_arg_Vt3D; args[1]=disasm_arg_offs; args[2]=disasm_arg_XnS; args[3]=disasm_arg_offe; args[4]=disasm_arg_Xm; 
   8dd10:	52852783 	mov	w3, #0x293c                	// #10556
		op=((ic32_22)&0x1); q=((ic32_30)&0x1); m=((ic32_16)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8dd14:	12000098 	and	w24, w4, #0x1
   8dd18:	12001059 	and	w25, w2, #0x1f
   8dd1c:	120010a4 	and	w4, w5, #0x1f
		args[0]=disasm_arg_Vt3D; args[1]=disasm_arg_offs; args[2]=disasm_arg_XnS; args[3]=disasm_arg_offe; args[4]=disasm_arg_Xm; 
   8dd20:	72a56543 	movk	w3, #0x2b2a, lsl #16
   8dd24:	528005a2 	mov	w2, #0x2d                  	// #45
		op=((ic32_22)&0x1); q=((ic32_30)&0x1); m=((ic32_16)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8dd28:	120000e1 	and	w1, w7, #0x1
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8dd2c:	52800017 	mov	w23, #0x0                   	// #0
   8dd30:	5280001b 	mov	w27, #0x0                   	// #0
	uint16_t op=0, om=0, j=0;
   8dd34:	52800014 	mov	w20, #0x0                   	// #0
	uint32_t i=0;
   8dd38:	290effff 	stp	wzr, wzr, [sp, #116]
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8dd3c:	290fffe4 	stp	w4, wzr, [sp, #124]
   8dd40:	29117fff 	stp	wzr, wzr, [sp, #136]
   8dd44:	29127fff 	stp	wzr, wzr, [sp, #144]
   8dd48:	b9009bff 	str	wzr, [sp, #152]
		args[0]=disasm_arg_Vt3D; args[1]=disasm_arg_offs; args[2]=disasm_arg_XnS; args[3]=disasm_arg_offe; args[4]=disasm_arg_Xm; 
   8dd4c:	b902c3e3 	str	w3, [sp, #704]
   8dd50:	390b13e2 	strb	w2, [sp, #708]
   8dd54:	a9435bf5 	ldp	x21, x22, [sp, #48]
   8dd58:	17ffdfc2 	b	85c60 <disasm+0x1c80>
		names="st1\0ld1\0";
   8dd5c:	d0000023 	adrp	x3, 93000 <sd_init+0x1470>
   8dd60:	91162063 	add	x3, x3, #0x588
		op=((ic32_22)&0x1); q=((ic32_30)&0x1); m=((ic32_16)&0x1f); s=((ic32_12)&0x1); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8dd64:	1200101a 	and	w26, w0, #0x1f
		names="st1\0ld1\0";
   8dd68:	91318060 	add	x0, x3, #0xc60
		args[0]=disasm_arg_VtS; args[1]=disasm_arg_offs; args[2]=disasm_arg_XnS; args[3]=disasm_arg_offe; args[4]=disasm_arg_Xm; 
   8dd6c:	52852663 	mov	w3, #0x2933                	// #10547
		op=((ic32_22)&0x1); q=((ic32_30)&0x1); m=((ic32_16)&0x1f); s=((ic32_12)&0x1); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8dd70:	12000098 	and	w24, w4, #0x1
   8dd74:	12001059 	and	w25, w2, #0x1f
   8dd78:	120010a4 	and	w4, w5, #0x1f
		args[0]=disasm_arg_VtS; args[1]=disasm_arg_offs; args[2]=disasm_arg_XnS; args[3]=disasm_arg_offe; args[4]=disasm_arg_Xm; 
   8dd7c:	72a56543 	movk	w3, #0x2b2a, lsl #16
   8dd80:	528005a2 	mov	w2, #0x2d                  	// #45
		op=((ic32_22)&0x1); q=((ic32_30)&0x1); m=((ic32_16)&0x1f); s=((ic32_12)&0x1); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8dd84:	120000e1 	and	w1, w7, #0x1
   8dd88:	1200015b 	and	w27, w10, #0x1
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8dd8c:	52800017 	mov	w23, #0x0                   	// #0
	uint16_t op=0, om=0, j=0;
   8dd90:	52800014 	mov	w20, #0x0                   	// #0
	uint32_t i=0;
   8dd94:	290effff 	stp	wzr, wzr, [sp, #116]
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8dd98:	290fffe4 	stp	w4, wzr, [sp, #124]
   8dd9c:	29117fff 	stp	wzr, wzr, [sp, #136]
   8dda0:	29127fff 	stp	wzr, wzr, [sp, #144]
   8dda4:	b9009bff 	str	wzr, [sp, #152]
		args[0]=disasm_arg_VtS; args[1]=disasm_arg_offs; args[2]=disasm_arg_XnS; args[3]=disasm_arg_offe; args[4]=disasm_arg_Xm; 
   8dda8:	b902c3e3 	str	w3, [sp, #704]
   8ddac:	390b13e2 	strb	w2, [sp, #708]
   8ddb0:	a9435bf5 	ldp	x21, x22, [sp, #48]
   8ddb4:	17ffdfab 	b	85c60 <disasm+0x1c80>
		names="st1\0ld1\0";
   8ddb8:	d0000023 	adrp	x3, 93000 <sd_init+0x1470>
   8ddbc:	91162063 	add	x3, x3, #0x588
		op=((ic32_22)&0x1); q=((ic32_30)&0x1); m=((ic32_16)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8ddc0:	1200101a 	and	w26, w0, #0x1f
		names="st1\0ld1\0";
   8ddc4:	91318060 	add	x0, x3, #0xc60
		args[0]=disasm_arg_VtD; args[1]=disasm_arg_offs; args[2]=disasm_arg_XnS; args[3]=disasm_arg_offe; args[4]=disasm_arg_Xm; 
   8ddc8:	52852683 	mov	w3, #0x2934                	// #10548
		op=((ic32_22)&0x1); q=((ic32_30)&0x1); m=((ic32_16)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8ddcc:	12000098 	and	w24, w4, #0x1
   8ddd0:	12001059 	and	w25, w2, #0x1f
   8ddd4:	120010a4 	and	w4, w5, #0x1f
		args[0]=disasm_arg_VtD; args[1]=disasm_arg_offs; args[2]=disasm_arg_XnS; args[3]=disasm_arg_offe; args[4]=disasm_arg_Xm; 
   8ddd8:	72a56543 	movk	w3, #0x2b2a, lsl #16
   8dddc:	528005a2 	mov	w2, #0x2d                  	// #45
		op=((ic32_22)&0x1); q=((ic32_30)&0x1); m=((ic32_16)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8dde0:	120000e1 	and	w1, w7, #0x1
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8dde4:	52800017 	mov	w23, #0x0                   	// #0
   8dde8:	5280001b 	mov	w27, #0x0                   	// #0
	uint16_t op=0, om=0, j=0;
   8ddec:	52800014 	mov	w20, #0x0                   	// #0
	uint32_t i=0;
   8ddf0:	290effff 	stp	wzr, wzr, [sp, #116]
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8ddf4:	290fffe4 	stp	w4, wzr, [sp, #124]
   8ddf8:	29117fff 	stp	wzr, wzr, [sp, #136]
   8ddfc:	29127fff 	stp	wzr, wzr, [sp, #144]
   8de00:	b9009bff 	str	wzr, [sp, #152]
		args[0]=disasm_arg_VtD; args[1]=disasm_arg_offs; args[2]=disasm_arg_XnS; args[3]=disasm_arg_offe; args[4]=disasm_arg_Xm; 
   8de04:	b902c3e3 	str	w3, [sp, #704]
   8de08:	390b13e2 	strb	w2, [sp, #708]
   8de0c:	a9435bf5 	ldp	x21, x22, [sp, #48]
   8de10:	17ffdf94 	b	85c60 <disasm+0x1c80>
		names="st3\0ld3\0";
   8de14:	d0000023 	adrp	x3, 93000 <sd_init+0x1470>
   8de18:	91162063 	add	x3, x3, #0x588
		op=((ic32_22)&0x1); q=((ic32_30)&0x1); m=((ic32_16)&0x1f); s=((ic32_12)&0x1); z=((ic32_10)&0x3); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8de1c:	1200101a 	and	w26, w0, #0x1f
		names="st3\0ld3\0";
   8de20:	91330060 	add	x0, x3, #0xcc0
		args[0]=disasm_arg_Vt3H; args[1]=disasm_arg_offs; args[2]=disasm_arg_XnS; args[3]=disasm_arg_offe; args[4]=disasm_arg_Xm; 
   8de24:	52852743 	mov	w3, #0x293a                	// #10554
		op=((ic32_22)&0x1); q=((ic32_30)&0x1); m=((ic32_16)&0x1f); s=((ic32_12)&0x1); z=((ic32_10)&0x3); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8de28:	12000098 	and	w24, w4, #0x1
   8de2c:	12000697 	and	w23, w20, #0x3
   8de30:	120010a4 	and	w4, w5, #0x1f
   8de34:	12001059 	and	w25, w2, #0x1f
		args[0]=disasm_arg_Vt3H; args[1]=disasm_arg_offs; args[2]=disasm_arg_XnS; args[3]=disasm_arg_offe; args[4]=disasm_arg_Xm; 
   8de38:	72a56543 	movk	w3, #0x2b2a, lsl #16
   8de3c:	528005a2 	mov	w2, #0x2d                  	// #45
		op=((ic32_22)&0x1); q=((ic32_30)&0x1); m=((ic32_16)&0x1f); s=((ic32_12)&0x1); z=((ic32_10)&0x3); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8de40:	120000e1 	and	w1, w7, #0x1
   8de44:	1200015b 	and	w27, w10, #0x1
	uint16_t op=0, om=0, j=0;
   8de48:	52800014 	mov	w20, #0x0                   	// #0
	uint32_t i=0;
   8de4c:	290effff 	stp	wzr, wzr, [sp, #116]
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8de50:	290fffe4 	stp	w4, wzr, [sp, #124]
   8de54:	29117fff 	stp	wzr, wzr, [sp, #136]
   8de58:	29127fff 	stp	wzr, wzr, [sp, #144]
   8de5c:	b9009bff 	str	wzr, [sp, #152]
		args[0]=disasm_arg_Vt3H; args[1]=disasm_arg_offs; args[2]=disasm_arg_XnS; args[3]=disasm_arg_offe; args[4]=disasm_arg_Xm; 
   8de60:	b902c3e3 	str	w3, [sp, #704]
   8de64:	390b13e2 	strb	w2, [sp, #708]
   8de68:	a9435bf5 	ldp	x21, x22, [sp, #48]
   8de6c:	17ffdf7d 	b	85c60 <disasm+0x1c80>
		names="st1\0ld1\0";
   8de70:	d0000023 	adrp	x3, 93000 <sd_init+0x1470>
   8de74:	91162063 	add	x3, x3, #0x588
		op=((ic32_22)&0x1); q=((ic32_30)&0x1); m=((ic32_16)&0x1f); s=((ic32_12)&0x1); z=((ic32_10)&0x3); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8de78:	1200101a 	and	w26, w0, #0x1f
		names="st1\0ld1\0";
   8de7c:	91318060 	add	x0, x3, #0xc60
		args[0]=disasm_arg_VtH; args[1]=disasm_arg_offs; args[2]=disasm_arg_XnS; args[3]=disasm_arg_offe; args[4]=disasm_arg_Xm; 
   8de80:	52852643 	mov	w3, #0x2932                	// #10546
		op=((ic32_22)&0x1); q=((ic32_30)&0x1); m=((ic32_16)&0x1f); s=((ic32_12)&0x1); z=((ic32_10)&0x3); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8de84:	12000098 	and	w24, w4, #0x1
   8de88:	12000697 	and	w23, w20, #0x3
   8de8c:	120010a4 	and	w4, w5, #0x1f
   8de90:	12001059 	and	w25, w2, #0x1f
		args[0]=disasm_arg_VtH; args[1]=disasm_arg_offs; args[2]=disasm_arg_XnS; args[3]=disasm_arg_offe; args[4]=disasm_arg_Xm; 
   8de94:	72a56543 	movk	w3, #0x2b2a, lsl #16
   8de98:	528005a2 	mov	w2, #0x2d                  	// #45
		op=((ic32_22)&0x1); q=((ic32_30)&0x1); m=((ic32_16)&0x1f); s=((ic32_12)&0x1); z=((ic32_10)&0x3); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8de9c:	120000e1 	and	w1, w7, #0x1
   8dea0:	1200015b 	and	w27, w10, #0x1
	uint16_t op=0, om=0, j=0;
   8dea4:	52800014 	mov	w20, #0x0                   	// #0
	uint32_t i=0;
   8dea8:	290effff 	stp	wzr, wzr, [sp, #116]
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8deac:	290fffe4 	stp	w4, wzr, [sp, #124]
   8deb0:	29117fff 	stp	wzr, wzr, [sp, #136]
   8deb4:	29127fff 	stp	wzr, wzr, [sp, #144]
   8deb8:	b9009bff 	str	wzr, [sp, #152]
		args[0]=disasm_arg_VtH; args[1]=disasm_arg_offs; args[2]=disasm_arg_XnS; args[3]=disasm_arg_offe; args[4]=disasm_arg_Xm; 
   8debc:	b902c3e3 	str	w3, [sp, #704]
   8dec0:	390b13e2 	strb	w2, [sp, #708]
   8dec4:	a9435bf5 	ldp	x21, x22, [sp, #48]
   8dec8:	17ffdf66 	b	85c60 <disasm+0x1c80>
		names="st3\0ld3\0";
   8decc:	d0000023 	adrp	x3, 93000 <sd_init+0x1470>
   8ded0:	91162063 	add	x3, x3, #0x588
		op=((ic32_22)&0x1); q=((ic32_30)&0x1); m=((ic32_16)&0x1f); s=((ic32_12)&0x1); z=((ic32_10)&0x3); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8ded4:	1200101a 	and	w26, w0, #0x1f
		names="st3\0ld3\0";
   8ded8:	91330060 	add	x0, x3, #0xcc0
		args[0]=disasm_arg_Vt3B; args[1]=disasm_arg_offs; args[2]=disasm_arg_XnS; args[3]=disasm_arg_offe; args[4]=disasm_arg_Xm; 
   8dedc:	52852723 	mov	w3, #0x2939                	// #10553
		op=((ic32_22)&0x1); q=((ic32_30)&0x1); m=((ic32_16)&0x1f); s=((ic32_12)&0x1); z=((ic32_10)&0x3); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8dee0:	12000098 	and	w24, w4, #0x1
   8dee4:	12000697 	and	w23, w20, #0x3
   8dee8:	120010a4 	and	w4, w5, #0x1f
   8deec:	12001059 	and	w25, w2, #0x1f
		args[0]=disasm_arg_Vt3B; args[1]=disasm_arg_offs; args[2]=disasm_arg_XnS; args[3]=disasm_arg_offe; args[4]=disasm_arg_Xm; 
   8def0:	72a56543 	movk	w3, #0x2b2a, lsl #16
   8def4:	528005a2 	mov	w2, #0x2d                  	// #45
		op=((ic32_22)&0x1); q=((ic32_30)&0x1); m=((ic32_16)&0x1f); s=((ic32_12)&0x1); z=((ic32_10)&0x3); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8def8:	120000e1 	and	w1, w7, #0x1
   8defc:	1200015b 	and	w27, w10, #0x1
	uint16_t op=0, om=0, j=0;
   8df00:	52800014 	mov	w20, #0x0                   	// #0
	uint32_t i=0;
   8df04:	290effff 	stp	wzr, wzr, [sp, #116]
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8df08:	290fffe4 	stp	w4, wzr, [sp, #124]
   8df0c:	29117fff 	stp	wzr, wzr, [sp, #136]
   8df10:	29127fff 	stp	wzr, wzr, [sp, #144]
   8df14:	b9009bff 	str	wzr, [sp, #152]
		args[0]=disasm_arg_Vt3B; args[1]=disasm_arg_offs; args[2]=disasm_arg_XnS; args[3]=disasm_arg_offe; args[4]=disasm_arg_Xm; 
   8df18:	b902c3e3 	str	w3, [sp, #704]
   8df1c:	390b13e2 	strb	w2, [sp, #708]
   8df20:	a9435bf5 	ldp	x21, x22, [sp, #48]
   8df24:	17ffdf4f 	b	85c60 <disasm+0x1c80>
		names="st1\0ld1\0";
   8df28:	d0000023 	adrp	x3, 93000 <sd_init+0x1470>
   8df2c:	91162063 	add	x3, x3, #0x588
		op=((ic32_22)&0x1); q=((ic32_30)&0x1); m=((ic32_16)&0x1f); s=((ic32_12)&0x1); z=((ic32_10)&0x3); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8df30:	1200101a 	and	w26, w0, #0x1f
		names="st1\0ld1\0";
   8df34:	91318060 	add	x0, x3, #0xc60
		args[0]=disasm_arg_VtB; args[1]=disasm_arg_offs; args[2]=disasm_arg_XnS; args[3]=disasm_arg_offe; args[4]=disasm_arg_Xm; 
   8df38:	52852623 	mov	w3, #0x2931                	// #10545
		op=((ic32_22)&0x1); q=((ic32_30)&0x1); m=((ic32_16)&0x1f); s=((ic32_12)&0x1); z=((ic32_10)&0x3); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8df3c:	12000098 	and	w24, w4, #0x1
   8df40:	12000697 	and	w23, w20, #0x3
   8df44:	120010a4 	and	w4, w5, #0x1f
   8df48:	12001059 	and	w25, w2, #0x1f
		args[0]=disasm_arg_VtB; args[1]=disasm_arg_offs; args[2]=disasm_arg_XnS; args[3]=disasm_arg_offe; args[4]=disasm_arg_Xm; 
   8df4c:	72a56543 	movk	w3, #0x2b2a, lsl #16
   8df50:	528005a2 	mov	w2, #0x2d                  	// #45
		op=((ic32_22)&0x1); q=((ic32_30)&0x1); m=((ic32_16)&0x1f); s=((ic32_12)&0x1); z=((ic32_10)&0x3); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8df54:	120000e1 	and	w1, w7, #0x1
   8df58:	1200015b 	and	w27, w10, #0x1
	uint16_t op=0, om=0, j=0;
   8df5c:	52800014 	mov	w20, #0x0                   	// #0
	uint32_t i=0;
   8df60:	290effff 	stp	wzr, wzr, [sp, #116]
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8df64:	290fffe4 	stp	w4, wzr, [sp, #124]
   8df68:	29117fff 	stp	wzr, wzr, [sp, #136]
   8df6c:	29127fff 	stp	wzr, wzr, [sp, #144]
   8df70:	b9009bff 	str	wzr, [sp, #152]
		args[0]=disasm_arg_VtB; args[1]=disasm_arg_offs; args[2]=disasm_arg_XnS; args[3]=disasm_arg_offe; args[4]=disasm_arg_Xm; 
   8df74:	b902c3e3 	str	w3, [sp, #704]
   8df78:	390b13e2 	strb	w2, [sp, #708]
   8df7c:	a9435bf5 	ldp	x21, x22, [sp, #48]
   8df80:	17ffdf38 	b	85c60 <disasm+0x1c80>
		names="st3\0ld3\0";
   8df84:	d0000023 	adrp	x3, 93000 <sd_init+0x1470>
   8df88:	91162063 	add	x3, x3, #0x588
		op=((ic32_22)&0x1); q=((ic32_30)&0x1); s=((ic32_12)&0x1); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8df8c:	1200101a 	and	w26, w0, #0x1f
		names="st3\0ld3\0";
   8df90:	91330060 	add	x0, x3, #0xcc0
		args[0]=disasm_arg_Vt3S; args[1]=disasm_arg_offs; args[2]=disasm_arg_XnS; args[3]=disasm_arg_offe; args[4]=disasm_arg_i12; 
   8df94:	52852763 	mov	w3, #0x293b                	// #10555
		op=((ic32_22)&0x1); q=((ic32_30)&0x1); s=((ic32_12)&0x1); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8df98:	12001059 	and	w25, w2, #0x1f
		args[0]=disasm_arg_Vt3S; args[1]=disasm_arg_offs; args[2]=disasm_arg_XnS; args[3]=disasm_arg_offe; args[4]=disasm_arg_i12; 
   8df9c:	72a56543 	movk	w3, #0x2b2a, lsl #16
   8dfa0:	528007e2 	mov	w2, #0x3f                  	// #63
		op=((ic32_22)&0x1); q=((ic32_30)&0x1); s=((ic32_12)&0x1); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8dfa4:	120000e1 	and	w1, w7, #0x1
   8dfa8:	12000098 	and	w24, w4, #0x1
   8dfac:	1200015b 	and	w27, w10, #0x1
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8dfb0:	52800017 	mov	w23, #0x0                   	// #0
	uint16_t op=0, om=0, j=0;
   8dfb4:	52800014 	mov	w20, #0x0                   	// #0
	uint32_t i=0;
   8dfb8:	290effff 	stp	wzr, wzr, [sp, #116]
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8dfbc:	290fffff 	stp	wzr, wzr, [sp, #124]
   8dfc0:	29117fff 	stp	wzr, wzr, [sp, #136]
   8dfc4:	29127fff 	stp	wzr, wzr, [sp, #144]
   8dfc8:	b9009bff 	str	wzr, [sp, #152]
		args[0]=disasm_arg_Vt3S; args[1]=disasm_arg_offs; args[2]=disasm_arg_XnS; args[3]=disasm_arg_offe; args[4]=disasm_arg_i12; 
   8dfcc:	b902c3e3 	str	w3, [sp, #704]
   8dfd0:	390b13e2 	strb	w2, [sp, #708]
   8dfd4:	a9435bf5 	ldp	x21, x22, [sp, #48]
   8dfd8:	17ffdf22 	b	85c60 <disasm+0x1c80>
		names="st3\0ld3\0";
   8dfdc:	d0000023 	adrp	x3, 93000 <sd_init+0x1470>
   8dfe0:	91162063 	add	x3, x3, #0x588
		op=((ic32_22)&0x1); q=((ic32_30)&0x1); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8dfe4:	1200101a 	and	w26, w0, #0x1f
		names="st3\0ld3\0";
   8dfe8:	91330060 	add	x0, x3, #0xcc0
		args[0]=disasm_arg_Vt3D; args[1]=disasm_arg_offs; args[2]=disasm_arg_XnS; args[3]=disasm_arg_offe; args[4]=disasm_arg_i24; 
   8dfec:	52852783 	mov	w3, #0x293c                	// #10556
		op=((ic32_22)&0x1); q=((ic32_30)&0x1); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8dff0:	12001059 	and	w25, w2, #0x1f
		args[0]=disasm_arg_Vt3D; args[1]=disasm_arg_offs; args[2]=disasm_arg_XnS; args[3]=disasm_arg_offe; args[4]=disasm_arg_i24; 
   8dff4:	72a56543 	movk	w3, #0x2b2a, lsl #16
   8dff8:	52800802 	mov	w2, #0x40                  	// #64
		op=((ic32_22)&0x1); q=((ic32_30)&0x1); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8dffc:	120000e1 	and	w1, w7, #0x1
   8e000:	12000098 	and	w24, w4, #0x1
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8e004:	52800017 	mov	w23, #0x0                   	// #0
   8e008:	5280001b 	mov	w27, #0x0                   	// #0
	uint16_t op=0, om=0, j=0;
   8e00c:	52800014 	mov	w20, #0x0                   	// #0
	uint32_t i=0;
   8e010:	290effff 	stp	wzr, wzr, [sp, #116]
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8e014:	290fffff 	stp	wzr, wzr, [sp, #124]
   8e018:	29117fff 	stp	wzr, wzr, [sp, #136]
   8e01c:	29127fff 	stp	wzr, wzr, [sp, #144]
   8e020:	b9009bff 	str	wzr, [sp, #152]
		args[0]=disasm_arg_Vt3D; args[1]=disasm_arg_offs; args[2]=disasm_arg_XnS; args[3]=disasm_arg_offe; args[4]=disasm_arg_i24; 
   8e024:	b902c3e3 	str	w3, [sp, #704]
   8e028:	390b13e2 	strb	w2, [sp, #708]
   8e02c:	a9435bf5 	ldp	x21, x22, [sp, #48]
   8e030:	17ffdf0c 	b	85c60 <disasm+0x1c80>
		names="st1\0ld1\0";
   8e034:	b0000023 	adrp	x3, 93000 <sd_init+0x1470>
   8e038:	91162063 	add	x3, x3, #0x588
		op=((ic32_22)&0x1); q=((ic32_30)&0x1); s=((ic32_12)&0x1); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8e03c:	1200101a 	and	w26, w0, #0x1f
		names="st1\0ld1\0";
   8e040:	91318060 	add	x0, x3, #0xc60
		args[0]=disasm_arg_VtS; args[1]=disasm_arg_offs; args[2]=disasm_arg_XnS; args[3]=disasm_arg_offe; args[4]=disasm_arg_i4; 
   8e044:	52852663 	mov	w3, #0x2933                	// #10547
		op=((ic32_22)&0x1); q=((ic32_30)&0x1); s=((ic32_12)&0x1); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8e048:	12001059 	and	w25, w2, #0x1f
		args[0]=disasm_arg_VtS; args[1]=disasm_arg_offs; args[2]=disasm_arg_XnS; args[3]=disasm_arg_offe; args[4]=disasm_arg_i4; 
   8e04c:	72a56543 	movk	w3, #0x2b2a, lsl #16
   8e050:	528006e2 	mov	w2, #0x37                  	// #55
		op=((ic32_22)&0x1); q=((ic32_30)&0x1); s=((ic32_12)&0x1); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8e054:	120000e1 	and	w1, w7, #0x1
   8e058:	12000098 	and	w24, w4, #0x1
   8e05c:	1200015b 	and	w27, w10, #0x1
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8e060:	52800017 	mov	w23, #0x0                   	// #0
	uint16_t op=0, om=0, j=0;
   8e064:	52800014 	mov	w20, #0x0                   	// #0
	uint32_t i=0;
   8e068:	290effff 	stp	wzr, wzr, [sp, #116]
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8e06c:	290fffff 	stp	wzr, wzr, [sp, #124]
   8e070:	29117fff 	stp	wzr, wzr, [sp, #136]
   8e074:	29127fff 	stp	wzr, wzr, [sp, #144]
   8e078:	b9009bff 	str	wzr, [sp, #152]
		args[0]=disasm_arg_VtS; args[1]=disasm_arg_offs; args[2]=disasm_arg_XnS; args[3]=disasm_arg_offe; args[4]=disasm_arg_i4; 
   8e07c:	b902c3e3 	str	w3, [sp, #704]
   8e080:	390b13e2 	strb	w2, [sp, #708]
   8e084:	a9435bf5 	ldp	x21, x22, [sp, #48]
   8e088:	17ffdef6 	b	85c60 <disasm+0x1c80>
		names="st1\0ld1\0";
   8e08c:	b0000023 	adrp	x3, 93000 <sd_init+0x1470>
   8e090:	91162063 	add	x3, x3, #0x588
		op=((ic32_22)&0x1); q=((ic32_30)&0x1); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8e094:	1200101a 	and	w26, w0, #0x1f
		names="st1\0ld1\0";
   8e098:	91318060 	add	x0, x3, #0xc60
		args[0]=disasm_arg_VtD; args[1]=disasm_arg_offs; args[2]=disasm_arg_XnS; args[3]=disasm_arg_offe; args[4]=disasm_arg_i8; 
   8e09c:	52852683 	mov	w3, #0x2934                	// #10548
		op=((ic32_22)&0x1); q=((ic32_30)&0x1); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8e0a0:	12001059 	and	w25, w2, #0x1f
		args[0]=disasm_arg_VtD; args[1]=disasm_arg_offs; args[2]=disasm_arg_XnS; args[3]=disasm_arg_offe; args[4]=disasm_arg_i8; 
   8e0a4:	72a56543 	movk	w3, #0x2b2a, lsl #16
   8e0a8:	52800702 	mov	w2, #0x38                  	// #56
		op=((ic32_22)&0x1); q=((ic32_30)&0x1); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8e0ac:	120000e1 	and	w1, w7, #0x1
   8e0b0:	12000098 	and	w24, w4, #0x1
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8e0b4:	52800017 	mov	w23, #0x0                   	// #0
   8e0b8:	5280001b 	mov	w27, #0x0                   	// #0
	uint16_t op=0, om=0, j=0;
   8e0bc:	52800014 	mov	w20, #0x0                   	// #0
	uint32_t i=0;
   8e0c0:	290effff 	stp	wzr, wzr, [sp, #116]
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8e0c4:	290fffff 	stp	wzr, wzr, [sp, #124]
   8e0c8:	29117fff 	stp	wzr, wzr, [sp, #136]
   8e0cc:	29127fff 	stp	wzr, wzr, [sp, #144]
   8e0d0:	b9009bff 	str	wzr, [sp, #152]
		args[0]=disasm_arg_VtD; args[1]=disasm_arg_offs; args[2]=disasm_arg_XnS; args[3]=disasm_arg_offe; args[4]=disasm_arg_i8; 
   8e0d4:	b902c3e3 	str	w3, [sp, #704]
   8e0d8:	390b13e2 	strb	w2, [sp, #708]
   8e0dc:	a9435bf5 	ldp	x21, x22, [sp, #48]
   8e0e0:	17ffdee0 	b	85c60 <disasm+0x1c80>
		names="st3\0ld3\0";
   8e0e4:	b0000023 	adrp	x3, 93000 <sd_init+0x1470>
   8e0e8:	91162063 	add	x3, x3, #0x588
		op=((ic32_22)&0x1); q=((ic32_30)&0x1); s=((ic32_12)&0x1); z=((ic32_10)&0x3); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8e0ec:	1200101a 	and	w26, w0, #0x1f
		names="st3\0ld3\0";
   8e0f0:	91330060 	add	x0, x3, #0xcc0
		args[0]=disasm_arg_Vt3H; args[1]=disasm_arg_offs; args[2]=disasm_arg_XnS; args[3]=disasm_arg_offe; args[4]=disasm_arg_i6; 
   8e0f4:	52852743 	mov	w3, #0x293a                	// #10554
		op=((ic32_22)&0x1); q=((ic32_30)&0x1); s=((ic32_12)&0x1); z=((ic32_10)&0x3); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8e0f8:	12000697 	and	w23, w20, #0x3
   8e0fc:	12001059 	and	w25, w2, #0x1f
		args[0]=disasm_arg_Vt3H; args[1]=disasm_arg_offs; args[2]=disasm_arg_XnS; args[3]=disasm_arg_offe; args[4]=disasm_arg_i6; 
   8e100:	72a56543 	movk	w3, #0x2b2a, lsl #16
   8e104:	528007c2 	mov	w2, #0x3e                  	// #62
		op=((ic32_22)&0x1); q=((ic32_30)&0x1); s=((ic32_12)&0x1); z=((ic32_10)&0x3); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8e108:	120000e1 	and	w1, w7, #0x1
   8e10c:	12000098 	and	w24, w4, #0x1
   8e110:	1200015b 	and	w27, w10, #0x1
	uint16_t op=0, om=0, j=0;
   8e114:	52800014 	mov	w20, #0x0                   	// #0
	uint32_t i=0;
   8e118:	290effff 	stp	wzr, wzr, [sp, #116]
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8e11c:	290fffff 	stp	wzr, wzr, [sp, #124]
   8e120:	29117fff 	stp	wzr, wzr, [sp, #136]
   8e124:	29127fff 	stp	wzr, wzr, [sp, #144]
   8e128:	b9009bff 	str	wzr, [sp, #152]
		args[0]=disasm_arg_Vt3H; args[1]=disasm_arg_offs; args[2]=disasm_arg_XnS; args[3]=disasm_arg_offe; args[4]=disasm_arg_i6; 
   8e12c:	b902c3e3 	str	w3, [sp, #704]
   8e130:	390b13e2 	strb	w2, [sp, #708]
   8e134:	a9435bf5 	ldp	x21, x22, [sp, #48]
   8e138:	17ffdeca 	b	85c60 <disasm+0x1c80>
		names="st1\0ld1\0";
   8e13c:	b0000023 	adrp	x3, 93000 <sd_init+0x1470>
   8e140:	91162063 	add	x3, x3, #0x588
		op=((ic32_22)&0x1); q=((ic32_30)&0x1); s=((ic32_12)&0x1); z=((ic32_10)&0x3); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8e144:	1200101a 	and	w26, w0, #0x1f
		names="st1\0ld1\0";
   8e148:	91318060 	add	x0, x3, #0xc60
		args[0]=disasm_arg_VtH; args[1]=disasm_arg_offs; args[2]=disasm_arg_XnS; args[3]=disasm_arg_offe; args[4]=disasm_arg_i2; 
   8e14c:	52852643 	mov	w3, #0x2932                	// #10546
		op=((ic32_22)&0x1); q=((ic32_30)&0x1); s=((ic32_12)&0x1); z=((ic32_10)&0x3); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8e150:	12000697 	and	w23, w20, #0x3
   8e154:	12001059 	and	w25, w2, #0x1f
		args[0]=disasm_arg_VtH; args[1]=disasm_arg_offs; args[2]=disasm_arg_XnS; args[3]=disasm_arg_offe; args[4]=disasm_arg_i2; 
   8e158:	72a56543 	movk	w3, #0x2b2a, lsl #16
   8e15c:	528006c2 	mov	w2, #0x36                  	// #54
		op=((ic32_22)&0x1); q=((ic32_30)&0x1); s=((ic32_12)&0x1); z=((ic32_10)&0x3); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8e160:	120000e1 	and	w1, w7, #0x1
   8e164:	12000098 	and	w24, w4, #0x1
   8e168:	1200015b 	and	w27, w10, #0x1
	uint16_t op=0, om=0, j=0;
   8e16c:	52800014 	mov	w20, #0x0                   	// #0
	uint32_t i=0;
   8e170:	290effff 	stp	wzr, wzr, [sp, #116]
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8e174:	290fffff 	stp	wzr, wzr, [sp, #124]
   8e178:	29117fff 	stp	wzr, wzr, [sp, #136]
   8e17c:	29127fff 	stp	wzr, wzr, [sp, #144]
   8e180:	b9009bff 	str	wzr, [sp, #152]
		args[0]=disasm_arg_VtH; args[1]=disasm_arg_offs; args[2]=disasm_arg_XnS; args[3]=disasm_arg_offe; args[4]=disasm_arg_i2; 
   8e184:	b902c3e3 	str	w3, [sp, #704]
   8e188:	390b13e2 	strb	w2, [sp, #708]
   8e18c:	a9435bf5 	ldp	x21, x22, [sp, #48]
   8e190:	17ffdeb4 	b	85c60 <disasm+0x1c80>
		names="st3\0ld3\0";
   8e194:	b0000023 	adrp	x3, 93000 <sd_init+0x1470>
   8e198:	91162063 	add	x3, x3, #0x588
		op=((ic32_22)&0x1); q=((ic32_30)&0x1); s=((ic32_12)&0x1); z=((ic32_10)&0x3); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8e19c:	1200101a 	and	w26, w0, #0x1f
		names="st3\0ld3\0";
   8e1a0:	91330060 	add	x0, x3, #0xcc0
		args[0]=disasm_arg_Vt3B; args[1]=disasm_arg_offs; args[2]=disasm_arg_XnS; args[3]=disasm_arg_offe; args[4]=disasm_arg_i3; 
   8e1a4:	52852723 	mov	w3, #0x2939                	// #10553
		op=((ic32_22)&0x1); q=((ic32_30)&0x1); s=((ic32_12)&0x1); z=((ic32_10)&0x3); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8e1a8:	12000697 	and	w23, w20, #0x3
   8e1ac:	12001059 	and	w25, w2, #0x1f
		args[0]=disasm_arg_Vt3B; args[1]=disasm_arg_offs; args[2]=disasm_arg_XnS; args[3]=disasm_arg_offe; args[4]=disasm_arg_i3; 
   8e1b0:	72a56543 	movk	w3, #0x2b2a, lsl #16
   8e1b4:	528007a2 	mov	w2, #0x3d                  	// #61
		op=((ic32_22)&0x1); q=((ic32_30)&0x1); s=((ic32_12)&0x1); z=((ic32_10)&0x3); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8e1b8:	120000e1 	and	w1, w7, #0x1
   8e1bc:	12000098 	and	w24, w4, #0x1
   8e1c0:	1200015b 	and	w27, w10, #0x1
	uint16_t op=0, om=0, j=0;
   8e1c4:	52800014 	mov	w20, #0x0                   	// #0
	uint32_t i=0;
   8e1c8:	290effff 	stp	wzr, wzr, [sp, #116]
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8e1cc:	290fffff 	stp	wzr, wzr, [sp, #124]
   8e1d0:	29117fff 	stp	wzr, wzr, [sp, #136]
   8e1d4:	29127fff 	stp	wzr, wzr, [sp, #144]
   8e1d8:	b9009bff 	str	wzr, [sp, #152]
		args[0]=disasm_arg_Vt3B; args[1]=disasm_arg_offs; args[2]=disasm_arg_XnS; args[3]=disasm_arg_offe; args[4]=disasm_arg_i3; 
   8e1dc:	b902c3e3 	str	w3, [sp, #704]
   8e1e0:	390b13e2 	strb	w2, [sp, #708]
   8e1e4:	a9435bf5 	ldp	x21, x22, [sp, #48]
   8e1e8:	17ffde9e 	b	85c60 <disasm+0x1c80>
		names="st1\0ld1\0";
   8e1ec:	b0000023 	adrp	x3, 93000 <sd_init+0x1470>
   8e1f0:	91162063 	add	x3, x3, #0x588
		op=((ic32_22)&0x1); q=((ic32_30)&0x1); s=((ic32_12)&0x1); z=((ic32_10)&0x3); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8e1f4:	1200101a 	and	w26, w0, #0x1f
		names="st1\0ld1\0";
   8e1f8:	91318060 	add	x0, x3, #0xc60
		args[0]=disasm_arg_VtB; args[1]=disasm_arg_offs; args[2]=disasm_arg_XnS; args[3]=disasm_arg_offe; args[4]=disasm_arg_i1; 
   8e1fc:	52852623 	mov	w3, #0x2931                	// #10545
		op=((ic32_22)&0x1); q=((ic32_30)&0x1); s=((ic32_12)&0x1); z=((ic32_10)&0x3); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8e200:	12000697 	and	w23, w20, #0x3
   8e204:	12001059 	and	w25, w2, #0x1f
		args[0]=disasm_arg_VtB; args[1]=disasm_arg_offs; args[2]=disasm_arg_XnS; args[3]=disasm_arg_offe; args[4]=disasm_arg_i1; 
   8e208:	72a56543 	movk	w3, #0x2b2a, lsl #16
   8e20c:	528006a2 	mov	w2, #0x35                  	// #53
		op=((ic32_22)&0x1); q=((ic32_30)&0x1); s=((ic32_12)&0x1); z=((ic32_10)&0x3); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8e210:	120000e1 	and	w1, w7, #0x1
   8e214:	12000098 	and	w24, w4, #0x1
   8e218:	1200015b 	and	w27, w10, #0x1
	uint16_t op=0, om=0, j=0;
   8e21c:	52800014 	mov	w20, #0x0                   	// #0
	uint32_t i=0;
   8e220:	290effff 	stp	wzr, wzr, [sp, #116]
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8e224:	290fffff 	stp	wzr, wzr, [sp, #124]
   8e228:	29117fff 	stp	wzr, wzr, [sp, #136]
   8e22c:	29127fff 	stp	wzr, wzr, [sp, #144]
   8e230:	b9009bff 	str	wzr, [sp, #152]
		args[0]=disasm_arg_VtB; args[1]=disasm_arg_offs; args[2]=disasm_arg_XnS; args[3]=disasm_arg_offe; args[4]=disasm_arg_i1; 
   8e234:	b902c3e3 	str	w3, [sp, #704]
   8e238:	390b13e2 	strb	w2, [sp, #708]
   8e23c:	a9435bf5 	ldp	x21, x22, [sp, #48]
   8e240:	17ffde88 	b	85c60 <disasm+0x1c80>
		q=((ic32_30)&0x1); m=((ic32_16)&0x1f); z=((ic32_10)&0x3); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8e244:	12001059 	and	w25, w2, #0x1f
		args[0]=disasm_arg_VtT; args[1]=disasm_arg_Vt2T; args[2]=disasm_arg_Vt3T; args[3]=disasm_arg_Vt4T; args[4]=disasm_arg_offs; args[5]=disasm_arg_XnS; args[6]=disasm_arg_offe; args[7]=disasm_arg_Xm; 
   8e248:	d284c4a2 	mov	x2, #0x2625                	// #9765
   8e24c:	f2a504e2 	movk	x2, #0x2827, lsl #16
		names="ld4r\0";
   8e250:	b0000021 	adrp	x1, 93000 <sd_init+0x1470>
		args[0]=disasm_arg_VtT; args[1]=disasm_arg_Vt2T; args[2]=disasm_arg_Vt3T; args[3]=disasm_arg_Vt4T; args[4]=disasm_arg_offs; args[5]=disasm_arg_XnS; args[6]=disasm_arg_offe; args[7]=disasm_arg_Xm; 
   8e254:	f2c54522 	movk	x2, #0x2a29, lsl #32
		names="ld4r\0";
   8e258:	91162021 	add	x1, x1, #0x588
		q=((ic32_30)&0x1); m=((ic32_16)&0x1f); z=((ic32_10)&0x3); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8e25c:	120010a3 	and	w3, w5, #0x1f
   8e260:	12000697 	and	w23, w20, #0x3
   8e264:	1200101a 	and	w26, w0, #0x1f
		args[0]=disasm_arg_VtT; args[1]=disasm_arg_Vt2T; args[2]=disasm_arg_Vt3T; args[3]=disasm_arg_Vt4T; args[4]=disasm_arg_offs; args[5]=disasm_arg_XnS; args[6]=disasm_arg_offe; args[7]=disasm_arg_Xm; 
   8e268:	f2e5a562 	movk	x2, #0x2d2b, lsl #48
		names="ld4r\0";
   8e26c:	9132e020 	add	x0, x1, #0xcb8
		q=((ic32_30)&0x1); m=((ic32_16)&0x1f); z=((ic32_10)&0x3); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8e270:	12000098 	and	w24, w4, #0x1
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8e274:	5280001b 	mov	w27, #0x0                   	// #0
	uint16_t op=0, om=0, j=0;
   8e278:	52800014 	mov	w20, #0x0                   	// #0
   8e27c:	52800001 	mov	w1, #0x0                   	// #0
	uint32_t i=0;
   8e280:	290effff 	stp	wzr, wzr, [sp, #116]
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8e284:	290fffe3 	stp	w3, wzr, [sp, #124]
   8e288:	29117fff 	stp	wzr, wzr, [sp, #136]
   8e28c:	29127fff 	stp	wzr, wzr, [sp, #144]
   8e290:	b9009bff 	str	wzr, [sp, #152]
		args[0]=disasm_arg_VtT; args[1]=disasm_arg_Vt2T; args[2]=disasm_arg_Vt3T; args[3]=disasm_arg_Vt4T; args[4]=disasm_arg_offs; args[5]=disasm_arg_XnS; args[6]=disasm_arg_offe; args[7]=disasm_arg_Xm; 
   8e294:	f90163e2 	str	x2, [sp, #704]
   8e298:	a9435bf5 	ldp	x21, x22, [sp, #48]
   8e29c:	17ffde71 	b	85c60 <disasm+0x1c80>
		q=((ic32_30)&0x1); m=((ic32_16)&0x1f); z=((ic32_10)&0x3); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8e2a0:	120010a3 	and	w3, w5, #0x1f
		names="ld2r\0";
   8e2a4:	b0000021 	adrp	x1, 93000 <sd_init+0x1470>
   8e2a8:	91162021 	add	x1, x1, #0x588
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8e2ac:	290fffe3 	stp	w3, wzr, [sp, #124]
		args[0]=disasm_arg_VtT; args[1]=disasm_arg_Vt2T; args[2]=disasm_arg_offs; args[3]=disasm_arg_XnS; args[4]=disasm_arg_offe; args[5]=disasm_arg_Xm; 
   8e2b0:	5284c4a3 	mov	w3, #0x2625                	// #9765
		q=((ic32_30)&0x1); m=((ic32_16)&0x1f); z=((ic32_10)&0x3); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8e2b4:	12000697 	and	w23, w20, #0x3
   8e2b8:	12001059 	and	w25, w2, #0x1f
   8e2bc:	1200101a 	and	w26, w0, #0x1f
		args[0]=disasm_arg_VtT; args[1]=disasm_arg_Vt2T; args[2]=disasm_arg_offs; args[3]=disasm_arg_XnS; args[4]=disasm_arg_offe; args[5]=disasm_arg_Xm; 
   8e2c0:	5285a562 	mov	w2, #0x2d2b                	// #11563
		names="ld2r\0";
   8e2c4:	9132c020 	add	x0, x1, #0xcb0
		args[0]=disasm_arg_VtT; args[1]=disasm_arg_Vt2T; args[2]=disasm_arg_offs; args[3]=disasm_arg_XnS; args[4]=disasm_arg_offe; args[5]=disasm_arg_Xm; 
   8e2c8:	72a54523 	movk	w3, #0x2a29, lsl #16
		q=((ic32_30)&0x1); m=((ic32_16)&0x1f); z=((ic32_10)&0x3); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8e2cc:	12000098 	and	w24, w4, #0x1
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8e2d0:	5280001b 	mov	w27, #0x0                   	// #0
	uint16_t op=0, om=0, j=0;
   8e2d4:	52800014 	mov	w20, #0x0                   	// #0
   8e2d8:	52800001 	mov	w1, #0x0                   	// #0
	uint32_t i=0;
   8e2dc:	290effff 	stp	wzr, wzr, [sp, #116]
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8e2e0:	29117fff 	stp	wzr, wzr, [sp, #136]
   8e2e4:	29127fff 	stp	wzr, wzr, [sp, #144]
   8e2e8:	b9009bff 	str	wzr, [sp, #152]
		args[0]=disasm_arg_VtT; args[1]=disasm_arg_Vt2T; args[2]=disasm_arg_offs; args[3]=disasm_arg_XnS; args[4]=disasm_arg_offe; args[5]=disasm_arg_Xm; 
   8e2ec:	b902c3e3 	str	w3, [sp, #704]
   8e2f0:	79058be2 	strh	w2, [sp, #708]
   8e2f4:	a9435bf5 	ldp	x21, x22, [sp, #48]
   8e2f8:	17ffde5a 	b	85c60 <disasm+0x1c80>
		q=((ic32_30)&0x1); z=((ic32_10)&0x3); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8e2fc:	12001059 	and	w25, w2, #0x1f
		args[0]=disasm_arg_VtT; args[1]=disasm_arg_Vt2T; args[2]=disasm_arg_Vt3T; args[3]=disasm_arg_Vt4T; args[4]=disasm_arg_offs; args[5]=disasm_arg_XnS; args[6]=disasm_arg_offe; args[7]=disasm_arg_z4; 
   8e300:	d284c4a2 	mov	x2, #0x2625                	// #9765
   8e304:	f2a504e2 	movk	x2, #0x2827, lsl #16
		names="ld4r\0";
   8e308:	b0000021 	adrp	x1, 93000 <sd_init+0x1470>
		args[0]=disasm_arg_VtT; args[1]=disasm_arg_Vt2T; args[2]=disasm_arg_Vt3T; args[3]=disasm_arg_Vt4T; args[4]=disasm_arg_offs; args[5]=disasm_arg_XnS; args[6]=disasm_arg_offe; args[7]=disasm_arg_z4; 
   8e30c:	f2c54522 	movk	x2, #0x2a29, lsl #32
		names="ld4r\0";
   8e310:	91162021 	add	x1, x1, #0x588
		q=((ic32_30)&0x1); z=((ic32_10)&0x3); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8e314:	12000697 	and	w23, w20, #0x3
   8e318:	1200101a 	and	w26, w0, #0x1f
		args[0]=disasm_arg_VtT; args[1]=disasm_arg_Vt2T; args[2]=disasm_arg_Vt3T; args[3]=disasm_arg_Vt4T; args[4]=disasm_arg_offs; args[5]=disasm_arg_XnS; args[6]=disasm_arg_offe; args[7]=disasm_arg_z4; 
   8e31c:	f2e9c562 	movk	x2, #0x4e2b, lsl #48
		names="ld4r\0";
   8e320:	9132e020 	add	x0, x1, #0xcb8
		q=((ic32_30)&0x1); z=((ic32_10)&0x3); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8e324:	12000098 	and	w24, w4, #0x1
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8e328:	5280001b 	mov	w27, #0x0                   	// #0
	uint16_t op=0, om=0, j=0;
   8e32c:	52800014 	mov	w20, #0x0                   	// #0
   8e330:	52800001 	mov	w1, #0x0                   	// #0
	uint32_t i=0;
   8e334:	290effff 	stp	wzr, wzr, [sp, #116]
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8e338:	290fffff 	stp	wzr, wzr, [sp, #124]
   8e33c:	29117fff 	stp	wzr, wzr, [sp, #136]
   8e340:	29127fff 	stp	wzr, wzr, [sp, #144]
   8e344:	b9009bff 	str	wzr, [sp, #152]
		args[0]=disasm_arg_VtT; args[1]=disasm_arg_Vt2T; args[2]=disasm_arg_Vt3T; args[3]=disasm_arg_Vt4T; args[4]=disasm_arg_offs; args[5]=disasm_arg_XnS; args[6]=disasm_arg_offe; args[7]=disasm_arg_z4; 
   8e348:	f90163e2 	str	x2, [sp, #704]
   8e34c:	a9435bf5 	ldp	x21, x22, [sp, #48]
   8e350:	17ffde44 	b	85c60 <disasm+0x1c80>
		names="ld2r\0";
   8e354:	b0000021 	adrp	x1, 93000 <sd_init+0x1470>
		args[0]=disasm_arg_VtT; args[1]=disasm_arg_Vt2T; args[2]=disasm_arg_offs; args[3]=disasm_arg_XnS; args[4]=disasm_arg_offe; args[5]=disasm_arg_z2; 
   8e358:	5284c4a3 	mov	w3, #0x2625                	// #9765
		names="ld2r\0";
   8e35c:	91162021 	add	x1, x1, #0x588
		q=((ic32_30)&0x1); z=((ic32_10)&0x3); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8e360:	12000697 	and	w23, w20, #0x3
   8e364:	12001059 	and	w25, w2, #0x1f
   8e368:	1200101a 	and	w26, w0, #0x1f
		args[0]=disasm_arg_VtT; args[1]=disasm_arg_Vt2T; args[2]=disasm_arg_offs; args[3]=disasm_arg_XnS; args[4]=disasm_arg_offe; args[5]=disasm_arg_z2; 
   8e36c:	72a54523 	movk	w3, #0x2a29, lsl #16
		names="ld2r\0";
   8e370:	9132c020 	add	x0, x1, #0xcb0
		args[0]=disasm_arg_VtT; args[1]=disasm_arg_Vt2T; args[2]=disasm_arg_offs; args[3]=disasm_arg_XnS; args[4]=disasm_arg_offe; args[5]=disasm_arg_z2; 
   8e374:	5289a562 	mov	w2, #0x4d2b                	// #19755
		q=((ic32_30)&0x1); z=((ic32_10)&0x3); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8e378:	12000098 	and	w24, w4, #0x1
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8e37c:	5280001b 	mov	w27, #0x0                   	// #0
	uint16_t op=0, om=0, j=0;
   8e380:	52800014 	mov	w20, #0x0                   	// #0
   8e384:	52800001 	mov	w1, #0x0                   	// #0
	uint32_t i=0;
   8e388:	290effff 	stp	wzr, wzr, [sp, #116]
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8e38c:	290fffff 	stp	wzr, wzr, [sp, #124]
   8e390:	29117fff 	stp	wzr, wzr, [sp, #136]
   8e394:	29127fff 	stp	wzr, wzr, [sp, #144]
   8e398:	b9009bff 	str	wzr, [sp, #152]
		args[0]=disasm_arg_VtT; args[1]=disasm_arg_Vt2T; args[2]=disasm_arg_offs; args[3]=disasm_arg_XnS; args[4]=disasm_arg_offe; args[5]=disasm_arg_z2; 
   8e39c:	b902c3e3 	str	w3, [sp, #704]
   8e3a0:	79058be2 	strh	w2, [sp, #708]
   8e3a4:	a9435bf5 	ldp	x21, x22, [sp, #48]
   8e3a8:	17ffde2e 	b	85c60 <disasm+0x1c80>
		names="ld3r\0";
   8e3ac:	b0000021 	adrp	x1, 93000 <sd_init+0x1470>
   8e3b0:	91162021 	add	x1, x1, #0x588
		q=((ic32_30)&0x1); m=((ic32_16)&0x1f); z=((ic32_10)&0x3); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8e3b4:	1200101a 	and	w26, w0, #0x1f
		names="ld3r\0";
   8e3b8:	9132a020 	add	x0, x1, #0xca8
		args[0]=disasm_arg_VtT; args[1]=disasm_arg_Vt2T; args[2]=disasm_arg_Vt3T; args[3]=disasm_arg_offs; args[4]=disasm_arg_XnS; args[5]=disasm_arg_offe; args[6]=disasm_arg_Xm; 
   8e3bc:	5284c4a1 	mov	w1, #0x2625                	// #9765
		q=((ic32_30)&0x1); m=((ic32_16)&0x1f); z=((ic32_10)&0x3); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8e3c0:	120010a3 	and	w3, w5, #0x1f
		args[0]=disasm_arg_VtT; args[1]=disasm_arg_Vt2T; args[2]=disasm_arg_Vt3T; args[3]=disasm_arg_offs; args[4]=disasm_arg_XnS; args[5]=disasm_arg_offe; args[6]=disasm_arg_Xm; 
   8e3c4:	72a524e1 	movk	w1, #0x2927, lsl #16
		q=((ic32_30)&0x1); m=((ic32_16)&0x1f); z=((ic32_10)&0x3); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8e3c8:	12000697 	and	w23, w20, #0x3
   8e3cc:	12001059 	and	w25, w2, #0x1f
   8e3d0:	12000098 	and	w24, w4, #0x1
		args[0]=disasm_arg_VtT; args[1]=disasm_arg_Vt2T; args[2]=disasm_arg_Vt3T; args[3]=disasm_arg_offs; args[4]=disasm_arg_XnS; args[5]=disasm_arg_offe; args[6]=disasm_arg_Xm; 
   8e3d4:	528005a2 	mov	w2, #0x2d                  	// #45
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8e3d8:	5280001b 	mov	w27, #0x0                   	// #0
	uint16_t op=0, om=0, j=0;
   8e3dc:	52800014 	mov	w20, #0x0                   	// #0
	uint32_t i=0;
   8e3e0:	290effff 	stp	wzr, wzr, [sp, #116]
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8e3e4:	290fffe3 	stp	w3, wzr, [sp, #124]
		args[0]=disasm_arg_VtT; args[1]=disasm_arg_Vt2T; args[2]=disasm_arg_Vt3T; args[3]=disasm_arg_offs; args[4]=disasm_arg_XnS; args[5]=disasm_arg_offe; args[6]=disasm_arg_Xm; 
   8e3e8:	52856543 	mov	w3, #0x2b2a                	// #11050
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8e3ec:	29117fff 	stp	wzr, wzr, [sp, #136]
   8e3f0:	29127fff 	stp	wzr, wzr, [sp, #144]
   8e3f4:	b9009bff 	str	wzr, [sp, #152]
		args[0]=disasm_arg_VtT; args[1]=disasm_arg_Vt2T; args[2]=disasm_arg_Vt3T; args[3]=disasm_arg_offs; args[4]=disasm_arg_XnS; args[5]=disasm_arg_offe; args[6]=disasm_arg_Xm; 
   8e3f8:	b902c3e1 	str	w1, [sp, #704]
	uint16_t op=0, om=0, j=0;
   8e3fc:	52800001 	mov	w1, #0x0                   	// #0
		args[0]=disasm_arg_VtT; args[1]=disasm_arg_Vt2T; args[2]=disasm_arg_Vt3T; args[3]=disasm_arg_offs; args[4]=disasm_arg_XnS; args[5]=disasm_arg_offe; args[6]=disasm_arg_Xm; 
   8e400:	79058be3 	strh	w3, [sp, #708]
   8e404:	390b1be2 	strb	w2, [sp, #710]
   8e408:	a9435bf5 	ldp	x21, x22, [sp, #48]
   8e40c:	17ffde15 	b	85c60 <disasm+0x1c80>
		q=((ic32_30)&0x1); m=((ic32_16)&0x1f); z=((ic32_10)&0x3); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8e410:	120010a3 	and	w3, w5, #0x1f
		names="ld1r\0";
   8e414:	b0000021 	adrp	x1, 93000 <sd_init+0x1470>
   8e418:	91162021 	add	x1, x1, #0x588
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8e41c:	290fffe3 	stp	w3, wzr, [sp, #124]
		args[0]=disasm_arg_VtT; args[1]=disasm_arg_offs; args[2]=disasm_arg_XnS; args[3]=disasm_arg_offe; args[4]=disasm_arg_Xm; 
   8e420:	528524a3 	mov	w3, #0x2925                	// #10533
		q=((ic32_30)&0x1); m=((ic32_16)&0x1f); z=((ic32_10)&0x3); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8e424:	12000697 	and	w23, w20, #0x3
   8e428:	12001059 	and	w25, w2, #0x1f
   8e42c:	1200101a 	and	w26, w0, #0x1f
		args[0]=disasm_arg_VtT; args[1]=disasm_arg_offs; args[2]=disasm_arg_XnS; args[3]=disasm_arg_offe; args[4]=disasm_arg_Xm; 
   8e430:	528005a2 	mov	w2, #0x2d                  	// #45
		names="ld1r\0";
   8e434:	91328020 	add	x0, x1, #0xca0
		args[0]=disasm_arg_VtT; args[1]=disasm_arg_offs; args[2]=disasm_arg_XnS; args[3]=disasm_arg_offe; args[4]=disasm_arg_Xm; 
   8e438:	72a56543 	movk	w3, #0x2b2a, lsl #16
		q=((ic32_30)&0x1); m=((ic32_16)&0x1f); z=((ic32_10)&0x3); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8e43c:	12000098 	and	w24, w4, #0x1
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8e440:	5280001b 	mov	w27, #0x0                   	// #0
	uint16_t op=0, om=0, j=0;
   8e444:	52800014 	mov	w20, #0x0                   	// #0
   8e448:	52800001 	mov	w1, #0x0                   	// #0
	uint32_t i=0;
   8e44c:	290effff 	stp	wzr, wzr, [sp, #116]
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8e450:	29117fff 	stp	wzr, wzr, [sp, #136]
   8e454:	29127fff 	stp	wzr, wzr, [sp, #144]
   8e458:	b9009bff 	str	wzr, [sp, #152]
		args[0]=disasm_arg_VtT; args[1]=disasm_arg_offs; args[2]=disasm_arg_XnS; args[3]=disasm_arg_offe; args[4]=disasm_arg_Xm; 
   8e45c:	b902c3e3 	str	w3, [sp, #704]
   8e460:	390b13e2 	strb	w2, [sp, #708]
   8e464:	a9435bf5 	ldp	x21, x22, [sp, #48]
   8e468:	17ffddfe 	b	85c60 <disasm+0x1c80>
		names="ld3r\0";
   8e46c:	b0000021 	adrp	x1, 93000 <sd_init+0x1470>
   8e470:	91162021 	add	x1, x1, #0x588
		q=((ic32_30)&0x1); z=((ic32_10)&0x3); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8e474:	1200101a 	and	w26, w0, #0x1f
		names="ld3r\0";
   8e478:	9132a020 	add	x0, x1, #0xca8
		args[0]=disasm_arg_VtT; args[1]=disasm_arg_Vt2T; args[2]=disasm_arg_Vt3T; args[3]=disasm_arg_offs; args[4]=disasm_arg_XnS; args[5]=disasm_arg_offe; args[6]=disasm_arg_z3; 
   8e47c:	5284c4a1 	mov	w1, #0x2625                	// #9765
		q=((ic32_30)&0x1); z=((ic32_10)&0x3); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8e480:	12000697 	and	w23, w20, #0x3
		args[0]=disasm_arg_VtT; args[1]=disasm_arg_Vt2T; args[2]=disasm_arg_Vt3T; args[3]=disasm_arg_offs; args[4]=disasm_arg_XnS; args[5]=disasm_arg_offe; args[6]=disasm_arg_z3; 
   8e484:	72a524e1 	movk	w1, #0x2927, lsl #16
		q=((ic32_30)&0x1); z=((ic32_10)&0x3); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8e488:	12001059 	and	w25, w2, #0x1f
		args[0]=disasm_arg_VtT; args[1]=disasm_arg_Vt2T; args[2]=disasm_arg_Vt3T; args[3]=disasm_arg_offs; args[4]=disasm_arg_XnS; args[5]=disasm_arg_offe; args[6]=disasm_arg_z3; 
   8e48c:	52856543 	mov	w3, #0x2b2a                	// #11050
   8e490:	52800982 	mov	w2, #0x4c                  	// #76
		q=((ic32_30)&0x1); z=((ic32_10)&0x3); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8e494:	12000098 	and	w24, w4, #0x1
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8e498:	5280001b 	mov	w27, #0x0                   	// #0
	uint16_t op=0, om=0, j=0;
   8e49c:	52800014 	mov	w20, #0x0                   	// #0
	uint32_t i=0;
   8e4a0:	290effff 	stp	wzr, wzr, [sp, #116]
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8e4a4:	290fffff 	stp	wzr, wzr, [sp, #124]
   8e4a8:	29117fff 	stp	wzr, wzr, [sp, #136]
   8e4ac:	29127fff 	stp	wzr, wzr, [sp, #144]
   8e4b0:	b9009bff 	str	wzr, [sp, #152]
		args[0]=disasm_arg_VtT; args[1]=disasm_arg_Vt2T; args[2]=disasm_arg_Vt3T; args[3]=disasm_arg_offs; args[4]=disasm_arg_XnS; args[5]=disasm_arg_offe; args[6]=disasm_arg_z3; 
   8e4b4:	b902c3e1 	str	w1, [sp, #704]
	uint16_t op=0, om=0, j=0;
   8e4b8:	52800001 	mov	w1, #0x0                   	// #0
		args[0]=disasm_arg_VtT; args[1]=disasm_arg_Vt2T; args[2]=disasm_arg_Vt3T; args[3]=disasm_arg_offs; args[4]=disasm_arg_XnS; args[5]=disasm_arg_offe; args[6]=disasm_arg_z3; 
   8e4bc:	79058be3 	strh	w3, [sp, #708]
   8e4c0:	390b1be2 	strb	w2, [sp, #710]
   8e4c4:	a9435bf5 	ldp	x21, x22, [sp, #48]
   8e4c8:	17ffdde6 	b	85c60 <disasm+0x1c80>
		names="ld1r\0";
   8e4cc:	b0000021 	adrp	x1, 93000 <sd_init+0x1470>
		args[0]=disasm_arg_VtT; args[1]=disasm_arg_offs; args[2]=disasm_arg_XnS; args[3]=disasm_arg_offe; args[4]=disasm_arg_z; 
   8e4d0:	528524a3 	mov	w3, #0x2925                	// #10533
		names="ld1r\0";
   8e4d4:	91162021 	add	x1, x1, #0x588
		q=((ic32_30)&0x1); z=((ic32_10)&0x3); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8e4d8:	12000697 	and	w23, w20, #0x3
   8e4dc:	12001059 	and	w25, w2, #0x1f
   8e4e0:	1200101a 	and	w26, w0, #0x1f
		args[0]=disasm_arg_VtT; args[1]=disasm_arg_offs; args[2]=disasm_arg_XnS; args[3]=disasm_arg_offe; args[4]=disasm_arg_z; 
   8e4e4:	72a56543 	movk	w3, #0x2b2a, lsl #16
		names="ld1r\0";
   8e4e8:	91328020 	add	x0, x1, #0xca0
		args[0]=disasm_arg_VtT; args[1]=disasm_arg_offs; args[2]=disasm_arg_XnS; args[3]=disasm_arg_offe; args[4]=disasm_arg_z; 
   8e4ec:	52800962 	mov	w2, #0x4b                  	// #75
		q=((ic32_30)&0x1); z=((ic32_10)&0x3); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8e4f0:	12000098 	and	w24, w4, #0x1
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8e4f4:	5280001b 	mov	w27, #0x0                   	// #0
	uint16_t op=0, om=0, j=0;
   8e4f8:	52800014 	mov	w20, #0x0                   	// #0
   8e4fc:	52800001 	mov	w1, #0x0                   	// #0
	uint32_t i=0;
   8e500:	290effff 	stp	wzr, wzr, [sp, #116]
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8e504:	290fffff 	stp	wzr, wzr, [sp, #124]
   8e508:	29117fff 	stp	wzr, wzr, [sp, #136]
   8e50c:	29127fff 	stp	wzr, wzr, [sp, #144]
   8e510:	b9009bff 	str	wzr, [sp, #152]
		args[0]=disasm_arg_VtT; args[1]=disasm_arg_offs; args[2]=disasm_arg_XnS; args[3]=disasm_arg_offe; args[4]=disasm_arg_z; 
   8e514:	b902c3e3 	str	w3, [sp, #704]
   8e518:	390b13e2 	strb	w2, [sp, #708]
   8e51c:	a9435bf5 	ldp	x21, x22, [sp, #48]
   8e520:	17ffddd0 	b	85c60 <disasm+0x1c80>
		names="st4\0ld4\0";
   8e524:	b0000023 	adrp	x3, 93000 <sd_init+0x1470>
		op=((ic32_22)&0x1); q=((ic32_30)&0x1); s=((ic32_12)&0x1); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8e528:	12001059 	and	w25, w2, #0x1f
		names="st4\0ld4\0";
   8e52c:	91162063 	add	x3, x3, #0x588
		args[0]=disasm_arg_Vt4S; args[1]=disasm_arg_offs; args[2]=disasm_arg_XnS; args[3]=disasm_arg_offe; 
   8e530:	52852902 	mov	w2, #0x2948                	// #10568
		op=((ic32_22)&0x1); q=((ic32_30)&0x1); s=((ic32_12)&0x1); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8e534:	1200101a 	and	w26, w0, #0x1f
		args[0]=disasm_arg_Vt4S; args[1]=disasm_arg_offs; args[2]=disasm_arg_XnS; args[3]=disasm_arg_offe; 
   8e538:	72a56542 	movk	w2, #0x2b2a, lsl #16
		op=((ic32_22)&0x1); q=((ic32_30)&0x1); s=((ic32_12)&0x1); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8e53c:	120000e1 	and	w1, w7, #0x1
   8e540:	12000098 	and	w24, w4, #0x1
   8e544:	1200015b 	and	w27, w10, #0x1
		names="st4\0ld4\0";
   8e548:	91338060 	add	x0, x3, #0xce0
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8e54c:	52800017 	mov	w23, #0x0                   	// #0
	uint16_t op=0, om=0, j=0;
   8e550:	52800014 	mov	w20, #0x0                   	// #0
	uint32_t i=0;
   8e554:	290effff 	stp	wzr, wzr, [sp, #116]
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8e558:	290fffff 	stp	wzr, wzr, [sp, #124]
   8e55c:	29117fff 	stp	wzr, wzr, [sp, #136]
   8e560:	29127fff 	stp	wzr, wzr, [sp, #144]
   8e564:	b9009bff 	str	wzr, [sp, #152]
		args[0]=disasm_arg_Vt4S; args[1]=disasm_arg_offs; args[2]=disasm_arg_XnS; args[3]=disasm_arg_offe; 
   8e568:	b902c3e2 	str	w2, [sp, #704]
   8e56c:	a9435bf5 	ldp	x21, x22, [sp, #48]
   8e570:	17ffddbc 	b	85c60 <disasm+0x1c80>
		names="st4\0ld4\0";
   8e574:	b0000023 	adrp	x3, 93000 <sd_init+0x1470>
		op=((ic32_22)&0x1); q=((ic32_30)&0x1); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8e578:	12001059 	and	w25, w2, #0x1f
		names="st4\0ld4\0";
   8e57c:	91162063 	add	x3, x3, #0x588
		args[0]=disasm_arg_Vt4D; args[1]=disasm_arg_offs; args[2]=disasm_arg_XnS; args[3]=disasm_arg_offe; 
   8e580:	52852922 	mov	w2, #0x2949                	// #10569
		op=((ic32_22)&0x1); q=((ic32_30)&0x1); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8e584:	1200101a 	and	w26, w0, #0x1f
		args[0]=disasm_arg_Vt4D; args[1]=disasm_arg_offs; args[2]=disasm_arg_XnS; args[3]=disasm_arg_offe; 
   8e588:	72a56542 	movk	w2, #0x2b2a, lsl #16
		op=((ic32_22)&0x1); q=((ic32_30)&0x1); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8e58c:	120000e1 	and	w1, w7, #0x1
   8e590:	12000098 	and	w24, w4, #0x1
		names="st4\0ld4\0";
   8e594:	91338060 	add	x0, x3, #0xce0
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8e598:	52800017 	mov	w23, #0x0                   	// #0
   8e59c:	5280001b 	mov	w27, #0x0                   	// #0
	uint16_t op=0, om=0, j=0;
   8e5a0:	52800014 	mov	w20, #0x0                   	// #0
	uint32_t i=0;
   8e5a4:	290effff 	stp	wzr, wzr, [sp, #116]
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8e5a8:	290fffff 	stp	wzr, wzr, [sp, #124]
   8e5ac:	29117fff 	stp	wzr, wzr, [sp, #136]
   8e5b0:	29127fff 	stp	wzr, wzr, [sp, #144]
   8e5b4:	b9009bff 	str	wzr, [sp, #152]
		args[0]=disasm_arg_Vt4D; args[1]=disasm_arg_offs; args[2]=disasm_arg_XnS; args[3]=disasm_arg_offe; 
   8e5b8:	b902c3e2 	str	w2, [sp, #704]
   8e5bc:	a9435bf5 	ldp	x21, x22, [sp, #48]
   8e5c0:	17ffdda8 	b	85c60 <disasm+0x1c80>
		names="st2\0ld2\0";
   8e5c4:	b0000023 	adrp	x3, 93000 <sd_init+0x1470>
		op=((ic32_22)&0x1); q=((ic32_30)&0x1); s=((ic32_12)&0x1); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8e5c8:	12001059 	and	w25, w2, #0x1f
		names="st2\0ld2\0";
   8e5cc:	91162063 	add	x3, x3, #0x588
		args[0]=disasm_arg_Vt2S; args[1]=disasm_arg_offs; args[2]=disasm_arg_XnS; args[3]=disasm_arg_offe; 
   8e5d0:	52852862 	mov	w2, #0x2943                	// #10563
		op=((ic32_22)&0x1); q=((ic32_30)&0x1); s=((ic32_12)&0x1); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8e5d4:	1200101a 	and	w26, w0, #0x1f
		args[0]=disasm_arg_Vt2S; args[1]=disasm_arg_offs; args[2]=disasm_arg_XnS; args[3]=disasm_arg_offe; 
   8e5d8:	72a56542 	movk	w2, #0x2b2a, lsl #16
		op=((ic32_22)&0x1); q=((ic32_30)&0x1); s=((ic32_12)&0x1); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8e5dc:	120000e1 	and	w1, w7, #0x1
   8e5e0:	12000098 	and	w24, w4, #0x1
   8e5e4:	1200015b 	and	w27, w10, #0x1
		names="st2\0ld2\0";
   8e5e8:	91334060 	add	x0, x3, #0xcd0
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8e5ec:	52800017 	mov	w23, #0x0                   	// #0
	uint16_t op=0, om=0, j=0;
   8e5f0:	52800014 	mov	w20, #0x0                   	// #0
	uint32_t i=0;
   8e5f4:	290effff 	stp	wzr, wzr, [sp, #116]
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8e5f8:	290fffff 	stp	wzr, wzr, [sp, #124]
   8e5fc:	29117fff 	stp	wzr, wzr, [sp, #136]
   8e600:	29127fff 	stp	wzr, wzr, [sp, #144]
   8e604:	b9009bff 	str	wzr, [sp, #152]
		args[0]=disasm_arg_Vt2S; args[1]=disasm_arg_offs; args[2]=disasm_arg_XnS; args[3]=disasm_arg_offe; 
   8e608:	b902c3e2 	str	w2, [sp, #704]
   8e60c:	a9435bf5 	ldp	x21, x22, [sp, #48]
   8e610:	17ffdd94 	b	85c60 <disasm+0x1c80>
		names="st2\0ld2\0";
   8e614:	b0000023 	adrp	x3, 93000 <sd_init+0x1470>
		op=((ic32_22)&0x1); q=((ic32_30)&0x1); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8e618:	12001059 	and	w25, w2, #0x1f
		names="st2\0ld2\0";
   8e61c:	91162063 	add	x3, x3, #0x588
		args[0]=disasm_arg_Vt2D; args[1]=disasm_arg_offs; args[2]=disasm_arg_XnS; args[3]=disasm_arg_offe; 
   8e620:	52852882 	mov	w2, #0x2944                	// #10564
		op=((ic32_22)&0x1); q=((ic32_30)&0x1); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8e624:	1200101a 	and	w26, w0, #0x1f
		args[0]=disasm_arg_Vt2D; args[1]=disasm_arg_offs; args[2]=disasm_arg_XnS; args[3]=disasm_arg_offe; 
   8e628:	72a56542 	movk	w2, #0x2b2a, lsl #16
		op=((ic32_22)&0x1); q=((ic32_30)&0x1); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8e62c:	120000e1 	and	w1, w7, #0x1
   8e630:	12000098 	and	w24, w4, #0x1
		names="st2\0ld2\0";
   8e634:	91334060 	add	x0, x3, #0xcd0
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8e638:	52800017 	mov	w23, #0x0                   	// #0
   8e63c:	5280001b 	mov	w27, #0x0                   	// #0
	uint16_t op=0, om=0, j=0;
   8e640:	52800014 	mov	w20, #0x0                   	// #0
	uint32_t i=0;
   8e644:	290effff 	stp	wzr, wzr, [sp, #116]
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8e648:	290fffff 	stp	wzr, wzr, [sp, #124]
   8e64c:	29117fff 	stp	wzr, wzr, [sp, #136]
   8e650:	29127fff 	stp	wzr, wzr, [sp, #144]
   8e654:	b9009bff 	str	wzr, [sp, #152]
		args[0]=disasm_arg_Vt2D; args[1]=disasm_arg_offs; args[2]=disasm_arg_XnS; args[3]=disasm_arg_offe; 
   8e658:	b902c3e2 	str	w2, [sp, #704]
   8e65c:	a9435bf5 	ldp	x21, x22, [sp, #48]
   8e660:	17ffdd80 	b	85c60 <disasm+0x1c80>
		names="st4\0ld4\0";
   8e664:	b0000023 	adrp	x3, 93000 <sd_init+0x1470>
		op=((ic32_22)&0x1); q=((ic32_30)&0x1); s=((ic32_12)&0x1); z=((ic32_10)&0x3); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8e668:	12001059 	and	w25, w2, #0x1f
		names="st4\0ld4\0";
   8e66c:	91162063 	add	x3, x3, #0x588
		args[0]=disasm_arg_Vt4H; args[1]=disasm_arg_offs; args[2]=disasm_arg_XnS; args[3]=disasm_arg_offe; 
   8e670:	528528e2 	mov	w2, #0x2947                	// #10567
		op=((ic32_22)&0x1); q=((ic32_30)&0x1); s=((ic32_12)&0x1); z=((ic32_10)&0x3); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8e674:	12000697 	and	w23, w20, #0x3
   8e678:	1200101a 	and	w26, w0, #0x1f
		args[0]=disasm_arg_Vt4H; args[1]=disasm_arg_offs; args[2]=disasm_arg_XnS; args[3]=disasm_arg_offe; 
   8e67c:	72a56542 	movk	w2, #0x2b2a, lsl #16
		op=((ic32_22)&0x1); q=((ic32_30)&0x1); s=((ic32_12)&0x1); z=((ic32_10)&0x3); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8e680:	120000e1 	and	w1, w7, #0x1
   8e684:	12000098 	and	w24, w4, #0x1
   8e688:	1200015b 	and	w27, w10, #0x1
		names="st4\0ld4\0";
   8e68c:	91338060 	add	x0, x3, #0xce0
	uint16_t op=0, om=0, j=0;
   8e690:	52800014 	mov	w20, #0x0                   	// #0
	uint32_t i=0;
   8e694:	290effff 	stp	wzr, wzr, [sp, #116]
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8e698:	290fffff 	stp	wzr, wzr, [sp, #124]
   8e69c:	29117fff 	stp	wzr, wzr, [sp, #136]
   8e6a0:	29127fff 	stp	wzr, wzr, [sp, #144]
   8e6a4:	b9009bff 	str	wzr, [sp, #152]
		args[0]=disasm_arg_Vt4H; args[1]=disasm_arg_offs; args[2]=disasm_arg_XnS; args[3]=disasm_arg_offe; 
   8e6a8:	b902c3e2 	str	w2, [sp, #704]
   8e6ac:	a9435bf5 	ldp	x21, x22, [sp, #48]
   8e6b0:	17ffdd6c 	b	85c60 <disasm+0x1c80>
		names="st2\0ld2\0";
   8e6b4:	b0000023 	adrp	x3, 93000 <sd_init+0x1470>
		op=((ic32_22)&0x1); q=((ic32_30)&0x1); s=((ic32_12)&0x1); z=((ic32_10)&0x3); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8e6b8:	12001059 	and	w25, w2, #0x1f
		names="st2\0ld2\0";
   8e6bc:	91162063 	add	x3, x3, #0x588
		args[0]=disasm_arg_Vt2H; args[1]=disasm_arg_offs; args[2]=disasm_arg_XnS; args[3]=disasm_arg_offe; 
   8e6c0:	52852842 	mov	w2, #0x2942                	// #10562
		op=((ic32_22)&0x1); q=((ic32_30)&0x1); s=((ic32_12)&0x1); z=((ic32_10)&0x3); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8e6c4:	12000697 	and	w23, w20, #0x3
   8e6c8:	1200101a 	and	w26, w0, #0x1f
		args[0]=disasm_arg_Vt2H; args[1]=disasm_arg_offs; args[2]=disasm_arg_XnS; args[3]=disasm_arg_offe; 
   8e6cc:	72a56542 	movk	w2, #0x2b2a, lsl #16
		op=((ic32_22)&0x1); q=((ic32_30)&0x1); s=((ic32_12)&0x1); z=((ic32_10)&0x3); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8e6d0:	120000e1 	and	w1, w7, #0x1
   8e6d4:	12000098 	and	w24, w4, #0x1
   8e6d8:	1200015b 	and	w27, w10, #0x1
		names="st2\0ld2\0";
   8e6dc:	91334060 	add	x0, x3, #0xcd0
	uint16_t op=0, om=0, j=0;
   8e6e0:	52800014 	mov	w20, #0x0                   	// #0
	uint32_t i=0;
   8e6e4:	290effff 	stp	wzr, wzr, [sp, #116]
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8e6e8:	290fffff 	stp	wzr, wzr, [sp, #124]
   8e6ec:	29117fff 	stp	wzr, wzr, [sp, #136]
   8e6f0:	29127fff 	stp	wzr, wzr, [sp, #144]
   8e6f4:	b9009bff 	str	wzr, [sp, #152]
		args[0]=disasm_arg_Vt2H; args[1]=disasm_arg_offs; args[2]=disasm_arg_XnS; args[3]=disasm_arg_offe; 
   8e6f8:	b902c3e2 	str	w2, [sp, #704]
   8e6fc:	a9435bf5 	ldp	x21, x22, [sp, #48]
   8e700:	17ffdd58 	b	85c60 <disasm+0x1c80>
		names="st4\0ld4\0";
   8e704:	b0000023 	adrp	x3, 93000 <sd_init+0x1470>
		op=((ic32_22)&0x1); q=((ic32_30)&0x1); s=((ic32_12)&0x1); z=((ic32_10)&0x3); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8e708:	12001059 	and	w25, w2, #0x1f
		names="st4\0ld4\0";
   8e70c:	91162063 	add	x3, x3, #0x588
		args[0]=disasm_arg_Vt4B; args[1]=disasm_arg_offs; args[2]=disasm_arg_XnS; args[3]=disasm_arg_offe; 
   8e710:	528528c2 	mov	w2, #0x2946                	// #10566
		op=((ic32_22)&0x1); q=((ic32_30)&0x1); s=((ic32_12)&0x1); z=((ic32_10)&0x3); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8e714:	12000697 	and	w23, w20, #0x3
   8e718:	1200101a 	and	w26, w0, #0x1f
		args[0]=disasm_arg_Vt4B; args[1]=disasm_arg_offs; args[2]=disasm_arg_XnS; args[3]=disasm_arg_offe; 
   8e71c:	72a56542 	movk	w2, #0x2b2a, lsl #16
		op=((ic32_22)&0x1); q=((ic32_30)&0x1); s=((ic32_12)&0x1); z=((ic32_10)&0x3); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8e720:	120000e1 	and	w1, w7, #0x1
   8e724:	12000098 	and	w24, w4, #0x1
   8e728:	1200015b 	and	w27, w10, #0x1
		names="st4\0ld4\0";
   8e72c:	91338060 	add	x0, x3, #0xce0
	uint16_t op=0, om=0, j=0;
   8e730:	52800014 	mov	w20, #0x0                   	// #0
	uint32_t i=0;
   8e734:	290effff 	stp	wzr, wzr, [sp, #116]
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8e738:	290fffff 	stp	wzr, wzr, [sp, #124]
   8e73c:	29117fff 	stp	wzr, wzr, [sp, #136]
   8e740:	29127fff 	stp	wzr, wzr, [sp, #144]
   8e744:	b9009bff 	str	wzr, [sp, #152]
		args[0]=disasm_arg_Vt4B; args[1]=disasm_arg_offs; args[2]=disasm_arg_XnS; args[3]=disasm_arg_offe; 
   8e748:	b902c3e2 	str	w2, [sp, #704]
   8e74c:	a9435bf5 	ldp	x21, x22, [sp, #48]
   8e750:	17ffdd44 	b	85c60 <disasm+0x1c80>
		names="st2\0ld2\0";
   8e754:	b0000023 	adrp	x3, 93000 <sd_init+0x1470>
		op=((ic32_22)&0x1); q=((ic32_30)&0x1); s=((ic32_12)&0x1); z=((ic32_10)&0x3); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8e758:	12001059 	and	w25, w2, #0x1f
		names="st2\0ld2\0";
   8e75c:	91162063 	add	x3, x3, #0x588
		args[0]=disasm_arg_Vt2B; args[1]=disasm_arg_offs; args[2]=disasm_arg_XnS; args[3]=disasm_arg_offe; 
   8e760:	52852822 	mov	w2, #0x2941                	// #10561
		op=((ic32_22)&0x1); q=((ic32_30)&0x1); s=((ic32_12)&0x1); z=((ic32_10)&0x3); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8e764:	12000697 	and	w23, w20, #0x3
   8e768:	1200101a 	and	w26, w0, #0x1f
		args[0]=disasm_arg_Vt2B; args[1]=disasm_arg_offs; args[2]=disasm_arg_XnS; args[3]=disasm_arg_offe; 
   8e76c:	72a56542 	movk	w2, #0x2b2a, lsl #16
		op=((ic32_22)&0x1); q=((ic32_30)&0x1); s=((ic32_12)&0x1); z=((ic32_10)&0x3); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8e770:	120000e1 	and	w1, w7, #0x1
   8e774:	12000098 	and	w24, w4, #0x1
   8e778:	1200015b 	and	w27, w10, #0x1
		names="st2\0ld2\0";
   8e77c:	91334060 	add	x0, x3, #0xcd0
	uint16_t op=0, om=0, j=0;
   8e780:	52800014 	mov	w20, #0x0                   	// #0
	uint32_t i=0;
   8e784:	290effff 	stp	wzr, wzr, [sp, #116]
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8e788:	290fffff 	stp	wzr, wzr, [sp, #124]
   8e78c:	29117fff 	stp	wzr, wzr, [sp, #136]
   8e790:	29127fff 	stp	wzr, wzr, [sp, #144]
   8e794:	b9009bff 	str	wzr, [sp, #152]
		args[0]=disasm_arg_Vt2B; args[1]=disasm_arg_offs; args[2]=disasm_arg_XnS; args[3]=disasm_arg_offe; 
   8e798:	b902c3e2 	str	w2, [sp, #704]
   8e79c:	a9435bf5 	ldp	x21, x22, [sp, #48]
   8e7a0:	17ffdd30 	b	85c60 <disasm+0x1c80>
		names="st3\0ld3\0";
   8e7a4:	b0000023 	adrp	x3, 93000 <sd_init+0x1470>
		op=((ic32_22)&0x1); q=((ic32_30)&0x1); s=((ic32_12)&0x1); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8e7a8:	12001059 	and	w25, w2, #0x1f
		names="st3\0ld3\0";
   8e7ac:	91162063 	add	x3, x3, #0x588
		args[0]=disasm_arg_Vt3S; args[1]=disasm_arg_offs; args[2]=disasm_arg_XnS; args[3]=disasm_arg_offe; 
   8e7b0:	52852762 	mov	w2, #0x293b                	// #10555
		op=((ic32_22)&0x1); q=((ic32_30)&0x1); s=((ic32_12)&0x1); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8e7b4:	1200101a 	and	w26, w0, #0x1f
		args[0]=disasm_arg_Vt3S; args[1]=disasm_arg_offs; args[2]=disasm_arg_XnS; args[3]=disasm_arg_offe; 
   8e7b8:	72a56542 	movk	w2, #0x2b2a, lsl #16
		op=((ic32_22)&0x1); q=((ic32_30)&0x1); s=((ic32_12)&0x1); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8e7bc:	120000e1 	and	w1, w7, #0x1
   8e7c0:	12000098 	and	w24, w4, #0x1
   8e7c4:	1200015b 	and	w27, w10, #0x1
		names="st3\0ld3\0";
   8e7c8:	91330060 	add	x0, x3, #0xcc0
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8e7cc:	52800017 	mov	w23, #0x0                   	// #0
	uint16_t op=0, om=0, j=0;
   8e7d0:	52800014 	mov	w20, #0x0                   	// #0
	uint32_t i=0;
   8e7d4:	290effff 	stp	wzr, wzr, [sp, #116]
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8e7d8:	290fffff 	stp	wzr, wzr, [sp, #124]
   8e7dc:	29117fff 	stp	wzr, wzr, [sp, #136]
   8e7e0:	29127fff 	stp	wzr, wzr, [sp, #144]
   8e7e4:	b9009bff 	str	wzr, [sp, #152]
		args[0]=disasm_arg_Vt3S; args[1]=disasm_arg_offs; args[2]=disasm_arg_XnS; args[3]=disasm_arg_offe; 
   8e7e8:	b902c3e2 	str	w2, [sp, #704]
   8e7ec:	a9435bf5 	ldp	x21, x22, [sp, #48]
   8e7f0:	17ffdd1c 	b	85c60 <disasm+0x1c80>
		names="st3\0ld3\0";
   8e7f4:	b0000023 	adrp	x3, 93000 <sd_init+0x1470>
		op=((ic32_22)&0x1); q=((ic32_30)&0x1); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8e7f8:	12001059 	and	w25, w2, #0x1f
		names="st3\0ld3\0";
   8e7fc:	91162063 	add	x3, x3, #0x588
		args[0]=disasm_arg_Vt3D; args[1]=disasm_arg_offs; args[2]=disasm_arg_XnS; args[3]=disasm_arg_offe; 
   8e800:	52852782 	mov	w2, #0x293c                	// #10556
		op=((ic32_22)&0x1); q=((ic32_30)&0x1); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8e804:	1200101a 	and	w26, w0, #0x1f
		args[0]=disasm_arg_Vt3D; args[1]=disasm_arg_offs; args[2]=disasm_arg_XnS; args[3]=disasm_arg_offe; 
   8e808:	72a56542 	movk	w2, #0x2b2a, lsl #16
		op=((ic32_22)&0x1); q=((ic32_30)&0x1); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8e80c:	120000e1 	and	w1, w7, #0x1
   8e810:	12000098 	and	w24, w4, #0x1
		names="st3\0ld3\0";
   8e814:	91330060 	add	x0, x3, #0xcc0
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8e818:	52800017 	mov	w23, #0x0                   	// #0
   8e81c:	5280001b 	mov	w27, #0x0                   	// #0
	uint16_t op=0, om=0, j=0;
   8e820:	52800014 	mov	w20, #0x0                   	// #0
	uint32_t i=0;
   8e824:	290effff 	stp	wzr, wzr, [sp, #116]
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8e828:	290fffff 	stp	wzr, wzr, [sp, #124]
   8e82c:	29117fff 	stp	wzr, wzr, [sp, #136]
   8e830:	29127fff 	stp	wzr, wzr, [sp, #144]
   8e834:	b9009bff 	str	wzr, [sp, #152]
		args[0]=disasm_arg_Vt3D; args[1]=disasm_arg_offs; args[2]=disasm_arg_XnS; args[3]=disasm_arg_offe; 
   8e838:	b902c3e2 	str	w2, [sp, #704]
   8e83c:	a9435bf5 	ldp	x21, x22, [sp, #48]
   8e840:	17ffdd08 	b	85c60 <disasm+0x1c80>
		names="st1\0ld1\0";
   8e844:	b0000023 	adrp	x3, 93000 <sd_init+0x1470>
		op=((ic32_22)&0x1); q=((ic32_30)&0x1); s=((ic32_12)&0x1); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8e848:	12001059 	and	w25, w2, #0x1f
		names="st1\0ld1\0";
   8e84c:	91162063 	add	x3, x3, #0x588
		args[0]=disasm_arg_VtS; args[1]=disasm_arg_offs; args[2]=disasm_arg_XnS; args[3]=disasm_arg_offe; 
   8e850:	52852662 	mov	w2, #0x2933                	// #10547
		op=((ic32_22)&0x1); q=((ic32_30)&0x1); s=((ic32_12)&0x1); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8e854:	1200101a 	and	w26, w0, #0x1f
		args[0]=disasm_arg_VtS; args[1]=disasm_arg_offs; args[2]=disasm_arg_XnS; args[3]=disasm_arg_offe; 
   8e858:	72a56542 	movk	w2, #0x2b2a, lsl #16
		op=((ic32_22)&0x1); q=((ic32_30)&0x1); s=((ic32_12)&0x1); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8e85c:	120000e1 	and	w1, w7, #0x1
   8e860:	12000098 	and	w24, w4, #0x1
   8e864:	1200015b 	and	w27, w10, #0x1
		names="st1\0ld1\0";
   8e868:	91318060 	add	x0, x3, #0xc60
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8e86c:	52800017 	mov	w23, #0x0                   	// #0
	uint16_t op=0, om=0, j=0;
   8e870:	52800014 	mov	w20, #0x0                   	// #0
	uint32_t i=0;
   8e874:	290effff 	stp	wzr, wzr, [sp, #116]
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8e878:	290fffff 	stp	wzr, wzr, [sp, #124]
   8e87c:	29117fff 	stp	wzr, wzr, [sp, #136]
   8e880:	29127fff 	stp	wzr, wzr, [sp, #144]
   8e884:	b9009bff 	str	wzr, [sp, #152]
		args[0]=disasm_arg_VtS; args[1]=disasm_arg_offs; args[2]=disasm_arg_XnS; args[3]=disasm_arg_offe; 
   8e888:	b902c3e2 	str	w2, [sp, #704]
   8e88c:	a9435bf5 	ldp	x21, x22, [sp, #48]
   8e890:	17ffdcf4 	b	85c60 <disasm+0x1c80>
		names="st1\0ld1\0";
   8e894:	b0000023 	adrp	x3, 93000 <sd_init+0x1470>
		op=((ic32_22)&0x1); q=((ic32_30)&0x1); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8e898:	12001059 	and	w25, w2, #0x1f
		names="st1\0ld1\0";
   8e89c:	91162063 	add	x3, x3, #0x588
		args[0]=disasm_arg_VtD; args[1]=disasm_arg_offs; args[2]=disasm_arg_XnS; args[3]=disasm_arg_offe; 
   8e8a0:	52852682 	mov	w2, #0x2934                	// #10548
		op=((ic32_22)&0x1); q=((ic32_30)&0x1); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8e8a4:	1200101a 	and	w26, w0, #0x1f
		args[0]=disasm_arg_VtD; args[1]=disasm_arg_offs; args[2]=disasm_arg_XnS; args[3]=disasm_arg_offe; 
   8e8a8:	72a56542 	movk	w2, #0x2b2a, lsl #16
		op=((ic32_22)&0x1); q=((ic32_30)&0x1); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8e8ac:	120000e1 	and	w1, w7, #0x1
   8e8b0:	12000098 	and	w24, w4, #0x1
		names="st1\0ld1\0";
   8e8b4:	91318060 	add	x0, x3, #0xc60
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8e8b8:	52800017 	mov	w23, #0x0                   	// #0
   8e8bc:	5280001b 	mov	w27, #0x0                   	// #0
	uint16_t op=0, om=0, j=0;
   8e8c0:	52800014 	mov	w20, #0x0                   	// #0
	uint32_t i=0;
   8e8c4:	290effff 	stp	wzr, wzr, [sp, #116]
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8e8c8:	290fffff 	stp	wzr, wzr, [sp, #124]
   8e8cc:	29117fff 	stp	wzr, wzr, [sp, #136]
   8e8d0:	29127fff 	stp	wzr, wzr, [sp, #144]
   8e8d4:	b9009bff 	str	wzr, [sp, #152]
		args[0]=disasm_arg_VtD; args[1]=disasm_arg_offs; args[2]=disasm_arg_XnS; args[3]=disasm_arg_offe; 
   8e8d8:	b902c3e2 	str	w2, [sp, #704]
   8e8dc:	a9435bf5 	ldp	x21, x22, [sp, #48]
   8e8e0:	17ffdce0 	b	85c60 <disasm+0x1c80>
		names="st3\0ld3\0";
   8e8e4:	b0000023 	adrp	x3, 93000 <sd_init+0x1470>
		op=((ic32_22)&0x1); q=((ic32_30)&0x1); s=((ic32_12)&0x1); z=((ic32_10)&0x3); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8e8e8:	12001059 	and	w25, w2, #0x1f
		names="st3\0ld3\0";
   8e8ec:	91162063 	add	x3, x3, #0x588
		args[0]=disasm_arg_Vt3H; args[1]=disasm_arg_offs; args[2]=disasm_arg_XnS; args[3]=disasm_arg_offe; 
   8e8f0:	52852742 	mov	w2, #0x293a                	// #10554
		op=((ic32_22)&0x1); q=((ic32_30)&0x1); s=((ic32_12)&0x1); z=((ic32_10)&0x3); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8e8f4:	12000697 	and	w23, w20, #0x3
   8e8f8:	1200101a 	and	w26, w0, #0x1f
		args[0]=disasm_arg_Vt3H; args[1]=disasm_arg_offs; args[2]=disasm_arg_XnS; args[3]=disasm_arg_offe; 
   8e8fc:	72a56542 	movk	w2, #0x2b2a, lsl #16
		op=((ic32_22)&0x1); q=((ic32_30)&0x1); s=((ic32_12)&0x1); z=((ic32_10)&0x3); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8e900:	120000e1 	and	w1, w7, #0x1
   8e904:	12000098 	and	w24, w4, #0x1
   8e908:	1200015b 	and	w27, w10, #0x1
		names="st3\0ld3\0";
   8e90c:	91330060 	add	x0, x3, #0xcc0
	uint16_t op=0, om=0, j=0;
   8e910:	52800014 	mov	w20, #0x0                   	// #0
	uint32_t i=0;
   8e914:	290effff 	stp	wzr, wzr, [sp, #116]
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8e918:	290fffff 	stp	wzr, wzr, [sp, #124]
   8e91c:	29117fff 	stp	wzr, wzr, [sp, #136]
   8e920:	29127fff 	stp	wzr, wzr, [sp, #144]
   8e924:	b9009bff 	str	wzr, [sp, #152]
		args[0]=disasm_arg_Vt3H; args[1]=disasm_arg_offs; args[2]=disasm_arg_XnS; args[3]=disasm_arg_offe; 
   8e928:	b902c3e2 	str	w2, [sp, #704]
   8e92c:	a9435bf5 	ldp	x21, x22, [sp, #48]
   8e930:	17ffdccc 	b	85c60 <disasm+0x1c80>
		names="st1\0ld1\0";
   8e934:	b0000023 	adrp	x3, 93000 <sd_init+0x1470>
		op=((ic32_22)&0x1); q=((ic32_30)&0x1); s=((ic32_12)&0x1); z=((ic32_10)&0x3); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8e938:	12001059 	and	w25, w2, #0x1f
		names="st1\0ld1\0";
   8e93c:	91162063 	add	x3, x3, #0x588
		args[0]=disasm_arg_VtH; args[1]=disasm_arg_offs; args[2]=disasm_arg_XnS; args[3]=disasm_arg_offe; 
   8e940:	52852642 	mov	w2, #0x2932                	// #10546
		op=((ic32_22)&0x1); q=((ic32_30)&0x1); s=((ic32_12)&0x1); z=((ic32_10)&0x3); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8e944:	12000697 	and	w23, w20, #0x3
   8e948:	1200101a 	and	w26, w0, #0x1f
		args[0]=disasm_arg_VtH; args[1]=disasm_arg_offs; args[2]=disasm_arg_XnS; args[3]=disasm_arg_offe; 
   8e94c:	72a56542 	movk	w2, #0x2b2a, lsl #16
		op=((ic32_22)&0x1); q=((ic32_30)&0x1); s=((ic32_12)&0x1); z=((ic32_10)&0x3); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8e950:	120000e1 	and	w1, w7, #0x1
   8e954:	12000098 	and	w24, w4, #0x1
   8e958:	1200015b 	and	w27, w10, #0x1
		names="st1\0ld1\0";
   8e95c:	91318060 	add	x0, x3, #0xc60
	uint16_t op=0, om=0, j=0;
   8e960:	52800014 	mov	w20, #0x0                   	// #0
	uint32_t i=0;
   8e964:	290effff 	stp	wzr, wzr, [sp, #116]
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8e968:	290fffff 	stp	wzr, wzr, [sp, #124]
   8e96c:	29117fff 	stp	wzr, wzr, [sp, #136]
   8e970:	29127fff 	stp	wzr, wzr, [sp, #144]
   8e974:	b9009bff 	str	wzr, [sp, #152]
		args[0]=disasm_arg_VtH; args[1]=disasm_arg_offs; args[2]=disasm_arg_XnS; args[3]=disasm_arg_offe; 
   8e978:	b902c3e2 	str	w2, [sp, #704]
   8e97c:	a9435bf5 	ldp	x21, x22, [sp, #48]
   8e980:	17ffdcb8 	b	85c60 <disasm+0x1c80>
		names="st3\0ld3\0";
   8e984:	b0000023 	adrp	x3, 93000 <sd_init+0x1470>
		op=((ic32_22)&0x1); q=((ic32_30)&0x1); s=((ic32_12)&0x1); z=((ic32_10)&0x3); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8e988:	12001059 	and	w25, w2, #0x1f
		names="st3\0ld3\0";
   8e98c:	91162063 	add	x3, x3, #0x588
		args[0]=disasm_arg_Vt3B; args[1]=disasm_arg_offs; args[2]=disasm_arg_XnS; args[3]=disasm_arg_offe; 
   8e990:	52852722 	mov	w2, #0x2939                	// #10553
		op=((ic32_22)&0x1); q=((ic32_30)&0x1); s=((ic32_12)&0x1); z=((ic32_10)&0x3); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8e994:	12000697 	and	w23, w20, #0x3
   8e998:	1200101a 	and	w26, w0, #0x1f
		args[0]=disasm_arg_Vt3B; args[1]=disasm_arg_offs; args[2]=disasm_arg_XnS; args[3]=disasm_arg_offe; 
   8e99c:	72a56542 	movk	w2, #0x2b2a, lsl #16
		op=((ic32_22)&0x1); q=((ic32_30)&0x1); s=((ic32_12)&0x1); z=((ic32_10)&0x3); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8e9a0:	120000e1 	and	w1, w7, #0x1
   8e9a4:	12000098 	and	w24, w4, #0x1
   8e9a8:	1200015b 	and	w27, w10, #0x1
		names="st3\0ld3\0";
   8e9ac:	91330060 	add	x0, x3, #0xcc0
	uint16_t op=0, om=0, j=0;
   8e9b0:	52800014 	mov	w20, #0x0                   	// #0
	uint32_t i=0;
   8e9b4:	290effff 	stp	wzr, wzr, [sp, #116]
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8e9b8:	290fffff 	stp	wzr, wzr, [sp, #124]
   8e9bc:	29117fff 	stp	wzr, wzr, [sp, #136]
   8e9c0:	29127fff 	stp	wzr, wzr, [sp, #144]
   8e9c4:	b9009bff 	str	wzr, [sp, #152]
		args[0]=disasm_arg_Vt3B; args[1]=disasm_arg_offs; args[2]=disasm_arg_XnS; args[3]=disasm_arg_offe; 
   8e9c8:	b902c3e2 	str	w2, [sp, #704]
   8e9cc:	a9435bf5 	ldp	x21, x22, [sp, #48]
   8e9d0:	17ffdca4 	b	85c60 <disasm+0x1c80>
		names="st1\0ld1\0";
   8e9d4:	b0000023 	adrp	x3, 93000 <sd_init+0x1470>
		op=((ic32_22)&0x1); q=((ic32_30)&0x1); s=((ic32_12)&0x1); z=((ic32_10)&0x3); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8e9d8:	12001059 	and	w25, w2, #0x1f
		names="st1\0ld1\0";
   8e9dc:	91162063 	add	x3, x3, #0x588
		args[0]=disasm_arg_VtB; args[1]=disasm_arg_offs; args[2]=disasm_arg_XnS; args[3]=disasm_arg_offe; 
   8e9e0:	52852622 	mov	w2, #0x2931                	// #10545
		op=((ic32_22)&0x1); q=((ic32_30)&0x1); s=((ic32_12)&0x1); z=((ic32_10)&0x3); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8e9e4:	12000697 	and	w23, w20, #0x3
   8e9e8:	1200101a 	and	w26, w0, #0x1f
		args[0]=disasm_arg_VtB; args[1]=disasm_arg_offs; args[2]=disasm_arg_XnS; args[3]=disasm_arg_offe; 
   8e9ec:	72a56542 	movk	w2, #0x2b2a, lsl #16
		op=((ic32_22)&0x1); q=((ic32_30)&0x1); s=((ic32_12)&0x1); z=((ic32_10)&0x3); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8e9f0:	120000e1 	and	w1, w7, #0x1
   8e9f4:	12000098 	and	w24, w4, #0x1
   8e9f8:	1200015b 	and	w27, w10, #0x1
		names="st1\0ld1\0";
   8e9fc:	91318060 	add	x0, x3, #0xc60
	uint16_t op=0, om=0, j=0;
   8ea00:	52800014 	mov	w20, #0x0                   	// #0
	uint32_t i=0;
   8ea04:	290effff 	stp	wzr, wzr, [sp, #116]
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8ea08:	290fffff 	stp	wzr, wzr, [sp, #124]
   8ea0c:	29117fff 	stp	wzr, wzr, [sp, #136]
   8ea10:	29127fff 	stp	wzr, wzr, [sp, #144]
   8ea14:	b9009bff 	str	wzr, [sp, #152]
		args[0]=disasm_arg_VtB; args[1]=disasm_arg_offs; args[2]=disasm_arg_XnS; args[3]=disasm_arg_offe; 
   8ea18:	b902c3e2 	str	w2, [sp, #704]
   8ea1c:	a9435bf5 	ldp	x21, x22, [sp, #48]
   8ea20:	17ffdc90 	b	85c60 <disasm+0x1c80>
		names="ld4r\0";
   8ea24:	b0000021 	adrp	x1, 93000 <sd_init+0x1470>
   8ea28:	91162021 	add	x1, x1, #0x588
		q=((ic32_30)&0x1); z=((ic32_10)&0x3); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8ea2c:	1200101a 	and	w26, w0, #0x1f
		names="ld4r\0";
   8ea30:	9132e020 	add	x0, x1, #0xcb8
		args[0]=disasm_arg_VtT; args[1]=disasm_arg_Vt2T; args[2]=disasm_arg_Vt3T; args[3]=disasm_arg_Vt4T; args[4]=disasm_arg_offs; args[5]=disasm_arg_XnS; args[6]=disasm_arg_offe; 
   8ea34:	5284c4a1 	mov	w1, #0x2625                	// #9765
		q=((ic32_30)&0x1); z=((ic32_10)&0x3); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8ea38:	12000697 	and	w23, w20, #0x3
		args[0]=disasm_arg_VtT; args[1]=disasm_arg_Vt2T; args[2]=disasm_arg_Vt3T; args[3]=disasm_arg_Vt4T; args[4]=disasm_arg_offs; args[5]=disasm_arg_XnS; args[6]=disasm_arg_offe; 
   8ea3c:	72a504e1 	movk	w1, #0x2827, lsl #16
		q=((ic32_30)&0x1); z=((ic32_10)&0x3); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8ea40:	12001059 	and	w25, w2, #0x1f
		args[0]=disasm_arg_VtT; args[1]=disasm_arg_Vt2T; args[2]=disasm_arg_Vt3T; args[3]=disasm_arg_Vt4T; args[4]=disasm_arg_offs; args[5]=disasm_arg_XnS; args[6]=disasm_arg_offe; 
   8ea44:	52854523 	mov	w3, #0x2a29                	// #10793
   8ea48:	52800562 	mov	w2, #0x2b                  	// #43
		q=((ic32_30)&0x1); z=((ic32_10)&0x3); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8ea4c:	12000098 	and	w24, w4, #0x1
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8ea50:	5280001b 	mov	w27, #0x0                   	// #0
	uint16_t op=0, om=0, j=0;
   8ea54:	52800014 	mov	w20, #0x0                   	// #0
	uint32_t i=0;
   8ea58:	290effff 	stp	wzr, wzr, [sp, #116]
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8ea5c:	290fffff 	stp	wzr, wzr, [sp, #124]
   8ea60:	29117fff 	stp	wzr, wzr, [sp, #136]
   8ea64:	29127fff 	stp	wzr, wzr, [sp, #144]
   8ea68:	b9009bff 	str	wzr, [sp, #152]
		args[0]=disasm_arg_VtT; args[1]=disasm_arg_Vt2T; args[2]=disasm_arg_Vt3T; args[3]=disasm_arg_Vt4T; args[4]=disasm_arg_offs; args[5]=disasm_arg_XnS; args[6]=disasm_arg_offe; 
   8ea6c:	b902c3e1 	str	w1, [sp, #704]
	uint16_t op=0, om=0, j=0;
   8ea70:	52800001 	mov	w1, #0x0                   	// #0
		args[0]=disasm_arg_VtT; args[1]=disasm_arg_Vt2T; args[2]=disasm_arg_Vt3T; args[3]=disasm_arg_Vt4T; args[4]=disasm_arg_offs; args[5]=disasm_arg_XnS; args[6]=disasm_arg_offe; 
   8ea74:	79058be3 	strh	w3, [sp, #708]
   8ea78:	390b1be2 	strb	w2, [sp, #710]
   8ea7c:	a9435bf5 	ldp	x21, x22, [sp, #48]
   8ea80:	17ffdc78 	b	85c60 <disasm+0x1c80>
		names="ld2r\0";
   8ea84:	b0000021 	adrp	x1, 93000 <sd_init+0x1470>
		args[0]=disasm_arg_VtT; args[1]=disasm_arg_Vt2T; args[2]=disasm_arg_offs; args[3]=disasm_arg_XnS; args[4]=disasm_arg_offe; 
   8ea88:	5284c4a3 	mov	w3, #0x2625                	// #9765
		names="ld2r\0";
   8ea8c:	91162021 	add	x1, x1, #0x588
		q=((ic32_30)&0x1); z=((ic32_10)&0x3); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8ea90:	12000697 	and	w23, w20, #0x3
   8ea94:	12001059 	and	w25, w2, #0x1f
   8ea98:	1200101a 	and	w26, w0, #0x1f
		args[0]=disasm_arg_VtT; args[1]=disasm_arg_Vt2T; args[2]=disasm_arg_offs; args[3]=disasm_arg_XnS; args[4]=disasm_arg_offe; 
   8ea9c:	72a54523 	movk	w3, #0x2a29, lsl #16
		names="ld2r\0";
   8eaa0:	9132c020 	add	x0, x1, #0xcb0
		args[0]=disasm_arg_VtT; args[1]=disasm_arg_Vt2T; args[2]=disasm_arg_offs; args[3]=disasm_arg_XnS; args[4]=disasm_arg_offe; 
   8eaa4:	52800562 	mov	w2, #0x2b                  	// #43
		q=((ic32_30)&0x1); z=((ic32_10)&0x3); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8eaa8:	12000098 	and	w24, w4, #0x1
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8eaac:	5280001b 	mov	w27, #0x0                   	// #0
	uint16_t op=0, om=0, j=0;
   8eab0:	52800014 	mov	w20, #0x0                   	// #0
   8eab4:	52800001 	mov	w1, #0x0                   	// #0
	uint32_t i=0;
   8eab8:	290effff 	stp	wzr, wzr, [sp, #116]
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8eabc:	290fffff 	stp	wzr, wzr, [sp, #124]
   8eac0:	29117fff 	stp	wzr, wzr, [sp, #136]
   8eac4:	29127fff 	stp	wzr, wzr, [sp, #144]
   8eac8:	b9009bff 	str	wzr, [sp, #152]
		args[0]=disasm_arg_VtT; args[1]=disasm_arg_Vt2T; args[2]=disasm_arg_offs; args[3]=disasm_arg_XnS; args[4]=disasm_arg_offe; 
   8eacc:	b902c3e3 	str	w3, [sp, #704]
   8ead0:	390b13e2 	strb	w2, [sp, #708]
   8ead4:	a9435bf5 	ldp	x21, x22, [sp, #48]
   8ead8:	17ffdc62 	b	85c60 <disasm+0x1c80>
		names="ld3r\0";
   8eadc:	b0000021 	adrp	x1, 93000 <sd_init+0x1470>
		args[0]=disasm_arg_VtT; args[1]=disasm_arg_Vt2T; args[2]=disasm_arg_Vt3T; args[3]=disasm_arg_offs; args[4]=disasm_arg_XnS; args[5]=disasm_arg_offe; 
   8eae0:	5284c4a3 	mov	w3, #0x2625                	// #9765
		names="ld3r\0";
   8eae4:	91162021 	add	x1, x1, #0x588
		q=((ic32_30)&0x1); z=((ic32_10)&0x3); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8eae8:	12000697 	and	w23, w20, #0x3
   8eaec:	12001059 	and	w25, w2, #0x1f
   8eaf0:	1200101a 	and	w26, w0, #0x1f
		args[0]=disasm_arg_VtT; args[1]=disasm_arg_Vt2T; args[2]=disasm_arg_Vt3T; args[3]=disasm_arg_offs; args[4]=disasm_arg_XnS; args[5]=disasm_arg_offe; 
   8eaf4:	72a524e3 	movk	w3, #0x2927, lsl #16
		names="ld3r\0";
   8eaf8:	9132a020 	add	x0, x1, #0xca8
		args[0]=disasm_arg_VtT; args[1]=disasm_arg_Vt2T; args[2]=disasm_arg_Vt3T; args[3]=disasm_arg_offs; args[4]=disasm_arg_XnS; args[5]=disasm_arg_offe; 
   8eafc:	52856542 	mov	w2, #0x2b2a                	// #11050
		q=((ic32_30)&0x1); z=((ic32_10)&0x3); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8eb00:	12000098 	and	w24, w4, #0x1
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8eb04:	5280001b 	mov	w27, #0x0                   	// #0
	uint16_t op=0, om=0, j=0;
   8eb08:	52800014 	mov	w20, #0x0                   	// #0
   8eb0c:	52800001 	mov	w1, #0x0                   	// #0
	uint32_t i=0;
   8eb10:	290effff 	stp	wzr, wzr, [sp, #116]
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8eb14:	290fffff 	stp	wzr, wzr, [sp, #124]
   8eb18:	29117fff 	stp	wzr, wzr, [sp, #136]
   8eb1c:	29127fff 	stp	wzr, wzr, [sp, #144]
   8eb20:	b9009bff 	str	wzr, [sp, #152]
		args[0]=disasm_arg_VtT; args[1]=disasm_arg_Vt2T; args[2]=disasm_arg_Vt3T; args[3]=disasm_arg_offs; args[4]=disasm_arg_XnS; args[5]=disasm_arg_offe; 
   8eb24:	b902c3e3 	str	w3, [sp, #704]
   8eb28:	79058be2 	strh	w2, [sp, #708]
   8eb2c:	a9435bf5 	ldp	x21, x22, [sp, #48]
   8eb30:	17ffdc4c 	b	85c60 <disasm+0x1c80>
		names="ld1r\0";
   8eb34:	b0000021 	adrp	x1, 93000 <sd_init+0x1470>
		q=((ic32_30)&0x1); z=((ic32_10)&0x3); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8eb38:	12001059 	and	w25, w2, #0x1f
		names="ld1r\0";
   8eb3c:	91162021 	add	x1, x1, #0x588
		args[0]=disasm_arg_VtT; args[1]=disasm_arg_offs; args[2]=disasm_arg_XnS; args[3]=disasm_arg_offe; 
   8eb40:	528524a2 	mov	w2, #0x2925                	// #10533
		q=((ic32_30)&0x1); z=((ic32_10)&0x3); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8eb44:	12000697 	and	w23, w20, #0x3
   8eb48:	1200101a 	and	w26, w0, #0x1f
		args[0]=disasm_arg_VtT; args[1]=disasm_arg_offs; args[2]=disasm_arg_XnS; args[3]=disasm_arg_offe; 
   8eb4c:	72a56542 	movk	w2, #0x2b2a, lsl #16
		names="ld1r\0";
   8eb50:	91328020 	add	x0, x1, #0xca0
		q=((ic32_30)&0x1); z=((ic32_10)&0x3); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8eb54:	12000098 	and	w24, w4, #0x1
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8eb58:	5280001b 	mov	w27, #0x0                   	// #0
	uint16_t op=0, om=0, j=0;
   8eb5c:	52800014 	mov	w20, #0x0                   	// #0
   8eb60:	52800001 	mov	w1, #0x0                   	// #0
	uint32_t i=0;
   8eb64:	290effff 	stp	wzr, wzr, [sp, #116]
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8eb68:	290fffff 	stp	wzr, wzr, [sp, #124]
   8eb6c:	29117fff 	stp	wzr, wzr, [sp, #136]
   8eb70:	29127fff 	stp	wzr, wzr, [sp, #144]
   8eb74:	b9009bff 	str	wzr, [sp, #152]
		args[0]=disasm_arg_VtT; args[1]=disasm_arg_offs; args[2]=disasm_arg_XnS; args[3]=disasm_arg_offe; 
   8eb78:	b902c3e2 	str	w2, [sp, #704]
   8eb7c:	a9435bf5 	ldp	x21, x22, [sp, #48]
   8eb80:	17ffdc38 	b	85c60 <disasm+0x1c80>
		names="st2\0st1\0ld2\0ld1\0";
   8eb84:	b0000023 	adrp	x3, 93000 <sd_init+0x1470>
   8eb88:	91162063 	add	x3, x3, #0x588
		op=((ic32_21)&0x2)|((ic32_13)&0x1); q=((ic32_30)&0x1); m=((ic32_16)&0x1f); z=((ic32_10)&0x3); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8eb8c:	121f0181 	and	w1, w12, #0x2
   8eb90:	1200016b 	and	w11, w11, #0x1
   8eb94:	1200101a 	and	w26, w0, #0x1f
		names="st2\0st1\0ld2\0ld1\0";
   8eb98:	91322060 	add	x0, x3, #0xc88
		args[0]=disasm_arg_VtT; args[1]=disasm_arg_Vt2T; args[2]=disasm_arg_offs; args[3]=disasm_arg_XnS; args[4]=disasm_arg_offe; args[5]=disasm_arg_Xm; 
   8eb9c:	5284c4a3 	mov	w3, #0x2625                	// #9765
		op=((ic32_21)&0x2)|((ic32_13)&0x1); q=((ic32_30)&0x1); m=((ic32_16)&0x1f); z=((ic32_10)&0x3); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8eba0:	12000098 	and	w24, w4, #0x1
   8eba4:	12000697 	and	w23, w20, #0x3
   8eba8:	120010a4 	and	w4, w5, #0x1f
   8ebac:	12001059 	and	w25, w2, #0x1f
		args[0]=disasm_arg_VtT; args[1]=disasm_arg_Vt2T; args[2]=disasm_arg_offs; args[3]=disasm_arg_XnS; args[4]=disasm_arg_offe; args[5]=disasm_arg_Xm; 
   8ebb0:	72a54523 	movk	w3, #0x2a29, lsl #16
   8ebb4:	5285a562 	mov	w2, #0x2d2b                	// #11563
		op=((ic32_21)&0x2)|((ic32_13)&0x1); q=((ic32_30)&0x1); m=((ic32_16)&0x1f); z=((ic32_10)&0x3); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8ebb8:	2a0b0021 	orr	w1, w1, w11
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8ebbc:	5280001b 	mov	w27, #0x0                   	// #0
	uint16_t op=0, om=0, j=0;
   8ebc0:	52800014 	mov	w20, #0x0                   	// #0
	uint32_t i=0;
   8ebc4:	290effff 	stp	wzr, wzr, [sp, #116]
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8ebc8:	290fffe4 	stp	w4, wzr, [sp, #124]
   8ebcc:	29117fff 	stp	wzr, wzr, [sp, #136]
   8ebd0:	29127fff 	stp	wzr, wzr, [sp, #144]
   8ebd4:	b9009bff 	str	wzr, [sp, #152]
		args[0]=disasm_arg_VtT; args[1]=disasm_arg_Vt2T; args[2]=disasm_arg_offs; args[3]=disasm_arg_XnS; args[4]=disasm_arg_offe; args[5]=disasm_arg_Xm; 
   8ebd8:	b902c3e3 	str	w3, [sp, #704]
   8ebdc:	79058be2 	strh	w2, [sp, #708]
   8ebe0:	a9435bf5 	ldp	x21, x22, [sp, #48]
   8ebe4:	17ffdc1f 	b	85c60 <disasm+0x1c80>
		op=((ic32_21)&0x2)|((ic32_13)&0x1); q=((ic32_30)&0x1); m=((ic32_16)&0x1f); z=((ic32_10)&0x3); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8ebe8:	12000098 	and	w24, w4, #0x1
   8ebec:	120010a4 	and	w4, w5, #0x1f
   8ebf0:	121f0181 	and	w1, w12, #0x2
   8ebf4:	1200016b 	and	w11, w11, #0x1
		names="st3\0st1\0ld3\0ld1\0";
   8ebf8:	b0000023 	adrp	x3, 93000 <sd_init+0x1470>
   8ebfc:	91162063 	add	x3, x3, #0x588
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8ec00:	290fffe4 	stp	w4, wzr, [sp, #124]
		args[0]=disasm_arg_VtT; args[1]=disasm_arg_Vt2T; args[2]=disasm_arg_Vt3T; args[3]=disasm_arg_offs; args[4]=disasm_arg_XnS; args[5]=disasm_arg_offe; args[6]=disasm_arg_Xm; 
   8ec04:	5284c4a4 	mov	w4, #0x2625                	// #9765
		op=((ic32_21)&0x2)|((ic32_13)&0x1); q=((ic32_30)&0x1); m=((ic32_16)&0x1f); z=((ic32_10)&0x3); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8ec08:	12000697 	and	w23, w20, #0x3
   8ec0c:	12001059 	and	w25, w2, #0x1f
   8ec10:	1200101a 	and	w26, w0, #0x1f
		args[0]=disasm_arg_VtT; args[1]=disasm_arg_Vt2T; args[2]=disasm_arg_Vt3T; args[3]=disasm_arg_offs; args[4]=disasm_arg_XnS; args[5]=disasm_arg_offe; args[6]=disasm_arg_Xm; 
   8ec14:	528005a2 	mov	w2, #0x2d                  	// #45
		names="st3\0st1\0ld3\0ld1\0";
   8ec18:	9131c060 	add	x0, x3, #0xc70
		args[0]=disasm_arg_VtT; args[1]=disasm_arg_Vt2T; args[2]=disasm_arg_Vt3T; args[3]=disasm_arg_offs; args[4]=disasm_arg_XnS; args[5]=disasm_arg_offe; args[6]=disasm_arg_Xm; 
   8ec1c:	72a524e4 	movk	w4, #0x2927, lsl #16
   8ec20:	52856543 	mov	w3, #0x2b2a                	// #11050
		op=((ic32_21)&0x2)|((ic32_13)&0x1); q=((ic32_30)&0x1); m=((ic32_16)&0x1f); z=((ic32_10)&0x3); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8ec24:	2a0b0021 	orr	w1, w1, w11
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8ec28:	5280001b 	mov	w27, #0x0                   	// #0
	uint16_t op=0, om=0, j=0;
   8ec2c:	52800014 	mov	w20, #0x0                   	// #0
	uint32_t i=0;
   8ec30:	290effff 	stp	wzr, wzr, [sp, #116]
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8ec34:	29117fff 	stp	wzr, wzr, [sp, #136]
   8ec38:	29127fff 	stp	wzr, wzr, [sp, #144]
   8ec3c:	b9009bff 	str	wzr, [sp, #152]
		args[0]=disasm_arg_VtT; args[1]=disasm_arg_Vt2T; args[2]=disasm_arg_Vt3T; args[3]=disasm_arg_offs; args[4]=disasm_arg_XnS; args[5]=disasm_arg_offe; args[6]=disasm_arg_Xm; 
   8ec40:	b902c3e4 	str	w4, [sp, #704]
   8ec44:	79058be3 	strh	w3, [sp, #708]
   8ec48:	390b1be2 	strb	w2, [sp, #710]
   8ec4c:	a9435bf5 	ldp	x21, x22, [sp, #48]
   8ec50:	17ffdc04 	b	85c60 <disasm+0x1c80>
		names="st1\0ld1\0";
   8ec54:	b0000023 	adrp	x3, 93000 <sd_init+0x1470>
   8ec58:	91162063 	add	x3, x3, #0x588
		op=((ic32_22)&0x1); q=((ic32_30)&0x1); m=((ic32_16)&0x1f); z=((ic32_10)&0x3); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8ec5c:	1200101a 	and	w26, w0, #0x1f
		names="st1\0ld1\0";
   8ec60:	91318060 	add	x0, x3, #0xc60
		args[0]=disasm_arg_VtT; args[1]=disasm_arg_offs; args[2]=disasm_arg_XnS; args[3]=disasm_arg_offe; args[4]=disasm_arg_Xm; 
   8ec64:	528524a3 	mov	w3, #0x2925                	// #10533
		op=((ic32_22)&0x1); q=((ic32_30)&0x1); m=((ic32_16)&0x1f); z=((ic32_10)&0x3); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8ec68:	12000098 	and	w24, w4, #0x1
   8ec6c:	12000697 	and	w23, w20, #0x3
   8ec70:	120010a4 	and	w4, w5, #0x1f
   8ec74:	12001059 	and	w25, w2, #0x1f
		args[0]=disasm_arg_VtT; args[1]=disasm_arg_offs; args[2]=disasm_arg_XnS; args[3]=disasm_arg_offe; args[4]=disasm_arg_Xm; 
   8ec78:	72a56543 	movk	w3, #0x2b2a, lsl #16
   8ec7c:	528005a2 	mov	w2, #0x2d                  	// #45
		op=((ic32_22)&0x1); q=((ic32_30)&0x1); m=((ic32_16)&0x1f); z=((ic32_10)&0x3); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8ec80:	120000e1 	and	w1, w7, #0x1
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8ec84:	5280001b 	mov	w27, #0x0                   	// #0
	uint16_t op=0, om=0, j=0;
   8ec88:	52800014 	mov	w20, #0x0                   	// #0
	uint32_t i=0;
   8ec8c:	290effff 	stp	wzr, wzr, [sp, #116]
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8ec90:	290fffe4 	stp	w4, wzr, [sp, #124]
   8ec94:	29117fff 	stp	wzr, wzr, [sp, #136]
   8ec98:	29127fff 	stp	wzr, wzr, [sp, #144]
   8ec9c:	b9009bff 	str	wzr, [sp, #152]
		args[0]=disasm_arg_VtT; args[1]=disasm_arg_offs; args[2]=disasm_arg_XnS; args[3]=disasm_arg_offe; args[4]=disasm_arg_Xm; 
   8eca0:	b902c3e3 	str	w3, [sp, #704]
   8eca4:	390b13e2 	strb	w2, [sp, #708]
   8eca8:	a9435bf5 	ldp	x21, x22, [sp, #48]
   8ecac:	17ffdbed 	b	85c60 <disasm+0x1c80>
		op=((ic32_21)&0x2)|((ic32_13)&0x1); q=((ic32_30)&0x1); m=((ic32_16)&0x1f); z=((ic32_10)&0x3); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8ecb0:	12001059 	and	w25, w2, #0x1f
		args[0]=disasm_arg_VtT; args[1]=disasm_arg_Vt2T; args[2]=disasm_arg_Vt3T; args[3]=disasm_arg_Vt4T; args[4]=disasm_arg_offs; args[5]=disasm_arg_XnS; args[6]=disasm_arg_offe; args[7]=disasm_arg_Xm; 
   8ecb4:	d284c4a2 	mov	x2, #0x2625                	// #9765
   8ecb8:	f2a504e2 	movk	x2, #0x2827, lsl #16
		op=((ic32_21)&0x2)|((ic32_13)&0x1); q=((ic32_30)&0x1); m=((ic32_16)&0x1f); z=((ic32_10)&0x3); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8ecbc:	121f0181 	and	w1, w12, #0x2
   8ecc0:	1200016b 	and	w11, w11, #0x1
		names="st4\0st1\0ld4\0ld1\0";
   8ecc4:	b0000023 	adrp	x3, 93000 <sd_init+0x1470>
		args[0]=disasm_arg_VtT; args[1]=disasm_arg_Vt2T; args[2]=disasm_arg_Vt3T; args[3]=disasm_arg_Vt4T; args[4]=disasm_arg_offs; args[5]=disasm_arg_XnS; args[6]=disasm_arg_offe; args[7]=disasm_arg_Xm; 
   8ecc8:	f2c54522 	movk	x2, #0x2a29, lsl #32
		names="st4\0st1\0ld4\0ld1\0";
   8eccc:	91162063 	add	x3, x3, #0x588
		op=((ic32_21)&0x2)|((ic32_13)&0x1); q=((ic32_30)&0x1); m=((ic32_16)&0x1f); z=((ic32_10)&0x3); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8ecd0:	12000098 	and	w24, w4, #0x1
   8ecd4:	12000697 	and	w23, w20, #0x3
   8ecd8:	120010a4 	and	w4, w5, #0x1f
   8ecdc:	1200101a 	and	w26, w0, #0x1f
		args[0]=disasm_arg_VtT; args[1]=disasm_arg_Vt2T; args[2]=disasm_arg_Vt3T; args[3]=disasm_arg_Vt4T; args[4]=disasm_arg_offs; args[5]=disasm_arg_XnS; args[6]=disasm_arg_offe; args[7]=disasm_arg_Xm; 
   8ece0:	f2e5a562 	movk	x2, #0x2d2b, lsl #48
		op=((ic32_21)&0x2)|((ic32_13)&0x1); q=((ic32_30)&0x1); m=((ic32_16)&0x1f); z=((ic32_10)&0x3); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8ece4:	2a0b0021 	orr	w1, w1, w11
		names="st4\0st1\0ld4\0ld1\0";
   8ece8:	91312060 	add	x0, x3, #0xc48
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8ecec:	5280001b 	mov	w27, #0x0                   	// #0
	uint16_t op=0, om=0, j=0;
   8ecf0:	52800014 	mov	w20, #0x0                   	// #0
	uint32_t i=0;
   8ecf4:	290effff 	stp	wzr, wzr, [sp, #116]
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8ecf8:	290fffe4 	stp	w4, wzr, [sp, #124]
   8ecfc:	29117fff 	stp	wzr, wzr, [sp, #136]
   8ed00:	29127fff 	stp	wzr, wzr, [sp, #144]
   8ed04:	b9009bff 	str	wzr, [sp, #152]
		args[0]=disasm_arg_VtT; args[1]=disasm_arg_Vt2T; args[2]=disasm_arg_Vt3T; args[3]=disasm_arg_Vt4T; args[4]=disasm_arg_offs; args[5]=disasm_arg_XnS; args[6]=disasm_arg_offe; args[7]=disasm_arg_Xm; 
   8ed08:	f90163e2 	str	x2, [sp, #704]
   8ed0c:	a9435bf5 	ldp	x21, x22, [sp, #48]
   8ed10:	17ffdbd4 	b	85c60 <disasm+0x1c80>
		names="st2\0st1\0ld2\0ld1\0";
   8ed14:	b0000023 	adrp	x3, 93000 <sd_init+0x1470>
   8ed18:	91162063 	add	x3, x3, #0x588
		op=((ic32_21)&0x2)|((ic32_13)&0x1); q=((ic32_30)&0x1); z=((ic32_10)&0x3); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8ed1c:	121f0181 	and	w1, w12, #0x2
   8ed20:	1200016b 	and	w11, w11, #0x1
   8ed24:	1200101a 	and	w26, w0, #0x1f
		names="st2\0st1\0ld2\0ld1\0";
   8ed28:	91322060 	add	x0, x3, #0xc88
		args[0]=disasm_arg_VtT; args[1]=disasm_arg_Vt2T; args[2]=disasm_arg_offs; args[3]=disasm_arg_XnS; args[4]=disasm_arg_offe; args[5]=disasm_arg_Qi2; 
   8ed2c:	5284c4a3 	mov	w3, #0x2625                	// #9765
		op=((ic32_21)&0x2)|((ic32_13)&0x1); q=((ic32_30)&0x1); z=((ic32_10)&0x3); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8ed30:	12000697 	and	w23, w20, #0x3
   8ed34:	12001059 	and	w25, w2, #0x1f
		args[0]=disasm_arg_VtT; args[1]=disasm_arg_Vt2T; args[2]=disasm_arg_offs; args[3]=disasm_arg_XnS; args[4]=disasm_arg_offe; args[5]=disasm_arg_Qi2; 
   8ed38:	72a54523 	movk	w3, #0x2a29, lsl #16
   8ed3c:	5285e562 	mov	w2, #0x2f2b                	// #12075
		op=((ic32_21)&0x2)|((ic32_13)&0x1); q=((ic32_30)&0x1); z=((ic32_10)&0x3); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8ed40:	2a0b0021 	orr	w1, w1, w11
   8ed44:	12000098 	and	w24, w4, #0x1
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8ed48:	5280001b 	mov	w27, #0x0                   	// #0
	uint16_t op=0, om=0, j=0;
   8ed4c:	52800014 	mov	w20, #0x0                   	// #0
	uint32_t i=0;
   8ed50:	290effff 	stp	wzr, wzr, [sp, #116]
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8ed54:	290fffff 	stp	wzr, wzr, [sp, #124]
   8ed58:	29117fff 	stp	wzr, wzr, [sp, #136]
   8ed5c:	29127fff 	stp	wzr, wzr, [sp, #144]
   8ed60:	b9009bff 	str	wzr, [sp, #152]
		args[0]=disasm_arg_VtT; args[1]=disasm_arg_Vt2T; args[2]=disasm_arg_offs; args[3]=disasm_arg_XnS; args[4]=disasm_arg_offe; args[5]=disasm_arg_Qi2; 
   8ed64:	b902c3e3 	str	w3, [sp, #704]
   8ed68:	79058be2 	strh	w2, [sp, #708]
   8ed6c:	a9435bf5 	ldp	x21, x22, [sp, #48]
   8ed70:	17ffdbbc 	b	85c60 <disasm+0x1c80>
		op=((ic32_21)&0x2)|((ic32_13)&0x1); q=((ic32_30)&0x1); z=((ic32_10)&0x3); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8ed74:	121f0181 	and	w1, w12, #0x2
   8ed78:	1200016b 	and	w11, w11, #0x1
		names="st3\0st1\0ld3\0ld1\0";
   8ed7c:	b0000023 	adrp	x3, 93000 <sd_init+0x1470>
		op=((ic32_21)&0x2)|((ic32_13)&0x1); q=((ic32_30)&0x1); z=((ic32_10)&0x3); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8ed80:	12000098 	and	w24, w4, #0x1
		names="st3\0st1\0ld3\0ld1\0";
   8ed84:	91162063 	add	x3, x3, #0x588
		args[0]=disasm_arg_VtT; args[1]=disasm_arg_Vt2T; args[2]=disasm_arg_Vt3T; args[3]=disasm_arg_offs; args[4]=disasm_arg_XnS; args[5]=disasm_arg_offe; args[6]=disasm_arg_Qi3; 
   8ed88:	5284c4a4 	mov	w4, #0x2625                	// #9765
		op=((ic32_21)&0x2)|((ic32_13)&0x1); q=((ic32_30)&0x1); z=((ic32_10)&0x3); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8ed8c:	12000697 	and	w23, w20, #0x3
   8ed90:	12001059 	and	w25, w2, #0x1f
   8ed94:	1200101a 	and	w26, w0, #0x1f
		args[0]=disasm_arg_VtT; args[1]=disasm_arg_Vt2T; args[2]=disasm_arg_Vt3T; args[3]=disasm_arg_offs; args[4]=disasm_arg_XnS; args[5]=disasm_arg_offe; args[6]=disasm_arg_Qi3; 
   8ed98:	72a524e4 	movk	w4, #0x2927, lsl #16
		names="st3\0st1\0ld3\0ld1\0";
   8ed9c:	9131c060 	add	x0, x3, #0xc70
		args[0]=disasm_arg_VtT; args[1]=disasm_arg_Vt2T; args[2]=disasm_arg_Vt3T; args[3]=disasm_arg_offs; args[4]=disasm_arg_XnS; args[5]=disasm_arg_offe; args[6]=disasm_arg_Qi3; 
   8eda0:	528005c2 	mov	w2, #0x2e                  	// #46
   8eda4:	52856543 	mov	w3, #0x2b2a                	// #11050
		op=((ic32_21)&0x2)|((ic32_13)&0x1); q=((ic32_30)&0x1); z=((ic32_10)&0x3); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8eda8:	2a0b0021 	orr	w1, w1, w11
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8edac:	5280001b 	mov	w27, #0x0                   	// #0
	uint16_t op=0, om=0, j=0;
   8edb0:	52800014 	mov	w20, #0x0                   	// #0
	uint32_t i=0;
   8edb4:	290effff 	stp	wzr, wzr, [sp, #116]
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8edb8:	290fffff 	stp	wzr, wzr, [sp, #124]
   8edbc:	29117fff 	stp	wzr, wzr, [sp, #136]
   8edc0:	29127fff 	stp	wzr, wzr, [sp, #144]
   8edc4:	b9009bff 	str	wzr, [sp, #152]
		args[0]=disasm_arg_VtT; args[1]=disasm_arg_Vt2T; args[2]=disasm_arg_Vt3T; args[3]=disasm_arg_offs; args[4]=disasm_arg_XnS; args[5]=disasm_arg_offe; args[6]=disasm_arg_Qi3; 
   8edc8:	b902c3e4 	str	w4, [sp, #704]
   8edcc:	79058be3 	strh	w3, [sp, #708]
   8edd0:	390b1be2 	strb	w2, [sp, #710]
   8edd4:	a9435bf5 	ldp	x21, x22, [sp, #48]
   8edd8:	17ffdba2 	b	85c60 <disasm+0x1c80>
		names="st1\0ld1\0";
   8eddc:	b0000023 	adrp	x3, 93000 <sd_init+0x1470>
   8ede0:	91162063 	add	x3, x3, #0x588
		op=((ic32_22)&0x1); q=((ic32_30)&0x1); z=((ic32_10)&0x3); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8ede4:	1200101a 	and	w26, w0, #0x1f
		names="st1\0ld1\0";
   8ede8:	91318060 	add	x0, x3, #0xc60
		args[0]=disasm_arg_VtT; args[1]=disasm_arg_offs; args[2]=disasm_arg_XnS; args[3]=disasm_arg_offe; args[4]=disasm_arg_Qi1; 
   8edec:	528524a3 	mov	w3, #0x2925                	// #10533
		op=((ic32_22)&0x1); q=((ic32_30)&0x1); z=((ic32_10)&0x3); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8edf0:	12000697 	and	w23, w20, #0x3
   8edf4:	12001059 	and	w25, w2, #0x1f
		args[0]=disasm_arg_VtT; args[1]=disasm_arg_offs; args[2]=disasm_arg_XnS; args[3]=disasm_arg_offe; args[4]=disasm_arg_Qi1; 
   8edf8:	72a56543 	movk	w3, #0x2b2a, lsl #16
   8edfc:	52800602 	mov	w2, #0x30                  	// #48
		op=((ic32_22)&0x1); q=((ic32_30)&0x1); z=((ic32_10)&0x3); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8ee00:	120000e1 	and	w1, w7, #0x1
   8ee04:	12000098 	and	w24, w4, #0x1
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8ee08:	5280001b 	mov	w27, #0x0                   	// #0
	uint16_t op=0, om=0, j=0;
   8ee0c:	52800014 	mov	w20, #0x0                   	// #0
	uint32_t i=0;
   8ee10:	290effff 	stp	wzr, wzr, [sp, #116]
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8ee14:	290fffff 	stp	wzr, wzr, [sp, #124]
   8ee18:	29117fff 	stp	wzr, wzr, [sp, #136]
   8ee1c:	29127fff 	stp	wzr, wzr, [sp, #144]
   8ee20:	b9009bff 	str	wzr, [sp, #152]
		args[0]=disasm_arg_VtT; args[1]=disasm_arg_offs; args[2]=disasm_arg_XnS; args[3]=disasm_arg_offe; args[4]=disasm_arg_Qi1; 
   8ee24:	b902c3e3 	str	w3, [sp, #704]
   8ee28:	390b13e2 	strb	w2, [sp, #708]
   8ee2c:	a9435bf5 	ldp	x21, x22, [sp, #48]
   8ee30:	17ffdb8c 	b	85c60 <disasm+0x1c80>
		op=((ic32_21)&0x2)|((ic32_13)&0x1); q=((ic32_30)&0x1); z=((ic32_10)&0x3); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8ee34:	12001059 	and	w25, w2, #0x1f
		args[0]=disasm_arg_VtT; args[1]=disasm_arg_Vt2T; args[2]=disasm_arg_Vt3T; args[3]=disasm_arg_Vt4T; args[4]=disasm_arg_offs; args[5]=disasm_arg_XnS; args[6]=disasm_arg_offe; args[7]=disasm_arg_Qi; 
   8ee38:	d284c4a2 	mov	x2, #0x2625                	// #9765
   8ee3c:	f2a504e2 	movk	x2, #0x2827, lsl #16
		op=((ic32_21)&0x2)|((ic32_13)&0x1); q=((ic32_30)&0x1); z=((ic32_10)&0x3); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8ee40:	121f0181 	and	w1, w12, #0x2
   8ee44:	1200016b 	and	w11, w11, #0x1
		names="st4\0st1\0ld4\0ld1\0";
   8ee48:	b0000023 	adrp	x3, 93000 <sd_init+0x1470>
		args[0]=disasm_arg_VtT; args[1]=disasm_arg_Vt2T; args[2]=disasm_arg_Vt3T; args[3]=disasm_arg_Vt4T; args[4]=disasm_arg_offs; args[5]=disasm_arg_XnS; args[6]=disasm_arg_offe; args[7]=disasm_arg_Qi; 
   8ee4c:	f2c54522 	movk	x2, #0x2a29, lsl #32
		names="st4\0st1\0ld4\0ld1\0";
   8ee50:	91162063 	add	x3, x3, #0x588
		op=((ic32_21)&0x2)|((ic32_13)&0x1); q=((ic32_30)&0x1); z=((ic32_10)&0x3); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8ee54:	12000697 	and	w23, w20, #0x3
   8ee58:	1200101a 	and	w26, w0, #0x1f
		args[0]=disasm_arg_VtT; args[1]=disasm_arg_Vt2T; args[2]=disasm_arg_Vt3T; args[3]=disasm_arg_Vt4T; args[4]=disasm_arg_offs; args[5]=disasm_arg_XnS; args[6]=disasm_arg_offe; args[7]=disasm_arg_Qi; 
   8ee5c:	f2e58562 	movk	x2, #0x2c2b, lsl #48
		op=((ic32_21)&0x2)|((ic32_13)&0x1); q=((ic32_30)&0x1); z=((ic32_10)&0x3); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8ee60:	2a0b0021 	orr	w1, w1, w11
   8ee64:	12000098 	and	w24, w4, #0x1
		names="st4\0st1\0ld4\0ld1\0";
   8ee68:	91312060 	add	x0, x3, #0xc48
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8ee6c:	5280001b 	mov	w27, #0x0                   	// #0
	uint16_t op=0, om=0, j=0;
   8ee70:	52800014 	mov	w20, #0x0                   	// #0
	uint32_t i=0;
   8ee74:	290effff 	stp	wzr, wzr, [sp, #116]
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8ee78:	290fffff 	stp	wzr, wzr, [sp, #124]
   8ee7c:	29117fff 	stp	wzr, wzr, [sp, #136]
   8ee80:	29127fff 	stp	wzr, wzr, [sp, #144]
   8ee84:	b9009bff 	str	wzr, [sp, #152]
		args[0]=disasm_arg_VtT; args[1]=disasm_arg_Vt2T; args[2]=disasm_arg_Vt3T; args[3]=disasm_arg_Vt4T; args[4]=disasm_arg_offs; args[5]=disasm_arg_XnS; args[6]=disasm_arg_offe; args[7]=disasm_arg_Qi; 
   8ee88:	f90163e2 	str	x2, [sp, #704]
   8ee8c:	a9435bf5 	ldp	x21, x22, [sp, #48]
   8ee90:	17ffdb74 	b	85c60 <disasm+0x1c80>
		names="st2\0st1\0ld2\0ld1\0";
   8ee94:	b0000023 	adrp	x3, 93000 <sd_init+0x1470>
   8ee98:	91162063 	add	x3, x3, #0x588
		op=((ic32_21)&0x2)|((ic32_13)&0x1); q=((ic32_30)&0x1); z=((ic32_10)&0x3); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8ee9c:	121f0181 	and	w1, w12, #0x2
   8eea0:	1200016b 	and	w11, w11, #0x1
   8eea4:	1200101a 	and	w26, w0, #0x1f
		names="st2\0st1\0ld2\0ld1\0";
   8eea8:	91322060 	add	x0, x3, #0xc88
		args[0]=disasm_arg_VtT; args[1]=disasm_arg_Vt2T; args[2]=disasm_arg_offs; args[3]=disasm_arg_XnS; args[4]=disasm_arg_offe; 
   8eeac:	5284c4a3 	mov	w3, #0x2625                	// #9765
		op=((ic32_21)&0x2)|((ic32_13)&0x1); q=((ic32_30)&0x1); z=((ic32_10)&0x3); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8eeb0:	12000697 	and	w23, w20, #0x3
   8eeb4:	12001059 	and	w25, w2, #0x1f
		args[0]=disasm_arg_VtT; args[1]=disasm_arg_Vt2T; args[2]=disasm_arg_offs; args[3]=disasm_arg_XnS; args[4]=disasm_arg_offe; 
   8eeb8:	72a54523 	movk	w3, #0x2a29, lsl #16
   8eebc:	52800562 	mov	w2, #0x2b                  	// #43
		op=((ic32_21)&0x2)|((ic32_13)&0x1); q=((ic32_30)&0x1); z=((ic32_10)&0x3); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8eec0:	2a0b0021 	orr	w1, w1, w11
   8eec4:	12000098 	and	w24, w4, #0x1
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8eec8:	5280001b 	mov	w27, #0x0                   	// #0
	uint16_t op=0, om=0, j=0;
   8eecc:	52800014 	mov	w20, #0x0                   	// #0
	uint32_t i=0;
   8eed0:	290effff 	stp	wzr, wzr, [sp, #116]
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8eed4:	290fffff 	stp	wzr, wzr, [sp, #124]
   8eed8:	29117fff 	stp	wzr, wzr, [sp, #136]
   8eedc:	29127fff 	stp	wzr, wzr, [sp, #144]
   8eee0:	b9009bff 	str	wzr, [sp, #152]
		args[0]=disasm_arg_VtT; args[1]=disasm_arg_Vt2T; args[2]=disasm_arg_offs; args[3]=disasm_arg_XnS; args[4]=disasm_arg_offe; 
   8eee4:	b902c3e3 	str	w3, [sp, #704]
   8eee8:	390b13e2 	strb	w2, [sp, #708]
   8eeec:	a9435bf5 	ldp	x21, x22, [sp, #48]
   8eef0:	17ffdb5c 	b	85c60 <disasm+0x1c80>
		names="st3\0st1\0ld3\0ld1\0";
   8eef4:	b0000023 	adrp	x3, 93000 <sd_init+0x1470>
   8eef8:	91162063 	add	x3, x3, #0x588
		op=((ic32_21)&0x2)|((ic32_13)&0x1); q=((ic32_30)&0x1); z=((ic32_10)&0x3); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8eefc:	121f0181 	and	w1, w12, #0x2
   8ef00:	1200016b 	and	w11, w11, #0x1
   8ef04:	1200101a 	and	w26, w0, #0x1f
		names="st3\0st1\0ld3\0ld1\0";
   8ef08:	9131c060 	add	x0, x3, #0xc70
		args[0]=disasm_arg_VtT; args[1]=disasm_arg_Vt2T; args[2]=disasm_arg_Vt3T; args[3]=disasm_arg_offs; args[4]=disasm_arg_XnS; args[5]=disasm_arg_offe; 
   8ef0c:	5284c4a3 	mov	w3, #0x2625                	// #9765
		op=((ic32_21)&0x2)|((ic32_13)&0x1); q=((ic32_30)&0x1); z=((ic32_10)&0x3); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8ef10:	12000697 	and	w23, w20, #0x3
   8ef14:	12001059 	and	w25, w2, #0x1f
		args[0]=disasm_arg_VtT; args[1]=disasm_arg_Vt2T; args[2]=disasm_arg_Vt3T; args[3]=disasm_arg_offs; args[4]=disasm_arg_XnS; args[5]=disasm_arg_offe; 
   8ef18:	72a524e3 	movk	w3, #0x2927, lsl #16
   8ef1c:	52856542 	mov	w2, #0x2b2a                	// #11050
		op=((ic32_21)&0x2)|((ic32_13)&0x1); q=((ic32_30)&0x1); z=((ic32_10)&0x3); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8ef20:	2a0b0021 	orr	w1, w1, w11
   8ef24:	12000098 	and	w24, w4, #0x1
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8ef28:	5280001b 	mov	w27, #0x0                   	// #0
	uint16_t op=0, om=0, j=0;
   8ef2c:	52800014 	mov	w20, #0x0                   	// #0
	uint32_t i=0;
   8ef30:	290effff 	stp	wzr, wzr, [sp, #116]
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8ef34:	290fffff 	stp	wzr, wzr, [sp, #124]
   8ef38:	29117fff 	stp	wzr, wzr, [sp, #136]
   8ef3c:	29127fff 	stp	wzr, wzr, [sp, #144]
   8ef40:	b9009bff 	str	wzr, [sp, #152]
		args[0]=disasm_arg_VtT; args[1]=disasm_arg_Vt2T; args[2]=disasm_arg_Vt3T; args[3]=disasm_arg_offs; args[4]=disasm_arg_XnS; args[5]=disasm_arg_offe; 
   8ef44:	b902c3e3 	str	w3, [sp, #704]
   8ef48:	79058be2 	strh	w2, [sp, #708]
   8ef4c:	a9435bf5 	ldp	x21, x22, [sp, #48]
   8ef50:	17ffdb44 	b	85c60 <disasm+0x1c80>
		names="st1\0ld1\0";
   8ef54:	b0000023 	adrp	x3, 93000 <sd_init+0x1470>
		op=((ic32_22)&0x1); q=((ic32_30)&0x1); z=((ic32_10)&0x3); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8ef58:	12001059 	and	w25, w2, #0x1f
		names="st1\0ld1\0";
   8ef5c:	91162063 	add	x3, x3, #0x588
		args[0]=disasm_arg_VtT; args[1]=disasm_arg_offs; args[2]=disasm_arg_XnS; args[3]=disasm_arg_offe; 
   8ef60:	528524a2 	mov	w2, #0x2925                	// #10533
		op=((ic32_22)&0x1); q=((ic32_30)&0x1); z=((ic32_10)&0x3); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8ef64:	12000697 	and	w23, w20, #0x3
   8ef68:	1200101a 	and	w26, w0, #0x1f
		args[0]=disasm_arg_VtT; args[1]=disasm_arg_offs; args[2]=disasm_arg_XnS; args[3]=disasm_arg_offe; 
   8ef6c:	72a56542 	movk	w2, #0x2b2a, lsl #16
		op=((ic32_22)&0x1); q=((ic32_30)&0x1); z=((ic32_10)&0x3); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8ef70:	120000e1 	and	w1, w7, #0x1
   8ef74:	12000098 	and	w24, w4, #0x1
		names="st1\0ld1\0";
   8ef78:	91318060 	add	x0, x3, #0xc60
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8ef7c:	5280001b 	mov	w27, #0x0                   	// #0
	uint16_t op=0, om=0, j=0;
   8ef80:	52800014 	mov	w20, #0x0                   	// #0
	uint32_t i=0;
   8ef84:	290effff 	stp	wzr, wzr, [sp, #116]
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8ef88:	290fffff 	stp	wzr, wzr, [sp, #124]
   8ef8c:	29117fff 	stp	wzr, wzr, [sp, #136]
   8ef90:	29127fff 	stp	wzr, wzr, [sp, #144]
   8ef94:	b9009bff 	str	wzr, [sp, #152]
		args[0]=disasm_arg_VtT; args[1]=disasm_arg_offs; args[2]=disasm_arg_XnS; args[3]=disasm_arg_offe; 
   8ef98:	b902c3e2 	str	w2, [sp, #704]
   8ef9c:	a9435bf5 	ldp	x21, x22, [sp, #48]
   8efa0:	17ffdb30 	b	85c60 <disasm+0x1c80>
		op=((ic32_21)&0x2)|((ic32_13)&0x1); q=((ic32_30)&0x1); z=((ic32_10)&0x3); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8efa4:	121f0181 	and	w1, w12, #0x2
   8efa8:	1200016b 	and	w11, w11, #0x1
		names="st4\0st1\0ld4\0ld1\0";
   8efac:	b0000023 	adrp	x3, 93000 <sd_init+0x1470>
		op=((ic32_21)&0x2)|((ic32_13)&0x1); q=((ic32_30)&0x1); z=((ic32_10)&0x3); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8efb0:	12000098 	and	w24, w4, #0x1
		names="st4\0st1\0ld4\0ld1\0";
   8efb4:	91162063 	add	x3, x3, #0x588
		args[0]=disasm_arg_VtT; args[1]=disasm_arg_Vt2T; args[2]=disasm_arg_Vt3T; args[3]=disasm_arg_Vt4T; args[4]=disasm_arg_offs; args[5]=disasm_arg_XnS; args[6]=disasm_arg_offe; 
   8efb8:	5284c4a4 	mov	w4, #0x2625                	// #9765
		op=((ic32_21)&0x2)|((ic32_13)&0x1); q=((ic32_30)&0x1); z=((ic32_10)&0x3); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8efbc:	12000697 	and	w23, w20, #0x3
   8efc0:	12001059 	and	w25, w2, #0x1f
   8efc4:	1200101a 	and	w26, w0, #0x1f
		args[0]=disasm_arg_VtT; args[1]=disasm_arg_Vt2T; args[2]=disasm_arg_Vt3T; args[3]=disasm_arg_Vt4T; args[4]=disasm_arg_offs; args[5]=disasm_arg_XnS; args[6]=disasm_arg_offe; 
   8efc8:	72a504e4 	movk	w4, #0x2827, lsl #16
		names="st4\0st1\0ld4\0ld1\0";
   8efcc:	91312060 	add	x0, x3, #0xc48
		args[0]=disasm_arg_VtT; args[1]=disasm_arg_Vt2T; args[2]=disasm_arg_Vt3T; args[3]=disasm_arg_Vt4T; args[4]=disasm_arg_offs; args[5]=disasm_arg_XnS; args[6]=disasm_arg_offe; 
   8efd0:	52800562 	mov	w2, #0x2b                  	// #43
   8efd4:	52854523 	mov	w3, #0x2a29                	// #10793
		op=((ic32_21)&0x2)|((ic32_13)&0x1); q=((ic32_30)&0x1); z=((ic32_10)&0x3); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8efd8:	2a0b0021 	orr	w1, w1, w11
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8efdc:	5280001b 	mov	w27, #0x0                   	// #0
	uint16_t op=0, om=0, j=0;
   8efe0:	52800014 	mov	w20, #0x0                   	// #0
	uint32_t i=0;
   8efe4:	290effff 	stp	wzr, wzr, [sp, #116]
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8efe8:	290fffff 	stp	wzr, wzr, [sp, #124]
   8efec:	29117fff 	stp	wzr, wzr, [sp, #136]
   8eff0:	29127fff 	stp	wzr, wzr, [sp, #144]
   8eff4:	b9009bff 	str	wzr, [sp, #152]
		args[0]=disasm_arg_VtT; args[1]=disasm_arg_Vt2T; args[2]=disasm_arg_Vt3T; args[3]=disasm_arg_Vt4T; args[4]=disasm_arg_offs; args[5]=disasm_arg_XnS; args[6]=disasm_arg_offe; 
   8eff8:	b902c3e4 	str	w4, [sp, #704]
   8effc:	79058be3 	strh	w3, [sp, #708]
   8f000:	390b1be2 	strb	w2, [sp, #710]
   8f004:	a9435bf5 	ldp	x21, x22, [sp, #48]
   8f008:	17ffdb16 	b	85c60 <disasm+0x1c80>
		op=((ic32_27)&0x8)|((ic32_21)&0x6)|((ic32_15)&0x1); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8f00c:	121d0021 	and	w1, w1, #0x8
   8f010:	121f058c 	and	w12, w12, #0x6
   8f014:	2a0c0021 	orr	w1, w1, w12
   8f018:	120000c6 	and	w6, w6, #0x1
		names="?\0?\0ldxrb\0ldaxrb\0stllrb\0stlrb\0ldlarb\0ldarb\0?\0?\0ldxrh\0ldaxrh\0stllrh\0stlrh\0ldlarh\0ldarh\0";
   8f01c:	90000023 	adrp	x3, 93000 <sd_init+0x1470>
		op=((ic32_27)&0x8)|((ic32_21)&0x6)|((ic32_15)&0x1); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8f020:	12001059 	and	w25, w2, #0x1f
		names="?\0?\0ldxrb\0ldaxrb\0stllrb\0stlrb\0ldlarb\0ldarb\0?\0?\0ldxrh\0ldaxrh\0stllrh\0stlrh\0ldlarh\0ldarh\0";
   8f024:	91162063 	add	x3, x3, #0x588
		args[0]=disasm_arg_Wt; args[1]=disasm_arg_offs; args[2]=disasm_arg_XnS; args[3]=disasm_arg_offe; 
   8f028:	52852a62 	mov	w2, #0x2953                	// #10579
		op=((ic32_27)&0x8)|((ic32_21)&0x6)|((ic32_15)&0x1); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8f02c:	1200101a 	and	w26, w0, #0x1f
		args[0]=disasm_arg_Wt; args[1]=disasm_arg_offs; args[2]=disasm_arg_XnS; args[3]=disasm_arg_offe; 
   8f030:	72a56542 	movk	w2, #0x2b2a, lsl #16
		op=((ic32_27)&0x8)|((ic32_21)&0x6)|((ic32_15)&0x1); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8f034:	2a060021 	orr	w1, w1, w6
		names="?\0?\0ldxrb\0ldaxrb\0stllrb\0stlrb\0ldlarb\0ldarb\0?\0?\0ldxrh\0ldaxrh\0stllrh\0stlrh\0ldlarh\0ldarh\0";
   8f038:	912fc060 	add	x0, x3, #0xbf0
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8f03c:	52800017 	mov	w23, #0x0                   	// #0
   8f040:	52800018 	mov	w24, #0x0                   	// #0
   8f044:	5280001b 	mov	w27, #0x0                   	// #0
	uint16_t op=0, om=0, j=0;
   8f048:	52800014 	mov	w20, #0x0                   	// #0
	uint32_t i=0;
   8f04c:	290effff 	stp	wzr, wzr, [sp, #116]
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8f050:	290fffff 	stp	wzr, wzr, [sp, #124]
   8f054:	29117fff 	stp	wzr, wzr, [sp, #136]
   8f058:	29127fff 	stp	wzr, wzr, [sp, #144]
   8f05c:	b9009bff 	str	wzr, [sp, #152]
		args[0]=disasm_arg_Wt; args[1]=disasm_arg_offs; args[2]=disasm_arg_XnS; args[3]=disasm_arg_offe; 
   8f060:	b902c3e2 	str	w2, [sp, #704]
   8f064:	a9435bf5 	ldp	x21, x22, [sp, #48]
   8f068:	17ffdafe 	b	85c60 <disasm+0x1c80>
		op=((ic32_21)&0x2)|((ic32_15)&0x1); s=((ic32_30)&0x1); d=((ic32_16)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8f06c:	1200009b 	and	w27, w4, #0x1
   8f070:	120010a4 	and	w4, w5, #0x1f
   8f074:	121f0181 	and	w1, w12, #0x2
   8f078:	120000c6 	and	w6, w6, #0x1
		names="casp\0caspl\0caspa\0caspal\0";
   8f07c:	90000023 	adrp	x3, 93000 <sd_init+0x1470>
   8f080:	91162063 	add	x3, x3, #0x588
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8f084:	29117fe4 	stp	w4, wzr, [sp, #136]
		args[0]=disasm_arg_Rd; args[1]=disasm_arg_Rd1; args[2]=disasm_arg_Rt; args[3]=disasm_arg_Rt1; args[4]=disasm_arg_offs; args[5]=disasm_arg_XnS; args[6]=disasm_arg_offe; 
   8f088:	528a09e4 	mov	w4, #0x504f                	// #20559
		op=((ic32_21)&0x2)|((ic32_15)&0x1); s=((ic32_30)&0x1); d=((ic32_16)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8f08c:	12001059 	and	w25, w2, #0x1f
   8f090:	1200101a 	and	w26, w0, #0x1f
		args[0]=disasm_arg_Rd; args[1]=disasm_arg_Rd1; args[2]=disasm_arg_Rt; args[3]=disasm_arg_Rt1; args[4]=disasm_arg_offs; args[5]=disasm_arg_XnS; args[6]=disasm_arg_offe; 
   8f094:	52800562 	mov	w2, #0x2b                  	// #43
		names="casp\0caspl\0caspa\0caspal\0";
   8f098:	912f4060 	add	x0, x3, #0xbd0
		args[0]=disasm_arg_Rd; args[1]=disasm_arg_Rd1; args[2]=disasm_arg_Rt; args[3]=disasm_arg_Rt1; args[4]=disasm_arg_offs; args[5]=disasm_arg_XnS; args[6]=disasm_arg_offe; 
   8f09c:	72aa2164 	movk	w4, #0x510b, lsl #16
   8f0a0:	52854523 	mov	w3, #0x2a29                	// #10793
		op=((ic32_21)&0x2)|((ic32_15)&0x1); s=((ic32_30)&0x1); d=((ic32_16)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8f0a4:	2a060021 	orr	w1, w1, w6
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8f0a8:	52800017 	mov	w23, #0x0                   	// #0
   8f0ac:	52800018 	mov	w24, #0x0                   	// #0
	uint16_t op=0, om=0, j=0;
   8f0b0:	52800014 	mov	w20, #0x0                   	// #0
	uint32_t i=0;
   8f0b4:	290effff 	stp	wzr, wzr, [sp, #116]
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8f0b8:	290fffff 	stp	wzr, wzr, [sp, #124]
   8f0bc:	29127fff 	stp	wzr, wzr, [sp, #144]
   8f0c0:	b9009bff 	str	wzr, [sp, #152]
		args[0]=disasm_arg_Rd; args[1]=disasm_arg_Rd1; args[2]=disasm_arg_Rt; args[3]=disasm_arg_Rt1; args[4]=disasm_arg_offs; args[5]=disasm_arg_XnS; args[6]=disasm_arg_offe; 
   8f0c4:	b902c3e4 	str	w4, [sp, #704]
   8f0c8:	79058be3 	strh	w3, [sp, #708]
   8f0cc:	390b1be2 	strb	w2, [sp, #710]
   8f0d0:	a9435bf5 	ldp	x21, x22, [sp, #48]
   8f0d4:	17ffdae3 	b	85c60 <disasm+0x1c80>
		op=((ic32_27)&0x4)|((ic32_14)&0x3); j=((ic32_11)&0x1); m=((ic32_16)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8f0d8:	121e0021 	and	w1, w1, #0x4
   8f0dc:	12000631 	and	w17, w17, #0x3
		names="fmla\0fmls\0fmul\0?\0?\0?\0fmulx\0";
   8f0e0:	90000023 	adrp	x3, 93000 <sd_init+0x1470>
   8f0e4:	91162063 	add	x3, x3, #0x588
		op=((ic32_27)&0x4)|((ic32_14)&0x3); j=((ic32_11)&0x1); m=((ic32_16)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8f0e8:	120010a4 	and	w4, w5, #0x1f
   8f0ec:	12001059 	and	w25, w2, #0x1f
   8f0f0:	1200101a 	and	w26, w0, #0x1f
		args[0]=disasm_arg_FPt; args[1]=disasm_arg_FPn; args[2]=disasm_arg_VmTs2; 
   8f0f4:	12800c42 	mov	w2, #0xffffff9d            	// #-99
		names="fmla\0fmls\0fmul\0?\0?\0?\0fmulx\0";
   8f0f8:	912b6060 	add	x0, x3, #0xad8
		op=((ic32_27)&0x4)|((ic32_14)&0x3); j=((ic32_11)&0x1); m=((ic32_16)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8f0fc:	2a110021 	orr	w1, w1, w17
		args[0]=disasm_arg_FPt; args[1]=disasm_arg_FPn; args[2]=disasm_arg_VmTs2; 
   8f100:	528f2a83 	mov	w3, #0x7954                	// #31060
		op=((ic32_27)&0x4)|((ic32_14)&0x3); j=((ic32_11)&0x1); m=((ic32_16)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8f104:	120001b4 	and	w20, w13, #0x1
		z=1;
   8f108:	52800037 	mov	w23, #0x1                   	// #1
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8f10c:	52800018 	mov	w24, #0x0                   	// #0
   8f110:	5280001b 	mov	w27, #0x0                   	// #0
	uint32_t i=0;
   8f114:	290effff 	stp	wzr, wzr, [sp, #116]
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8f118:	290fffe4 	stp	w4, wzr, [sp, #124]
   8f11c:	29117fff 	stp	wzr, wzr, [sp, #136]
   8f120:	29127fff 	stp	wzr, wzr, [sp, #144]
   8f124:	b9009bff 	str	wzr, [sp, #152]
		args[0]=disasm_arg_FPt; args[1]=disasm_arg_FPn; args[2]=disasm_arg_VmTs2; 
   8f128:	790583e3 	strh	w3, [sp, #704]
   8f12c:	390b0be2 	strb	w2, [sp, #706]
   8f130:	a9435bf5 	ldp	x21, x22, [sp, #48]
   8f134:	17ffdacb 	b	85c60 <disasm+0x1c80>
		op=((ic32_27)&0x4)|((ic32_14)&0x3); j=((ic32_10)&0x2)|((ic32_21)&0x1); m=((ic32_16)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8f138:	121e0021 	and	w1, w1, #0x4
   8f13c:	12000631 	and	w17, w17, #0x3
   8f140:	121f0294 	and	w20, w20, #0x2
   8f144:	1200018c 	and	w12, w12, #0x1
		names="fmla\0fmls\0fmul\0sqrdmulh\0?\0?\0fmulx\0sqrdmlah\0";
   8f148:	90000023 	adrp	x3, 93000 <sd_init+0x1470>
   8f14c:	91162063 	add	x3, x3, #0x588
		op=((ic32_27)&0x4)|((ic32_14)&0x3); j=((ic32_10)&0x2)|((ic32_21)&0x1); m=((ic32_16)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8f150:	120010a4 	and	w4, w5, #0x1f
   8f154:	12001059 	and	w25, w2, #0x1f
   8f158:	1200101a 	and	w26, w0, #0x1f
		args[0]=disasm_arg_FPt; args[1]=disasm_arg_FPn; args[2]=disasm_arg_VmTs2; 
   8f15c:	12800c42 	mov	w2, #0xffffff9d            	// #-99
		names="fmla\0fmls\0fmul\0sqrdmulh\0?\0?\0fmulx\0sqrdmlah\0";
   8f160:	912e8060 	add	x0, x3, #0xba0
		op=((ic32_27)&0x4)|((ic32_14)&0x3); j=((ic32_10)&0x2)|((ic32_21)&0x1); m=((ic32_16)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8f164:	2a110021 	orr	w1, w1, w17
		args[0]=disasm_arg_FPt; args[1]=disasm_arg_FPn; args[2]=disasm_arg_VmTs2; 
   8f168:	528f2a83 	mov	w3, #0x7954                	// #31060
		op=((ic32_27)&0x4)|((ic32_14)&0x3); j=((ic32_10)&0x2)|((ic32_21)&0x1); m=((ic32_16)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8f16c:	2a0c0294 	orr	w20, w20, w12
		z=0;
   8f170:	52800017 	mov	w23, #0x0                   	// #0
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8f174:	52800018 	mov	w24, #0x0                   	// #0
   8f178:	5280001b 	mov	w27, #0x0                   	// #0
	uint32_t i=0;
   8f17c:	290effff 	stp	wzr, wzr, [sp, #116]
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8f180:	290fffe4 	stp	w4, wzr, [sp, #124]
   8f184:	29117fff 	stp	wzr, wzr, [sp, #136]
   8f188:	29127fff 	stp	wzr, wzr, [sp, #144]
   8f18c:	b9009bff 	str	wzr, [sp, #152]
		args[0]=disasm_arg_FPt; args[1]=disasm_arg_FPn; args[2]=disasm_arg_VmTs2; 
   8f190:	790583e3 	strh	w3, [sp, #704]
   8f194:	390b0be2 	strb	w2, [sp, #706]
   8f198:	a9435bf5 	ldp	x21, x22, [sp, #48]
   8f19c:	17ffdab1 	b	85c60 <disasm+0x1c80>
		names="fcvtzs\0fcvtzu\0";
   8f1a0:	90000023 	adrp	x3, 93000 <sd_init+0x1470>
   8f1a4:	91162063 	add	x3, x3, #0x588
		op=((ic32_29)&0x1); j=((ic32_16)&0x7f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8f1a8:	120002a1 	and	w1, w21, #0x1
   8f1ac:	12001059 	and	w25, w2, #0x1f
   8f1b0:	1200101a 	and	w26, w0, #0x1f
		args[0]=disasm_arg_FPjt; args[1]=disasm_arg_FPjn2; args[2]=disasm_arg_shrshift; 
   8f1b4:	12800da2 	mov	w2, #0xffffff92            	// #-110
		names="fcvtzs\0fcvtzu\0";
   8f1b8:	912e4060 	add	x0, x3, #0xb90
		op=((ic32_29)&0x1); j=((ic32_16)&0x7f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8f1bc:	120018b4 	and	w20, w5, #0x7f
		args[0]=disasm_arg_FPjt; args[1]=disasm_arg_FPjn2; args[2]=disasm_arg_shrshift; 
   8f1c0:	128cd1a3 	mov	w3, #0xffff9972            	// #-26254
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8f1c4:	52800017 	mov	w23, #0x0                   	// #0
   8f1c8:	52800018 	mov	w24, #0x0                   	// #0
   8f1cc:	5280001b 	mov	w27, #0x0                   	// #0
	uint32_t i=0;
   8f1d0:	290effff 	stp	wzr, wzr, [sp, #116]
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8f1d4:	290fffff 	stp	wzr, wzr, [sp, #124]
   8f1d8:	29117fff 	stp	wzr, wzr, [sp, #136]
   8f1dc:	29127fff 	stp	wzr, wzr, [sp, #144]
   8f1e0:	b9009bff 	str	wzr, [sp, #152]
		args[0]=disasm_arg_FPjt; args[1]=disasm_arg_FPjn2; args[2]=disasm_arg_shrshift; 
   8f1e4:	790583e3 	strh	w3, [sp, #704]
   8f1e8:	390b0be2 	strb	w2, [sp, #706]
   8f1ec:	a9435bf5 	ldp	x21, x22, [sp, #48]
   8f1f0:	17ffda9c 	b	85c60 <disasm+0x1c80>
		names="scvtf\0ucvtf\0";
   8f1f4:	90000023 	adrp	x3, 93000 <sd_init+0x1470>
   8f1f8:	91162063 	add	x3, x3, #0x588
		op=((ic32_29)&0x1); j=((ic32_16)&0x7f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8f1fc:	120002a1 	and	w1, w21, #0x1
   8f200:	12001059 	and	w25, w2, #0x1f
   8f204:	1200101a 	and	w26, w0, #0x1f
		args[0]=disasm_arg_FPjt2; args[1]=disasm_arg_FPjn2; args[2]=disasm_arg_shrshift; 
   8f208:	12800da2 	mov	w2, #0xffffff92            	// #-110
		names="scvtf\0ucvtf\0";
   8f20c:	912e0060 	add	x0, x3, #0xb80
		op=((ic32_29)&0x1); j=((ic32_16)&0x7f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8f210:	120018b4 	and	w20, w5, #0x7f
		args[0]=disasm_arg_FPjt2; args[1]=disasm_arg_FPjn2; args[2]=disasm_arg_shrshift; 
   8f214:	128ccce3 	mov	w3, #0xffff9998            	// #-26216
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8f218:	52800017 	mov	w23, #0x0                   	// #0
   8f21c:	52800018 	mov	w24, #0x0                   	// #0
   8f220:	5280001b 	mov	w27, #0x0                   	// #0
	uint32_t i=0;
   8f224:	290effff 	stp	wzr, wzr, [sp, #116]
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8f228:	290fffff 	stp	wzr, wzr, [sp, #124]
   8f22c:	29117fff 	stp	wzr, wzr, [sp, #136]
   8f230:	29127fff 	stp	wzr, wzr, [sp, #144]
   8f234:	b9009bff 	str	wzr, [sp, #152]
		args[0]=disasm_arg_FPjt2; args[1]=disasm_arg_FPjn2; args[2]=disasm_arg_shrshift; 
   8f238:	790583e3 	strh	w3, [sp, #704]
   8f23c:	390b0be2 	strb	w2, [sp, #706]
   8f240:	a9435bf5 	ldp	x21, x22, [sp, #48]
   8f244:	17ffda87 	b	85c60 <disasm+0x1c80>
		op=((ic32_27)&0x4)|((ic32_11)&0x3); j=((ic32_16)&0x7f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8f248:	121e0021 	and	w1, w1, #0x4
   8f24c:	120005ad 	and	w13, w13, #0x3
		names="?\0?\0sqshrn\0sqrshrn\0sqshrun\0sqrshrun\0uqshrn\0uqrshrn\0";
   8f250:	90000023 	adrp	x3, 93000 <sd_init+0x1470>
   8f254:	91162063 	add	x3, x3, #0x588
		op=((ic32_27)&0x4)|((ic32_11)&0x3); j=((ic32_16)&0x7f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8f258:	12001059 	and	w25, w2, #0x1f
   8f25c:	1200101a 	and	w26, w0, #0x1f
		args[0]=disasm_arg_FPjt; args[1]=disasm_arg_FPnj; args[2]=disasm_arg_shrshift; 
   8f260:	12800da2 	mov	w2, #0xffffff92            	// #-110
		names="?\0?\0sqshrn\0sqrshrn\0sqshrun\0sqrshrun\0uqshrn\0uqrshrn\0";
   8f264:	912d2060 	add	x0, x3, #0xb48
		op=((ic32_27)&0x4)|((ic32_11)&0x3); j=((ic32_16)&0x7f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8f268:	2a0d0021 	orr	w1, w1, w13
		args[0]=disasm_arg_FPjt; args[1]=disasm_arg_FPnj; args[2]=disasm_arg_shrshift; 
   8f26c:	128d31a3 	mov	w3, #0xffff9672            	// #-27022
		op=((ic32_27)&0x4)|((ic32_11)&0x3); j=((ic32_16)&0x7f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8f270:	120018b4 	and	w20, w5, #0x7f
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8f274:	52800017 	mov	w23, #0x0                   	// #0
   8f278:	52800018 	mov	w24, #0x0                   	// #0
   8f27c:	5280001b 	mov	w27, #0x0                   	// #0
	uint32_t i=0;
   8f280:	290effff 	stp	wzr, wzr, [sp, #116]
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8f284:	290fffff 	stp	wzr, wzr, [sp, #124]
   8f288:	29117fff 	stp	wzr, wzr, [sp, #136]
   8f28c:	29127fff 	stp	wzr, wzr, [sp, #144]
   8f290:	b9009bff 	str	wzr, [sp, #152]
		args[0]=disasm_arg_FPjt; args[1]=disasm_arg_FPnj; args[2]=disasm_arg_shrshift; 
   8f294:	790583e3 	strh	w3, [sp, #704]
   8f298:	390b0be2 	strb	w2, [sp, #706]
   8f29c:	a9435bf5 	ldp	x21, x22, [sp, #48]
   8f2a0:	17ffda70 	b	85c60 <disasm+0x1c80>
		op=((ic32_26)&0x8)|((ic32_12)&0x7); j=((ic32_16)&0x7f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8f2a4:	531a7c01 	lsr	w1, w0, #26
   8f2a8:	1200094a 	and	w10, w10, #0x7
   8f2ac:	121d0021 	and	w1, w1, #0x8
		names="sshr\0ssra\0srshr\0srsra\0?\0shl\0?\0sqshl\0ushr\0usra\0urshr\0ursra\0sri\0sli\0sqshlu\0uqshl\0";
   8f2b0:	90000023 	adrp	x3, 93000 <sd_init+0x1470>
   8f2b4:	91162063 	add	x3, x3, #0x588
		op=((ic32_26)&0x8)|((ic32_12)&0x7); j=((ic32_16)&0x7f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8f2b8:	12001059 	and	w25, w2, #0x1f
   8f2bc:	1200101a 	and	w26, w0, #0x1f
		args[0]=disasm_arg_Dt; args[1]=disasm_arg_Dn; args[2]=disasm_arg_shrshift; 
   8f2c0:	12800da2 	mov	w2, #0xffffff92            	// #-110
		names="sshr\0ssra\0srshr\0srsra\0?\0shl\0?\0sqshl\0ushr\0usra\0urshr\0ursra\0sri\0sli\0sqshlu\0uqshl\0";
   8f2c4:	912be060 	add	x0, x3, #0xaf8
		op=((ic32_26)&0x8)|((ic32_12)&0x7); j=((ic32_16)&0x7f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8f2c8:	2a0a0021 	orr	w1, w1, w10
		args[0]=disasm_arg_Dt; args[1]=disasm_arg_Dn; args[2]=disasm_arg_shrshift; 
   8f2cc:	128dcde3 	mov	w3, #0xffff9190            	// #-28272
		op=((ic32_26)&0x8)|((ic32_12)&0x7); j=((ic32_16)&0x7f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8f2d0:	120018b4 	and	w20, w5, #0x7f
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8f2d4:	52800017 	mov	w23, #0x0                   	// #0
   8f2d8:	52800018 	mov	w24, #0x0                   	// #0
   8f2dc:	5280001b 	mov	w27, #0x0                   	// #0
	uint32_t i=0;
   8f2e0:	290effff 	stp	wzr, wzr, [sp, #116]
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8f2e4:	290fffff 	stp	wzr, wzr, [sp, #124]
   8f2e8:	29117fff 	stp	wzr, wzr, [sp, #136]
   8f2ec:	29127fff 	stp	wzr, wzr, [sp, #144]
   8f2f0:	b9009bff 	str	wzr, [sp, #152]
		args[0]=disasm_arg_Dt; args[1]=disasm_arg_Dn; args[2]=disasm_arg_shrshift; 
   8f2f4:	790583e3 	strh	w3, [sp, #704]
   8f2f8:	390b0be2 	strb	w2, [sp, #706]
   8f2fc:	a9435bf5 	ldp	x21, x22, [sp, #48]
   8f300:	17ffda58 	b	85c60 <disasm+0x1c80>
		op=((ic32_27)&0x4)|((ic32_14)&0x3); j=((ic32_9)&0x4)|((ic32_20)&0x3); m=((ic32_16)&0xf); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8f304:	121e0021 	and	w1, w1, #0x4
   8f308:	12000631 	and	w17, w17, #0x3
   8f30c:	121e01ef 	and	w15, w15, #0x4
   8f310:	12000508 	and	w8, w8, #0x3
		names="fmla\0fmls\0fmul\0?\0?\0?\0fmulx\0";
   8f314:	90000023 	adrp	x3, 93000 <sd_init+0x1470>
   8f318:	91162063 	add	x3, x3, #0x588
		op=((ic32_27)&0x4)|((ic32_14)&0x3); j=((ic32_9)&0x4)|((ic32_20)&0x3); m=((ic32_16)&0xf); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8f31c:	12000ca4 	and	w4, w5, #0xf
   8f320:	12001059 	and	w25, w2, #0x1f
   8f324:	1200101a 	and	w26, w0, #0x1f
		args[0]=disasm_arg_Ht; args[1]=disasm_arg_Hn; args[2]=disasm_arg_VmHs; 
   8f328:	12800c62 	mov	w2, #0xffffff9c            	// #-100
		names="fmla\0fmls\0fmul\0?\0?\0?\0fmulx\0";
   8f32c:	912b6060 	add	x0, x3, #0xad8
		op=((ic32_27)&0x4)|((ic32_14)&0x3); j=((ic32_9)&0x4)|((ic32_20)&0x3); m=((ic32_16)&0xf); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8f330:	2a110021 	orr	w1, w1, w17
		args[0]=disasm_arg_Ht; args[1]=disasm_arg_Hn; args[2]=disasm_arg_VmHs; 
   8f334:	528eeec3 	mov	w3, #0x7776                	// #30582
		op=((ic32_27)&0x4)|((ic32_14)&0x3); j=((ic32_9)&0x4)|((ic32_20)&0x3); m=((ic32_16)&0xf); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8f338:	2a0801f4 	orr	w20, w15, w8
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8f33c:	52800017 	mov	w23, #0x0                   	// #0
   8f340:	52800018 	mov	w24, #0x0                   	// #0
   8f344:	5280001b 	mov	w27, #0x0                   	// #0
	uint32_t i=0;
   8f348:	290effff 	stp	wzr, wzr, [sp, #116]
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8f34c:	290fffe4 	stp	w4, wzr, [sp, #124]
   8f350:	29117fff 	stp	wzr, wzr, [sp, #136]
   8f354:	29127fff 	stp	wzr, wzr, [sp, #144]
   8f358:	b9009bff 	str	wzr, [sp, #152]
		args[0]=disasm_arg_Ht; args[1]=disasm_arg_Hn; args[2]=disasm_arg_VmHs; 
   8f35c:	790583e3 	strh	w3, [sp, #704]
   8f360:	390b0be2 	strb	w2, [sp, #706]
   8f364:	a9435bf5 	ldp	x21, x22, [sp, #48]
   8f368:	17ffda3e 	b	85c60 <disasm+0x1c80>
		op=((ic32_24)&0x20)|((ic32_11)&0x1f); z=((ic32_22)&0x3); m=((ic32_16)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8f36c:	121b02d6 	and	w22, w22, #0x20
   8f370:	120011ad 	and	w13, w13, #0x1f
		names="?\0sqadd\0?\0?\0?\0sqsub\0cmgt\0cmge\0sshl\0sqshl\0srshl\0sqrshl\0?\0?\0?\0?\0add\0cmtst\0?\0?\0?\0?\0sqdmulh\0?\0?\0?\0?\0?\0?\0?\0?\0?\0?\0uqadd\0?\0?\0?\0uqsub\0cmhi\0cmhs\0ushl\0uqshl\0urshl\0uqrshl\0?\0?\0?\0?\0sub\0cmeq\0?\0?\0?\0?\0sqrdmulh\0";
   8f374:	90000023 	adrp	x3, 93000 <sd_init+0x1470>
   8f378:	91162063 	add	x3, x3, #0x588
		op=((ic32_24)&0x20)|((ic32_11)&0x1f); z=((ic32_22)&0x3); m=((ic32_16)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8f37c:	2a0d02c1 	orr	w1, w22, w13
   8f380:	120010a4 	and	w4, w5, #0x1f
   8f384:	12001059 	and	w25, w2, #0x1f
   8f388:	1200101a 	and	w26, w0, #0x1f
		args[0]=disasm_arg_FPz3t; args[1]=disasm_arg_FPz3n; args[2]=disasm_arg_FPz3m; 
   8f38c:	12800e02 	mov	w2, #0xffffff8f            	// #-113
		names="?\0sqadd\0?\0?\0?\0sqsub\0cmgt\0cmge\0sshl\0sqshl\0srshl\0sqrshl\0?\0?\0?\0?\0add\0cmtst\0?\0?\0?\0?\0sqdmulh\0?\0?\0?\0?\0?\0?\0?\0?\0?\0?\0uqadd\0?\0?\0?\0uqsub\0cmhi\0cmhs\0ushl\0uqshl\0urshl\0uqrshl\0?\0?\0?\0?\0sub\0cmeq\0?\0?\0?\0?\0sqrdmulh\0";
   8f390:	91284060 	add	x0, x3, #0xa10
		op=((ic32_24)&0x20)|((ic32_11)&0x1f); z=((ic32_22)&0x3); m=((ic32_16)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8f394:	120004f7 	and	w23, w7, #0x3
		args[0]=disasm_arg_FPz3t; args[1]=disasm_arg_FPz3n; args[2]=disasm_arg_FPz3m; 
   8f398:	128f0f23 	mov	w3, #0xffff8786            	// #-30842
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8f39c:	52800018 	mov	w24, #0x0                   	// #0
   8f3a0:	5280001b 	mov	w27, #0x0                   	// #0
	uint16_t op=0, om=0, j=0;
   8f3a4:	52800014 	mov	w20, #0x0                   	// #0
	uint32_t i=0;
   8f3a8:	290effff 	stp	wzr, wzr, [sp, #116]
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8f3ac:	290fffe4 	stp	w4, wzr, [sp, #124]
   8f3b0:	29117fff 	stp	wzr, wzr, [sp, #136]
   8f3b4:	29127fff 	stp	wzr, wzr, [sp, #144]
   8f3b8:	b9009bff 	str	wzr, [sp, #152]
		args[0]=disasm_arg_FPz3t; args[1]=disasm_arg_FPz3n; args[2]=disasm_arg_FPz3m; 
   8f3bc:	790583e3 	strh	w3, [sp, #704]
   8f3c0:	390b0be2 	strb	w2, [sp, #706]
   8f3c4:	a9435bf5 	ldp	x21, x22, [sp, #48]
   8f3c8:	17ffda26 	b	85c60 <disasm+0x1c80>
		op=((ic32_25)&0x10)|((ic32_20)&0x8)|((ic32_12)&0x7); z=((ic32_22)&0x1); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8f3cc:	121c02e1 	and	w1, w23, #0x10
   8f3d0:	121d0108 	and	w8, w8, #0x8
   8f3d4:	2a080021 	orr	w1, w1, w8
   8f3d8:	12000946 	and	w6, w10, #0x7
		names="?\0?\0fcvtns\0fcvtms\0fcvtas\0scvtf\0?\0?\0?\0?\0fcvtps\0fcvtzs\0?\0frecpe\0?\0frecpx\0?\0?\0fcvtnu\0fcvtmu\0fcvtau\0ucvtf\0?\0?\0?\0?\0fcvtpu\0fcvtzu\0?\0frsqrte\0";
   8f3dc:	90000023 	adrp	x3, 93000 <sd_init+0x1470>
   8f3e0:	91162063 	add	x3, x3, #0x588
		op=((ic32_25)&0x10)|((ic32_20)&0x8)|((ic32_12)&0x7); z=((ic32_22)&0x1); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8f3e4:	12001059 	and	w25, w2, #0x1f
   8f3e8:	1200101a 	and	w26, w0, #0x1f
		args[0]=disasm_arg_FPt; args[1]=disasm_arg_FPn; 
   8f3ec:	528f2a82 	mov	w2, #0x7954                	// #31060
		op=((ic32_25)&0x10)|((ic32_20)&0x8)|((ic32_12)&0x7); z=((ic32_22)&0x1); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8f3f0:	2a060021 	orr	w1, w1, w6
   8f3f4:	120000f7 	and	w23, w7, #0x1
		names="?\0?\0fcvtns\0fcvtms\0fcvtas\0scvtf\0?\0?\0?\0?\0fcvtps\0fcvtzs\0?\0frecpe\0?\0frecpx\0?\0?\0fcvtnu\0fcvtmu\0fcvtau\0ucvtf\0?\0?\0?\0?\0fcvtpu\0fcvtzu\0?\0frsqrte\0";
   8f3f8:	91244060 	add	x0, x3, #0x910
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8f3fc:	52800018 	mov	w24, #0x0                   	// #0
   8f400:	5280001b 	mov	w27, #0x0                   	// #0
	uint16_t op=0, om=0, j=0;
   8f404:	52800014 	mov	w20, #0x0                   	// #0
	uint32_t i=0;
   8f408:	290effff 	stp	wzr, wzr, [sp, #116]
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8f40c:	290fffff 	stp	wzr, wzr, [sp, #124]
   8f410:	29117fff 	stp	wzr, wzr, [sp, #136]
   8f414:	29127fff 	stp	wzr, wzr, [sp, #144]
   8f418:	b9009bff 	str	wzr, [sp, #152]
		args[0]=disasm_arg_FPt; args[1]=disasm_arg_FPn; 
   8f41c:	790583e2 	strh	w2, [sp, #704]
   8f420:	a9435bf5 	ldp	x21, x22, [sp, #48]
   8f424:	17ffda0f 	b	85c60 <disasm+0x1c80>
		op=((ic32_27)&0x4)|((ic32_13)&0x3); z=((ic32_22)&0x3); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8f428:	121e0021 	and	w1, w1, #0x4
   8f42c:	1200056b 	and	w11, w11, #0x3
		names="?\0?\0sqxtn\0?\0?\0sqxtun\0uqxtn\0fcvtxn\0";
   8f430:	90000023 	adrp	x3, 93000 <sd_init+0x1470>
   8f434:	91162063 	add	x3, x3, #0x588
		op=((ic32_27)&0x4)|((ic32_13)&0x3); z=((ic32_22)&0x3); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8f438:	12001059 	and	w25, w2, #0x1f
   8f43c:	1200101a 	and	w26, w0, #0x1f
		args[0]=disasm_arg_FPz3t; args[1]=disasm_arg_FPz4n; 
   8f440:	128eef22 	mov	w2, #0xffff8886            	// #-30586
		op=((ic32_27)&0x4)|((ic32_13)&0x3); z=((ic32_22)&0x3); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8f444:	2a0b0021 	orr	w1, w1, w11
   8f448:	120004f7 	and	w23, w7, #0x3
		names="?\0?\0sqxtn\0?\0?\0sqxtun\0uqxtn\0fcvtxn\0";
   8f44c:	9127a060 	add	x0, x3, #0x9e8
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8f450:	52800018 	mov	w24, #0x0                   	// #0
   8f454:	5280001b 	mov	w27, #0x0                   	// #0
	uint16_t op=0, om=0, j=0;
   8f458:	52800014 	mov	w20, #0x0                   	// #0
	uint32_t i=0;
   8f45c:	290effff 	stp	wzr, wzr, [sp, #116]
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8f460:	290fffff 	stp	wzr, wzr, [sp, #124]
   8f464:	29117fff 	stp	wzr, wzr, [sp, #136]
   8f468:	29127fff 	stp	wzr, wzr, [sp, #144]
   8f46c:	b9009bff 	str	wzr, [sp, #152]
		args[0]=disasm_arg_FPz3t; args[1]=disasm_arg_FPz4n; 
   8f470:	790583e2 	strh	w2, [sp, #704]
   8f474:	a9435bf5 	ldp	x21, x22, [sp, #48]
   8f478:	17ffd9fa 	b	85c60 <disasm+0x1c80>
		op=((ic32_27)&0x4)|((ic32_14)&0x3); z=((ic32_22)&0x3); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8f47c:	121e0021 	and	w1, w1, #0x4
   8f480:	12000631 	and	w17, w17, #0x3
		names="suqadd\0sqabs\0abs\0?\0usqadd\0sqneg\0neg\0";
   8f484:	90000023 	adrp	x3, 93000 <sd_init+0x1470>
   8f488:	91162063 	add	x3, x3, #0x588
		op=((ic32_27)&0x4)|((ic32_14)&0x3); z=((ic32_22)&0x3); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8f48c:	12001059 	and	w25, w2, #0x1f
   8f490:	1200101a 	and	w26, w0, #0x1f
		args[0]=disasm_arg_FPz3t; args[1]=disasm_arg_FPz3n; 
   8f494:	128f0f22 	mov	w2, #0xffff8786            	// #-30842
		op=((ic32_27)&0x4)|((ic32_14)&0x3); z=((ic32_22)&0x3); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8f498:	2a110021 	orr	w1, w1, w17
   8f49c:	120004f7 	and	w23, w7, #0x3
		names="suqadd\0sqabs\0abs\0?\0usqadd\0sqneg\0neg\0";
   8f4a0:	91270060 	add	x0, x3, #0x9c0
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8f4a4:	52800018 	mov	w24, #0x0                   	// #0
   8f4a8:	5280001b 	mov	w27, #0x0                   	// #0
	uint16_t op=0, om=0, j=0;
   8f4ac:	52800014 	mov	w20, #0x0                   	// #0
	uint32_t i=0;
   8f4b0:	290effff 	stp	wzr, wzr, [sp, #116]
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8f4b4:	290fffff 	stp	wzr, wzr, [sp, #124]
   8f4b8:	29117fff 	stp	wzr, wzr, [sp, #136]
   8f4bc:	29127fff 	stp	wzr, wzr, [sp, #144]
   8f4c0:	b9009bff 	str	wzr, [sp, #152]
		args[0]=disasm_arg_FPz3t; args[1]=disasm_arg_FPz3n; 
   8f4c4:	790583e2 	strh	w2, [sp, #704]
   8f4c8:	a9435bf5 	ldp	x21, x22, [sp, #48]
   8f4cc:	17ffd9e5 	b	85c60 <disasm+0x1c80>
		op=((ic32_27)&0x4)|((ic32_12)&0x3); z=((ic32_22)&0x3); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8f4d0:	121e0021 	and	w1, w1, #0x4
   8f4d4:	1200054a 	and	w10, w10, #0x3
		names="cmgt\0cmeq\0cmlt\0abs\0cmge\0cmle\0?\0neg\0";
   8f4d8:	90000023 	adrp	x3, 93000 <sd_init+0x1470>
   8f4dc:	91162063 	add	x3, x3, #0x588
		op=((ic32_27)&0x4)|((ic32_12)&0x3); z=((ic32_22)&0x3); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8f4e0:	12001059 	and	w25, w2, #0x1f
   8f4e4:	1200101a 	and	w26, w0, #0x1f
		args[0]=disasm_arg_FPz3t; args[1]=disasm_arg_FPz3n; args[2]=disasm_arg_simd0; 
   8f4e8:	12800fe2 	mov	w2, #0xffffff80            	// #-128
		names="cmgt\0cmeq\0cmlt\0abs\0cmge\0cmle\0?\0neg\0";
   8f4ec:	91266060 	add	x0, x3, #0x998
		op=((ic32_27)&0x4)|((ic32_12)&0x3); z=((ic32_22)&0x3); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8f4f0:	2a0a0021 	orr	w1, w1, w10
		args[0]=disasm_arg_FPz3t; args[1]=disasm_arg_FPz3n; args[2]=disasm_arg_simd0; 
   8f4f4:	128f0f23 	mov	w3, #0xffff8786            	// #-30842
		op=((ic32_27)&0x4)|((ic32_12)&0x3); z=((ic32_22)&0x3); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8f4f8:	120004f7 	and	w23, w7, #0x3
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8f4fc:	52800018 	mov	w24, #0x0                   	// #0
   8f500:	5280001b 	mov	w27, #0x0                   	// #0
	uint16_t op=0, om=0, j=0;
   8f504:	52800014 	mov	w20, #0x0                   	// #0
	uint32_t i=0;
   8f508:	290effff 	stp	wzr, wzr, [sp, #116]
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8f50c:	290fffff 	stp	wzr, wzr, [sp, #124]
   8f510:	29117fff 	stp	wzr, wzr, [sp, #136]
   8f514:	29127fff 	stp	wzr, wzr, [sp, #144]
   8f518:	b9009bff 	str	wzr, [sp, #152]
		args[0]=disasm_arg_FPz3t; args[1]=disasm_arg_FPz3n; args[2]=disasm_arg_simd0; 
   8f51c:	790583e3 	strh	w3, [sp, #704]
   8f520:	390b0be2 	strb	w2, [sp, #706]
   8f524:	a9435bf5 	ldp	x21, x22, [sp, #48]
   8f528:	17ffd9ce 	b	85c60 <disasm+0x1c80>
		op=((ic32_25)&0x10)|((ic32_20)&0x8)|((ic32_12)&0x7); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8f52c:	121c02e1 	and	w1, w23, #0x10
   8f530:	121d0108 	and	w8, w8, #0x8
   8f534:	2a080021 	orr	w1, w1, w8
   8f538:	12000946 	and	w6, w10, #0x7
		names="?\0?\0fcvtns\0fcvtms\0fcvtas\0scvtf\0?\0?\0?\0?\0fcvtps\0fcvtzs\0?\0frecpe\0?\0frecpx\0?\0?\0fcvtnu\0fcvtmu\0fcvtau\0ucvtf\0?\0?\0?\0?\0fcvtpu\0fcvtzu\0?\0frsqrte\0";
   8f53c:	90000023 	adrp	x3, 93000 <sd_init+0x1470>
   8f540:	91162063 	add	x3, x3, #0x588
		op=((ic32_25)&0x10)|((ic32_20)&0x8)|((ic32_12)&0x7); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8f544:	12001059 	and	w25, w2, #0x1f
   8f548:	1200101a 	and	w26, w0, #0x1f
		args[0]=disasm_arg_Ht; args[1]=disasm_arg_Hn; 
   8f54c:	528eeec2 	mov	w2, #0x7776                	// #30582
		op=((ic32_25)&0x10)|((ic32_20)&0x8)|((ic32_12)&0x7); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8f550:	2a060021 	orr	w1, w1, w6
		names="?\0?\0fcvtns\0fcvtms\0fcvtas\0scvtf\0?\0?\0?\0?\0fcvtps\0fcvtzs\0?\0frecpe\0?\0frecpx\0?\0?\0fcvtnu\0fcvtmu\0fcvtau\0ucvtf\0?\0?\0?\0?\0fcvtpu\0fcvtzu\0?\0frsqrte\0";
   8f554:	91244060 	add	x0, x3, #0x910
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8f558:	52800017 	mov	w23, #0x0                   	// #0
   8f55c:	52800018 	mov	w24, #0x0                   	// #0
   8f560:	5280001b 	mov	w27, #0x0                   	// #0
	uint16_t op=0, om=0, j=0;
   8f564:	52800014 	mov	w20, #0x0                   	// #0
	uint32_t i=0;
   8f568:	290effff 	stp	wzr, wzr, [sp, #116]
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8f56c:	290fffff 	stp	wzr, wzr, [sp, #124]
   8f570:	29117fff 	stp	wzr, wzr, [sp, #136]
   8f574:	29127fff 	stp	wzr, wzr, [sp, #144]
   8f578:	b9009bff 	str	wzr, [sp, #152]
		args[0]=disasm_arg_Ht; args[1]=disasm_arg_Hn; 
   8f57c:	790583e2 	strh	w2, [sp, #704]
   8f580:	a9435bf5 	ldp	x21, x22, [sp, #48]
   8f584:	17ffd9b7 	b	85c60 <disasm+0x1c80>
		op=((ic32_27)&0x4)|((ic32_12)&0x3); z=((ic32_22)&0x1); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8f588:	121e0021 	and	w1, w1, #0x4
   8f58c:	1200054a 	and	w10, w10, #0x3
		names="fcmgt\0fcmeq\0fcmlt\0?\0fcmge\0fcmle\0";
   8f590:	90000023 	adrp	x3, 93000 <sd_init+0x1470>
   8f594:	91162063 	add	x3, x3, #0x588
		op=((ic32_27)&0x4)|((ic32_12)&0x3); z=((ic32_22)&0x1); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8f598:	12001059 	and	w25, w2, #0x1f
   8f59c:	1200101a 	and	w26, w0, #0x1f
		args[0]=disasm_arg_FPt; args[1]=disasm_arg_FPn; args[2]=disasm_arg_simd0; 
   8f5a0:	12800fe2 	mov	w2, #0xffffff80            	// #-128
		names="fcmgt\0fcmeq\0fcmlt\0?\0fcmge\0fcmle\0";
   8f5a4:	9123a060 	add	x0, x3, #0x8e8
		op=((ic32_27)&0x4)|((ic32_12)&0x3); z=((ic32_22)&0x1); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8f5a8:	2a0a0021 	orr	w1, w1, w10
		args[0]=disasm_arg_FPt; args[1]=disasm_arg_FPn; args[2]=disasm_arg_simd0; 
   8f5ac:	528f2a83 	mov	w3, #0x7954                	// #31060
		op=((ic32_27)&0x4)|((ic32_12)&0x3); z=((ic32_22)&0x1); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8f5b0:	120000f7 	and	w23, w7, #0x1
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8f5b4:	52800018 	mov	w24, #0x0                   	// #0
   8f5b8:	5280001b 	mov	w27, #0x0                   	// #0
	uint16_t op=0, om=0, j=0;
   8f5bc:	52800014 	mov	w20, #0x0                   	// #0
	uint32_t i=0;
   8f5c0:	290effff 	stp	wzr, wzr, [sp, #116]
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8f5c4:	290fffff 	stp	wzr, wzr, [sp, #124]
   8f5c8:	29117fff 	stp	wzr, wzr, [sp, #136]
   8f5cc:	29127fff 	stp	wzr, wzr, [sp, #144]
   8f5d0:	b9009bff 	str	wzr, [sp, #152]
		args[0]=disasm_arg_FPt; args[1]=disasm_arg_FPn; args[2]=disasm_arg_simd0; 
   8f5d4:	790583e3 	strh	w3, [sp, #704]
   8f5d8:	390b0be2 	strb	w2, [sp, #706]
   8f5dc:	a9435bf5 	ldp	x21, x22, [sp, #48]
   8f5e0:	17ffd9a0 	b	85c60 <disasm+0x1c80>
		op=((ic32_27)&0x4)|((ic32_12)&0x3); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8f5e4:	121e0021 	and	w1, w1, #0x4
   8f5e8:	1200054a 	and	w10, w10, #0x3
		names="fcmgt\0fcmeq\0fcmlt\0?\0fcmge\0fcmle\0";
   8f5ec:	90000023 	adrp	x3, 93000 <sd_init+0x1470>
   8f5f0:	91162063 	add	x3, x3, #0x588
		op=((ic32_27)&0x4)|((ic32_12)&0x3); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8f5f4:	12001059 	and	w25, w2, #0x1f
   8f5f8:	1200101a 	and	w26, w0, #0x1f
		args[0]=disasm_arg_Ht; args[1]=disasm_arg_Hn; args[2]=disasm_arg_simd0; 
   8f5fc:	12800fe2 	mov	w2, #0xffffff80            	// #-128
		names="fcmgt\0fcmeq\0fcmlt\0?\0fcmge\0fcmle\0";
   8f600:	9123a060 	add	x0, x3, #0x8e8
		op=((ic32_27)&0x4)|((ic32_12)&0x3); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8f604:	2a0a0021 	orr	w1, w1, w10
		args[0]=disasm_arg_Ht; args[1]=disasm_arg_Hn; args[2]=disasm_arg_simd0; 
   8f608:	528eeec3 	mov	w3, #0x7776                	// #30582
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8f60c:	52800017 	mov	w23, #0x0                   	// #0
   8f610:	52800018 	mov	w24, #0x0                   	// #0
   8f614:	5280001b 	mov	w27, #0x0                   	// #0
	uint16_t op=0, om=0, j=0;
   8f618:	52800014 	mov	w20, #0x0                   	// #0
	uint32_t i=0;
   8f61c:	290effff 	stp	wzr, wzr, [sp, #116]
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8f620:	290fffff 	stp	wzr, wzr, [sp, #124]
   8f624:	29117fff 	stp	wzr, wzr, [sp, #136]
   8f628:	29127fff 	stp	wzr, wzr, [sp, #144]
   8f62c:	b9009bff 	str	wzr, [sp, #152]
		args[0]=disasm_arg_Ht; args[1]=disasm_arg_Hn; args[2]=disasm_arg_simd0; 
   8f630:	790583e3 	strh	w3, [sp, #704]
   8f634:	390b0be2 	strb	w2, [sp, #706]
   8f638:	a9435bf5 	ldp	x21, x22, [sp, #48]
   8f63c:	17ffd989 	b	85c60 <disasm+0x1c80>
		op=((ic32_26)&0x8)|((ic32_13)&0x6)|((ic32_12)&0x1); j=((ic32_10)&0x2)|((ic32_21)&0x1); m=((ic32_16)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8f640:	531a7c01 	lsr	w1, w0, #26
   8f644:	121f056b 	and	w11, w11, #0x6
   8f648:	121d0021 	and	w1, w1, #0x8
   8f64c:	12000146 	and	w6, w10, #0x1
   8f650:	2a0b0021 	orr	w1, w1, w11
   8f654:	121f0294 	and	w20, w20, #0x2
   8f658:	1200018c 	and	w12, w12, #0x1
		names="smlal2\0sqdmlal2\0smlsl2\0sqdmlsl2\0smull2\0sqdmull2\0?\0?\0umlal2\0?\0umlsl2\0?\0umull2\0";
   8f65c:	90000023 	adrp	x3, 93000 <sd_init+0x1470>
   8f660:	91162063 	add	x3, x3, #0x588
		op=((ic32_26)&0x8)|((ic32_13)&0x6)|((ic32_12)&0x1); j=((ic32_10)&0x2)|((ic32_21)&0x1); m=((ic32_16)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8f664:	120010a4 	and	w4, w5, #0x1f
   8f668:	12001059 	and	w25, w2, #0x1f
   8f66c:	1200101a 	and	w26, w0, #0x1f
		args[0]=disasm_arg_Vtz; args[1]=disasm_arg_VnT; args[2]=disasm_arg_VmTs; 
   8f670:	12800c82 	mov	w2, #0xffffff9b            	// #-101
		names="smlal2\0sqdmlal2\0smlsl2\0sqdmlsl2\0smull2\0sqdmull2\0?\0?\0umlal2\0?\0umlsl2\0?\0umull2\0";
   8f674:	91212060 	add	x0, x3, #0x848
		op=((ic32_26)&0x8)|((ic32_13)&0x6)|((ic32_12)&0x1); j=((ic32_10)&0x2)|((ic32_21)&0x1); m=((ic32_16)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8f678:	2a060021 	orr	w1, w1, w6
		args[0]=disasm_arg_Vtz; args[1]=disasm_arg_VnT; args[2]=disasm_arg_VmTs; 
   8f67c:	128f6e23 	mov	w3, #0xffff848e            	// #-31602
		op=((ic32_26)&0x8)|((ic32_13)&0x6)|((ic32_12)&0x1); j=((ic32_10)&0x2)|((ic32_21)&0x1); m=((ic32_16)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8f680:	2a0c0294 	orr	w20, w20, w12
		z=2;q=1;
   8f684:	52800057 	mov	w23, #0x2                   	// #2
   8f688:	52800038 	mov	w24, #0x1                   	// #1
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8f68c:	5280001b 	mov	w27, #0x0                   	// #0
	uint32_t i=0;
   8f690:	290effff 	stp	wzr, wzr, [sp, #116]
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8f694:	290fffe4 	stp	w4, wzr, [sp, #124]
   8f698:	29117fff 	stp	wzr, wzr, [sp, #136]
   8f69c:	29127fff 	stp	wzr, wzr, [sp, #144]
   8f6a0:	b9009bff 	str	wzr, [sp, #152]
		args[0]=disasm_arg_Vtz; args[1]=disasm_arg_VnT; args[2]=disasm_arg_VmTs; 
   8f6a4:	790583e3 	strh	w3, [sp, #704]
   8f6a8:	390b0be2 	strb	w2, [sp, #706]
   8f6ac:	a9435bf5 	ldp	x21, x22, [sp, #48]
   8f6b0:	17ffd96c 	b	85c60 <disasm+0x1c80>
		names="sshll2\0usshll2\0";
   8f6b4:	90000023 	adrp	x3, 93000 <sd_init+0x1470>
   8f6b8:	91162063 	add	x3, x3, #0x588
		op=((ic32_29)&0x1); j=((ic32_16)&0x7f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8f6bc:	120002a1 	and	w1, w21, #0x1
   8f6c0:	12001059 	and	w25, w2, #0x1f
   8f6c4:	1200101a 	and	w26, w0, #0x1f
		args[0]=disasm_arg_Vtj2; args[1]=disasm_arg_VnTa; args[2]=disasm_arg_shlshift; 
   8f6c8:	12800d42 	mov	w2, #0xffffff95            	// #-107
		names="sshll2\0usshll2\0";
   8f6cc:	91236060 	add	x0, x3, #0x8d8
		op=((ic32_29)&0x1); j=((ic32_16)&0x7f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8f6d0:	120018b4 	and	w20, w5, #0x7f
		args[0]=disasm_arg_Vtj2; args[1]=disasm_arg_VnTa; args[2]=disasm_arg_shlshift; 
   8f6d4:	128d0d83 	mov	w3, #0xffff9793            	// #-26733
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8f6d8:	52800017 	mov	w23, #0x0                   	// #0
		q=1;
   8f6dc:	52800038 	mov	w24, #0x1                   	// #1
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8f6e0:	5280001b 	mov	w27, #0x0                   	// #0
	uint32_t i=0;
   8f6e4:	290effff 	stp	wzr, wzr, [sp, #116]
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8f6e8:	290fffff 	stp	wzr, wzr, [sp, #124]
   8f6ec:	29117fff 	stp	wzr, wzr, [sp, #136]
   8f6f0:	29127fff 	stp	wzr, wzr, [sp, #144]
   8f6f4:	b9009bff 	str	wzr, [sp, #152]
		args[0]=disasm_arg_Vtj2; args[1]=disasm_arg_VnTa; args[2]=disasm_arg_shlshift; 
   8f6f8:	790583e3 	strh	w3, [sp, #704]
   8f6fc:	390b0be2 	strb	w2, [sp, #706]
   8f700:	a9435bf5 	ldp	x21, x22, [sp, #48]
   8f704:	17ffd957 	b	85c60 <disasm+0x1c80>
		op=((ic32_27)&0x4)|((ic32_11)&0x3); j=((ic32_16)&0x7f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8f708:	121e0021 	and	w1, w1, #0x4
   8f70c:	120005ad 	and	w13, w13, #0x3
		names="?\0rshrn2\0sqshrn2\0sqrshrn2\0sqshrun2\0sqrshrun2\0uqshrn2\0uqrshrn2\0";
   8f710:	90000023 	adrp	x3, 93000 <sd_init+0x1470>
   8f714:	91162063 	add	x3, x3, #0x588
		op=((ic32_27)&0x4)|((ic32_11)&0x3); j=((ic32_16)&0x7f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8f718:	12001059 	and	w25, w2, #0x1f
   8f71c:	1200101a 	and	w26, w0, #0x1f
		args[0]=disasm_arg_Vtj2; args[1]=disasm_arg_VnTa; args[2]=disasm_arg_shrshift; 
   8f720:	12800da2 	mov	w2, #0xffffff92            	// #-110
		names="?\0rshrn2\0sqshrn2\0sqrshrn2\0sqshrun2\0sqrshrun2\0uqshrn2\0uqrshrn2\0";
   8f724:	91226060 	add	x0, x3, #0x898
		op=((ic32_27)&0x4)|((ic32_11)&0x3); j=((ic32_16)&0x7f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8f728:	2a0d0021 	orr	w1, w1, w13
		args[0]=disasm_arg_Vtj2; args[1]=disasm_arg_VnTa; args[2]=disasm_arg_shrshift; 
   8f72c:	128d0d83 	mov	w3, #0xffff9793            	// #-26733
		op=((ic32_27)&0x4)|((ic32_11)&0x3); j=((ic32_16)&0x7f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8f730:	120018b4 	and	w20, w5, #0x7f
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8f734:	52800017 	mov	w23, #0x0                   	// #0
		q=1;
   8f738:	52800038 	mov	w24, #0x1                   	// #1
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8f73c:	5280001b 	mov	w27, #0x0                   	// #0
	uint32_t i=0;
   8f740:	290effff 	stp	wzr, wzr, [sp, #116]
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8f744:	290fffff 	stp	wzr, wzr, [sp, #124]
   8f748:	29117fff 	stp	wzr, wzr, [sp, #136]
   8f74c:	29127fff 	stp	wzr, wzr, [sp, #144]
   8f750:	b9009bff 	str	wzr, [sp, #152]
		args[0]=disasm_arg_Vtj2; args[1]=disasm_arg_VnTa; args[2]=disasm_arg_shrshift; 
   8f754:	790583e3 	strh	w3, [sp, #704]
   8f758:	390b0be2 	strb	w2, [sp, #706]
   8f75c:	a9435bf5 	ldp	x21, x22, [sp, #48]
   8f760:	17ffd940 	b	85c60 <disasm+0x1c80>
		op=((ic32_26)&0x8)|((ic32_13)&0x6)|((ic32_12)&0x1); j=((ic32_9)&0x4)|((ic32_20)&0x3); m=((ic32_16)&0xf); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8f764:	531a7c01 	lsr	w1, w0, #26
   8f768:	121f056b 	and	w11, w11, #0x6
   8f76c:	121d0021 	and	w1, w1, #0x8
   8f770:	12000146 	and	w6, w10, #0x1
   8f774:	2a0b0021 	orr	w1, w1, w11
   8f778:	121e01ef 	and	w15, w15, #0x4
   8f77c:	12000508 	and	w8, w8, #0x3
		names="smlal2\0sqdmlal2\0smlsl2\0sqdmlsl2\0smull2\0sqdmull2\0?\0?\0umlal2\0?\0umlsl2\0?\0umull2\0";
   8f780:	90000023 	adrp	x3, 93000 <sd_init+0x1470>
   8f784:	91162063 	add	x3, x3, #0x588
		op=((ic32_26)&0x8)|((ic32_13)&0x6)|((ic32_12)&0x1); j=((ic32_9)&0x4)|((ic32_20)&0x3); m=((ic32_16)&0xf); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8f788:	12000ca4 	and	w4, w5, #0xf
   8f78c:	12001059 	and	w25, w2, #0x1f
   8f790:	1200101a 	and	w26, w0, #0x1f
		args[0]=disasm_arg_Vtz; args[1]=disasm_arg_VnT; args[2]=disasm_arg_VmTs; 
   8f794:	12800c82 	mov	w2, #0xffffff9b            	// #-101
		names="smlal2\0sqdmlal2\0smlsl2\0sqdmlsl2\0smull2\0sqdmull2\0?\0?\0umlal2\0?\0umlsl2\0?\0umull2\0";
   8f798:	91212060 	add	x0, x3, #0x848
		z=1;q=1;
   8f79c:	52800037 	mov	w23, #0x1                   	// #1
		args[0]=disasm_arg_Vtz; args[1]=disasm_arg_VnT; args[2]=disasm_arg_VmTs; 
   8f7a0:	128f6e23 	mov	w3, #0xffff848e            	// #-31602
		op=((ic32_26)&0x8)|((ic32_13)&0x6)|((ic32_12)&0x1); j=((ic32_9)&0x4)|((ic32_20)&0x3); m=((ic32_16)&0xf); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8f7a4:	2a060021 	orr	w1, w1, w6
   8f7a8:	2a0801f4 	orr	w20, w15, w8
		z=1;q=1;
   8f7ac:	2a1703f8 	mov	w24, w23
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8f7b0:	5280001b 	mov	w27, #0x0                   	// #0
	uint32_t i=0;
   8f7b4:	290effff 	stp	wzr, wzr, [sp, #116]
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8f7b8:	290fffe4 	stp	w4, wzr, [sp, #124]
   8f7bc:	29117fff 	stp	wzr, wzr, [sp, #136]
   8f7c0:	29127fff 	stp	wzr, wzr, [sp, #144]
   8f7c4:	b9009bff 	str	wzr, [sp, #152]
		args[0]=disasm_arg_Vtz; args[1]=disasm_arg_VnT; args[2]=disasm_arg_VmTs; 
   8f7c8:	790583e3 	strh	w3, [sp, #704]
   8f7cc:	390b0be2 	strb	w2, [sp, #706]
   8f7d0:	a9435bf5 	ldp	x21, x22, [sp, #48]
   8f7d4:	17ffd923 	b	85c60 <disasm+0x1c80>
		op=((ic32_25)&0x10)|((ic32_12)&0xf); z=((ic32_22)&0x3); m=((ic32_16)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8f7d8:	121c02e1 	and	w1, w23, #0x10
   8f7dc:	12000d4a 	and	w10, w10, #0xf
		names="saddl2\0saddw2\0ssubl2\0ssubw2\0addhn2\0sabal2\0subhn2\0sabdl2\0smlal2\0sqdmlal2\0smlsl2\0sqdmlsl2\0?\0sqdmull2\0pmull2\0?\0uaddl2\0uaddw2\0usubl2\0usubw2\0raddhn2\0uabal2\0rsubhn2\0uabdl2\0umlal2\0?\0umlsl2\0?\0?\0?\0umull2\0";
   8f7e0:	90000023 	adrp	x3, 93000 <sd_init+0x1470>
   8f7e4:	91162063 	add	x3, x3, #0x588
		op=((ic32_25)&0x10)|((ic32_12)&0xf); z=((ic32_22)&0x3); m=((ic32_16)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8f7e8:	120010a4 	and	w4, w5, #0x1f
   8f7ec:	12001059 	and	w25, w2, #0x1f
   8f7f0:	1200101a 	and	w26, w0, #0x1f
		args[0]=disasm_arg_VtT3; args[1]=disasm_arg_VnT; args[2]=disasm_arg_VmT; 
   8f7f4:	12800f42 	mov	w2, #0xffffff85            	// #-123
		names="saddl2\0saddw2\0ssubl2\0ssubw2\0addhn2\0sabal2\0subhn2\0sabdl2\0smlal2\0sqdmlal2\0smlsl2\0sqdmlsl2\0?\0sqdmull2\0pmull2\0?\0uaddl2\0uaddw2\0usubl2\0usubw2\0raddhn2\0uabal2\0rsubhn2\0uabdl2\0umlal2\0?\0umlsl2\0?\0?\0?\0umull2\0";
   8f7f8:	911e0060 	add	x0, x3, #0x780
		op=((ic32_25)&0x10)|((ic32_12)&0xf); z=((ic32_22)&0x3); m=((ic32_16)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8f7fc:	2a0a0021 	orr	w1, w1, w10
		args[0]=disasm_arg_VtT3; args[1]=disasm_arg_VnT; args[2]=disasm_arg_VmT; 
   8f800:	128f6aa3 	mov	w3, #0xffff84aa            	// #-31574
		op=((ic32_25)&0x10)|((ic32_12)&0xf); z=((ic32_22)&0x3); m=((ic32_16)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8f804:	120004f7 	and	w23, w7, #0x3
		q=1;
   8f808:	52800038 	mov	w24, #0x1                   	// #1
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8f80c:	5280001b 	mov	w27, #0x0                   	// #0
	uint16_t op=0, om=0, j=0;
   8f810:	52800014 	mov	w20, #0x0                   	// #0
	uint32_t i=0;
   8f814:	290effff 	stp	wzr, wzr, [sp, #116]
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8f818:	290fffe4 	stp	w4, wzr, [sp, #124]
   8f81c:	29117fff 	stp	wzr, wzr, [sp, #136]
   8f820:	29127fff 	stp	wzr, wzr, [sp, #144]
   8f824:	b9009bff 	str	wzr, [sp, #152]
		args[0]=disasm_arg_VtT3; args[1]=disasm_arg_VnT; args[2]=disasm_arg_VmT; 
   8f828:	790583e3 	strh	w3, [sp, #704]
   8f82c:	390b0be2 	strb	w2, [sp, #706]
   8f830:	a9435bf5 	ldp	x21, x22, [sp, #48]
   8f834:	17ffd90b 	b	85c60 <disasm+0x1c80>
		names="pmull2\0umull2\0";
   8f838:	90000023 	adrp	x3, 93000 <sd_init+0x1470>
   8f83c:	91162063 	add	x3, x3, #0x588
		op=((ic32_29)&0x1); z=((ic32_22)&0x3); m=((ic32_16)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8f840:	120002a1 	and	w1, w21, #0x1
   8f844:	120010a4 	and	w4, w5, #0x1f
   8f848:	12001059 	and	w25, w2, #0x1f
   8f84c:	1200101a 	and	w26, w0, #0x1f
		args[0]=disasm_arg_VtT4; args[1]=disasm_arg_VnT; args[2]=disasm_arg_VmT; 
   8f850:	12800f42 	mov	w2, #0xffffff85            	// #-123
		names="pmull2\0umull2\0";
   8f854:	911dc060 	add	x0, x3, #0x770
		op=((ic32_29)&0x1); z=((ic32_22)&0x3); m=((ic32_16)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8f858:	120004f7 	and	w23, w7, #0x3
		args[0]=disasm_arg_VtT4; args[1]=disasm_arg_VnT; args[2]=disasm_arg_VmT; 
   8f85c:	128f6a63 	mov	w3, #0xffff84ac            	// #-31572
		q=1;
   8f860:	52800038 	mov	w24, #0x1                   	// #1
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8f864:	5280001b 	mov	w27, #0x0                   	// #0
	uint16_t op=0, om=0, j=0;
   8f868:	52800014 	mov	w20, #0x0                   	// #0
	uint32_t i=0;
   8f86c:	290effff 	stp	wzr, wzr, [sp, #116]
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8f870:	290fffe4 	stp	w4, wzr, [sp, #124]
   8f874:	29117fff 	stp	wzr, wzr, [sp, #136]
   8f878:	29127fff 	stp	wzr, wzr, [sp, #144]
   8f87c:	b9009bff 	str	wzr, [sp, #152]
		args[0]=disasm_arg_VtT4; args[1]=disasm_arg_VnT; args[2]=disasm_arg_VmT; 
   8f880:	790583e3 	strh	w3, [sp, #704]
   8f884:	390b0be2 	strb	w2, [sp, #706]
   8f888:	a9435bf5 	ldp	x21, x22, [sp, #48]
   8f88c:	17ffd8f5 	b	85c60 <disasm+0x1c80>
		op=((ic32_28)&0x2)|((ic32_13)&0x1); z=((ic32_22)&0x3); m=((ic32_16)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8f890:	121f0301 	and	w1, w24, #0x2
   8f894:	1200016b 	and	w11, w11, #0x1
		names="addhn2\0subhn2\0raddhn2\0rsubhn2\0";
   8f898:	90000023 	adrp	x3, 93000 <sd_init+0x1470>
   8f89c:	91162063 	add	x3, x3, #0x588
		op=((ic32_28)&0x2)|((ic32_13)&0x1); z=((ic32_22)&0x3); m=((ic32_16)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8f8a0:	120010a4 	and	w4, w5, #0x1f
   8f8a4:	12001059 	and	w25, w2, #0x1f
   8f8a8:	1200101a 	and	w26, w0, #0x1f
		args[0]=disasm_arg_VtT; args[1]=disasm_arg_VnT3; args[2]=disasm_arg_VmT3; 
   8f8ac:	12800a82 	mov	w2, #0xffffffab            	// #-85
		names="addhn2\0subhn2\0raddhn2\0rsubhn2\0";
   8f8b0:	911d4060 	add	x0, x3, #0x750
		op=((ic32_28)&0x2)|((ic32_13)&0x1); z=((ic32_22)&0x3); m=((ic32_16)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8f8b4:	2a0b0021 	orr	w1, w1, w11
		args[0]=disasm_arg_VtT; args[1]=disasm_arg_VnT3; args[2]=disasm_arg_VmT3; 
   8f8b8:	128edb43 	mov	w3, #0xffff8925            	// #-30427
		op=((ic32_28)&0x2)|((ic32_13)&0x1); z=((ic32_22)&0x3); m=((ic32_16)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8f8bc:	120004f7 	and	w23, w7, #0x3
		q=1;
   8f8c0:	52800038 	mov	w24, #0x1                   	// #1
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8f8c4:	5280001b 	mov	w27, #0x0                   	// #0
	uint16_t op=0, om=0, j=0;
   8f8c8:	52800014 	mov	w20, #0x0                   	// #0
	uint32_t i=0;
   8f8cc:	290effff 	stp	wzr, wzr, [sp, #116]
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8f8d0:	290fffe4 	stp	w4, wzr, [sp, #124]
   8f8d4:	29117fff 	stp	wzr, wzr, [sp, #136]
   8f8d8:	29127fff 	stp	wzr, wzr, [sp, #144]
   8f8dc:	b9009bff 	str	wzr, [sp, #152]
		args[0]=disasm_arg_VtT; args[1]=disasm_arg_VnT3; args[2]=disasm_arg_VmT3; 
   8f8e0:	790583e3 	strh	w3, [sp, #704]
   8f8e4:	390b0be2 	strb	w2, [sp, #706]
   8f8e8:	a9435bf5 	ldp	x21, x22, [sp, #48]
   8f8ec:	17ffd8dd 	b	85c60 <disasm+0x1c80>
		op=((ic32_28)&0x2)|((ic32_13)&0x1); z=((ic32_22)&0x3); m=((ic32_16)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8f8f0:	121f0301 	and	w1, w24, #0x2
   8f8f4:	1200016b 	and	w11, w11, #0x1
		names="saddw2\0ssubw2\0uaddw2\0usubw2\0";
   8f8f8:	90000023 	adrp	x3, 93000 <sd_init+0x1470>
   8f8fc:	91162063 	add	x3, x3, #0x588
		op=((ic32_28)&0x2)|((ic32_13)&0x1); z=((ic32_22)&0x3); m=((ic32_16)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8f900:	120010a4 	and	w4, w5, #0x1f
   8f904:	12001059 	and	w25, w2, #0x1f
   8f908:	1200101a 	and	w26, w0, #0x1f
		args[0]=disasm_arg_VtT3; args[1]=disasm_arg_VnT3; args[2]=disasm_arg_VmT; 
   8f90c:	12800f42 	mov	w2, #0xffffff85            	// #-123
		names="saddw2\0ssubw2\0uaddw2\0usubw2\0";
   8f910:	911cc060 	add	x0, x3, #0x730
		op=((ic32_28)&0x2)|((ic32_13)&0x1); z=((ic32_22)&0x3); m=((ic32_16)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8f914:	2a0b0021 	orr	w1, w1, w11
		args[0]=disasm_arg_VtT3; args[1]=disasm_arg_VnT3; args[2]=disasm_arg_VmT; 
   8f918:	128ecaa3 	mov	w3, #0xffff89aa            	// #-30294
		op=((ic32_28)&0x2)|((ic32_13)&0x1); z=((ic32_22)&0x3); m=((ic32_16)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8f91c:	120004f7 	and	w23, w7, #0x3
		q=1;
   8f920:	52800038 	mov	w24, #0x1                   	// #1
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8f924:	5280001b 	mov	w27, #0x0                   	// #0
	uint16_t op=0, om=0, j=0;
   8f928:	52800014 	mov	w20, #0x0                   	// #0
	uint32_t i=0;
   8f92c:	290effff 	stp	wzr, wzr, [sp, #116]
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8f930:	290fffe4 	stp	w4, wzr, [sp, #124]
   8f934:	29117fff 	stp	wzr, wzr, [sp, #136]
   8f938:	29127fff 	stp	wzr, wzr, [sp, #144]
   8f93c:	b9009bff 	str	wzr, [sp, #152]
		args[0]=disasm_arg_VtT3; args[1]=disasm_arg_VnT3; args[2]=disasm_arg_VmT; 
   8f940:	790583e3 	strh	w3, [sp, #704]
   8f944:	390b0be2 	strb	w2, [sp, #706]
   8f948:	a9435bf5 	ldp	x21, x22, [sp, #48]
   8f94c:	17ffd8c5 	b	85c60 <disasm+0x1c80>
		op=((ic32_27)&0x4)|((ic32_13)&0x3); z=((ic32_22)&0x3); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8f950:	121e0021 	and	w1, w1, #0x4
   8f954:	1200056b 	and	w11, w11, #0x3
		names="?\0xtn2\0sqxtn2\0?\0?\0sqxtun2\0uqxtn2\0fcvtxn2\0";
   8f958:	90000023 	adrp	x3, 93000 <sd_init+0x1470>
   8f95c:	91162063 	add	x3, x3, #0x588
		op=((ic32_27)&0x4)|((ic32_13)&0x3); z=((ic32_22)&0x3); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8f960:	12001059 	and	w25, w2, #0x1f
   8f964:	1200101a 	and	w26, w0, #0x1f
		args[0]=disasm_arg_VtT; args[1]=disasm_arg_VnT3; 
   8f968:	128edb42 	mov	w2, #0xffff8925            	// #-30427
		op=((ic32_27)&0x4)|((ic32_13)&0x3); z=((ic32_22)&0x3); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8f96c:	2a0b0021 	orr	w1, w1, w11
   8f970:	120004f7 	and	w23, w7, #0x3
		names="?\0xtn2\0sqxtn2\0?\0?\0sqxtun2\0uqxtn2\0fcvtxn2\0";
   8f974:	911c0060 	add	x0, x3, #0x700
		q=1;
   8f978:	52800038 	mov	w24, #0x1                   	// #1
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8f97c:	5280001b 	mov	w27, #0x0                   	// #0
	uint16_t op=0, om=0, j=0;
   8f980:	52800014 	mov	w20, #0x0                   	// #0
	uint32_t i=0;
   8f984:	290effff 	stp	wzr, wzr, [sp, #116]
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8f988:	290fffff 	stp	wzr, wzr, [sp, #124]
   8f98c:	29117fff 	stp	wzr, wzr, [sp, #136]
   8f990:	29127fff 	stp	wzr, wzr, [sp, #144]
   8f994:	b9009bff 	str	wzr, [sp, #152]
		args[0]=disasm_arg_VtT; args[1]=disasm_arg_VnT3; 
   8f998:	790583e2 	strh	w2, [sp, #704]
   8f99c:	a9435bf5 	ldp	x21, x22, [sp, #48]
   8f9a0:	17ffd8b0 	b	85c60 <disasm+0x1c80>
		op=((ic32_13)&0x1); j=((ic32_10)&0x2)|((ic32_21)&0x1); m=((ic32_16)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8f9a4:	121f0294 	and	w20, w20, #0x2
   8f9a8:	1200018c 	and	w12, w12, #0x1
		names="sqrdmlah\0sqrdmlsh\0";
   8f9ac:	90000023 	adrp	x3, 93000 <sd_init+0x1470>
   8f9b0:	91162063 	add	x3, x3, #0x588
		op=((ic32_13)&0x1); j=((ic32_10)&0x2)|((ic32_21)&0x1); m=((ic32_16)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8f9b4:	120010a4 	and	w4, w5, #0x1f
   8f9b8:	12001059 	and	w25, w2, #0x1f
   8f9bc:	1200101a 	and	w26, w0, #0x1f
		args[0]=disasm_arg_FPz4t; args[1]=disasm_arg_FPz3n; args[2]=disasm_arg_VmTs; 
   8f9c0:	12800c82 	mov	w2, #0xffffff9b            	// #-101
		names="sqrdmlah\0sqrdmlsh\0";
   8f9c4:	911ac060 	add	x0, x3, #0x6b0
		op=((ic32_13)&0x1); j=((ic32_10)&0x2)|((ic32_21)&0x1); m=((ic32_16)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8f9c8:	2a0c0294 	orr	w20, w20, w12
		args[0]=disasm_arg_FPz4t; args[1]=disasm_arg_FPz3n; args[2]=disasm_arg_VmTs; 
   8f9cc:	128f0e43 	mov	w3, #0xffff878d            	// #-30835
		op=((ic32_13)&0x1); j=((ic32_10)&0x2)|((ic32_21)&0x1); m=((ic32_16)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8f9d0:	12000161 	and	w1, w11, #0x1
		z=2;
   8f9d4:	52800057 	mov	w23, #0x2                   	// #2
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8f9d8:	52800018 	mov	w24, #0x0                   	// #0
   8f9dc:	5280001b 	mov	w27, #0x0                   	// #0
	uint32_t i=0;
   8f9e0:	290effff 	stp	wzr, wzr, [sp, #116]
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8f9e4:	290fffe4 	stp	w4, wzr, [sp, #124]
   8f9e8:	29117fff 	stp	wzr, wzr, [sp, #136]
   8f9ec:	29127fff 	stp	wzr, wzr, [sp, #144]
   8f9f0:	b9009bff 	str	wzr, [sp, #152]
		args[0]=disasm_arg_FPz4t; args[1]=disasm_arg_FPz3n; args[2]=disasm_arg_VmTs; 
   8f9f4:	790583e3 	strh	w3, [sp, #704]
   8f9f8:	390b0be2 	strb	w2, [sp, #706]
   8f9fc:	a9435bf5 	ldp	x21, x22, [sp, #48]
   8fa00:	17ffd898 	b	85c60 <disasm+0x1c80>
		names="uqshl\0";
   8fa04:	90000021 	adrp	x1, 93000 <sd_init+0x1470>
   8fa08:	91162021 	add	x1, x1, #0x588
		j=((ic32_16)&0x7f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8fa0c:	12001059 	and	w25, w2, #0x1f
   8fa10:	1200101a 	and	w26, w0, #0x1f
		args[0]=disasm_arg_FPjt2; args[1]=disasm_arg_FPjn2; args[2]=disasm_arg_shlshift; 
   8fa14:	128ccce3 	mov	w3, #0xffff9998            	// #-26216
		names="uqshl\0";
   8fa18:	911be020 	add	x0, x1, #0x6f8
		args[0]=disasm_arg_FPjt2; args[1]=disasm_arg_FPjn2; args[2]=disasm_arg_shlshift; 
   8fa1c:	12800d42 	mov	w2, #0xffffff95            	// #-107
		j=((ic32_16)&0x7f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8fa20:	120018b4 	and	w20, w5, #0x7f
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8fa24:	52800017 	mov	w23, #0x0                   	// #0
   8fa28:	52800018 	mov	w24, #0x0                   	// #0
   8fa2c:	5280001b 	mov	w27, #0x0                   	// #0
	uint16_t op=0, om=0, j=0;
   8fa30:	52800001 	mov	w1, #0x0                   	// #0
	uint32_t i=0;
   8fa34:	290effff 	stp	wzr, wzr, [sp, #116]
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8fa38:	290fffff 	stp	wzr, wzr, [sp, #124]
   8fa3c:	29117fff 	stp	wzr, wzr, [sp, #136]
   8fa40:	29127fff 	stp	wzr, wzr, [sp, #144]
   8fa44:	b9009bff 	str	wzr, [sp, #152]
		args[0]=disasm_arg_FPjt2; args[1]=disasm_arg_FPjn2; args[2]=disasm_arg_shlshift; 
   8fa48:	790583e3 	strh	w3, [sp, #704]
   8fa4c:	390b0be2 	strb	w2, [sp, #706]
   8fa50:	a9435bf5 	ldp	x21, x22, [sp, #48]
   8fa54:	17ffd883 	b	85c60 <disasm+0x1c80>
		names="sqshlu\0";
   8fa58:	90000021 	adrp	x1, 93000 <sd_init+0x1470>
   8fa5c:	91162021 	add	x1, x1, #0x588
		j=((ic32_16)&0x7f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8fa60:	12001059 	and	w25, w2, #0x1f
   8fa64:	1200101a 	and	w26, w0, #0x1f
		args[0]=disasm_arg_Dt; args[1]=disasm_arg_Dn; args[2]=disasm_arg_shlshift; 
   8fa68:	128dcde3 	mov	w3, #0xffff9190            	// #-28272
		names="sqshlu\0";
   8fa6c:	911bc020 	add	x0, x1, #0x6f0
		args[0]=disasm_arg_Dt; args[1]=disasm_arg_Dn; args[2]=disasm_arg_shlshift; 
   8fa70:	12800d42 	mov	w2, #0xffffff95            	// #-107
		j=((ic32_16)&0x7f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8fa74:	120018b4 	and	w20, w5, #0x7f
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8fa78:	52800017 	mov	w23, #0x0                   	// #0
   8fa7c:	52800018 	mov	w24, #0x0                   	// #0
   8fa80:	5280001b 	mov	w27, #0x0                   	// #0
	uint16_t op=0, om=0, j=0;
   8fa84:	52800001 	mov	w1, #0x0                   	// #0
	uint32_t i=0;
   8fa88:	290effff 	stp	wzr, wzr, [sp, #116]
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8fa8c:	290fffff 	stp	wzr, wzr, [sp, #124]
   8fa90:	29117fff 	stp	wzr, wzr, [sp, #136]
   8fa94:	29127fff 	stp	wzr, wzr, [sp, #144]
   8fa98:	b9009bff 	str	wzr, [sp, #152]
		args[0]=disasm_arg_Dt; args[1]=disasm_arg_Dn; args[2]=disasm_arg_shlshift; 
   8fa9c:	790583e3 	strh	w3, [sp, #704]
   8faa0:	390b0be2 	strb	w2, [sp, #706]
   8faa4:	a9435bf5 	ldp	x21, x22, [sp, #48]
   8faa8:	17ffd86e 	b	85c60 <disasm+0x1c80>
		op=((ic32_13)&0x1); j=((ic32_9)&0x4)|((ic32_20)&0x3); m=((ic32_16)&0xf); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8faac:	121e01ef 	and	w15, w15, #0x4
   8fab0:	12000508 	and	w8, w8, #0x3
		names="sqrdmlah\0sqrdmlsh\0";
   8fab4:	90000023 	adrp	x3, 93000 <sd_init+0x1470>
   8fab8:	91162063 	add	x3, x3, #0x588
		op=((ic32_13)&0x1); j=((ic32_9)&0x4)|((ic32_20)&0x3); m=((ic32_16)&0xf); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8fabc:	12000ca4 	and	w4, w5, #0xf
   8fac0:	12001059 	and	w25, w2, #0x1f
   8fac4:	1200101a 	and	w26, w0, #0x1f
		args[0]=disasm_arg_FPz4t; args[1]=disasm_arg_FPz3n; args[2]=disasm_arg_VmTs; 
   8fac8:	12800c82 	mov	w2, #0xffffff9b            	// #-101
		names="sqrdmlah\0sqrdmlsh\0";
   8facc:	911ac060 	add	x0, x3, #0x6b0
		op=((ic32_13)&0x1); j=((ic32_9)&0x4)|((ic32_20)&0x3); m=((ic32_16)&0xf); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8fad0:	2a0801f4 	orr	w20, w15, w8
		args[0]=disasm_arg_FPz4t; args[1]=disasm_arg_FPz3n; args[2]=disasm_arg_VmTs; 
   8fad4:	128f0e43 	mov	w3, #0xffff878d            	// #-30835
		op=((ic32_13)&0x1); j=((ic32_9)&0x4)|((ic32_20)&0x3); m=((ic32_16)&0xf); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8fad8:	12000161 	and	w1, w11, #0x1
		z=1;
   8fadc:	52800037 	mov	w23, #0x1                   	// #1
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8fae0:	52800018 	mov	w24, #0x0                   	// #0
   8fae4:	5280001b 	mov	w27, #0x0                   	// #0
	uint32_t i=0;
   8fae8:	290effff 	stp	wzr, wzr, [sp, #116]
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8faec:	290fffe4 	stp	w4, wzr, [sp, #124]
   8faf0:	29117fff 	stp	wzr, wzr, [sp, #136]
   8faf4:	29127fff 	stp	wzr, wzr, [sp, #144]
   8faf8:	b9009bff 	str	wzr, [sp, #152]
		args[0]=disasm_arg_FPz4t; args[1]=disasm_arg_FPz3n; args[2]=disasm_arg_VmTs; 
   8fafc:	790583e3 	strh	w3, [sp, #704]
   8fb00:	390b0be2 	strb	w2, [sp, #706]
   8fb04:	a9435bf5 	ldp	x21, x22, [sp, #48]
   8fb08:	17ffd856 	b	85c60 <disasm+0x1c80>
		op=((ic32_21)&0x4)|((ic32_12)&0x3); z=((ic32_22)&0x1); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8fb0c:	121e0181 	and	w1, w12, #0x4
   8fb10:	1200054a 	and	w10, w10, #0x3
		names="?\0faddp\0?\0fmaxp\0fminnmp\0?\0?\0fminp\0";
   8fb14:	90000023 	adrp	x3, 93000 <sd_init+0x1470>
   8fb18:	91162063 	add	x3, x3, #0x588
		op=((ic32_21)&0x4)|((ic32_12)&0x3); z=((ic32_22)&0x1); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8fb1c:	12001059 	and	w25, w2, #0x1f
   8fb20:	1200101a 	and	w26, w0, #0x1f
		args[0]=disasm_arg_FPt; args[1]=disasm_arg_Vnz; 
   8fb24:	128e7562 	mov	w2, #0xffff8c54            	// #-29612
		op=((ic32_21)&0x4)|((ic32_12)&0x3); z=((ic32_22)&0x1); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8fb28:	2a0a0021 	orr	w1, w1, w10
   8fb2c:	120000f7 	and	w23, w7, #0x1
		names="?\0faddp\0?\0fmaxp\0fminnmp\0?\0?\0fminp\0";
   8fb30:	911b2060 	add	x0, x3, #0x6c8
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8fb34:	52800018 	mov	w24, #0x0                   	// #0
   8fb38:	5280001b 	mov	w27, #0x0                   	// #0
	uint16_t op=0, om=0, j=0;
   8fb3c:	52800014 	mov	w20, #0x0                   	// #0
	uint32_t i=0;
   8fb40:	290effff 	stp	wzr, wzr, [sp, #116]
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8fb44:	290fffff 	stp	wzr, wzr, [sp, #124]
   8fb48:	29117fff 	stp	wzr, wzr, [sp, #136]
   8fb4c:	29127fff 	stp	wzr, wzr, [sp, #144]
   8fb50:	b9009bff 	str	wzr, [sp, #152]
		args[0]=disasm_arg_FPt; args[1]=disasm_arg_Vnz; 
   8fb54:	790583e2 	strh	w2, [sp, #704]
   8fb58:	a9435bf5 	ldp	x21, x22, [sp, #48]
   8fb5c:	17ffd841 	b	85c60 <disasm+0x1c80>
		names="sqrdmlah\0sqrdmlsh\0";
   8fb60:	90000023 	adrp	x3, 93000 <sd_init+0x1470>
   8fb64:	91162063 	add	x3, x3, #0x588
		op=((ic32_11)&0x1); z=((ic32_22)&0x3); m=((ic32_16)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8fb68:	120010a4 	and	w4, w5, #0x1f
   8fb6c:	12001059 	and	w25, w2, #0x1f
   8fb70:	1200101a 	and	w26, w0, #0x1f
		args[0]=disasm_arg_FPz2t; args[1]=disasm_arg_FPz2n; args[2]=disasm_arg_FPz2m; 
   8fb74:	12800f82 	mov	w2, #0xffffff83            	// #-125
		names="sqrdmlah\0sqrdmlsh\0";
   8fb78:	911ac060 	add	x0, x3, #0x6b0
		op=((ic32_11)&0x1); z=((ic32_22)&0x3); m=((ic32_16)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8fb7c:	120001a1 	and	w1, w13, #0x1
		args[0]=disasm_arg_FPz2t; args[1]=disasm_arg_FPz2n; args[2]=disasm_arg_FPz2m; 
   8fb80:	128fafc3 	mov	w3, #0xffff8281            	// #-32127
		op=((ic32_11)&0x1); z=((ic32_22)&0x3); m=((ic32_16)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8fb84:	120004f7 	and	w23, w7, #0x3
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8fb88:	52800018 	mov	w24, #0x0                   	// #0
   8fb8c:	5280001b 	mov	w27, #0x0                   	// #0
	uint16_t op=0, om=0, j=0;
   8fb90:	52800014 	mov	w20, #0x0                   	// #0
	uint32_t i=0;
   8fb94:	290effff 	stp	wzr, wzr, [sp, #116]
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8fb98:	290fffe4 	stp	w4, wzr, [sp, #124]
   8fb9c:	29117fff 	stp	wzr, wzr, [sp, #136]
   8fba0:	29127fff 	stp	wzr, wzr, [sp, #144]
   8fba4:	b9009bff 	str	wzr, [sp, #152]
		args[0]=disasm_arg_FPz2t; args[1]=disasm_arg_FPz2n; args[2]=disasm_arg_FPz2m; 
   8fba8:	790583e3 	strh	w3, [sp, #704]
   8fbac:	390b0be2 	strb	w2, [sp, #706]
   8fbb0:	a9435bf5 	ldp	x21, x22, [sp, #48]
   8fbb4:	17ffd82b 	b	85c60 <disasm+0x1c80>
		names="fcmgt\0facgt\0";
   8fbb8:	90000023 	adrp	x3, 93000 <sd_init+0x1470>
   8fbbc:	91162063 	add	x3, x3, #0x588
		op=((ic32_11)&0x1); z=((ic32_22)&0x1); m=((ic32_16)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8fbc0:	120010a4 	and	w4, w5, #0x1f
   8fbc4:	12001059 	and	w25, w2, #0x1f
   8fbc8:	1200101a 	and	w26, w0, #0x1f
		args[0]=disasm_arg_FPt; args[1]=disasm_arg_FPn; args[2]=disasm_arg_FPm; 
   8fbcc:	52800ae2 	mov	w2, #0x57                  	// #87
		names="fcmgt\0facgt\0";
   8fbd0:	911a8060 	add	x0, x3, #0x6a0
		op=((ic32_11)&0x1); z=((ic32_22)&0x1); m=((ic32_16)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8fbd4:	120001a1 	and	w1, w13, #0x1
		args[0]=disasm_arg_FPt; args[1]=disasm_arg_FPn; args[2]=disasm_arg_FPm; 
   8fbd8:	528f2a83 	mov	w3, #0x7954                	// #31060
		op=((ic32_11)&0x1); z=((ic32_22)&0x1); m=((ic32_16)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8fbdc:	120000f7 	and	w23, w7, #0x1
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8fbe0:	52800018 	mov	w24, #0x0                   	// #0
   8fbe4:	5280001b 	mov	w27, #0x0                   	// #0
	uint16_t op=0, om=0, j=0;
   8fbe8:	52800014 	mov	w20, #0x0                   	// #0
	uint32_t i=0;
   8fbec:	290effff 	stp	wzr, wzr, [sp, #116]
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8fbf0:	290fffe4 	stp	w4, wzr, [sp, #124]
   8fbf4:	29117fff 	stp	wzr, wzr, [sp, #136]
   8fbf8:	29127fff 	stp	wzr, wzr, [sp, #144]
   8fbfc:	b9009bff 	str	wzr, [sp, #152]
		args[0]=disasm_arg_FPt; args[1]=disasm_arg_FPn; args[2]=disasm_arg_FPm; 
   8fc00:	790583e3 	strh	w3, [sp, #704]
   8fc04:	390b0be2 	strb	w2, [sp, #706]
   8fc08:	a9435bf5 	ldp	x21, x22, [sp, #48]
   8fc0c:	17ffd815 	b	85c60 <disasm+0x1c80>
		z=((ic32_22)&0x1); m=((ic32_16)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8fc10:	120010a3 	and	w3, w5, #0x1f
		names="fabd\0";
   8fc14:	90000021 	adrp	x1, 93000 <sd_init+0x1470>
   8fc18:	91162021 	add	x1, x1, #0x588
		z=((ic32_22)&0x1); m=((ic32_16)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8fc1c:	12001059 	and	w25, w2, #0x1f
   8fc20:	1200101a 	and	w26, w0, #0x1f
		args[0]=disasm_arg_FPt; args[1]=disasm_arg_FPn; args[2]=disasm_arg_FPm; 
   8fc24:	52800ae2 	mov	w2, #0x57                  	// #87
		names="fabd\0";
   8fc28:	911a6020 	add	x0, x1, #0x698
		z=((ic32_22)&0x1); m=((ic32_16)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8fc2c:	120000f7 	and	w23, w7, #0x1
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8fc30:	52800018 	mov	w24, #0x0                   	// #0
   8fc34:	5280001b 	mov	w27, #0x0                   	// #0
	uint16_t op=0, om=0, j=0;
   8fc38:	52800014 	mov	w20, #0x0                   	// #0
   8fc3c:	52800001 	mov	w1, #0x0                   	// #0
	uint32_t i=0;
   8fc40:	290effff 	stp	wzr, wzr, [sp, #116]
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8fc44:	290fffe3 	stp	w3, wzr, [sp, #124]
		args[0]=disasm_arg_FPt; args[1]=disasm_arg_FPn; args[2]=disasm_arg_FPm; 
   8fc48:	528f2a83 	mov	w3, #0x7954                	// #31060
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8fc4c:	29117fff 	stp	wzr, wzr, [sp, #136]
   8fc50:	29127fff 	stp	wzr, wzr, [sp, #144]
   8fc54:	b9009bff 	str	wzr, [sp, #152]
		args[0]=disasm_arg_FPt; args[1]=disasm_arg_FPn; args[2]=disasm_arg_FPm; 
   8fc58:	790583e3 	strh	w3, [sp, #704]
   8fc5c:	390b0be2 	strb	w2, [sp, #706]
   8fc60:	a9435bf5 	ldp	x21, x22, [sp, #48]
   8fc64:	17ffd7ff 	b	85c60 <disasm+0x1c80>
		names="fcmgt\0facgt\0";
   8fc68:	90000023 	adrp	x3, 93000 <sd_init+0x1470>
   8fc6c:	91162063 	add	x3, x3, #0x588
		op=((ic32_11)&0x1); m=((ic32_16)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8fc70:	120010a4 	and	w4, w5, #0x1f
   8fc74:	12001059 	and	w25, w2, #0x1f
   8fc78:	1200101a 	and	w26, w0, #0x1f
		args[0]=disasm_arg_Ht; args[1]=disasm_arg_Hn; args[2]=disasm_arg_Hm; 
   8fc7c:	52800f02 	mov	w2, #0x78                  	// #120
		names="fcmgt\0facgt\0";
   8fc80:	911a8060 	add	x0, x3, #0x6a0
		op=((ic32_11)&0x1); m=((ic32_16)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8fc84:	120001a1 	and	w1, w13, #0x1
		args[0]=disasm_arg_Ht; args[1]=disasm_arg_Hn; args[2]=disasm_arg_Hm; 
   8fc88:	528eeec3 	mov	w3, #0x7776                	// #30582
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8fc8c:	52800017 	mov	w23, #0x0                   	// #0
   8fc90:	52800018 	mov	w24, #0x0                   	// #0
   8fc94:	5280001b 	mov	w27, #0x0                   	// #0
	uint16_t op=0, om=0, j=0;
   8fc98:	52800014 	mov	w20, #0x0                   	// #0
	uint32_t i=0;
   8fc9c:	290effff 	stp	wzr, wzr, [sp, #116]
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8fca0:	290fffe4 	stp	w4, wzr, [sp, #124]
   8fca4:	29117fff 	stp	wzr, wzr, [sp, #136]
   8fca8:	29127fff 	stp	wzr, wzr, [sp, #144]
   8fcac:	b9009bff 	str	wzr, [sp, #152]
		args[0]=disasm_arg_Ht; args[1]=disasm_arg_Hn; args[2]=disasm_arg_Hm; 
   8fcb0:	790583e3 	strh	w3, [sp, #704]
   8fcb4:	390b0be2 	strb	w2, [sp, #706]
   8fcb8:	a9435bf5 	ldp	x21, x22, [sp, #48]
   8fcbc:	17ffd7e9 	b	85c60 <disasm+0x1c80>
		m=((ic32_16)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8fcc0:	120010a3 	and	w3, w5, #0x1f
		names="fabd\0";
   8fcc4:	90000021 	adrp	x1, 93000 <sd_init+0x1470>
   8fcc8:	91162021 	add	x1, x1, #0x588
		m=((ic32_16)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8fccc:	12001059 	and	w25, w2, #0x1f
   8fcd0:	1200101a 	and	w26, w0, #0x1f
		args[0]=disasm_arg_Ht; args[1]=disasm_arg_Hn; args[2]=disasm_arg_Hm; 
   8fcd4:	52800f02 	mov	w2, #0x78                  	// #120
		names="fabd\0";
   8fcd8:	911a6020 	add	x0, x1, #0x698
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8fcdc:	52800017 	mov	w23, #0x0                   	// #0
   8fce0:	52800018 	mov	w24, #0x0                   	// #0
   8fce4:	5280001b 	mov	w27, #0x0                   	// #0
	uint16_t op=0, om=0, j=0;
   8fce8:	52800014 	mov	w20, #0x0                   	// #0
   8fcec:	52800001 	mov	w1, #0x0                   	// #0
	uint32_t i=0;
   8fcf0:	290effff 	stp	wzr, wzr, [sp, #116]
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8fcf4:	290fffe3 	stp	w3, wzr, [sp, #124]
		args[0]=disasm_arg_Ht; args[1]=disasm_arg_Hn; args[2]=disasm_arg_Hm; 
   8fcf8:	528eeec3 	mov	w3, #0x7776                	// #30582
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8fcfc:	29117fff 	stp	wzr, wzr, [sp, #136]
   8fd00:	29127fff 	stp	wzr, wzr, [sp, #144]
   8fd04:	b9009bff 	str	wzr, [sp, #152]
		args[0]=disasm_arg_Ht; args[1]=disasm_arg_Hn; args[2]=disasm_arg_Hm; 
   8fd08:	790583e3 	strh	w3, [sp, #704]
   8fd0c:	390b0be2 	strb	w2, [sp, #706]
   8fd10:	a9435bf5 	ldp	x21, x22, [sp, #48]
   8fd14:	17ffd7d3 	b	85c60 <disasm+0x1c80>
		names="fcmge\0facge\0";
   8fd18:	90000023 	adrp	x3, 93000 <sd_init+0x1470>
   8fd1c:	91162063 	add	x3, x3, #0x588
		op=((ic32_11)&0x1); z=((ic32_22)&0x1); m=((ic32_16)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8fd20:	120010a4 	and	w4, w5, #0x1f
   8fd24:	12001059 	and	w25, w2, #0x1f
   8fd28:	1200101a 	and	w26, w0, #0x1f
		args[0]=disasm_arg_FPt; args[1]=disasm_arg_FPn; args[2]=disasm_arg_FPm; 
   8fd2c:	52800ae2 	mov	w2, #0x57                  	// #87
		names="fcmge\0facge\0";
   8fd30:	911a2060 	add	x0, x3, #0x688
		op=((ic32_11)&0x1); z=((ic32_22)&0x1); m=((ic32_16)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8fd34:	120001a1 	and	w1, w13, #0x1
		args[0]=disasm_arg_FPt; args[1]=disasm_arg_FPn; args[2]=disasm_arg_FPm; 
   8fd38:	528f2a83 	mov	w3, #0x7954                	// #31060
		op=((ic32_11)&0x1); z=((ic32_22)&0x1); m=((ic32_16)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8fd3c:	120000f7 	and	w23, w7, #0x1
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8fd40:	52800018 	mov	w24, #0x0                   	// #0
   8fd44:	5280001b 	mov	w27, #0x0                   	// #0
	uint16_t op=0, om=0, j=0;
   8fd48:	52800014 	mov	w20, #0x0                   	// #0
	uint32_t i=0;
   8fd4c:	290effff 	stp	wzr, wzr, [sp, #116]
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8fd50:	290fffe4 	stp	w4, wzr, [sp, #124]
   8fd54:	29117fff 	stp	wzr, wzr, [sp, #136]
   8fd58:	29127fff 	stp	wzr, wzr, [sp, #144]
   8fd5c:	b9009bff 	str	wzr, [sp, #152]
		args[0]=disasm_arg_FPt; args[1]=disasm_arg_FPn; args[2]=disasm_arg_FPm; 
   8fd60:	790583e3 	strh	w3, [sp, #704]
   8fd64:	390b0be2 	strb	w2, [sp, #706]
   8fd68:	a9435bf5 	ldp	x21, x22, [sp, #48]
   8fd6c:	17ffd7bd 	b	85c60 <disasm+0x1c80>
		names="fcmge\0facge\0";
   8fd70:	90000023 	adrp	x3, 93000 <sd_init+0x1470>
   8fd74:	91162063 	add	x3, x3, #0x588
		op=((ic32_11)&0x1); m=((ic32_16)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8fd78:	120010a4 	and	w4, w5, #0x1f
   8fd7c:	12001059 	and	w25, w2, #0x1f
   8fd80:	1200101a 	and	w26, w0, #0x1f
		args[0]=disasm_arg_Ht; args[1]=disasm_arg_Hn; args[2]=disasm_arg_Hm; 
   8fd84:	52800f02 	mov	w2, #0x78                  	// #120
		names="fcmge\0facge\0";
   8fd88:	911a2060 	add	x0, x3, #0x688
		op=((ic32_11)&0x1); m=((ic32_16)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8fd8c:	120001a1 	and	w1, w13, #0x1
		args[0]=disasm_arg_Ht; args[1]=disasm_arg_Hn; args[2]=disasm_arg_Hm; 
   8fd90:	528eeec3 	mov	w3, #0x7776                	// #30582
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8fd94:	52800017 	mov	w23, #0x0                   	// #0
   8fd98:	52800018 	mov	w24, #0x0                   	// #0
   8fd9c:	5280001b 	mov	w27, #0x0                   	// #0
	uint16_t op=0, om=0, j=0;
   8fda0:	52800014 	mov	w20, #0x0                   	// #0
	uint32_t i=0;
   8fda4:	290effff 	stp	wzr, wzr, [sp, #116]
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8fda8:	290fffe4 	stp	w4, wzr, [sp, #124]
   8fdac:	29117fff 	stp	wzr, wzr, [sp, #136]
   8fdb0:	29127fff 	stp	wzr, wzr, [sp, #144]
   8fdb4:	b9009bff 	str	wzr, [sp, #152]
		args[0]=disasm_arg_Ht; args[1]=disasm_arg_Hn; args[2]=disasm_arg_Hm; 
   8fdb8:	790583e3 	strh	w3, [sp, #704]
   8fdbc:	390b0be2 	strb	w2, [sp, #706]
   8fdc0:	a9435bf5 	ldp	x21, x22, [sp, #48]
   8fdc4:	17ffd7a7 	b	85c60 <disasm+0x1c80>
		names="fmaxnmp\0";
   8fdc8:	90000021 	adrp	x1, 93000 <sd_init+0x1470>
   8fdcc:	91162021 	add	x1, x1, #0x588
		z=((ic32_21)&0x1); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8fdd0:	12001059 	and	w25, w2, #0x1f
   8fdd4:	1200101a 	and	w26, w0, #0x1f
		args[0]=disasm_arg_FPt; args[1]=disasm_arg_Vnz; 
   8fdd8:	128e7562 	mov	w2, #0xffff8c54            	// #-29612
		names="fmaxnmp\0";
   8fddc:	9119e020 	add	x0, x1, #0x678
		z=((ic32_21)&0x1); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8fde0:	12000197 	and	w23, w12, #0x1
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8fde4:	52800018 	mov	w24, #0x0                   	// #0
   8fde8:	5280001b 	mov	w27, #0x0                   	// #0
	uint16_t op=0, om=0, j=0;
   8fdec:	52800014 	mov	w20, #0x0                   	// #0
   8fdf0:	52800001 	mov	w1, #0x0                   	// #0
	uint32_t i=0;
   8fdf4:	290effff 	stp	wzr, wzr, [sp, #116]
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8fdf8:	290fffff 	stp	wzr, wzr, [sp, #124]
   8fdfc:	29117fff 	stp	wzr, wzr, [sp, #136]
   8fe00:	29127fff 	stp	wzr, wzr, [sp, #144]
   8fe04:	b9009bff 	str	wzr, [sp, #152]
		args[0]=disasm_arg_FPt; args[1]=disasm_arg_Vnz; 
   8fe08:	790583e2 	strh	w2, [sp, #704]
   8fe0c:	a9435bf5 	ldp	x21, x22, [sp, #48]
   8fe10:	17ffd794 	b	85c60 <disasm+0x1c80>
		op=((ic32_18)&0x30)|((ic32_12)&0xf); d=((ic32_16)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8fe14:	53127c01 	lsr	w1, w0, #18
		names="ldaddh\0ldclrh\0ldeorh\0ldseth\0ldsmaxh\0ldsminh\0ldumaxh\0lduminh\0swph\0?\0?\0?\0?\0?\0?\0?\0ldaddlh\0ldclrlh\0ldeorlh\0ldsetlh\0ldsmaxlh\0ldsminlh\0ldumaxlh\0lduminlh\0swplh\0?\0?\0?\0?\0?\0?\0?\0ldaddah\0ldclrah\0ldeorah\0ldsetah\0ldsmaxah\0ldsminah\0ldumaxah\0lduminah\0swpah\0?\0?\0?\0?\0?\0?\0?\0ldaddalh\0ldclralh\0ldeoralh\0ldsetalh\0ldsmaxalh\0ldsminalh\0ldumaxalh\0lduminalh\0swpalh\0";
   8fe18:	90000023 	adrp	x3, 93000 <sd_init+0x1470>
   8fe1c:	91162063 	add	x3, x3, #0x588
		op=((ic32_18)&0x30)|((ic32_12)&0xf); d=((ic32_16)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8fe20:	121c0421 	and	w1, w1, #0x30
   8fe24:	12000d4a 	and	w10, w10, #0xf
   8fe28:	1200101a 	and	w26, w0, #0x1f
		names="ldaddh\0ldclrh\0ldeorh\0ldseth\0ldsmaxh\0ldsminh\0ldumaxh\0lduminh\0swph\0?\0?\0?\0?\0?\0?\0?\0ldaddlh\0ldclrlh\0ldeorlh\0ldsetlh\0ldsmaxlh\0ldsminlh\0ldumaxlh\0lduminlh\0swplh\0?\0?\0?\0?\0?\0?\0?\0ldaddah\0ldclrah\0ldeorah\0ldsetah\0ldsmaxah\0ldsminah\0ldumaxah\0lduminah\0swpah\0?\0?\0?\0?\0?\0?\0?\0ldaddalh\0ldclralh\0ldeoralh\0ldsetalh\0ldsmaxalh\0ldsminalh\0ldumaxalh\0lduminalh\0swpalh\0";
   8fe2c:	91148060 	add	x0, x3, #0x520
		args[0]=disasm_arg_Wd; args[1]=disasm_arg_Wt; args[2]=disasm_arg_offs; args[3]=disasm_arg_XnS; args[4]=disasm_arg_offe; 
   8fe30:	528a6a43 	mov	w3, #0x5352                	// #21330
		op=((ic32_18)&0x30)|((ic32_12)&0xf); d=((ic32_16)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8fe34:	120010a4 	and	w4, w5, #0x1f
   8fe38:	12001059 	and	w25, w2, #0x1f
		args[0]=disasm_arg_Wd; args[1]=disasm_arg_Wt; args[2]=disasm_arg_offs; args[3]=disasm_arg_XnS; args[4]=disasm_arg_offe; 
   8fe3c:	72a54523 	movk	w3, #0x2a29, lsl #16
   8fe40:	52800562 	mov	w2, #0x2b                  	// #43
		op=((ic32_18)&0x30)|((ic32_12)&0xf); d=((ic32_16)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8fe44:	2a0a0021 	orr	w1, w1, w10
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8fe48:	52800017 	mov	w23, #0x0                   	// #0
   8fe4c:	52800018 	mov	w24, #0x0                   	// #0
   8fe50:	5280001b 	mov	w27, #0x0                   	// #0
	uint16_t op=0, om=0, j=0;
   8fe54:	52800014 	mov	w20, #0x0                   	// #0
	uint32_t i=0;
   8fe58:	290effff 	stp	wzr, wzr, [sp, #116]
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8fe5c:	290fffff 	stp	wzr, wzr, [sp, #124]
   8fe60:	29117fe4 	stp	w4, wzr, [sp, #136]
   8fe64:	29127fff 	stp	wzr, wzr, [sp, #144]
   8fe68:	b9009bff 	str	wzr, [sp, #152]
		args[0]=disasm_arg_Wd; args[1]=disasm_arg_Wt; args[2]=disasm_arg_offs; args[3]=disasm_arg_XnS; args[4]=disasm_arg_offe; 
   8fe6c:	b902c3e3 	str	w3, [sp, #704]
   8fe70:	390b13e2 	strb	w2, [sp, #708]
   8fe74:	a9435bf5 	ldp	x21, x22, [sp, #48]
   8fe78:	17ffd77a 	b	85c60 <disasm+0x1c80>
		j=((ic32_11)&0xe0)|((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8fe7c:	12001042 	and	w2, w2, #0x1f
   8fe80:	121b09ad 	and	w13, w13, #0xe0
		names="fmov\0";
   8fe84:	90000021 	adrp	x1, 93000 <sd_init+0x1470>
   8fe88:	91162021 	add	x1, x1, #0x588
		j=((ic32_11)&0xe0)|((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8fe8c:	2a0201b4 	orr	w20, w13, w2
   8fe90:	1200101a 	and	w26, w0, #0x1f
		args[0]=disasm_arg_Vt2d; args[1]=disasm_arg_F64; 
   8fe94:	128969c2 	mov	w2, #0xffffb4b1            	// #-19279
		names="fmov\0";
   8fe98:	d101a020 	sub	x0, x1, #0x68
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8fe9c:	52800017 	mov	w23, #0x0                   	// #0
   8fea0:	52800018 	mov	w24, #0x0                   	// #0
   8fea4:	52800019 	mov	w25, #0x0                   	// #0
   8fea8:	5280001b 	mov	w27, #0x0                   	// #0
	uint16_t op=0, om=0, j=0;
   8feac:	52800001 	mov	w1, #0x0                   	// #0
	uint32_t i=0;
   8feb0:	290effff 	stp	wzr, wzr, [sp, #116]
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8feb4:	290fffff 	stp	wzr, wzr, [sp, #124]
   8feb8:	29117fff 	stp	wzr, wzr, [sp, #136]
   8febc:	29127fff 	stp	wzr, wzr, [sp, #144]
   8fec0:	b9009bff 	str	wzr, [sp, #152]
		args[0]=disasm_arg_Vt2d; args[1]=disasm_arg_F64; 
   8fec4:	790583e2 	strh	w2, [sp, #704]
   8fec8:	a9435bf5 	ldp	x21, x22, [sp, #48]
   8fecc:	17ffd765 	b	85c60 <disasm+0x1c80>
		j=((ic32_11)&0xe0)|((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8fed0:	12001042 	and	w2, w2, #0x1f
   8fed4:	121b09ad 	and	w13, w13, #0xe0
		names="movi\0";
   8fed8:	90000021 	adrp	x1, 93000 <sd_init+0x1470>
   8fedc:	91162021 	add	x1, x1, #0x588
		j=((ic32_11)&0xe0)|((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8fee0:	2a0201b4 	orr	w20, w13, w2
   8fee4:	1200101a 	and	w26, w0, #0x1f
		args[0]=disasm_arg_Vt2d; args[1]=disasm_arg_imm64; 
   8fee8:	1289e9c2 	mov	w2, #0xffffb0b1            	// #-20303
		names="movi\0";
   8feec:	91004020 	add	x0, x1, #0x10
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8fef0:	52800017 	mov	w23, #0x0                   	// #0
   8fef4:	52800018 	mov	w24, #0x0                   	// #0
   8fef8:	52800019 	mov	w25, #0x0                   	// #0
   8fefc:	5280001b 	mov	w27, #0x0                   	// #0
	uint16_t op=0, om=0, j=0;
   8ff00:	52800001 	mov	w1, #0x0                   	// #0
	uint32_t i=0;
   8ff04:	290effff 	stp	wzr, wzr, [sp, #116]
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8ff08:	290fffff 	stp	wzr, wzr, [sp, #124]
   8ff0c:	29117fff 	stp	wzr, wzr, [sp, #136]
   8ff10:	29127fff 	stp	wzr, wzr, [sp, #144]
   8ff14:	b9009bff 	str	wzr, [sp, #152]
		args[0]=disasm_arg_Vt2d; args[1]=disasm_arg_imm64; 
   8ff18:	790583e2 	strh	w2, [sp, #704]
   8ff1c:	a9435bf5 	ldp	x21, x22, [sp, #48]
   8ff20:	17ffd750 	b	85c60 <disasm+0x1c80>
		op=((ic32_21)&0x4)|((ic32_12)&0x3); z=((ic32_22)&0x1); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8ff24:	121e0181 	and	w1, w12, #0x4
   8ff28:	1200054a 	and	w10, w10, #0x3
		names="fmaxnmv\0?\0?\0fmaxv\0fminnmv\0?\0?\0fminv\0";
   8ff2c:	90000023 	adrp	x3, 93000 <sd_init+0x1470>
   8ff30:	91162063 	add	x3, x3, #0x588
		op=((ic32_21)&0x4)|((ic32_12)&0x3); z=((ic32_22)&0x1); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8ff34:	12001059 	and	w25, w2, #0x1f
   8ff38:	1200101a 	and	w26, w0, #0x1f
		args[0]=disasm_arg_FPt; args[1]=disasm_arg_Vn4s; 
   8ff3c:	528dea82 	mov	w2, #0x6f54                	// #28500
		op=((ic32_21)&0x4)|((ic32_12)&0x3); z=((ic32_22)&0x1); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8ff40:	2a0a0021 	orr	w1, w1, w10
   8ff44:	120000f7 	and	w23, w7, #0x1
		names="fmaxnmv\0?\0?\0fmaxv\0fminnmv\0?\0?\0fminv\0";
   8ff48:	9113e060 	add	x0, x3, #0x4f8
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8ff4c:	52800018 	mov	w24, #0x0                   	// #0
   8ff50:	5280001b 	mov	w27, #0x0                   	// #0
	uint16_t op=0, om=0, j=0;
   8ff54:	52800014 	mov	w20, #0x0                   	// #0
	uint32_t i=0;
   8ff58:	290effff 	stp	wzr, wzr, [sp, #116]
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8ff5c:	290fffff 	stp	wzr, wzr, [sp, #124]
   8ff60:	29117fff 	stp	wzr, wzr, [sp, #136]
   8ff64:	29127fff 	stp	wzr, wzr, [sp, #144]
   8ff68:	b9009bff 	str	wzr, [sp, #152]
		args[0]=disasm_arg_FPt; args[1]=disasm_arg_Vn4s; 
   8ff6c:	790583e2 	strh	w2, [sp, #704]
   8ff70:	a9435bf5 	ldp	x21, x22, [sp, #48]
   8ff74:	17ffd73b 	b	85c60 <disasm+0x1c80>
		*str=0;
   8ff78:	a9035bf5 	stp	x21, x22, [sp, #48]
   8ff7c:	a90463f7 	stp	x23, x24, [sp, #64]
   8ff80:	a9056bf9 	stp	x25, x26, [sp, #80]
   8ff84:	3900027f 	strb	wzr, [x19]
   8ff88:	d4207d00 	brk	#0x3e8
   8ff8c:	d503201f 	nop

000000000008ff90 <dbg_decodeexc>:

/**
 * Decode exception cause
 */
void dbg_decodeexc(unsigned long type)
{
   8ff90:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   8ff94:	f100041f 	cmp	x0, #0x1
   8ff98:	910003fd 	mov	x29, sp
   8ff9c:	a90153f3 	stp	x19, x20, [sp, #16]
	unsigned char cause=dbg_regs[33]>>26;
   8ffa0:	d000aa34 	adrp	x20, 15d5000 <allocated+0xfb940>
   8ffa4:	911b0294 	add	x20, x20, #0x6c0
   8ffa8:	f9408693 	ldr	x19, [x20, #264]
   8ffac:	d35a8673 	ubfx	x19, x19, #26, #8

	// print out interruption type
	switch(type) {
   8ffb0:	54000dc0 	b.eq	90168 <dbg_decodeexc+0x1d8>  // b.none
   8ffb4:	b4000d20 	cbz	x0, 90158 <dbg_decodeexc+0x1c8>
   8ffb8:	f100081f 	cmp	x0, #0x2
   8ffbc:	54000c60 	b.eq	90148 <dbg_decodeexc+0x1b8>  // b.none
   8ffc0:	f1000c1f 	cmp	x0, #0x3
   8ffc4:	54000081 	b.ne	8ffd4 <dbg_decodeexc+0x44>  // b.any
		case 0: printf("Synchronous"); break;
		case 1: printf("IRQ"); break;
		case 2: printf("FIQ"); break;
		case 3: printf("SError"); break;
   8ffc8:	d0000020 	adrp	x0, 95000 <sd_init+0x3470>
   8ffcc:	91216000 	add	x0, x0, #0x858
   8ffd0:	97ffc2f8 	bl	80bb0 <printf>
	}
	printf(": ");
   8ffd4:	f0000000 	adrp	x0, 92000 <sd_init+0x470>
   8ffd8:	910a4000 	add	x0, x0, #0x290
   8ffdc:	97ffc2f5 	bl	80bb0 <printf>
	// decode exception type (some, not all. See ARM DDI0487B_b chapter D10.2.28)
	switch(cause) {
   8ffe0:	71008a7f 	cmp	w19, #0x22
   8ffe4:	54000f20 	b.eq	901c8 <dbg_decodeexc+0x238>  // b.none
   8ffe8:	54000589 	b.ls	90098 <dbg_decodeexc+0x108>  // b.plast
   8ffec:	7100b27f 	cmp	w19, #0x2c
   8fff0:	54000f40 	b.eq	901d8 <dbg_decodeexc+0x248>  // b.none
   8fff4:	540007a9 	b.ls	900e8 <dbg_decodeexc+0x158>  // b.plast
   8fff8:	7100c67f 	cmp	w19, #0x31
   8fffc:	54000f60 	b.eq	901e8 <dbg_decodeexc+0x258>  // b.none
   90000:	7100f27f 	cmp	w19, #0x3c
   90004:	54000fa0 	b.eq	901f8 <dbg_decodeexc+0x268>  // b.none
   90008:	7100c27f 	cmp	w19, #0x30
   9000c:	540010e0 	b.eq	90228 <dbg_decodeexc+0x298>  // b.none
		case 0b100110: printf("Stack alignment fault"); break;
		case 0b101100: printf("Floating point"); break;
		case 0b110000: printf("Breakpoint, lower EL"); break;
		case 0b110001: printf("Breakpoint, same EL"); break;
		case 0b111100: printf("Breakpoint instruction"); break;
		default: printf("Unknown %x", cause); break;
   90010:	b0000020 	adrp	x0, 95000 <sd_init+0x3470>
   90014:	2a1303e1 	mov	w1, w19
   90018:	91268000 	add	x0, x0, #0x9a0
   9001c:	97ffc2e5 	bl	80bb0 <printf>
	}
	// decode data abort cause
	if(cause==0b100100 || cause==0b100101) {
   90020:	51009260 	sub	w0, w19, #0x24
   90024:	12001c00 	and	w0, w0, #0xff
   90028:	7100041f 	cmp	w0, #0x1
   9002c:	540004c8 	b.hi	900c4 <dbg_decodeexc+0x134>  // b.pmore
		printf(", ");
   90030:	b0000020 	adrp	x0, 95000 <sd_init+0x3470>
   90034:	912b0000 	add	x0, x0, #0xac0
   90038:	97ffc2de 	bl	80bb0 <printf>
		switch((dbg_regs[33]>>2)&0x3) {
   9003c:	f9408680 	ldr	x0, [x20, #264]
   90040:	d3420c00 	ubfx	x0, x0, #2, #2
   90044:	f100081f 	cmp	x0, #0x2
   90048:	54000a00 	b.eq	90188 <dbg_decodeexc+0x1f8>  // b.none
   9004c:	f1000c1f 	cmp	x0, #0x3
   90050:	54000940 	b.eq	90178 <dbg_decodeexc+0x1e8>  // b.none
   90054:	f100041f 	cmp	x0, #0x1
   90058:	54001100 	b.eq	90278 <dbg_decodeexc+0x2e8>  // b.none
			case 0: printf("Address size fault"); break;
   9005c:	b0000020 	adrp	x0, 95000 <sd_init+0x3470>
   90060:	9126c000 	add	x0, x0, #0x9b0
   90064:	97ffc2d3 	bl	80bb0 <printf>
			case 1: printf("Translation fault"); break;
			case 2: printf("Access flag fault"); break;
			case 3: printf("Permission fault"); break;
		}
		switch(dbg_regs[33]&0x3) {
   90068:	f9408680 	ldr	x0, [x20, #264]
   9006c:	92400400 	and	x0, x0, #0x3
   90070:	f100081f 	cmp	x0, #0x2
   90074:	54000a20 	b.eq	901b8 <dbg_decodeexc+0x228>  // b.none
   90078:	f1000c1f 	cmp	x0, #0x3
   9007c:	54000960 	b.eq	901a8 <dbg_decodeexc+0x218>  // b.none
   90080:	f100041f 	cmp	x0, #0x1
   90084:	540008a0 	b.eq	90198 <dbg_decodeexc+0x208>  // b.none
			case 0: printf(" at level 0"); break;
   90088:	b0000020 	adrp	x0, 95000 <sd_init+0x3470>
   9008c:	91284000 	add	x0, x0, #0xa10
   90090:	97ffc2c8 	bl	80bb0 <printf>
   90094:	1400000c 	b	900c4 <dbg_decodeexc+0x134>
   90098:	71003a7f 	cmp	w19, #0xe
   9009c:	54000b60 	b.eq	90208 <dbg_decodeexc+0x278>  // b.none
   900a0:	54000389 	b.ls	90110 <dbg_decodeexc+0x180>  // b.plast
   900a4:	7100827f 	cmp	w19, #0x20
   900a8:	54000b80 	b.eq	90218 <dbg_decodeexc+0x288>  // b.none
   900ac:	54000c68 	b.hi	90238 <dbg_decodeexc+0x2a8>  // b.pmore
   900b0:	7100567f 	cmp	w19, #0x15
   900b4:	54fffae1 	b.ne	90010 <dbg_decodeexc+0x80>  // b.any
		case 0b010101: printf("System call"); break;
   900b8:	b0000020 	adrp	x0, 95000 <sd_init+0x3470>
   900bc:	91224000 	add	x0, x0, #0x890
   900c0:	97ffc2bc 	bl	80bb0 <printf>
			case 1: printf(" at level 1"); break;
			case 2: printf(" at level 2"); break;
			case 3: printf(" at level 3"); break;
		}
	}
	printf("\n");
   900c4:	b0000020 	adrp	x0, 95000 <sd_init+0x3470>
   900c8:	912ae000 	add	x0, x0, #0xab8
   900cc:	97ffc2b9 	bl	80bb0 <printf>
	// if the exception happened in the debugger, we stop to avoid infinite loop
	if(dbg_running) {
   900d0:	b0009a60 	adrp	x0, 13dd000 <_binary_src_audio_The_Amazons_bin_size+0x96300>
   900d4:	39528000 	ldrb	w0, [x0, #1184]
   900d8:	350002a0 	cbnz	w0, 9012c <dbg_decodeexc+0x19c>
		printf("Exception in debugger!\n"
			"  elr_el1: %x  spsr_el1: %x\n  esr_el1: %x  far_el1: %x\nsctlr_el1: %x  tcr_el1: %x\n",
			dbg_regs[31],dbg_regs[32],dbg_regs[33],dbg_regs[34],dbg_regs[35],dbg_regs[36]);
		while(1);
	}
}
   900dc:	a94153f3 	ldp	x19, x20, [sp, #16]
   900e0:	a8c27bfd 	ldp	x29, x30, [sp], #32
   900e4:	d65f03c0 	ret
   900e8:	7100967f 	cmp	w19, #0x25
   900ec:	54000ae0 	b.eq	90248 <dbg_decodeexc+0x2b8>  // b.none
   900f0:	71009a7f 	cmp	w19, #0x26
   900f4:	54000b20 	b.eq	90258 <dbg_decodeexc+0x2c8>  // b.none
   900f8:	7100927f 	cmp	w19, #0x24
   900fc:	54fff8a1 	b.ne	90010 <dbg_decodeexc+0x80>  // b.any
		case 0b100100: printf("Data abort, lower EL"); break;
   90100:	b0000020 	adrp	x0, 95000 <sd_init+0x3470>
   90104:	91240000 	add	x0, x0, #0x900
   90108:	97ffc2aa 	bl	80bb0 <printf>
   9010c:	17ffffc9 	b	90030 <dbg_decodeexc+0xa0>
   90110:	34000ad3 	cbz	w19, 90268 <dbg_decodeexc+0x2d8>
   90114:	7100067f 	cmp	w19, #0x1
   90118:	54fff7c1 	b.ne	90010 <dbg_decodeexc+0x80>  // b.any
		case 0b000001: printf("Trapped WFI/WFE"); break;
   9011c:	b0000020 	adrp	x0, 95000 <sd_init+0x3470>
   90120:	9121a000 	add	x0, x0, #0x868
   90124:	97ffc2a3 	bl	80bb0 <printf>
   90128:	17ffffe7 	b	900c4 <dbg_decodeexc+0x134>
		printf("Exception in debugger!\n"
   9012c:	a94f8a81 	ldp	x1, x2, [x20, #248]
   90130:	b0000020 	adrp	x0, 95000 <sd_init+0x3470>
   90134:	a9509283 	ldp	x3, x4, [x20, #264]
   90138:	91294000 	add	x0, x0, #0xa50
   9013c:	a9519a85 	ldp	x5, x6, [x20, #280]
   90140:	97ffc29c 	bl	80bb0 <printf>
		while(1);
   90144:	14000000 	b	90144 <dbg_decodeexc+0x1b4>
		case 2: printf("FIQ"); break;
   90148:	b0000020 	adrp	x0, 95000 <sd_init+0x3470>
   9014c:	91214000 	add	x0, x0, #0x850
   90150:	97ffc298 	bl	80bb0 <printf>
   90154:	17ffffa0 	b	8ffd4 <dbg_decodeexc+0x44>
		case 0: printf("Synchronous"); break;
   90158:	b0000020 	adrp	x0, 95000 <sd_init+0x3470>
   9015c:	9120e000 	add	x0, x0, #0x838
   90160:	97ffc294 	bl	80bb0 <printf>
   90164:	17ffff9c 	b	8ffd4 <dbg_decodeexc+0x44>
		case 1: printf("IRQ"); break;
   90168:	b0000020 	adrp	x0, 95000 <sd_init+0x3470>
   9016c:	91212000 	add	x0, x0, #0x848
   90170:	97ffc290 	bl	80bb0 <printf>
   90174:	17ffff98 	b	8ffd4 <dbg_decodeexc+0x44>
			case 3: printf("Permission fault"); break;
   90178:	b0000020 	adrp	x0, 95000 <sd_init+0x3470>
   9017c:	9127e000 	add	x0, x0, #0x9f8
   90180:	97ffc28c 	bl	80bb0 <printf>
   90184:	17ffffb9 	b	90068 <dbg_decodeexc+0xd8>
			case 2: printf("Access flag fault"); break;
   90188:	b0000020 	adrp	x0, 95000 <sd_init+0x3470>
   9018c:	91278000 	add	x0, x0, #0x9e0
   90190:	97ffc288 	bl	80bb0 <printf>
   90194:	17ffffb5 	b	90068 <dbg_decodeexc+0xd8>
			case 1: printf(" at level 1"); break;
   90198:	b0000020 	adrp	x0, 95000 <sd_init+0x3470>
   9019c:	91288000 	add	x0, x0, #0xa20
   901a0:	97ffc284 	bl	80bb0 <printf>
   901a4:	17ffffc8 	b	900c4 <dbg_decodeexc+0x134>
			case 3: printf(" at level 3"); break;
   901a8:	b0000020 	adrp	x0, 95000 <sd_init+0x3470>
   901ac:	91290000 	add	x0, x0, #0xa40
   901b0:	97ffc280 	bl	80bb0 <printf>
   901b4:	17ffffc4 	b	900c4 <dbg_decodeexc+0x134>
			case 2: printf(" at level 2"); break;
   901b8:	b0000020 	adrp	x0, 95000 <sd_init+0x3470>
   901bc:	9128c000 	add	x0, x0, #0xa30
   901c0:	97ffc27c 	bl	80bb0 <printf>
   901c4:	17ffffc0 	b	900c4 <dbg_decodeexc+0x134>
		case 0b100010: printf("Instruction alignment fault"); break;
   901c8:	b0000020 	adrp	x0, 95000 <sd_init+0x3470>
   901cc:	91238000 	add	x0, x0, #0x8e0
   901d0:	97ffc278 	bl	80bb0 <printf>
   901d4:	17ffffbc 	b	900c4 <dbg_decodeexc+0x134>
		case 0b101100: printf("Floating point"); break;
   901d8:	b0000020 	adrp	x0, 95000 <sd_init+0x3470>
   901dc:	91252000 	add	x0, x0, #0x948
   901e0:	97ffc274 	bl	80bb0 <printf>
   901e4:	17ffffb8 	b	900c4 <dbg_decodeexc+0x134>
		case 0b110001: printf("Breakpoint, same EL"); break;
   901e8:	b0000020 	adrp	x0, 95000 <sd_init+0x3470>
   901ec:	9125c000 	add	x0, x0, #0x970
   901f0:	97ffc270 	bl	80bb0 <printf>
   901f4:	17ffffb4 	b	900c4 <dbg_decodeexc+0x134>
		case 0b111100: printf("Breakpoint instruction"); break;
   901f8:	b0000020 	adrp	x0, 95000 <sd_init+0x3470>
   901fc:	91262000 	add	x0, x0, #0x988
   90200:	97ffc26c 	bl	80bb0 <printf>
   90204:	17ffffb0 	b	900c4 <dbg_decodeexc+0x134>
		case 0b001110: printf("Illegal execution"); break;
   90208:	b0000020 	adrp	x0, 95000 <sd_init+0x3470>
   9020c:	9121e000 	add	x0, x0, #0x878
   90210:	97ffc268 	bl	80bb0 <printf>
   90214:	17ffffac 	b	900c4 <dbg_decodeexc+0x134>
		case 0b100000: printf("Instruction abort, lower EL"); break;
   90218:	b0000020 	adrp	x0, 95000 <sd_init+0x3470>
   9021c:	91228000 	add	x0, x0, #0x8a0
   90220:	97ffc264 	bl	80bb0 <printf>
   90224:	17ffffa8 	b	900c4 <dbg_decodeexc+0x134>
		case 0b110000: printf("Breakpoint, lower EL"); break;
   90228:	b0000020 	adrp	x0, 95000 <sd_init+0x3470>
   9022c:	91256000 	add	x0, x0, #0x958
   90230:	97ffc260 	bl	80bb0 <printf>
   90234:	17ffffa4 	b	900c4 <dbg_decodeexc+0x134>
		case 0b100001: printf("Instruction abort, same EL"); break;
   90238:	b0000020 	adrp	x0, 95000 <sd_init+0x3470>
   9023c:	91230000 	add	x0, x0, #0x8c0
   90240:	97ffc25c 	bl	80bb0 <printf>
   90244:	17ffffa0 	b	900c4 <dbg_decodeexc+0x134>
		case 0b100101: printf("Data abort, same EL"); break;
   90248:	b0000020 	adrp	x0, 95000 <sd_init+0x3470>
   9024c:	91246000 	add	x0, x0, #0x918
   90250:	97ffc258 	bl	80bb0 <printf>
   90254:	17ffff77 	b	90030 <dbg_decodeexc+0xa0>
		case 0b100110: printf("Stack alignment fault"); break;
   90258:	b0000020 	adrp	x0, 95000 <sd_init+0x3470>
   9025c:	9124c000 	add	x0, x0, #0x930
   90260:	97ffc254 	bl	80bb0 <printf>
   90264:	17ffff98 	b	900c4 <dbg_decodeexc+0x134>
		case 0b000000: printf("Unknown"); break;
   90268:	b0000020 	adrp	x0, 95000 <sd_init+0x3470>
   9026c:	91218000 	add	x0, x0, #0x860
   90270:	97ffc250 	bl	80bb0 <printf>
   90274:	17ffff94 	b	900c4 <dbg_decodeexc+0x134>
			case 1: printf("Translation fault"); break;
   90278:	b0000020 	adrp	x0, 95000 <sd_init+0x3470>
   9027c:	91272000 	add	x0, x0, #0x9c8
   90280:	97ffc24c 	bl	80bb0 <printf>
   90284:	17ffff79 	b	90068 <dbg_decodeexc+0xd8>

0000000000090288 <dbg_getline>:
 * \e[3~ = 1, delete
 * \e[D  = 2, cursor left
 * \e[C  = 3, cursor right
 */
void dbg_getline()
{
   90288:	a9bc7bfd 	stp	x29, x30, [sp, #-64]!
	int i,cmdidx=0,cmdlast=0;
	char c;
	cmd[0]=0;
   9028c:	b000aa21 	adrp	x1, 15d5000 <allocated+0xfb940>
	// prompt
	printf("\r> ");
   90290:	b0000020 	adrp	x0, 95000 <sd_init+0x3470>
{
   90294:	910003fd 	mov	x29, sp
   90298:	a90363f7 	stp	x23, x24, [sp, #48]
   9029c:	911fa037 	add	x23, x1, #0x7e8
	printf("\r> ");
   902a0:	912b2000 	add	x0, x0, #0xac8
	cmd[0]=0;
   902a4:	391fa03f 	strb	wzr, [x1, #2024]
	printf("\r> ");
   902a8:	d10006f8 	sub	x24, x23, #0x1
{
   902ac:	a90153f3 	stp	x19, x20, [sp, #16]
	int i,cmdidx=0,cmdlast=0;
   902b0:	52800014 	mov	w20, #0x0                   	// #0
   902b4:	52800013 	mov	w19, #0x0                   	// #0
{
   902b8:	a9025bf5 	stp	x21, x22, [sp, #32]
   902bc:	aa0103f6 	mov	x22, x1
			cmdlast++;
			cmd[cmdidx++]=c;
		}
		cmd[cmdlast]=0;
		// display prompt and command line, place cursor with CSI code
		printf("\r> %s \r\e[%dC",cmd,cmdidx+2);
   902c0:	b0000035 	adrp	x21, 95000 <sd_init+0x3470>
	printf("\r> ");
   902c4:	97ffc23b 	bl	80bb0 <printf>
		printf("\r> %s \r\e[%dC",cmd,cmdidx+2);
   902c8:	912b42b5 	add	x21, x21, #0xad0
	while((c=uart_getc())!='\n') {
   902cc:	14000008 	b	902ec <dbg_getline+0x64>
			if(cmdidx>0) {
   902d0:	52800042 	mov	w2, #0x2                   	// #2
   902d4:	911fa2c3 	add	x3, x22, #0x7e8
   902d8:	350006b3 	cbnz	w19, 903ac <dbg_getline+0x124>
		printf("\r> %s \r\e[%dC",cmd,cmdidx+2);
   902dc:	aa0303e1 	mov	x1, x3
   902e0:	aa1503e0 	mov	x0, x21
		cmd[cmdlast]=0;
   902e4:	3834c87f 	strb	wzr, [x3, w20, sxtw]
		printf("\r> %s \r\e[%dC",cmd,cmdidx+2);
   902e8:	97ffc232 	bl	80bb0 <printf>
	while((c=uart_getc())!='\n') {
   902ec:	97ffc731 	bl	81fb0 <uart_getc>
   902f0:	12001c00 	and	w0, w0, #0xff
   902f4:	7100281f 	cmp	w0, #0xa
   902f8:	54000820 	b.eq	903fc <dbg_getline+0x174>  // b.none
		if(c==27) {
   902fc:	71006c1f 	cmp	w0, #0x1b
   90300:	540002a0 	b.eq	90354 <dbg_getline+0xcc>  // b.none
		if(c==8 || c==127) {
   90304:	7101fc1f 	cmp	w0, #0x7f
   90308:	7a481804 	ccmp	w0, #0x8, #0x4, ne  // ne = any
   9030c:	54fffe20 	b.eq	902d0 <dbg_getline+0x48>  // b.none
		if(c==1) {
   90310:	7100041f 	cmp	w0, #0x1
   90314:	54000420 	b.eq	90398 <dbg_getline+0x110>  // b.none
		if(c==2) {
   90318:	7100081f 	cmp	w0, #0x2
   9031c:	540007e0 	b.eq	90418 <dbg_getline+0x190>  // b.none
		if(c==3) {
   90320:	71000c1f 	cmp	w0, #0x3
   90324:	54000880 	b.eq	90434 <dbg_getline+0x1ac>  // b.none
			if(c<' ' || cmdlast>=sizeof(cmd)-1) {
   90328:	7103fa9f 	cmp	w20, #0xfe
   9032c:	7a5f9800 	ccmp	w0, #0x1f, #0x0, ls  // ls = plast
   90330:	54fffde9 	b.ls	902ec <dbg_getline+0x64>  // b.plast
			if(cmdidx<cmdlast) {
   90334:	6b14027f 	cmp	w19, w20
   90338:	54000acb 	b.lt	90490 <dbg_getline+0x208>  // b.tstop
   9033c:	911fa2c3 	add	x3, x22, #0x7e8
			cmdlast++;
   90340:	11000e62 	add	w2, w19, #0x3
   90344:	11000694 	add	w20, w20, #0x1
			cmd[cmdidx++]=c;
   90348:	3833c860 	strb	w0, [x3, w19, sxtw]
   9034c:	11000673 	add	w19, w19, #0x1
   90350:	17ffffe3 	b	902dc <dbg_getline+0x54>
			c=uart_getc();
   90354:	97ffc717 	bl	81fb0 <uart_getc>
   90358:	12001c00 	and	w0, w0, #0xff
			if(c=='[') {
   9035c:	71016c1f 	cmp	w0, #0x5b
   90360:	54fffd21 	b.ne	90304 <dbg_getline+0x7c>  // b.any
				c=uart_getc();
   90364:	97ffc713 	bl	81fb0 <uart_getc>
   90368:	12001c00 	and	w0, w0, #0xff
				if(c=='C') c=3; else    // left
   9036c:	71010c1f 	cmp	w0, #0x43
   90370:	54000620 	b.eq	90434 <dbg_getline+0x1ac>  // b.none
				if(c=='D') c=2; else    // right
   90374:	7101101f 	cmp	w0, #0x44
   90378:	54000500 	b.eq	90418 <dbg_getline+0x190>  // b.none
				if(c=='3') {
   9037c:	7100cc1f 	cmp	w0, #0x33
   90380:	54fffc21 	b.ne	90304 <dbg_getline+0x7c>  // b.any
					c=uart_getc();
   90384:	97ffc70b 	bl	81fb0 <uart_getc>
   90388:	12001c00 	and	w0, w0, #0xff
					if(c=='~') c=1;     // delete
   9038c:	7101f81f 	cmp	w0, #0x7e
   90390:	54fffba1 	b.ne	90304 <dbg_getline+0x7c>  // b.any
   90394:	d503201f 	nop
			if(cmdidx<cmdlast) {
   90398:	6b14027f 	cmp	w19, w20
   9039c:	11000a62 	add	w2, w19, #0x2
   903a0:	5400056b 	b.lt	9044c <dbg_getline+0x1c4>  // b.tstop
   903a4:	911fa2c3 	add	x3, x22, #0x7e8
   903a8:	17ffffcd 	b	902dc <dbg_getline+0x54>
				cmdidx--;
   903ac:	51000664 	sub	w4, w19, #0x1
				for(i=cmdidx;i<cmdlast;i++) cmd[i]=cmd[i+1];
   903b0:	6b04029f 	cmp	w20, w4
   903b4:	540001cd 	b.le	903ec <dbg_getline+0x164>
   903b8:	93407e60 	sxtw	x0, w19
   903bc:	4b130282 	sub	w2, w20, w19
   903c0:	8b000042 	add	x2, x2, x0
   903c4:	910006e1 	add	x1, x23, #0x1
   903c8:	8b0002e0 	add	x0, x23, x0
   903cc:	8b010042 	add	x2, x2, x1
   903d0:	aa1703e3 	mov	x3, x23
   903d4:	d503201f 	nop
   903d8:	39400001 	ldrb	w1, [x0]
   903dc:	91000400 	add	x0, x0, #0x1
   903e0:	381fe001 	sturb	w1, [x0, #-2]
   903e4:	eb00005f 	cmp	x2, x0
   903e8:	54ffff81 	b.ne	903d8 <dbg_getline+0x150>  // b.any
				cmdlast--;
   903ec:	11000662 	add	w2, w19, #0x1
   903f0:	51000694 	sub	w20, w20, #0x1
				cmdidx--;
   903f4:	2a0403f3 	mov	w19, w4
   903f8:	17ffffb9 	b	902dc <dbg_getline+0x54>
	}
	printf("\n");
}
   903fc:	a94153f3 	ldp	x19, x20, [sp, #16]
	printf("\n");
   90400:	b0000020 	adrp	x0, 95000 <sd_init+0x3470>
}
   90404:	a9425bf5 	ldp	x21, x22, [sp, #32]
	printf("\n");
   90408:	912ae000 	add	x0, x0, #0xab8
}
   9040c:	a94363f7 	ldp	x23, x24, [sp, #48]
   90410:	a8c47bfd 	ldp	x29, x30, [sp], #64
	printf("\n");
   90414:	17ffc1e7 	b	80bb0 <printf>
			if(cmdidx>0) cmdidx--;
   90418:	52800042 	mov	w2, #0x2                   	// #2
   9041c:	911fa2c3 	add	x3, x22, #0x7e8
   90420:	34fff5f3 	cbz	w19, 902dc <dbg_getline+0x54>
   90424:	11000662 	add	w2, w19, #0x1
   90428:	911fa2c3 	add	x3, x22, #0x7e8
   9042c:	51000673 	sub	w19, w19, #0x1
   90430:	17ffffab 	b	902dc <dbg_getline+0x54>
			if(cmdidx<cmdlast) cmdidx++;
   90434:	6b14027f 	cmp	w19, w20
   90438:	5400026a 	b.ge	90484 <dbg_getline+0x1fc>  // b.tcont
   9043c:	11000e62 	add	w2, w19, #0x3
   90440:	911fa2c3 	add	x3, x22, #0x7e8
   90444:	11000673 	add	w19, w19, #0x1
   90448:	17ffffa5 	b	902dc <dbg_getline+0x54>
   9044c:	51000694 	sub	w20, w20, #0x1
   90450:	93407e60 	sxtw	x0, w19
   90454:	4b130284 	sub	w4, w20, w19
   90458:	910006e1 	add	x1, x23, #0x1
   9045c:	8b000084 	add	x4, x4, x0
   90460:	aa1703e3 	mov	x3, x23
   90464:	8b0002e0 	add	x0, x23, x0
   90468:	8b010084 	add	x4, x4, x1
   9046c:	d503201f 	nop
				for(i=cmdidx;i<cmdlast;i++) cmd[i]=cmd[i+1];
   90470:	39400401 	ldrb	w1, [x0, #1]
   90474:	38001401 	strb	w1, [x0], #1
   90478:	eb00009f 	cmp	x4, x0
   9047c:	54ffffa1 	b.ne	90470 <dbg_getline+0x1e8>  // b.any
   90480:	17ffff97 	b	902dc <dbg_getline+0x54>
   90484:	11000a62 	add	w2, w19, #0x2
   90488:	911fa2c3 	add	x3, x22, #0x7e8
   9048c:	17ffff94 	b	902dc <dbg_getline+0x54>
   90490:	51000684 	sub	w4, w20, #0x1
   90494:	93407e82 	sxtw	x2, w20
   90498:	4b130084 	sub	w4, w4, w19
   9049c:	8b0202e1 	add	x1, x23, x2
   904a0:	cb040042 	sub	x2, x2, x4
   904a4:	aa1703e3 	mov	x3, x23
   904a8:	8b180044 	add	x4, x2, x24
   904ac:	d503201f 	nop
					cmd[i]=cmd[i-1];
   904b0:	385ff022 	ldurb	w2, [x1, #-1]
   904b4:	381ff422 	strb	w2, [x1], #-1
				for(i=cmdlast;i>cmdidx;i--)
   904b8:	eb04003f 	cmp	x1, x4
   904bc:	54ffffa1 	b.ne	904b0 <dbg_getline+0x228>  // b.any
   904c0:	17ffffa0 	b	90340 <dbg_getline+0xb8>
   904c4:	d503201f 	nop

00000000000904c8 <dbg_getoffs>:
unsigned long dbg_getoffs(int i)
{
	unsigned long base=0,ret=0;
	int j=0,sign=0;
	// if starts with a register
	if(cmd[i]=='x' || cmd[i]=='r') {
   904c8:	b000aa24 	adrp	x4, 15d5000 <allocated+0xfb940>
   904cc:	911fa084 	add	x4, x4, #0x7e8
   904d0:	52800e41 	mov	w1, #0x72                  	// #114
   904d4:	3860c882 	ldrb	w2, [x4, w0, sxtw]
   904d8:	7101e05f 	cmp	w2, #0x78
   904dc:	7a411044 	ccmp	w2, w1, #0x4, ne  // ne = any
   904e0:	54000721 	b.ne	905c4 <dbg_getoffs+0xfc>  // b.any
		i++; if(cmd[i]>='0' && cmd[i]<='9') { j=cmd[i]-'0'; }
   904e4:	11000401 	add	w1, w0, #0x1
   904e8:	11000802 	add	w2, w0, #0x2
   904ec:	3861c881 	ldrb	w1, [x4, w1, sxtw]
   904f0:	3862c882 	ldrb	w2, [x4, w2, sxtw]
   904f4:	5100c021 	sub	w1, w1, #0x30
   904f8:	12001c23 	and	w3, w1, #0xff
   904fc:	5100c042 	sub	w2, w2, #0x30
   90500:	7100247f 	cmp	w3, #0x9
   90504:	12001c43 	and	w3, w2, #0xff
   90508:	54000969 	b.ls	90634 <dbg_getoffs+0x16c>  // b.plast
	int j=0,sign=0;
   9050c:	7100287f 	cmp	w3, #0xa
   90510:	1a9f3041 	csel	w1, w2, wzr, cc  // cc = lo, ul, last
		i++; if(cmd[i]>='0' && cmd[i]<='9') { j*=10; j+=cmd[i]-'0'; }
		if(j>=0 && j<37) base=dbg_regs[j];
   90514:	b000aa22 	adrp	x2, 15d5000 <allocated+0xfb940>
   90518:	911b0042 	add	x2, x2, #0x6c0
   9051c:	f861d848 	ldr	x8, [x2, w1, sxtw #3]
		i++;
   90520:	11000c01 	add	w1, w0, #0x3
		if(cmd[i]=='-') { i++; sign++; }
   90524:	3861c882 	ldrb	w2, [x4, w1, sxtw]
   90528:	7100b45f 	cmp	w2, #0x2d
   9052c:	540009a0 	b.eq	90660 <dbg_getoffs+0x198>  // b.none
		i++;
   90530:	2a0103e0 	mov	w0, w1
	int j=0,sign=0;
   90534:	52800009 	mov	w9, #0x0                   	// #0
		if(cmd[i]=='+') i++;
   90538:	7100ac5f 	cmp	w2, #0x2b
   9053c:	54000481 	b.ne	905cc <dbg_getoffs+0x104>  // b.any
   90540:	11000400 	add	w0, w0, #0x1
   90544:	3860c882 	ldrb	w2, [x4, w0, sxtw]
	}
	// offset part
	if(cmd[i]=='0' && cmd[i+1]=='x') {
   90548:	7100c05f 	cmp	w2, #0x30
   9054c:	54000441 	b.ne	905d4 <dbg_getoffs+0x10c>  // b.any
   90550:	11000401 	add	w1, w0, #0x1
   90554:	52800003 	mov	w3, #0x0                   	// #0
   90558:	3861c882 	ldrb	w2, [x4, w1, sxtw]
   9055c:	7101e05f 	cmp	w2, #0x78
   90560:	54000461 	b.ne	905ec <dbg_getoffs+0x124>  // b.any
		i+=2;
		// hex value
		while((cmd[i]>='0'&&cmd[i]<='9')||(cmd[i]>='a'&&cmd[i]<='f')||(cmd[i]>='A'&&cmd[i]<='F')) {
   90564:	8b20c080 	add	x0, x4, w0, sxtw
	unsigned long base=0,ret=0;
   90568:	d2800001 	mov	x1, #0x0                   	// #0
   9056c:	d503201f 	nop
		while((cmd[i]>='0'&&cmd[i]<='9')||(cmd[i]>='a'&&cmd[i]<='f')||(cmd[i]>='A'&&cmd[i]<='F')) {
   90570:	39400802 	ldrb	w2, [x0, #2]
			ret <<= 4;
   90574:	d37cec23 	lsl	x3, x1, #4
			if(cmd[i]>='0' && cmd[i]<='9') ret += cmd[i]-'0';
   90578:	51015c44 	sub	w4, w2, #0x57
		while((cmd[i]>='0'&&cmd[i]<='9')||(cmd[i]>='a'&&cmd[i]<='f')||(cmd[i]>='A'&&cmd[i]<='F')) {
   9057c:	51018445 	sub	w5, w2, #0x61
			else if(cmd[i] >= 'a' && cmd[i] <= 'f') ret += cmd[i]-'a'+10;
			else if(cmd[i] >= 'A' && cmd[i] <= 'F') ret += cmd[i]-'A'+10;
   90580:	5100dc47 	sub	w7, w2, #0x37
		while((cmd[i]>='0'&&cmd[i]<='9')||(cmd[i]>='a'&&cmd[i]<='f')||(cmd[i]>='A'&&cmd[i]<='F')) {
   90584:	12001ca5 	and	w5, w5, #0xff
			if(cmd[i]>='0' && cmd[i]<='9') ret += cmd[i]-'0';
   90588:	8b24c066 	add	x6, x3, w4, sxtw
		while((cmd[i]>='0'&&cmd[i]<='9')||(cmd[i]>='a'&&cmd[i]<='f')||(cmd[i]>='A'&&cmd[i]<='F')) {
   9058c:	5100c044 	sub	w4, w2, #0x30
   90590:	710014bf 	cmp	w5, #0x5
   90594:	51010442 	sub	w2, w2, #0x41
			if(cmd[i]>='0' && cmd[i]<='9') ret += cmd[i]-'0';
   90598:	8b24c063 	add	x3, x3, w4, sxtw
		while((cmd[i]>='0'&&cmd[i]<='9')||(cmd[i]>='a'&&cmd[i]<='f')||(cmd[i]>='A'&&cmd[i]<='F')) {
   9059c:	12001c84 	and	w4, w4, #0xff
   905a0:	12001c42 	and	w2, w2, #0xff
			else if(cmd[i] >= 'A' && cmd[i] <= 'F') ret += cmd[i]-'A'+10;
   905a4:	93407ce7 	sxtw	x7, w7
		while((cmd[i]>='0'&&cmd[i]<='9')||(cmd[i]>='a'&&cmd[i]<='f')||(cmd[i]>='A'&&cmd[i]<='F')) {
   905a8:	7a498880 	ccmp	w4, #0x9, #0x0, hi  // hi = pmore
   905ac:	54000629 	b.ls	90670 <dbg_getoffs+0x1a8>  // b.plast
   905b0:	7100145f 	cmp	w2, #0x5
   905b4:	54000368 	b.hi	90620 <dbg_getoffs+0x158>  // b.pmore
			else if(cmd[i] >= 'A' && cmd[i] <= 'F') ret += cmd[i]-'A'+10;
   905b8:	8b0110e1 	add	x1, x7, x1, lsl #4
			i++;
   905bc:	91000400 	add	x0, x0, #0x1
   905c0:	17ffffec 	b	90570 <dbg_getoffs+0xa8>
	int j=0,sign=0;
   905c4:	52800009 	mov	w9, #0x0                   	// #0
	unsigned long base=0,ret=0;
   905c8:	d2800008 	mov	x8, #0x0                   	// #0
	if(cmd[i]=='0' && cmd[i+1]=='x') {
   905cc:	7100c05f 	cmp	w2, #0x30
   905d0:	54fffc00 	b.eq	90550 <dbg_getoffs+0x88>  // b.none
		}
	} else {
		// decimal value
		while(cmd[i]>='0'&&cmd[i]<='9'){
   905d4:	5100c043 	sub	w3, w2, #0x30
   905d8:	12001c61 	and	w1, w3, #0xff
   905dc:	7100243f 	cmp	w1, #0x9
   905e0:	54000508 	b.hi	90680 <dbg_getoffs+0x1b8>  // b.pmore
   905e4:	11000401 	add	w1, w0, #0x1
   905e8:	3861c882 	ldrb	w2, [x4, w1, sxtw]
   905ec:	8b20c080 	add	x0, x4, w0, sxtw
	unsigned long base=0,ret=0;
   905f0:	d2800001 	mov	x1, #0x0                   	// #0
   905f4:	14000003 	b	90600 <dbg_getoffs+0x138>
   905f8:	5100c043 	sub	w3, w2, #0x30
		while(cmd[i]>='0'&&cmd[i]<='9'){
   905fc:	39400402 	ldrb	w2, [x0, #1]
			ret *= 10;
   90600:	8b010821 	add	x1, x1, x1, lsl #2
		while(cmd[i]>='0'&&cmd[i]<='9'){
   90604:	5100c044 	sub	w4, w2, #0x30
			ret += cmd[i++]-'0';
   90608:	93407c63 	sxtw	x3, w3
		while(cmd[i]>='0'&&cmd[i]<='9'){
   9060c:	12001c84 	and	w4, w4, #0xff
			ret += cmd[i++]-'0';
   90610:	8b010461 	add	x1, x3, x1, lsl #1
   90614:	91000400 	add	x0, x0, #0x1
		while(cmd[i]>='0'&&cmd[i]<='9'){
   90618:	7100249f 	cmp	w4, #0x9
   9061c:	54fffee9 	b.ls	905f8 <dbg_getoffs+0x130>  // b.plast
		}
	}
	// return base + offset
	return sign? base-ret : base+ret;
   90620:	cb010100 	sub	x0, x8, x1
   90624:	7100013f 	cmp	w9, #0x0
   90628:	8b010101 	add	x1, x8, x1
   9062c:	9a800020 	csel	x0, x1, x0, eq  // eq = none
}
   90630:	d65f03c0 	ret
		i++; if(cmd[i]>='0' && cmd[i]<='9') { j*=10; j+=cmd[i]-'0'; }
   90634:	7100247f 	cmp	w3, #0x9
   90638:	54fff6e8 	b.hi	90514 <dbg_getoffs+0x4c>  // b.pmore
   9063c:	0b010821 	add	w1, w1, w1, lsl #2
	unsigned long base=0,ret=0;
   90640:	d2800008 	mov	x8, #0x0                   	// #0
		i++; if(cmd[i]>='0' && cmd[i]<='9') { j*=10; j+=cmd[i]-'0'; }
   90644:	0b010441 	add	w1, w2, w1, lsl #1
		if(j>=0 && j<37) base=dbg_regs[j];
   90648:	7100903f 	cmp	w1, #0x24
   9064c:	54fff64d 	b.le	90514 <dbg_getoffs+0x4c>
		i++;
   90650:	11000c01 	add	w1, w0, #0x3
		if(cmd[i]=='-') { i++; sign++; }
   90654:	3861c882 	ldrb	w2, [x4, w1, sxtw]
   90658:	7100b45f 	cmp	w2, #0x2d
   9065c:	54fff6a1 	b.ne	90530 <dbg_getoffs+0x68>  // b.any
   90660:	11001000 	add	w0, w0, #0x4
   90664:	52800029 	mov	w9, #0x1                   	// #1
   90668:	3860c882 	ldrb	w2, [x4, w0, sxtw]
   9066c:	17ffffb3 	b	90538 <dbg_getoffs+0x70>
			if(cmd[i]>='0' && cmd[i]<='9') ret += cmd[i]-'0';
   90670:	7100249f 	cmp	w4, #0x9
   90674:	91000400 	add	x0, x0, #0x1
   90678:	9a8380c1 	csel	x1, x6, x3, hi  // hi = pmore
			i++;
   9067c:	17ffffbd 	b	90570 <dbg_getoffs+0xa8>
		while(cmd[i]>='0'&&cmd[i]<='9'){
   90680:	d2800001 	mov	x1, #0x0                   	// #0
   90684:	17ffffe7 	b	90620 <dbg_getoffs+0x158>

0000000000090688 <dbg_main>:

/**
 * main loop, get and parse commands
 */
void dbg_main()
{
   90688:	a9b47bfd 	stp	x29, x30, [sp, #-192]!
#if DISASSEMBLER
	char str[64];
#endif
	int i;

	dbg_running++;
   9068c:	b0009a60 	adrp	x0, 13dd000 <_binary_src_audio_The_Amazons_bin_size+0x96300>
{
   90690:	910003fd 	mov	x29, sp
   90694:	a90573fb 	stp	x27, x28, [sp, #80]
   90698:	b000aa3c 	adrp	x28, 15d5000 <allocated+0xfb940>
   9069c:	911b0381 	add	x1, x28, #0x6c0
	dbg_running++;
   906a0:	39528000 	ldrb	w0, [x0, #1184]
   906a4:	b000aa3b 	adrp	x27, 15d5000 <allocated+0xfb940>
   906a8:	f90033e1 	str	x1, [sp, #96]
   906ac:	b0009a61 	adrp	x1, 13dd000 <_binary_src_audio_The_Amazons_bin_size+0x96300>
   906b0:	911fa37b 	add	x27, x27, #0x7e8
{
   906b4:	a9025bf5 	stp	x21, x22, [sp, #32]
				for(a=os;a<oe;a+=16) {
					// print out address
					printf("%8x: ", a);
					// hex representation
					for(i=0;i<16;i++) {
						printf("%2x%s ",*((unsigned char*)(a+i)),i%4==3?" ":"");
   906b8:	d0000015 	adrp	x21, 92000 <sd_init+0x470>
   906bc:	9108e2b5 	add	x21, x21, #0x238
	dbg_running++;
   906c0:	11000400 	add	w0, w0, #0x1
   906c4:	39128020 	strb	w0, [x1, #1184]
{
   906c8:	a90153f3 	stp	x19, x20, [sp, #16]
   906cc:	a90363f7 	stp	x23, x24, [sp, #48]
   906d0:	a9046bf9 	stp	x25, x26, [sp, #64]
   906d4:	d503201f 	nop
		dbg_getline();
   906d8:	97fffeec 	bl	90288 <dbg_getline>
		if(cmd[0]==0 || cmd[0]=='?' || cmd[0]=='h') {
   906dc:	3940036a 	ldrb	w10, [x27]
   906e0:	52800d00 	mov	w0, #0x68                  	// #104
   906e4:	7100fd5f 	cmp	w10, #0x3f
   906e8:	7a401944 	ccmp	w10, #0x0, #0x4, ne  // ne = any
   906ec:	7a401144 	ccmp	w10, w0, #0x4, ne  // ne = any
   906f0:	54000260 	b.eq	9073c <dbg_main+0xb4>  // b.none
		if(cmd[0]=='c') {
   906f4:	71018d5f 	cmp	w10, #0x63
   906f8:	54000c40 	b.eq	90880 <dbg_main+0x1f8>  // b.none
		if(cmd[0]=='r') {
   906fc:	7101c95f 	cmp	w10, #0x72
   90700:	54000e00 	b.eq	908c0 <dbg_main+0x238>  // b.none
		if(cmd[0]=='x' || cmd[0]=='i') {
   90704:	7101e15f 	cmp	w10, #0x78
   90708:	52800d20 	mov	w0, #0x69                  	// #105
   9070c:	7a401144 	ccmp	w10, w0, #0x4, ne  // ne = any
   90710:	540001e0 	b.eq	9074c <dbg_main+0xc4>  // b.none
					printf("\n");
				}
			}
			continue;
		} else {
			printf("ERROR: unknown command.\n");
   90714:	b0000020 	adrp	x0, 95000 <sd_init+0x3470>
   90718:	91318000 	add	x0, x0, #0xc60
   9071c:	97ffc125 	bl	80bb0 <printf>
		dbg_getline();
   90720:	97fffeda 	bl	90288 <dbg_getline>
		if(cmd[0]==0 || cmd[0]=='?' || cmd[0]=='h') {
   90724:	3940036a 	ldrb	w10, [x27]
   90728:	52800d00 	mov	w0, #0x68                  	// #104
   9072c:	7100fd5f 	cmp	w10, #0x3f
   90730:	7a401944 	ccmp	w10, #0x0, #0x4, ne  // ne = any
   90734:	7a401144 	ccmp	w10, w0, #0x4, ne  // ne = any
   90738:	54fffde1 	b.ne	906f4 <dbg_main+0x6c>  // b.any
			printf("Mini debugger commands:\n"
   9073c:	b0000020 	adrp	x0, 95000 <sd_init+0x3470>
   90740:	912b8000 	add	x0, x0, #0xae0
   90744:	97ffc11b 	bl	80bb0 <printf>
			continue;
   90748:	17ffffe4 	b	906d8 <dbg_main+0x50>
			while(cmd[i]!=0 && cmd[i]!=' ') i++;    // skip command
   9074c:	39400760 	ldrb	w0, [x27, #1]
   90750:	121a7801 	and	w1, w0, #0xffffffdf
   90754:	34001b81 	cbz	w1, 90ac4 <dbg_main+0x43c>
   90758:	d2800041 	mov	x1, #0x2                   	// #2
   9075c:	d503201f 	nop
   90760:	38616b60 	ldrb	w0, [x27, x1]
   90764:	2a0103eb 	mov	w11, w1
   90768:	91000421 	add	x1, x1, #0x1
   9076c:	121a7802 	and	w2, w0, #0xffffffdf
   90770:	35ffff82 	cbnz	w2, 90760 <dbg_main+0xd8>
			while(cmd[i]!=0 && cmd[i]==' ') i++;    // skip separators
   90774:	7100801f 	cmp	w0, #0x20
   90778:	54000161 	b.ne	907a4 <dbg_main+0x11c>  // b.any
   9077c:	11000561 	add	w1, w11, #0x1
   90780:	b000aa22 	adrp	x2, 15d5000 <allocated+0xfb940>
   90784:	911f9c42 	add	x2, x2, #0x7e7
   90788:	93407c21 	sxtw	x1, w1
   9078c:	d503201f 	nop
   90790:	2a0103eb 	mov	w11, w1
   90794:	91000421 	add	x1, x1, #0x1
   90798:	38616840 	ldrb	w0, [x2, x1]
   9079c:	7100801f 	cmp	w0, #0x20
   907a0:	54ffff80 	b.eq	90790 <dbg_main+0x108>  // b.none
			if(cmd[i]!=0) {
   907a4:	35000fc0 	cbnz	w0, 9099c <dbg_main+0x314>
				if(cmd[0]=='i') {
   907a8:	7101a55f 	cmp	w10, #0x69
					os=oe=dbg_regs[31]?dbg_regs[31]:dbg_regs[30];
   907ac:	f94033e0 	ldr	x0, [sp, #96]
				if(cmd[0]=='i') {
   907b0:	54001800 	b.eq	90ab0 <dbg_main+0x428>  // b.none
					os=oe=dbg_regs[29];
   907b4:	f9407413 	ldr	x19, [x0, #232]
				if(oe<=os) oe=os+16;
   907b8:	9100427a 	add	x26, x19, #0x10
   907bc:	f90037fa 	str	x26, [sp, #104]
				for(a=os;a<oe;a+=16) {
   907c0:	eb13035f 	cmp	x26, x19
   907c4:	54fff8a9 	b.ls	906d8 <dbg_main+0x50>  // b.plast
   907c8:	b0000038 	adrp	x24, 95000 <sd_init+0x3470>
   907cc:	b0000037 	adrp	x23, 95000 <sd_init+0x3470>
						printf("%2x%s ",*((unsigned char*)(a+i)),i%4==3?" ":"");
   907d0:	b0000036 	adrp	x22, 95000 <sd_init+0x3470>
   907d4:	91314318 	add	x24, x24, #0xc50
   907d8:	913162f7 	add	x23, x23, #0xc58
   907dc:	aa1a03f4 	mov	x20, x26
   907e0:	9131e2d6 	add	x22, x22, #0xc78
   907e4:	b0000021 	adrp	x1, 95000 <sd_init+0x3470>
   907e8:	b0000020 	adrp	x0, 95000 <sd_init+0x3470>
   907ec:	912ae021 	add	x1, x1, #0xab8
   907f0:	91312000 	add	x0, x0, #0xc48
						printf("%c",c<32||c>=127?'.':c);
   907f4:	528005d9 	mov	w25, #0x2e                  	// #46
   907f8:	a90703e1 	stp	x1, x0, [sp, #112]
   907fc:	d503201f 	nop
					printf("%8x: ", a);
   90800:	d280001c 	mov	x28, #0x0                   	// #0
   90804:	f9403fe0 	ldr	x0, [sp, #120]
   90808:	aa1303e1 	mov	x1, x19
   9080c:	97ffc0e9 	bl	80bb0 <printf>
						printf("%2x%s ",*((unsigned char*)(a+i)),i%4==3?" ":"");
   90810:	12000780 	and	w0, w28, #0x3
   90814:	38736b81 	ldrb	w1, [x28, x19]
   90818:	71000c1f 	cmp	w0, #0x3
   9081c:	9100079c 	add	x28, x28, #0x1
   90820:	9a9602a2 	csel	x2, x21, x22, eq  // eq = none
   90824:	aa1803e0 	mov	x0, x24
   90828:	97ffc0e2 	bl	80bb0 <printf>
					for(i=0;i<16;i++) {
   9082c:	f100439f 	cmp	x28, #0x10
   90830:	54ffff01 	b.ne	90810 <dbg_main+0x188>  // b.any
   90834:	d503201f 	nop
						c=*((unsigned char*)(a+i));
   90838:	38401661 	ldrb	w1, [x19], #1
						printf("%c",c<32||c>=127?'.':c);
   9083c:	aa1703e0 	mov	x0, x23
   90840:	51008022 	sub	w2, w1, #0x20
   90844:	12001c42 	and	w2, w2, #0xff
   90848:	71017c5f 	cmp	w2, #0x5f
   9084c:	1a993021 	csel	w1, w1, w25, cc  // cc = lo, ul, last
   90850:	97ffc0d8 	bl	80bb0 <printf>
					for(i=0;i<16;i++) {
   90854:	eb13029f 	cmp	x20, x19
   90858:	54ffff01 	b.ne	90838 <dbg_main+0x1b0>  // b.any
					printf("\n");
   9085c:	f9403be0 	ldr	x0, [sp, #112]
   90860:	91004294 	add	x20, x20, #0x10
				for(a=os;a<oe;a+=16) {
   90864:	aa1a03f3 	mov	x19, x26
					printf("\n");
   90868:	97ffc0d2 	bl	80bb0 <printf>
				for(a=os;a<oe;a+=16) {
   9086c:	f94037e0 	ldr	x0, [sp, #104]
   90870:	eb00035f 	cmp	x26, x0
   90874:	54fff322 	b.cs	906d8 <dbg_main+0x50>  // b.hs, b.nlast
   90878:	9100435a 	add	x26, x26, #0x10
   9087c:	17ffffe1 	b	90800 <dbg_main+0x178>
			asm volatile ("msr elr_el1, %0" : : "r" (dbg_regs[31]+4));
   90880:	f94033e0 	ldr	x0, [sp, #96]
   90884:	f9407c00 	ldr	x0, [x0, #248]
   90888:	91001000 	add	x0, x0, #0x4
   9088c:	d5184020 	msr	elr_el1, x0
		}
	}
	dbg_running--;
   90890:	b0009a60 	adrp	x0, 13dd000 <_binary_src_audio_The_Amazons_bin_size+0x96300>
   90894:	b0009a61 	adrp	x1, 13dd000 <_binary_src_audio_The_Amazons_bin_size+0x96300>
}
   90898:	a94153f3 	ldp	x19, x20, [sp, #16]
	dbg_running--;
   9089c:	39528000 	ldrb	w0, [x0, #1184]
}
   908a0:	a9425bf5 	ldp	x21, x22, [sp, #32]
	dbg_running--;
   908a4:	51000400 	sub	w0, w0, #0x1
   908a8:	39128020 	strb	w0, [x1, #1184]
}
   908ac:	a94363f7 	ldp	x23, x24, [sp, #48]
   908b0:	a9446bf9 	ldp	x25, x26, [sp, #64]
   908b4:	a94573fb 	ldp	x27, x28, [sp, #80]
   908b8:	a8cc7bfd 	ldp	x29, x30, [sp], #192
   908bc:	d65f03c0 	ret
				if(i && i%3==0) printf("\n");
   908c0:	52955560 	mov	w0, #0xaaab                	// #43691
   908c4:	d2800013 	mov	x19, #0x0                   	// #0
   908c8:	72b55540 	movk	w0, #0xaaaa, lsl #16
   908cc:	b0000036 	adrp	x22, 95000 <sd_init+0x3470>
   908d0:	b0000037 	adrp	x23, 95000 <sd_init+0x3470>
   908d4:	912f22d6 	add	x22, x22, #0xbc8
   908d8:	912ae2f7 	add	x23, x23, #0xab8
   908dc:	9ba07e60 	umull	x0, w19, w0
   908e0:	2a1303f4 	mov	w20, w19
   908e4:	2a1303f8 	mov	w24, w19
   908e8:	2a1303f9 	mov	w25, w19
   908ec:	b40002d3 	cbz	x19, 90944 <dbg_main+0x2bc>
   908f0:	d361fc00 	lsr	x0, x0, #33
   908f4:	0b000400 	add	w0, w0, w0, lsl #1
   908f8:	6b13001f 	cmp	w0, w19
   908fc:	540004a0 	b.eq	90990 <dbg_main+0x308>  // b.none
				printf("x%d: %16x  ",i,dbg_regs[i]);
   90900:	2a1803e1 	mov	w1, w24
   90904:	aa1603e0 	mov	x0, x22
				if(i<10) printf(" ");
   90908:	7100273f 	cmp	w25, #0x9
   9090c:	540001cd 	b.le	90944 <dbg_main+0x2bc>
				printf("x%d: %16x  ",i,dbg_regs[i]);
   90910:	f94033e2 	ldr	x2, [sp, #96]
   90914:	f8737842 	ldr	x2, [x2, x19, lsl #3]
   90918:	97ffc0a6 	bl	80bb0 <printf>
			for(i=0;i<31;i++) {
   9091c:	71007a9f 	cmp	w20, #0x1e
   90920:	54000240 	b.eq	90968 <dbg_main+0x2e0>  // b.none
   90924:	91000673 	add	x19, x19, #0x1
				if(i && i%3==0) printf("\n");
   90928:	52955560 	mov	w0, #0xaaab                	// #43691
   9092c:	2a1303f4 	mov	w20, w19
   90930:	72b55540 	movk	w0, #0xaaaa, lsl #16
   90934:	2a1303f8 	mov	w24, w19
   90938:	2a1303f9 	mov	w25, w19
   9093c:	9ba07e60 	umull	x0, w19, w0
   90940:	b5fffd93 	cbnz	x19, 908f0 <dbg_main+0x268>
				if(i<10) printf(" ");
   90944:	aa1503e0 	mov	x0, x21
   90948:	97ffc09a 	bl	80bb0 <printf>
				printf("x%d: %16x  ",i,dbg_regs[i]);
   9094c:	f94033e0 	ldr	x0, [sp, #96]
   90950:	2a1803e1 	mov	w1, w24
   90954:	f8737802 	ldr	x2, [x0, x19, lsl #3]
   90958:	aa1603e0 	mov	x0, x22
   9095c:	91000673 	add	x19, x19, #0x1
   90960:	97ffc094 	bl	80bb0 <printf>
   90964:	17fffff1 	b	90928 <dbg_main+0x2a0>
			printf("elr_el1: %x  spsr_el1: %x\n  esr_el1: %x  far_el1: %x\nsctlr_el1: %x  tcr_el1: %x\n",
   90968:	f94033e6 	ldr	x6, [sp, #96]
   9096c:	b0000020 	adrp	x0, 95000 <sd_init+0x3470>
   90970:	912f6000 	add	x0, x0, #0xbd8
   90974:	a94f88c1 	ldp	x1, x2, [x6, #248]
   90978:	f94084c3 	ldr	x3, [x6, #264]
   9097c:	f94088c4 	ldr	x4, [x6, #272]
   90980:	f9408cc5 	ldr	x5, [x6, #280]
   90984:	f94090c6 	ldr	x6, [x6, #288]
   90988:	97ffc08a 	bl	80bb0 <printf>
			continue;
   9098c:	17ffff53 	b	906d8 <dbg_main+0x50>
				if(i && i%3==0) printf("\n");
   90990:	aa1703e0 	mov	x0, x23
   90994:	97ffc087 	bl	80bb0 <printf>
   90998:	17ffffda 	b	90900 <dbg_main+0x278>
				os=oe=dbg_getoffs(i);
   9099c:	2a0b03e0 	mov	w0, w11
   909a0:	97fffeca 	bl	904c8 <dbg_getoffs>
   909a4:	aa0003f3 	mov	x19, x0
				while(cmd[i]!=0 && cmd[i]!=' ') i++;    // skip 1st arg
   909a8:	386bcb60 	ldrb	w0, [x27, w11, sxtw]
   909ac:	121a7801 	and	w1, w0, #0xffffffdf
   909b0:	34000121 	cbz	w1, 909d4 <dbg_main+0x34c>
   909b4:	1100056b 	add	w11, w11, #0x1
   909b8:	93407d61 	sxtw	x1, w11
   909bc:	d503201f 	nop
   909c0:	38616b60 	ldrb	w0, [x27, x1]
   909c4:	2a0103eb 	mov	w11, w1
   909c8:	91000421 	add	x1, x1, #0x1
   909cc:	121a7802 	and	w2, w0, #0xffffffdf
   909d0:	35ffff82 	cbnz	w2, 909c0 <dbg_main+0x338>
				while(cmd[i]!=0 && cmd[i]==' ') i++;    // skip separators
   909d4:	7100801f 	cmp	w0, #0x20
   909d8:	54000161 	b.ne	90a04 <dbg_main+0x37c>  // b.any
   909dc:	1100056b 	add	w11, w11, #0x1
   909e0:	b000aa22 	adrp	x2, 15d5000 <allocated+0xfb940>
   909e4:	911f9c42 	add	x2, x2, #0x7e7
   909e8:	93407d61 	sxtw	x1, w11
   909ec:	d503201f 	nop
   909f0:	2a0103eb 	mov	w11, w1
   909f4:	91000421 	add	x1, x1, #0x1
   909f8:	38616840 	ldrb	w0, [x2, x1]
   909fc:	7100801f 	cmp	w0, #0x20
   90a00:	54ffff80 	b.eq	909f0 <dbg_main+0x368>  // b.none
				if(cmd[i]!=0) {
   90a04:	34000160 	cbz	w0, 90a30 <dbg_main+0x3a8>
					oe=dbg_getoffs(i);
   90a08:	2a0b03e0 	mov	w0, w11
   90a0c:	97fffeaf 	bl	904c8 <dbg_getoffs>
   90a10:	f90037e0 	str	x0, [sp, #104]
			if(cmd[0]=='i') {
   90a14:	7101a55f 	cmp	w10, #0x69
   90a18:	54000120 	b.eq	90a3c <dbg_main+0x3b4>  // b.none
				if(oe<=os) oe=os+16;
   90a1c:	f94037e0 	ldr	x0, [sp, #104]
   90a20:	9100427a 	add	x26, x19, #0x10
   90a24:	eb00027f 	cmp	x19, x0
   90a28:	54ffed03 	b.cc	907c8 <dbg_main+0x140>  // b.lo, b.ul, b.last
   90a2c:	17ffff63 	b	907b8 <dbg_main+0x130>
				os=oe=dbg_getoffs(i);
   90a30:	f90037f3 	str	x19, [sp, #104]
			if(cmd[0]=='i') {
   90a34:	7101a55f 	cmp	w10, #0x69
   90a38:	54ffec01 	b.ne	907b8 <dbg_main+0x130>  // b.any
				oe=(oe+3)&~3L;
   90a3c:	f94037e0 	ldr	x0, [sp, #104]
				os=os&~3L;
   90a40:	927ef673 	and	x19, x19, #0xfffffffffffffffc
				oe=(oe+3)&~3L;
   90a44:	91000c14 	add	x20, x0, #0x3
   90a48:	927ef694 	and	x20, x20, #0xfffffffffffffffc
				if(oe<=os) oe=os+4;
   90a4c:	eb14027f 	cmp	x19, x20
   90a50:	54000282 	b.cs	90aa0 <dbg_main+0x418>  // b.hs, b.nlast
   90a54:	b0000037 	adrp	x23, 95000 <sd_init+0x3470>
   90a58:	b0000036 	adrp	x22, 95000 <sd_init+0x3470>
   90a5c:	9130c2f7 	add	x23, x23, #0xc30
   90a60:	913102d6 	add	x22, x22, #0xc40
   90a64:	d503201f 	nop
					printf("%8x: %8x",os,*((unsigned int*)os));
   90a68:	b9400262 	ldr	w2, [x19]
   90a6c:	aa1303e1 	mov	x1, x19
   90a70:	aa1703e0 	mov	x0, x23
   90a74:	97ffc04f 	bl	80bb0 <printf>
					os=disasm(os,str);
   90a78:	910203e1 	add	x1, sp, #0x80
   90a7c:	aa1303e0 	mov	x0, x19
   90a80:	97ffcd58 	bl	83fe0 <disasm>
   90a84:	aa0003f3 	mov	x19, x0
					printf("\t%s\n",str);
   90a88:	910203e1 	add	x1, sp, #0x80
   90a8c:	aa1603e0 	mov	x0, x22
   90a90:	97ffc048 	bl	80bb0 <printf>
				while(os<oe) {
   90a94:	eb14027f 	cmp	x19, x20
   90a98:	54fffe83 	b.cc	90a68 <dbg_main+0x3e0>  // b.lo, b.ul, b.last
   90a9c:	17ffff0f 	b	906d8 <dbg_main+0x50>
				if(oe<=os) oe=os+4;
   90aa0:	91001274 	add	x20, x19, #0x4
				while(os<oe) {
   90aa4:	eb14027f 	cmp	x19, x20
   90aa8:	54fffd63 	b.cc	90a54 <dbg_main+0x3cc>  // b.lo, b.ul, b.last
   90aac:	17ffff0b 	b	906d8 <dbg_main+0x50>
					os=oe=dbg_regs[31]?dbg_regs[31]:dbg_regs[30];
   90ab0:	f9407c13 	ldr	x19, [x0, #248]
   90ab4:	b5000053 	cbnz	x19, 90abc <dbg_main+0x434>
   90ab8:	f9407813 	ldr	x19, [x0, #240]
			i=1;
   90abc:	f90037f3 	str	x19, [sp, #104]
   90ac0:	17ffffdf 	b	90a3c <dbg_main+0x3b4>
   90ac4:	5280002b 	mov	w11, #0x1                   	// #1
   90ac8:	17ffff2b 	b	90774 <dbg_main+0xec>
   90acc:	00000000 	.inst	0x00000000 ; undefined

0000000000090ad0 <dynamic_memory_alloc_init>:
#include "headers/project.h"

void dynamic_memory_alloc_init()
{
   90ad0:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
	extern unsigned char _end;
	end_of_program = &_end;
   90ad4:	b000aa20 	adrp	x0, 15d5000 <allocated+0xfb940>
   90ad8:	9126c000 	add	x0, x0, #0x9b0
{
   90adc:	910003fd 	mov	x29, sp
   90ae0:	f9000bf3 	str	x19, [sp, #16]
	end_of_program = &_end;
   90ae4:	b0009a73 	adrp	x19, 13dd000 <_binary_src_audio_The_Amazons_bin_size+0x96300>
   90ae8:	f9035660 	str	x0, [x19, #1704]
	end_of_cpu_memory = get_gpu_memory_address_start();
   90aec:	940000b9 	bl	90dd0 <get_gpu_memory_address_start>
	total_space_avaliable = (unsigned char *)end_of_cpu_memory - end_of_program;
   90af0:	f9435661 	ldr	x1, [x19, #1704]
   90af4:	b000a246 	adrp	x6, 14d9000 <connected_chunk+0xfb938>
	chunk_size = 1024;
	number_of_chunks = total_space_avaliable / chunk_size;
   90af8:	b000a244 	adrp	x4, 14d9000 <connected_chunk+0xfb938>
	end_of_cpu_memory = get_gpu_memory_address_start();
   90afc:	b0009a65 	adrp	x5, 13dd000 <_binary_src_audio_The_Amazons_bin_size+0x96300>
	total_space_avaliable = (unsigned char *)end_of_cpu_memory - end_of_program;
   90b00:	cb010001 	sub	x1, x0, x1
	chunk_size = 1024;
   90b04:	b000a242 	adrp	x2, 14d9000 <connected_chunk+0xfb938>
   90b08:	d2808003 	mov	x3, #0x400                 	// #1024
	total_space_avaliable = (unsigned char *)end_of_cpu_memory - end_of_program;
   90b0c:	f9035cc1 	str	x1, [x6, #1720]
	end_of_cpu_memory = get_gpu_memory_address_start();
   90b10:	f9035ca0 	str	x0, [x5, #1720]
	number_of_chunks = total_space_avaliable / chunk_size;
   90b14:	d34afc21 	lsr	x1, x1, #10
	chunk_size = 1024;
   90b18:	f9035443 	str	x3, [x2, #1704]
	number_of_chunks = total_space_avaliable / chunk_size;
   90b1c:	f9035881 	str	x1, [x4, #1712]
	for(unsigned long i = 0; i < number_of_chunks; i++) 
   90b20:	b4000161 	cbz	x1, 90b4c <dynamic_memory_alloc_init+0x7c>
   90b24:	b000a243 	adrp	x3, 14d9000 <connected_chunk+0xfb938>
   90b28:	b0009a62 	adrp	x2, 13dd000 <_binary_src_audio_The_Amazons_bin_size+0x96300>
   90b2c:	911b0063 	add	x3, x3, #0x6c0
   90b30:	911b2042 	add	x2, x2, #0x6c8
   90b34:	d2800000 	mov	x0, #0x0                   	// #0
	{
		allocated[i] = 0;
   90b38:	3820687f 	strb	wzr, [x3, x0]
		connected_chunk[i] = 0;
   90b3c:	3820685f 	strb	wzr, [x2, x0]
	for(unsigned long i = 0; i < number_of_chunks; i++) 
   90b40:	91000400 	add	x0, x0, #0x1
   90b44:	eb00003f 	cmp	x1, x0
   90b48:	54ffff81 	b.ne	90b38 <dynamic_memory_alloc_init+0x68>  // b.any
	}

}
   90b4c:	f9400bf3 	ldr	x19, [sp, #16]
   90b50:	a8c27bfd 	ldp	x29, x30, [sp], #32
   90b54:	d65f03c0 	ret

0000000000090b58 <malloc>:
	//Remember to check if any chunk end hits MMIO_BASE
	
	amount_to_allocate = (((amount_to_allocate + 1024 - 1) / 1024) * 1024);
	uint64_t number_of_chunks_to_allocate = amount_to_allocate / 1024;

	for(unsigned long i = 0; i < number_of_chunks; i++)
   90b58:	b000a241 	adrp	x1, 14d9000 <connected_chunk+0xfb938>
	amount_to_allocate = (((amount_to_allocate + 1024 - 1) / 1024) * 1024);
   90b5c:	910ffc00 	add	x0, x0, #0x3ff
   90b60:	9276d409 	and	x9, x0, #0xfffffffffffffc00
	for(unsigned long i = 0; i < number_of_chunks; i++)
   90b64:	f9435828 	ldr	x8, [x1, #1712]
	uint64_t number_of_chunks_to_allocate = amount_to_allocate / 1024;
   90b68:	d34afc02 	lsr	x2, x0, #10
	for(unsigned long i = 0; i < number_of_chunks; i++)
   90b6c:	b40005c8 	cbz	x8, 90c24 <malloc+0xcc>
   90b70:	b000a247 	adrp	x7, 14d9000 <connected_chunk+0xfb938>
   90b74:	b0009a65 	adrp	x5, 13dd000 <_binary_src_audio_The_Amazons_bin_size+0x96300>
   90b78:	911b00e7 	add	x7, x7, #0x6c0
   90b7c:	911b20a5 	add	x5, x5, #0x6c8
   90b80:	d2800003 	mov	x3, #0x0                   	// #0
			uint8_t chunk_allocated_in_space = 0;
			for(uint64_t j = i; j < i + number_of_chunks_to_allocate; j++)
			{
				if(connected_chunk[j] == 1)
				{
					chunk_allocated_in_space = 1;
   90b84:	52800026 	mov	w6, #0x1                   	// #1
   90b88:	14000005 	b	90b9c <malloc+0x44>
	for(unsigned long i = 0; i < number_of_chunks; i++)
   90b8c:	91000463 	add	x3, x3, #0x1
   90b90:	91000442 	add	x2, x2, #0x1
   90b94:	eb08007f 	cmp	x3, x8
   90b98:	54000460 	b.eq	90c24 <malloc+0xcc>  // b.none
		if(allocated[i] == 0)
   90b9c:	386368e0 	ldrb	w0, [x7, x3]
   90ba0:	35ffff60 	cbnz	w0, 90b8c <malloc+0x34>
			for(uint64_t j = i; j < i + number_of_chunks_to_allocate; j++)
   90ba4:	eb02007f 	cmp	x3, x2
   90ba8:	540002c2 	b.cs	90c00 <malloc+0xa8>  // b.hs, b.nlast
   90bac:	aa0303e0 	mov	x0, x3
			uint8_t chunk_allocated_in_space = 0;
   90bb0:	52800001 	mov	w1, #0x0                   	// #0
   90bb4:	d503201f 	nop
				if(connected_chunk[j] == 1)
   90bb8:	386068a4 	ldrb	w4, [x5, x0]
			for(uint64_t j = i; j < i + number_of_chunks_to_allocate; j++)
   90bbc:	91000400 	add	x0, x0, #0x1
					chunk_allocated_in_space = 1;
   90bc0:	7100049f 	cmp	w4, #0x1
   90bc4:	1a861021 	csel	w1, w1, w6, ne  // ne = any
			for(uint64_t j = i; j < i + number_of_chunks_to_allocate; j++)
   90bc8:	eb02001f 	cmp	x0, x2
   90bcc:	54ffff61 	b.ne	90bb8 <malloc+0x60>  // b.any
				}
			}
			if(chunk_allocated_in_space == 0)
   90bd0:	35fffde1 	cbnz	w1, 90b8c <malloc+0x34>
   90bd4:	aa0303e0 	mov	x0, x3
			{
				uint64_t temp = amount_to_allocate;
   90bd8:	aa0903e1 	mov	x1, x9
				for(uint64_t j = i; j < i + number_of_chunks_to_allocate; j++)
                        	{
					connected_chunk[j] = 1;
   90bdc:	52800024 	mov	w4, #0x1                   	// #1
					allocated[j] = 1; 
					if(temp == 1024)
					{
						connected_chunk[j] = 0;
   90be0:	f110003f 	cmp	x1, #0x400
					allocated[j] = 1; 
   90be4:	382068e4 	strb	w4, [x7, x0]
						connected_chunk[j] = 0;
   90be8:	1a9f1086 	csel	w6, w4, wzr, ne  // ne = any
   90bec:	382068a6 	strb	w6, [x5, x0]
				for(uint64_t j = i; j < i + number_of_chunks_to_allocate; j++)
   90bf0:	91000400 	add	x0, x0, #0x1
					}
					temp -= 1024;
   90bf4:	d1100021 	sub	x1, x1, #0x400
				for(uint64_t j = i; j < i + number_of_chunks_to_allocate; j++)
   90bf8:	eb02001f 	cmp	x0, x2
   90bfc:	54ffff23 	b.cc	90be0 <malloc+0x88>  // b.lo, b.ul, b.last
                        	}
				unsigned char *x = end_of_program + (i << 10);
   90c00:	b0009a60 	adrp	x0, 13dd000 <_binary_src_audio_The_Amazons_bin_size+0x96300>
				if(x[amount_to_allocate] < (uint64_t)end_of_cpu_memory)
   90c04:	b0009a61 	adrp	x1, 13dd000 <_binary_src_audio_The_Amazons_bin_size+0x96300>
				unsigned char *x = end_of_program + (i << 10);
   90c08:	f9435400 	ldr	x0, [x0, #1704]
				if(x[amount_to_allocate] < (uint64_t)end_of_cpu_memory)
   90c0c:	f9435c22 	ldr	x2, [x1, #1720]
				unsigned char *x = end_of_program + (i << 10);
   90c10:	8b032800 	add	x0, x0, x3, lsl #10
				if(x[amount_to_allocate] < (uint64_t)end_of_cpu_memory)
   90c14:	38696801 	ldrb	w1, [x0, x9]
   90c18:	eb01005f 	cmp	x2, x1
   90c1c:	54000049 	b.ls	90c24 <malloc+0xcc>  // b.plast
				}
			}
		}
	}
	return NULL;
}
   90c20:	d65f03c0 	ret
					return NULL;
   90c24:	d2800000 	mov	x0, #0x0                   	// #0
}
   90c28:	d65f03c0 	ret
   90c2c:	d503201f 	nop

0000000000090c30 <free>:
int free(void *p_to_free)
{
	//WARNING THIS FUNCTION FAILS SILENTLY (But it shouldn't fail XD)
	//TODO add compadibility with latest version of malloc
	unsigned long i = 0;
	i = ((p_to_free - (void *)end_of_program) >> 10);
   90c30:	b0009a61 	adrp	x1, 13dd000 <_binary_src_audio_The_Amazons_bin_size+0x96300>
	allocated[i] = 0;
	//We also have to find out if it is a connected chunk to do this:
	if(connected_chunk[i] == 0) return 0;
   90c34:	b0009a62 	adrp	x2, 13dd000 <_binary_src_audio_The_Amazons_bin_size+0x96300>
   90c38:	911b2042 	add	x2, x2, #0x6c8
	allocated[i] = 0;
   90c3c:	b000a243 	adrp	x3, 14d9000 <connected_chunk+0xfb938>
	i = ((p_to_free - (void *)end_of_program) >> 10);
   90c40:	f9435421 	ldr	x1, [x1, #1704]
	allocated[i] = 0;
   90c44:	911b0063 	add	x3, x3, #0x6c0
	i = ((p_to_free - (void *)end_of_program) >> 10);
   90c48:	cb010000 	sub	x0, x0, x1
   90c4c:	934afc00 	asr	x0, x0, #10
	if(connected_chunk[i] == 0) return 0;
   90c50:	38606841 	ldrb	w1, [x2, x0]
	allocated[i] = 0;
   90c54:	3820687f 	strb	wzr, [x3, x0]
	if(connected_chunk[i] == 0) return 0;
   90c58:	350000c1 	cbnz	w1, 90c70 <free+0x40>
   90c5c:	14000009 	b	90c80 <free+0x50>
	for(; connected_chunk[i] == 1; i++)
	{
		connected_chunk[i] = 0;
   90c60:	3820685f 	strb	wzr, [x2, x0]
		allocated[i] = 0;
   90c64:	3820687f 	strb	wzr, [x3, x0]
	for(; connected_chunk[i] == 1; i++)
   90c68:	91000400 	add	x0, x0, #0x1
   90c6c:	38606841 	ldrb	w1, [x2, x0]
   90c70:	7100043f 	cmp	w1, #0x1
   90c74:	54ffff60 	b.eq	90c60 <free+0x30>  // b.none
	}
	i++;
	allocated[i] = 0;	
   90c78:	8b000060 	add	x0, x3, x0
   90c7c:	3900041f 	strb	wzr, [x0, #1]
	return 0;
}
   90c80:	52800000 	mov	w0, #0x0                   	// #0
   90c84:	d65f03c0 	ret

0000000000090c88 <set_ACT_LED>:
#include "headers/project.h"

void set_ACT_LED(bool on)
{
	mailbox[0] = 8*4;
   90c88:	b000aa22 	adrp	x2, 15d5000 <allocated+0xfb940>
   90c8c:	9123c041 	add	x1, x2, #0x8f0
   90c90:	52800403 	mov	w3, #0x20                  	// #32
	mailbox[7] = 0;
	mailbox[1] = 0;
	mailbox[2] = 0x00038041;
   90c94:	52900825 	mov	w5, #0x8041                	// #32833
	mailbox[0] = 8*4;
   90c98:	b908f043 	str	w3, [x2, #2288]
	mailbox[2] = 0x00038041;
   90c9c:	72a00065 	movk	w5, #0x3, lsl #16
	mailbox[7] = 0;
   90ca0:	b9001c3f 	str	wzr, [x1, #28]
	mailbox[3] = 8;
   90ca4:	52800102 	mov	w2, #0x8                   	// #8
	mailbox[1] = 0;
   90ca8:	b900043f 	str	wzr, [x1, #4]
	mailbox[4] = 8;
	mailbox[5] = 130;
   90cac:	52801044 	mov	w4, #0x82                  	// #130
	mailbox[2] = 0x00038041;
   90cb0:	b9000825 	str	w5, [x1, #8]
{
   90cb4:	12001c03 	and	w3, w0, #0xff
	mailbox[3] = 8;
   90cb8:	b9000c22 	str	w2, [x1, #12]
	mailbox[6] = (uint32_t)on;
	mailbox_call(0x8);
   90cbc:	2a0203e0 	mov	w0, w2
	mailbox[4] = 8;
   90cc0:	b9001022 	str	w2, [x1, #16]
	mailbox[5] = 130;
   90cc4:	b9001424 	str	w4, [x1, #20]
	mailbox[6] = (uint32_t)on;
   90cc8:	b9001823 	str	w3, [x1, #24]
	mailbox_call(0x8);
   90ccc:	14000149 	b	911f0 <mailbox_call>

0000000000090cd0 <core1_main>:
#include "headers/project.h"

void core1_main()
{
   90cd0:	d100c3ff 	sub	sp, sp, #0x30
	lfb_special_print(0, 0, "Hello World", false, 0, 255, 0, 0, 0, 0);
   90cd4:	b0000022 	adrp	x2, 95000 <sd_init+0x3470>
   90cd8:	52800007 	mov	w7, #0x0                   	// #0
   90cdc:	91320042 	add	x2, x2, #0xc80
   90ce0:	52800006 	mov	w6, #0x0                   	// #0
   90ce4:	12800005 	mov	w5, #0xffffffff            	// #-1
{
   90ce8:	a9017bfd 	stp	x29, x30, [sp, #16]
   90cec:	910043fd 	add	x29, sp, #0x10
	lfb_special_print(0, 0, "Hello World", false, 0, 255, 0, 0, 0, 0);
   90cf0:	52800004 	mov	w4, #0x0                   	// #0
   90cf4:	52800003 	mov	w3, #0x0                   	// #0
   90cf8:	390003ff 	strb	wzr, [sp]
   90cfc:	52800001 	mov	w1, #0x0                   	// #0
   90d00:	390023ff 	strb	wzr, [sp, #8]
   90d04:	52800000 	mov	w0, #0x0                   	// #0
{
   90d08:	a90253f3 	stp	x19, x20, [sp, #32]
	for(int i = 0; i < 12; i++)
	{
		set_ACT_LED(true);
		wait_usec(100000);
   90d0c:	5290d414 	mov	w20, #0x86a0                	// #34464
	lfb_special_print(0, 0, "Hello World", false, 0, 255, 0, 0, 0, 0);
   90d10:	52800193 	mov	w19, #0xc                   	// #12
		wait_usec(100000);
   90d14:	72a00034 	movk	w20, #0x1, lsl #16
	lfb_special_print(0, 0, "Hello World", false, 0, 255, 0, 0, 0, 0);
   90d18:	97ffc23a 	bl	81600 <lfb_special_print>
	for(int i = 0; i < 12; i++)
   90d1c:	d503201f 	nop
		set_ACT_LED(true);
   90d20:	52800020 	mov	w0, #0x1                   	// #1
   90d24:	97ffffd9 	bl	90c88 <set_ACT_LED>
		wait_usec(100000);
   90d28:	2a1403e0 	mov	w0, w20
   90d2c:	97ffc811 	bl	82d70 <wait_usec>
		set_ACT_LED(false);
   90d30:	52800000 	mov	w0, #0x0                   	// #0
   90d34:	97ffffd5 	bl	90c88 <set_ACT_LED>
		wait_usec(100000);
   90d38:	2a1403e0 	mov	w0, w20
   90d3c:	97ffc80d 	bl	82d70 <wait_usec>
	for(int i = 0; i < 12; i++)
   90d40:	71000673 	subs	w19, w19, #0x1
   90d44:	54fffee1 	b.ne	90d20 <core1_main+0x50>  // b.any
	}
	lfb_print(0, 1, "Flashing Done");
}
   90d48:	a9417bfd 	ldp	x29, x30, [sp, #16]
	lfb_print(0, 1, "Flashing Done");
   90d4c:	b0000022 	adrp	x2, 95000 <sd_init+0x3470>
}
   90d50:	a94253f3 	ldp	x19, x20, [sp, #32]
	lfb_print(0, 1, "Flashing Done");
   90d54:	52800021 	mov	w1, #0x1                   	// #1
   90d58:	91324042 	add	x2, x2, #0xc90
   90d5c:	52800000 	mov	w0, #0x0                   	// #0
}
   90d60:	9100c3ff 	add	sp, sp, #0x30
	lfb_print(0, 1, "Flashing Done");
   90d64:	17ffc1d9 	b	814c8 <lfb_print>

0000000000090d68 <get_gpu_memory_split>:
#include "headers/project.h"

uint32_t get_gpu_memory_split()
{
   90d68:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
	mailbox[0] = 8 * 4;
   90d6c:	b000aa20 	adrp	x0, 15d5000 <allocated+0xfb940>
   90d70:	52800401 	mov	w1, #0x20                  	// #32
{
   90d74:	910003fd 	mov	x29, sp
   90d78:	f9000bf3 	str	x19, [sp, #16]
	mailbox[0] = 8 * 4;
   90d7c:	9123c013 	add	x19, x0, #0x8f0
   90d80:	b908f001 	str	w1, [x0, #2288]
	mailbox[1] = 0;
	mailbox[2] = 0x10005;
   90d84:	528000a2 	mov	w2, #0x5                   	// #5
   90d88:	72a00022 	movk	w2, #0x1, lsl #16
	mailbox[3] = 8;
   90d8c:	52800101 	mov	w1, #0x8                   	// #8
	mailbox[1] = 0;
   90d90:	b900067f 	str	wzr, [x19, #4]
	mailbox[4] = 0;
	mailbox[5] = 0;
	mailbox[6] = 0;
	mailbox[7] = 0;
	if(!mailbox_call(MBOX_CH_PROP))
   90d94:	2a0103e0 	mov	w0, w1
	mailbox[2] = 0x10005;
   90d98:	b9000a62 	str	w2, [x19, #8]
	mailbox[3] = 8;
   90d9c:	b9000e61 	str	w1, [x19, #12]
	mailbox[4] = 0;
   90da0:	b900127f 	str	wzr, [x19, #16]
	mailbox[5] = 0;
   90da4:	b900167f 	str	wzr, [x19, #20]
	mailbox[6] = 0;
   90da8:	b9001a7f 	str	wzr, [x19, #24]
	mailbox[7] = 0;
   90dac:	b9001e7f 	str	wzr, [x19, #28]
	if(!mailbox_call(MBOX_CH_PROP))
   90db0:	94000110 	bl	911f0 <mailbox_call>
   90db4:	35000060 	cbnz	w0, 90dc0 <get_gpu_memory_split+0x58>
	{
		mailbox[6]=512*1024*1024;
   90db8:	52a40000 	mov	w0, #0x20000000            	// #536870912
   90dbc:	b9001a60 	str	w0, [x19, #24]
	}
	return mailbox[6]; //Return the amount of GPU memory in bytes
   90dc0:	b9401a60 	ldr	w0, [x19, #24]
}
   90dc4:	f9400bf3 	ldr	x19, [sp, #16]
   90dc8:	a8c27bfd 	ldp	x29, x30, [sp], #32
   90dcc:	d65f03c0 	ret

0000000000090dd0 <get_gpu_memory_address_start>:

uint64_t *get_gpu_memory_address_start()
{
   90dd0:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   90dd4:	910003fd 	mov	x29, sp
	return (uint64_t *)((uint64_t)(0x3F000000 - get_gpu_memory_split()));
   90dd8:	97ffffe4 	bl	90d68 <get_gpu_memory_split>
   90ddc:	52a7e001 	mov	w1, #0x3f000000            	// #1056964608
}
   90de0:	4b000020 	sub	w0, w1, w0
   90de4:	a8c17bfd 	ldp	x29, x30, [sp], #16
   90de8:	d65f03c0 	ret
   90dec:	00000000 	.inst	0x00000000 ; undefined

0000000000090df0 <init_audio_jack>:
#include "headers/project.h"

int init_audio_jack()
{
   90df0:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
	*((volatile unsigned int *)(MMIO_BASE + 0x200000 + 0x10)) = (0x4 | 0x200000);
   90df4:	d2800202 	mov	x2, #0x10                  	// #16
   90df8:	f2a7e402 	movk	x2, #0x3f20, lsl #16

	*CM_PWMDIV = CM_PASS | 0x2000; //Set clock block 0
   90dfc:	d2825201 	mov	x1, #0x1290                	// #4752
{
   90e00:	910003fd 	mov	x29, sp
	*CM_PWMDIV = CM_PASS | 0x2000; //Set clock block 0
   90e04:	f2a7e201 	movk	x1, #0x3f10, lsl #16
	*((volatile unsigned int *)(MMIO_BASE + 0x200000 + 0x10)) = (0x4 | 0x200000);
   90e08:	52800083 	mov	w3, #0x4                   	// #4

	*CM_PWMCTL = (CM_PASS | 0x10) | (0x01 + 0x05); //Set clock block 1
   90e0c:	d2825000 	mov	x0, #0x1280                	// #4736
	*((volatile unsigned int *)(MMIO_BASE + 0x200000 + 0x10)) = (0x4 | 0x200000);
   90e10:	72a00403 	movk	w3, #0x20, lsl #16
   90e14:	b9000043 	str	w3, [x2]
	*CM_PWMDIV = CM_PASS | 0x2000; //Set clock block 0
   90e18:	52840002 	mov	w2, #0x2000                	// #8192
	*CM_PWMCTL = (CM_PASS | 0x10) | (0x01 + 0x05); //Set clock block 1
   90e1c:	f2a7e200 	movk	x0, #0x3f10, lsl #16
	*CM_PWMDIV = CM_PASS | 0x2000; //Set clock block 0
   90e20:	72ab4002 	movk	w2, #0x5a00, lsl #16

	*(PWM_BASE + 0x10) = 0x2C48;
   90e24:	d2980803 	mov	x3, #0xc040                	// #49216
	*CM_PWMDIV = CM_PASS | 0x2000; //Set clock block 0
   90e28:	b9000022 	str	w2, [x1]
	*CM_PWMCTL = (CM_PASS | 0x10) | (0x01 + 0x05); //Set clock block 1
   90e2c:	528002c1 	mov	w1, #0x16                  	// #22
	*(PWM_BASE + 0x10) = 0x2C48;
   90e30:	f2a7e403 	movk	x3, #0x3f20, lsl #16
	*CM_PWMCTL = (CM_PASS | 0x10) | (0x01 + 0x05); //Set clock block 1
   90e34:	72ab4001 	movk	w1, #0x5a00, lsl #16
	*(PWM_BASE + 0x20) = 0x2C48;
   90e38:	d2981002 	mov	x2, #0xc080                	// #49280
	*CM_PWMCTL = (CM_PASS | 0x10) | (0x01 + 0x05); //Set clock block 1
   90e3c:	b9000001 	str	w1, [x0]
	*(PWM_BASE + 0x20) = 0x2C48;
   90e40:	f2a7e402 	movk	x2, #0x3f20, lsl #16

	*(PWM_BASE + 0x0) = 0x20 + 0x100 + 0x2000 + 0x1 + 0x40;
   90e44:	d2980001 	mov	x1, #0xc000                	// #49152
	*(PWM_BASE + 0x10) = 0x2C48;
   90e48:	52858900 	mov	w0, #0x2c48                	// #11336
	*(PWM_BASE + 0x0) = 0x20 + 0x100 + 0x2000 + 0x1 + 0x40;
   90e4c:	f2a7e401 	movk	x1, #0x3f20, lsl #16
	*(PWM_BASE + 0x10) = 0x2C48;
   90e50:	b9000060 	str	w0, [x3]
	*(PWM_BASE + 0x20) = 0x2C48;
   90e54:	b9000040 	str	w0, [x2]
	*(PWM_BASE + 0x0) = 0x20 + 0x100 + 0x2000 + 0x1 + 0x40;
   90e58:	52842c20 	mov	w0, #0x2161                	// #8545
   90e5c:	b9000020 	str	w0, [x1]

	lfb_print(0, 2, "Well there were no unaligned exeptions");
   90e60:	b0000022 	adrp	x2, 95000 <sd_init+0x3470>
   90e64:	52800041 	mov	w1, #0x2                   	// #2
   90e68:	91328042 	add	x2, x2, #0xca0
   90e6c:	52800000 	mov	w0, #0x0                   	// #0
   90e70:	97ffc196 	bl	814c8 <lfb_print>

	return 0;
}
   90e74:	52800000 	mov	w0, #0x0                   	// #0
   90e78:	a8c17bfd 	ldp	x29, x30, [sp], #16
   90e7c:	d65f03c0 	ret

0000000000090e80 <play_16bit_unsigned_audio>:

//I really hope this works!
int play_16bit_unsigned_audio(char *start, char *end)
{
	if(end < start) return 1;
   90e80:	eb00003f 	cmp	x1, x0
   90e84:	54000062 	b.cs	90e90 <play_16bit_unsigned_audio+0x10>  // b.hs, b.nlast
   90e88:	52800020 	mov	w0, #0x1                   	// #1
		//FIFO wait
		while(*PWM_STA != 0x1);
	}
	lfb_print(0, 5, "Completed Audio");
	return 0;
}
   90e8c:	d65f03c0 	ret
{
   90e90:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
	lfb_print(0, 3, "End isn't less than start.");
   90e94:	b0000022 	adrp	x2, 95000 <sd_init+0x3470>
   90e98:	91332042 	add	x2, x2, #0xcc8
{
   90e9c:	910003fd 	mov	x29, sp
   90ea0:	a90153f3 	stp	x19, x20, [sp, #16]
   90ea4:	aa0103f4 	mov	x20, x1
   90ea8:	aa0003f3 	mov	x19, x0
	lfb_print(0, 3, "End isn't less than start.");
   90eac:	52800061 	mov	w1, #0x3                   	// #3
   90eb0:	52800000 	mov	w0, #0x0                   	// #0
   90eb4:	97ffc185 	bl	814c8 <lfb_print>
	if((start - end) % 2 != 0) return 2;
   90eb8:	cb140261 	sub	x1, x19, x20
   90ebc:	52800040 	mov	w0, #0x2                   	// #2
   90ec0:	370003c1 	tbnz	w1, #0, 90f38 <play_16bit_unsigned_audio+0xb8>
	lfb_print(0, 4, "Is a multiple of two so it is 16bit");
   90ec4:	b0000022 	adrp	x2, 95000 <sd_init+0x3470>
   90ec8:	52800081 	mov	w1, #0x4                   	// #4
   90ecc:	9133a042 	add	x2, x2, #0xce8
   90ed0:	52800000 	mov	w0, #0x0                   	// #0
   90ed4:	97ffc17d 	bl	814c8 <lfb_print>
	for(int i = 0; &(start[i]) != end; i++)
   90ed8:	eb13029f 	cmp	x20, x19
   90edc:	54000220 	b.eq	90f20 <play_16bit_unsigned_audio+0xa0>  // b.none
		*PWM_FIF1 = sample;
   90ee0:	d2980c01 	mov	x1, #0xc060                	// #49248
		while(*PWM_STA != 0x1);
   90ee4:	d2980202 	mov	x2, #0xc010                	// #49168
   90ee8:	aa1303e3 	mov	x3, x19
		*PWM_FIF1 = sample;
   90eec:	f2a7e401 	movk	x1, #0x3f20, lsl #16
		while(*PWM_STA != 0x1);
   90ef0:	f2a7e402 	movk	x2, #0x3f20, lsl #16
   90ef4:	d503201f 	nop
		uint8_t sample_low = start[i];
   90ef8:	39400060 	ldrb	w0, [x3]
		uint16_t sample = sample_low | (sample_high << 8);
   90efc:	2a002000 	orr	w0, w0, w0, lsl #8
		*PWM_FIF1 = sample;
   90f00:	53027c00 	lsr	w0, w0, #2
   90f04:	b9000020 	str	w0, [x1]
		while(*PWM_STA != 0x1);
   90f08:	b9400040 	ldr	w0, [x2]
   90f0c:	7100041f 	cmp	w0, #0x1
   90f10:	54ffffc1 	b.ne	90f08 <play_16bit_unsigned_audio+0x88>  // b.any
   90f14:	91000863 	add	x3, x3, #0x2
	for(int i = 0; &(start[i]) != end; i++)
   90f18:	eb03029f 	cmp	x20, x3
   90f1c:	54fffee1 	b.ne	90ef8 <play_16bit_unsigned_audio+0x78>  // b.any
	lfb_print(0, 5, "Completed Audio");
   90f20:	52800000 	mov	w0, #0x0                   	// #0
   90f24:	b0000022 	adrp	x2, 95000 <sd_init+0x3470>
   90f28:	528000a1 	mov	w1, #0x5                   	// #5
   90f2c:	91344042 	add	x2, x2, #0xd10
   90f30:	97ffc166 	bl	814c8 <lfb_print>
	return 0;
   90f34:	52800000 	mov	w0, #0x0                   	// #0
}
   90f38:	a94153f3 	ldp	x19, x20, [sp, #16]
   90f3c:	a8c27bfd 	ldp	x29, x30, [sp], #32
   90f40:	d65f03c0 	ret
   90f44:	00000000 	.inst	0x00000000 ; undefined

0000000000090f48 <hsv_to_rgb>:
#include "headers/project.h"

void hsv_to_rgb(double h, double s, double v, char *r, char *g, char *b)
{
	h = h > 360.0 ? 0.0 : h;
   90f48:	d2d00003 	mov	x3, #0x800000000000        	// #140737488355328
   90f4c:	1e6e1005 	fmov	d5, #1.000000000000000000e+00
   90f50:	f2e80ec3 	movk	x3, #0x4076, lsl #48
   90f54:	9e670066 	fmov	d6, x3
   90f58:	1e6138a3 	fsub	d3, d5, d1
   90f5c:	1e662010 	fcmpe	d0, d6
   90f60:	1e620867 	fmul	d7, d3, d2
   90f64:	540001ed 	b.le	90fa0 <hsv_to_rgb+0x58>

	P = v*(1.0 - s);
	Q = v*(1.0 - s * fract);
	T = v*(1.0 - s*(1.0 - fract));

	if(0. <= h && h < 1.)
   90f68:	d2dc0003 	mov	x3, #0xe00000000000        	// #246290604621824
   90f6c:	f2e80de3 	movk	x3, #0x406f, lsl #48
   90f70:	9e670060 	fmov	d0, x3
   90f74:	1e6008e1 	fmul	d1, d7, d0
   90f78:	1e600840 	fmul	d0, d2, d0
   90f7c:	1e790024 	fcvtzu	w4, d1
   90f80:	1e790003 	fcvtzu	w3, d0
   90f84:	12001c85 	and	w5, w4, #0xff
   90f88:	12001c63 	and	w3, w3, #0xff
	h = h > 360.0 ? 0.0 : h;
   90f8c:	2a0503e4 	mov	w4, w5
	}
	else
	{
		temp_r = 0; temp_g = 0; temp_b = 0;
	}
	*r = (char)(255 * temp_r);
   90f90:	39000003 	strb	w3, [x0]
	*g = (char)(255 * temp_g);
   90f94:	39000025 	strb	w5, [x1]
	*b = (char)(255 * temp_b);
   90f98:	39000044 	strb	w4, [x2]
}
   90f9c:	d65f03c0 	ret
	(h == 360.0) ? (h = 0.0) : (h /= 60.0);
   90fa0:	1e662000 	fcmp	d0, d6
   90fa4:	54fffe20 	b.eq	90f68 <hsv_to_rgb+0x20>  // b.none
   90fa8:	d2e809c3 	mov	x3, #0x404e000000000000    	// #4633641066610819072
   90fac:	9e670064 	fmov	d4, x3
   90fb0:	1e641800 	fdiv	d0, d0, d4
	fract = h - (int)h;	
   90fb4:	1e780003 	fcvtzs	w3, d0
	if(0. <= h && h < 1.)
   90fb8:	1e602018 	fcmpe	d0, #0.0
	fract = h - (int)h;	
   90fbc:	1e620063 	scvtf	d3, w3
   90fc0:	1e633803 	fsub	d3, d0, d3
	T = v*(1.0 - s*(1.0 - fract));
   90fc4:	1e6338a4 	fsub	d4, d5, d3
	Q = v*(1.0 - s * fract);
   90fc8:	1f419463 	fmsub	d3, d3, d1, d5
	T = v*(1.0 - s*(1.0 - fract));
   90fcc:	1f419484 	fmsub	d4, d4, d1, d5
	Q = v*(1.0 - s * fract);
   90fd0:	1e620863 	fmul	d3, d3, d2
	T = v*(1.0 - s*(1.0 - fract));
   90fd4:	1e620884 	fmul	d4, d4, d2
	if(0. <= h && h < 1.)
   90fd8:	54000b2a 	b.ge	9113c <hsv_to_rgb+0x1f4>  // b.tcont
	else if(1. <= h && h < 2.)
   90fdc:	1e6e1001 	fmov	d1, #1.000000000000000000e+00
   90fe0:	1e612010 	fcmpe	d0, d1
   90fe4:	5400028b 	b.lt	91034 <hsv_to_rgb+0xec>  // b.tstop
   90fe8:	1e601001 	fmov	d1, #2.000000000000000000e+00
   90fec:	1e612010 	fcmpe	d0, d1
   90ff0:	54000225 	b.pl	91034 <hsv_to_rgb+0xec>  // b.nfrst
   90ff4:	d2dc0003 	mov	x3, #0xe00000000000        	// #246290604621824
   90ff8:	f2e80de3 	movk	x3, #0x406f, lsl #48
   90ffc:	9e670061 	fmov	d1, x3
   91000:	1e610863 	fmul	d3, d3, d1
   91004:	1e610840 	fmul	d0, d2, d1
   91008:	1e6108e1 	fmul	d1, d7, d1
   9100c:	1e790063 	fcvtzu	w3, d3
   91010:	1e790005 	fcvtzu	w5, d0
   91014:	1e790024 	fcvtzu	w4, d1
   91018:	12001c63 	and	w3, w3, #0xff
	*r = (char)(255 * temp_r);
   9101c:	39000003 	strb	w3, [x0]
   91020:	12001ca5 	and	w5, w5, #0xff
	*g = (char)(255 * temp_g);
   91024:	39000025 	strb	w5, [x1]
   91028:	12001c84 	and	w4, w4, #0xff
	*b = (char)(255 * temp_b);
   9102c:	39000044 	strb	w4, [x2]
}
   91030:	d65f03c0 	ret
	else if (2. <= h && h < 3.)
   91034:	1e601001 	fmov	d1, #2.000000000000000000e+00
   91038:	1e612010 	fcmpe	d0, d1
   9103c:	5400008b 	b.lt	9104c <hsv_to_rgb+0x104>  // b.tstop
   91040:	1e611001 	fmov	d1, #3.000000000000000000e+00
   91044:	1e612010 	fcmpe	d0, d1
   91048:	54000984 	b.mi	91178 <hsv_to_rgb+0x230>  // b.first
	else if (3. <= h && h < 4.)
   9104c:	1e611001 	fmov	d1, #3.000000000000000000e+00
   91050:	1e612010 	fcmpe	d0, d1
   91054:	5400028b 	b.lt	910a4 <hsv_to_rgb+0x15c>  // b.tstop
   91058:	1e621001 	fmov	d1, #4.000000000000000000e+00
   9105c:	1e612010 	fcmpe	d0, d1
   91060:	54000225 	b.pl	910a4 <hsv_to_rgb+0x15c>  // b.nfrst
   91064:	d2dc0003 	mov	x3, #0xe00000000000        	// #246290604621824
   91068:	f2e80de3 	movk	x3, #0x406f, lsl #48
   9106c:	9e670064 	fmov	d4, x3
   91070:	1e6408e1 	fmul	d1, d7, d4
   91074:	1e640863 	fmul	d3, d3, d4
   91078:	1e640844 	fmul	d4, d2, d4
   9107c:	1e790023 	fcvtzu	w3, d1
   91080:	1e790065 	fcvtzu	w5, d3
   91084:	1e790084 	fcvtzu	w4, d4
   91088:	12001c63 	and	w3, w3, #0xff
	*r = (char)(255 * temp_r);
   9108c:	39000003 	strb	w3, [x0]
   91090:	12001ca5 	and	w5, w5, #0xff
	*g = (char)(255 * temp_g);
   91094:	39000025 	strb	w5, [x1]
   91098:	12001c84 	and	w4, w4, #0xff
	*b = (char)(255 * temp_b);
   9109c:	39000044 	strb	w4, [x2]
}
   910a0:	d65f03c0 	ret
	else if (4. <= h && h < 5.)
   910a4:	1e621001 	fmov	d1, #4.000000000000000000e+00
   910a8:	1e612010 	fcmpe	d0, d1
   910ac:	5400022b 	b.lt	910f0 <hsv_to_rgb+0x1a8>  // b.tstop
   910b0:	1e629001 	fmov	d1, #5.000000000000000000e+00
   910b4:	1e612010 	fcmpe	d0, d1
   910b8:	540001c5 	b.pl	910f0 <hsv_to_rgb+0x1a8>  // b.nfrst
   910bc:	d2dc0003 	mov	x3, #0xe00000000000        	// #246290604621824
   910c0:	f2e80de3 	movk	x3, #0x406f, lsl #48
   910c4:	9e670060 	fmov	d0, x3
   910c8:	1e600884 	fmul	d4, d4, d0
   910cc:	1e6008e1 	fmul	d1, d7, d0
   910d0:	1e600840 	fmul	d0, d2, d0
   910d4:	1e790024 	fcvtzu	w4, d1
   910d8:	1e790083 	fcvtzu	w3, d4
   910dc:	1e790006 	fcvtzu	w6, d0
   910e0:	12001c85 	and	w5, w4, #0xff
   910e4:	12001c63 	and	w3, w3, #0xff
   910e8:	12001cc4 	and	w4, w6, #0xff
   910ec:	17ffffa9 	b	90f90 <hsv_to_rgb+0x48>
	else if (5. <= h && h < 6.)
   910f0:	1e629001 	fmov	d1, #5.000000000000000000e+00
   910f4:	1e612010 	fcmpe	d0, d1
   910f8:	5400060b 	b.lt	911b8 <hsv_to_rgb+0x270>  // b.tstop
   910fc:	1e631001 	fmov	d1, #6.000000000000000000e+00
   91100:	1e612010 	fcmpe	d0, d1
   91104:	540005a5 	b.pl	911b8 <hsv_to_rgb+0x270>  // b.nfrst
   91108:	d2dc0003 	mov	x3, #0xe00000000000        	// #246290604621824
   9110c:	f2e80de3 	movk	x3, #0x406f, lsl #48
   91110:	9e670065 	fmov	d5, x3
   91114:	1e650840 	fmul	d0, d2, d5
   91118:	1e6508e1 	fmul	d1, d7, d5
   9111c:	1e650863 	fmul	d3, d3, d5
   91120:	1e790003 	fcvtzu	w3, d0
   91124:	1e790025 	fcvtzu	w5, d1
   91128:	1e790064 	fcvtzu	w4, d3
   9112c:	12001c63 	and	w3, w3, #0xff
   91130:	12001ca5 	and	w5, w5, #0xff
   91134:	12001c84 	and	w4, w4, #0xff
   91138:	17ffff96 	b	90f90 <hsv_to_rgb+0x48>
	if(0. <= h && h < 1.)
   9113c:	1e652010 	fcmpe	d0, d5
   91140:	54fff4e5 	b.pl	90fdc <hsv_to_rgb+0x94>  // b.nfrst
   91144:	d2dc0003 	mov	x3, #0xe00000000000        	// #246290604621824
   91148:	f2e80de3 	movk	x3, #0x406f, lsl #48
   9114c:	9e670061 	fmov	d1, x3
   91150:	1e610840 	fmul	d0, d2, d1
   91154:	1e610884 	fmul	d4, d4, d1
   91158:	1e6108e1 	fmul	d1, d7, d1
   9115c:	1e790084 	fcvtzu	w4, d4
   91160:	1e790003 	fcvtzu	w3, d0
   91164:	1e790026 	fcvtzu	w6, d1
   91168:	12001c85 	and	w5, w4, #0xff
   9116c:	12001c63 	and	w3, w3, #0xff
   91170:	12001cc4 	and	w4, w6, #0xff
   91174:	17ffff87 	b	90f90 <hsv_to_rgb+0x48>
   91178:	d2dc0003 	mov	x3, #0xe00000000000        	// #246290604621824
   9117c:	f2e80de3 	movk	x3, #0x406f, lsl #48
   91180:	9e670061 	fmov	d1, x3
   91184:	1e6108e3 	fmul	d3, d7, d1
   91188:	1e610840 	fmul	d0, d2, d1
   9118c:	1e610884 	fmul	d4, d4, d1
   91190:	1e790063 	fcvtzu	w3, d3
   91194:	1e790005 	fcvtzu	w5, d0
   91198:	1e790084 	fcvtzu	w4, d4
   9119c:	12001c63 	and	w3, w3, #0xff
	*r = (char)(255 * temp_r);
   911a0:	39000003 	strb	w3, [x0]
   911a4:	12001ca5 	and	w5, w5, #0xff
	*g = (char)(255 * temp_g);
   911a8:	39000025 	strb	w5, [x1]
   911ac:	12001c84 	and	w4, w4, #0xff
	*b = (char)(255 * temp_b);
   911b0:	39000044 	strb	w4, [x2]
}
   911b4:	d65f03c0 	ret
   911b8:	52800003 	mov	w3, #0x0                   	// #0
	*r = (char)(255 * temp_r);
   911bc:	39000003 	strb	w3, [x0]
	*g = (char)(255 * temp_g);
   911c0:	52800005 	mov	w5, #0x0                   	// #0
   911c4:	39000025 	strb	w5, [x1]
	*b = (char)(255 * temp_b);
   911c8:	52800004 	mov	w4, #0x0                   	// #0
   911cc:	39000044 	strb	w4, [x2]
}
   911d0:	d65f03c0 	ret
   911d4:	d503201f 	nop

00000000000911d8 <rgb_to_hex>:



unsigned int rgb_to_hex(char r, char g, char b)
{
	return ((r & 0xff) << 16) + ((g & 0xff) << 8) + (b & 0xff);
   911d8:	53181c21 	ubfiz	w1, w1, #8, #8
   911dc:	53101c00 	ubfiz	w0, w0, #16, #8
   911e0:	0b010000 	add	w0, w0, w1
}
   911e4:	0b220000 	add	w0, w0, w2, uxtb
   911e8:	d65f03c0 	ret
   911ec:	00000000 	.inst	0x00000000 ; undefined

00000000000911f0 <mailbox_call>:
 */
int mailbox_call(unsigned char ch)
{
	unsigned int r;
	/* wait until we can write to the mailbox */
	do{asm volatile("nop");}while(*MBOX_STATUS & MBOX_FULL);
   911f0:	d2971302 	mov	x2, #0xb898                	// #47256
{
   911f4:	12001c00 	and	w0, w0, #0xff
	do{asm volatile("nop");}while(*MBOX_STATUS & MBOX_FULL);
   911f8:	f2a7e002 	movk	x2, #0x3f00, lsl #16
   911fc:	d503201f 	nop
   91200:	d503201f 	nop
   91204:	b9400041 	ldr	w1, [x2]
   91208:	37ffffc1 	tbnz	w1, #31, 91200 <mailbox_call+0x10>
	/* write the address of our message to the mailbox with channel identifier */
	*MBOX_WRITE = (((unsigned int)((unsigned long)&mailbox)&~0xF) | (ch&0xF));
   9120c:	d2971403 	mov	x3, #0xb8a0                	// #47264
   91210:	9000aa26 	adrp	x6, 15d5000 <allocated+0xfb940>
   91214:	f2a7e003 	movk	x3, #0x3f00, lsl #16
   91218:	9123c0c6 	add	x6, x6, #0x8f0
   9121c:	12000c01 	and	w1, w0, #0xf
	/* now wait for the response */
	while(1) {
		/* is there a response? */
		do{asm volatile("nop");}while(*MBOX_STATUS & MBOX_EMPTY);
   91220:	d2971302 	mov	x2, #0xb898                	// #47256
		r=*MBOX_READ;
   91224:	d2971004 	mov	x4, #0xb880                	// #47232
	*MBOX_WRITE = (((unsigned int)((unsigned long)&mailbox)&~0xF) | (ch&0xF));
   91228:	2a0603e5 	mov	w5, w6
   9122c:	2a060021 	orr	w1, w1, w6
		do{asm volatile("nop");}while(*MBOX_STATUS & MBOX_EMPTY);
   91230:	f2a7e002 	movk	x2, #0x3f00, lsl #16
		r=*MBOX_READ;
   91234:	f2a7e004 	movk	x4, #0x3f00, lsl #16
	*MBOX_WRITE = (((unsigned int)((unsigned long)&mailbox)&~0xF) | (ch&0xF));
   91238:	b9000061 	str	w1, [x3]
   9123c:	d503201f 	nop
		do{asm volatile("nop");}while(*MBOX_STATUS & MBOX_EMPTY);
   91240:	d503201f 	nop
   91244:	b9400041 	ldr	w1, [x2]
   91248:	37f7ffc1 	tbnz	w1, #30, 91240 <mailbox_call+0x50>
		r=*MBOX_READ;
   9124c:	b9400081 	ldr	w1, [x4]
		/* is it a response to our message? */
		if((unsigned char)(r&0xF)==ch && (r&~0xF)==(unsigned int)((unsigned long)&mailbox))
   91250:	12000c23 	and	w3, w1, #0xf
   91254:	6b00007f 	cmp	w3, w0
   91258:	54ffff41 	b.ne	91240 <mailbox_call+0x50>  // b.any
   9125c:	121c6c21 	and	w1, w1, #0xfffffff0
   91260:	6b0100bf 	cmp	w5, w1
   91264:	54fffee1 	b.ne	91240 <mailbox_call+0x50>  // b.any
			/* is it a valid successful response? */
			return mailbox[1]==MBOX_RESPONSE;
   91268:	b94004c1 	ldr	w1, [x6, #4]
   9126c:	52b00000 	mov	w0, #0x80000000            	// #-2147483648
   91270:	6b00003f 	cmp	w1, w0
	}
	return 0;
}
   91274:	1a9f17e0 	cset	w0, eq  // eq = none
   91278:	d65f03c0 	ret
   9127c:	d503201f 	nop

0000000000091280 <mailbox_tag_write>:

bool mailbox_tag_write(uint32_t message) 
{
	uint32_t value;	// Temporary read value
	message &= ~(0xF); // Make sure 4 low channel bits are clear
   91280:	121c6c00 	and	w0, w0, #0xfffffff0
	message |= 0x8; // OR the channel bits to the value
	do
	{
		value = MAILBOX_FOR_READ_WRITES->status_1; // Read mailbox1 status from GPU
   91284:	d2971001 	mov	x1, #0xb880                	// #47232
	message |= 0x8; // OR the channel bits to the value
   91288:	321d0002 	orr	w2, w0, #0x8
		value = MAILBOX_FOR_READ_WRITES->status_1; // Read mailbox1 status from GPU
   9128c:	f2a7e001 	movk	x1, #0x3f00, lsl #16
   91290:	b9403820 	ldr	w0, [x1, #56]
	} 
	while ((value & MAIL_FULL) != 0); // Make sure arm mailbox is not full
   91294:	37ffffe0 	tbnz	w0, #31, 91290 <mailbox_tag_write+0x10>
	MAILBOX_FOR_READ_WRITES->write_1 = message; // Write value to mailbox
	return true; // Write success
}
   91298:	52800020 	mov	w0, #0x1                   	// #1
	MAILBOX_FOR_READ_WRITES->write_1 = message; // Write value to mailbox
   9129c:	b9002022 	str	w2, [x1, #32]
}
   912a0:	d65f03c0 	ret
   912a4:	d503201f 	nop

00000000000912a8 <mailbox_tag_read>:
	uint32_t value;	// Temporary read value
	do
	{
		do
		{
			value = MAILBOX_FOR_READ_WRITES->status_0; // Read mailbox0 status
   912a8:	d2971001 	mov	x1, #0xb880                	// #47232
   912ac:	f2a7e001 	movk	x1, #0x3f00, lsl #16
   912b0:	b9401820 	ldr	w0, [x1, #24]
		} 
		while ((value & MAIL_EMPTY) != 0); // Wait for data in mailbox
   912b4:	37f7ffe0 	tbnz	w0, #30, 912b0 <mailbox_tag_read+0x8>
		value = MAILBOX_FOR_READ_WRITES->read_0; // Read the mailbox
   912b8:	b9400020 	ldr	w0, [x1]
	}
	while ((value & 0xF) != 0x8); // We have response back
   912bc:	12000c02 	and	w2, w0, #0xf
   912c0:	7100205f 	cmp	w2, #0x8
   912c4:	54ffff61 	b.ne	912b0 <mailbox_tag_read+0x8>  // b.any
	value &= ~(0xF); // Lower 4 low channel bits are not part of message
	return value; // Return the value
}
   912c8:	121c6c00 	and	w0, w0, #0xfffffff0
   912cc:	d65f03c0 	ret

00000000000912d0 <sd_status>:

/**
 * Wait for data or command ready
 */
int sd_status(unsigned int mask)
{
   912d0:	a9bc7bfd 	stp	x29, x30, [sp, #-64]!
   912d4:	910003fd 	mov	x29, sp
   912d8:	a90153f3 	stp	x19, x20, [sp, #16]
	int cnt = 500000; while((*EMMC_STATUS & mask) && !(*EMMC_INTERRUPT & INT_ERROR_MASK) && cnt--) wait_usec(1);
   912dc:	d2800494 	mov	x20, #0x24                  	// #36
   912e0:	f2a7e614 	movk	x20, #0x3f30, lsl #16
   912e4:	b9400281 	ldr	w1, [x20]
   912e8:	6a01001f 	tst	w0, w1
   912ec:	54000380 	b.eq	9135c <sd_status+0x8c>  // b.none
   912f0:	f9001bf7 	str	x23, [sp, #48]
   912f4:	d2800617 	mov	x23, #0x30                  	// #48
   912f8:	f2a7e617 	movk	x23, #0x3f30, lsl #16
   912fc:	a9025bf5 	stp	x21, x22, [sp, #32]
   91300:	52900016 	mov	w22, #0x8000                	// #32768
   91304:	b94002e1 	ldr	w1, [x23]
   91308:	72a02fd6 	movk	w22, #0x17e, lsl #16
   9130c:	6a16003f 	tst	w1, w22
   91310:	54000221 	b.ne	91354 <sd_status+0x84>  // b.any
   91314:	529423f3 	mov	w19, #0xa11f                	// #41247
   91318:	2a0003f5 	mov	w21, w0
   9131c:	72a000f3 	movk	w19, #0x7, lsl #16
   91320:	14000007 	b	9133c <sd_status+0x6c>
   91324:	b94002e1 	ldr	w1, [x23]
   91328:	6a16003f 	tst	w1, w22
   9132c:	54000121 	b.ne	91350 <sd_status+0x80>  // b.any
   91330:	51000673 	sub	w19, w19, #0x1
   91334:	3100067f 	cmn	w19, #0x1
   91338:	54000280 	b.eq	91388 <sd_status+0xb8>  // b.none
   9133c:	52800020 	mov	w0, #0x1                   	// #1
   91340:	97ffc68c 	bl	82d70 <wait_usec>
   91344:	b9400281 	ldr	w1, [x20]
   91348:	6a15003f 	tst	w1, w21
   9134c:	54fffec1 	b.ne	91324 <sd_status+0x54>  // b.any
	return (cnt <= 0 || (*EMMC_INTERRUPT & INT_ERROR_MASK)) ? SD_ERROR : SD_OK;
   91350:	340001d3 	cbz	w19, 91388 <sd_status+0xb8>
   91354:	a9425bf5 	ldp	x21, x22, [sp, #32]
   91358:	f9401bf7 	ldr	x23, [sp, #48]
   9135c:	d2800601 	mov	x1, #0x30                  	// #48
   91360:	f2a7e601 	movk	x1, #0x3f30, lsl #16
   91364:	52900000 	mov	w0, #0x8000                	// #32768
   91368:	72a02fc0 	movk	w0, #0x17e, lsl #16
   9136c:	b9400021 	ldr	w1, [x1]
   91370:	6a00003f 	tst	w1, w0
   91374:	540000e1 	b.ne	91390 <sd_status+0xc0>  // b.any
   91378:	52800000 	mov	w0, #0x0                   	// #0
}
   9137c:	a94153f3 	ldp	x19, x20, [sp, #16]
   91380:	a8c47bfd 	ldp	x29, x30, [sp], #64
   91384:	d65f03c0 	ret
   91388:	a9425bf5 	ldp	x21, x22, [sp, #32]
   9138c:	f9401bf7 	ldr	x23, [sp, #48]
	return (cnt <= 0 || (*EMMC_INTERRUPT & INT_ERROR_MASK)) ? SD_ERROR : SD_OK;
   91390:	12800020 	mov	w0, #0xfffffffe            	// #-2
}
   91394:	a94153f3 	ldp	x19, x20, [sp, #16]
   91398:	a8c47bfd 	ldp	x29, x30, [sp], #64
   9139c:	d65f03c0 	ret

00000000000913a0 <sd_int>:

/**
 * Wait for interrupt
 */
int sd_int(unsigned int mask)
{
   913a0:	a9bd7bfd 	stp	x29, x30, [sp, #-48]!
   913a4:	910003fd 	mov	x29, sp
   913a8:	a90153f3 	stp	x19, x20, [sp, #16]
	unsigned int r, m=mask | INT_ERROR_MASK;
	int cnt = 1000000; while(!(*EMMC_INTERRUPT & m) && cnt--) wait_usec(1);
   913ac:	d2800614 	mov	x20, #0x30                  	// #48
   913b0:	f2a7e614 	movk	x20, #0x3f30, lsl #16
{
   913b4:	a9025bf5 	stp	x21, x22, [sp, #32]
	unsigned int r, m=mask | INT_ERROR_MASK;
   913b8:	52900015 	mov	w21, #0x8000                	// #32768
{
   913bc:	2a0003f6 	mov	w22, w0
	unsigned int r, m=mask | INT_ERROR_MASK;
   913c0:	72a02fd5 	movk	w21, #0x17e, lsl #16
   913c4:	2a150015 	orr	w21, w0, w21
	int cnt = 1000000; while(!(*EMMC_INTERRUPT & m) && cnt--) wait_usec(1);
   913c8:	b9400280 	ldr	w0, [x20]
   913cc:	6a0002bf 	tst	w21, w0
   913d0:	540003a1 	b.ne	91444 <sd_int+0xa4>  // b.any
   913d4:	528847f3 	mov	w19, #0x423f                	// #16959
   913d8:	72a001f3 	movk	w19, #0xf, lsl #16
   913dc:	14000004 	b	913ec <sd_int+0x4c>
   913e0:	51000673 	sub	w19, w19, #0x1
   913e4:	3100067f 	cmn	w19, #0x1
   913e8:	54000320 	b.eq	9144c <sd_int+0xac>  // b.none
   913ec:	52800020 	mov	w0, #0x1                   	// #1
   913f0:	97ffc660 	bl	82d70 <wait_usec>
   913f4:	b9400280 	ldr	w0, [x20]
   913f8:	6a15001f 	tst	w0, w21
   913fc:	54ffff20 	b.eq	913e0 <sd_int+0x40>  // b.none
	r=*EMMC_INTERRUPT;
   91400:	b9400281 	ldr	w1, [x20]
	if(cnt<=0 || (r & INT_CMD_TIMEOUT) || (r & INT_DATA_TIMEOUT) ) { *EMMC_INTERRUPT=r; return SD_TIMEOUT; } else
   91404:	34000273 	cbz	w19, 91450 <sd_int+0xb0>
   91408:	52a00220 	mov	w0, #0x110000              	// #1114112
   9140c:	6a00003f 	tst	w1, w0
   91410:	54000201 	b.ne	91450 <sd_int+0xb0>  // b.any
	if(r & INT_ERROR_MASK) { *EMMC_INTERRUPT=r; return SD_ERROR; }
   91414:	52900000 	mov	w0, #0x8000                	// #32768
   91418:	72a02fc0 	movk	w0, #0x17e, lsl #16
   9141c:	6a00003f 	tst	w1, w0
   91420:	54000221 	b.ne	91464 <sd_int+0xc4>  // b.any
	*EMMC_INTERRUPT=mask;
   91424:	d2800601 	mov	x1, #0x30                  	// #48
	return 0;
   91428:	52800000 	mov	w0, #0x0                   	// #0
	*EMMC_INTERRUPT=mask;
   9142c:	f2a7e601 	movk	x1, #0x3f30, lsl #16
   91430:	b9000036 	str	w22, [x1]
}
   91434:	a94153f3 	ldp	x19, x20, [sp, #16]
   91438:	a9425bf5 	ldp	x21, x22, [sp, #32]
   9143c:	a8c37bfd 	ldp	x29, x30, [sp], #48
   91440:	d65f03c0 	ret
	r=*EMMC_INTERRUPT;
   91444:	b9400281 	ldr	w1, [x20]
	if(cnt<=0 || (r & INT_CMD_TIMEOUT) || (r & INT_DATA_TIMEOUT) ) { *EMMC_INTERRUPT=r; return SD_TIMEOUT; } else
   91448:	17fffff0 	b	91408 <sd_int+0x68>
	r=*EMMC_INTERRUPT;
   9144c:	b9400281 	ldr	w1, [x20]
	if(cnt<=0 || (r & INT_CMD_TIMEOUT) || (r & INT_DATA_TIMEOUT) ) { *EMMC_INTERRUPT=r; return SD_TIMEOUT; } else
   91450:	d2800602 	mov	x2, #0x30                  	// #48
   91454:	12800000 	mov	w0, #0xffffffff            	// #-1
   91458:	f2a7e602 	movk	x2, #0x3f30, lsl #16
   9145c:	b9000041 	str	w1, [x2]
   91460:	17fffff5 	b	91434 <sd_int+0x94>
	if(r & INT_ERROR_MASK) { *EMMC_INTERRUPT=r; return SD_ERROR; }
   91464:	d2800602 	mov	x2, #0x30                  	// #48
   91468:	12800020 	mov	w0, #0xfffffffe            	// #-2
   9146c:	f2a7e602 	movk	x2, #0x3f30, lsl #16
   91470:	b9000041 	str	w1, [x2]
   91474:	17fffff0 	b	91434 <sd_int+0x94>

0000000000091478 <sd_cmd>:

/**
 * Send a command
 */
int sd_cmd(unsigned int code, unsigned int arg)
{
   91478:	a9bc7bfd 	stp	x29, x30, [sp, #-64]!
   9147c:	910003fd 	mov	x29, sp
   91480:	a9025bf5 	stp	x21, x22, [sp, #32]
	int r=0;
	sd_err=SD_OK;
   91484:	9000aa35 	adrp	x21, 15d5000 <allocated+0xfb940>
{
   91488:	2a0103f6 	mov	w22, w1
	sd_err=SD_OK;
   9148c:	f904c6bf 	str	xzr, [x21, #2440]
{
   91490:	a90153f3 	stp	x19, x20, [sp, #16]
   91494:	2a0003f3 	mov	w19, w0
	if(code&CMD_NEED_APP) {
   91498:	36f801a0 	tbz	w0, #31, 914cc <sd_cmd+0x54>
		r=sd_cmd(CMD_APP_CMD|(sd_rca?CMD_RSPNS_48:0),sd_rca);
   9149c:	9000aa34 	adrp	x20, 15d5000 <allocated+0xfb940>
   914a0:	52a6e042 	mov	w2, #0x37020000            	// #922877952
   914a4:	52a6e000 	mov	w0, #0x37000000            	// #922746880
		if(sd_rca && !r) { uart_puts("ERROR: failed to send SD APP command\n"); sd_err=SD_ERROR;return 0;}
		code &= ~CMD_NEED_APP;
   914a8:	12007a73 	and	w19, w19, #0x7fffffff
		r=sd_cmd(CMD_APP_CMD|(sd_rca?CMD_RSPNS_48:0),sd_rca);
   914ac:	f944ca81 	ldr	x1, [x20, #2448]
   914b0:	f100003f 	cmp	x1, #0x0
   914b4:	1a801040 	csel	w0, w2, w0, ne  // ne = any
   914b8:	97fffff0 	bl	91478 <sd_cmd>
		if(sd_rca && !r) { uart_puts("ERROR: failed to send SD APP command\n"); sd_err=SD_ERROR;return 0;}
   914bc:	f944ca81 	ldr	x1, [x20, #2448]
   914c0:	f100003f 	cmp	x1, #0x0
   914c4:	7a401800 	ccmp	w0, #0x0, #0x0, ne  // ne = any
   914c8:	54000ca0 	b.eq	9165c <sd_cmd+0x1e4>  // b.none
	}
	if(sd_status(SR_CMD_INHIBIT)) { uart_puts("ERROR: EMMC busy\n"); sd_err= SD_TIMEOUT;return 0;}
   914cc:	52800020 	mov	w0, #0x1                   	// #1
   914d0:	97ffff80 	bl	912d0 <sd_status>
   914d4:	35000780 	cbnz	w0, 915c4 <sd_cmd+0x14c>
	uart_puts("EMMC: Sending command ");uart_hex(code);uart_puts(" arg ");uart_hex(arg);uart_send('\n');
   914d8:	90000020 	adrp	x0, 95000 <sd_init+0x3470>
   914dc:	91362000 	add	x0, x0, #0xd88
   914e0:	a90363f7 	stp	x23, x24, [sp, #48]
   914e4:	97ffc2c1 	bl	81fe8 <uart_puts>
   914e8:	2a1303e0 	mov	w0, w19
   914ec:	97ffc2d7 	bl	82048 <uart_hex>
   914f0:	90000020 	adrp	x0, 95000 <sd_init+0x3470>
   914f4:	91368000 	add	x0, x0, #0xda0
   914f8:	97ffc2bc 	bl	81fe8 <uart_puts>
   914fc:	2a1603e0 	mov	w0, w22
   91500:	97ffc2d2 	bl	82048 <uart_hex>
   91504:	52800140 	mov	w0, #0xa                   	// #10
   91508:	97ffc2a0 	bl	81f88 <uart_send>
	*EMMC_INTERRUPT=*EMMC_INTERRUPT; *EMMC_ARG1=arg; *EMMC_CMDTM=code;
   9150c:	d2800600 	mov	x0, #0x30                  	// #48
   91510:	d2800102 	mov	x2, #0x8                   	// #8
   91514:	f2a7e600 	movk	x0, #0x3f30, lsl #16
   91518:	f2a7e602 	movk	x2, #0x3f30, lsl #16
   9151c:	d2800181 	mov	x1, #0xc                   	// #12
	if(code==CMD_SEND_OP_COND) wait_usec(1000); else 
	if(code==CMD_SEND_IF_COND || code==CMD_APP_CMD) wait_usec(100);
   91520:	52a6e004 	mov	w4, #0x37000000            	// #922746880
	*EMMC_INTERRUPT=*EMMC_INTERRUPT; *EMMC_ARG1=arg; *EMMC_CMDTM=code;
   91524:	b9400003 	ldr	w3, [x0]
   91528:	f2a7e601 	movk	x1, #0x3f30, lsl #16
   9152c:	b9000003 	str	w3, [x0]
	if(code==CMD_SEND_IF_COND || code==CMD_APP_CMD) wait_usec(100);
   91530:	6b04027f 	cmp	w19, w4
	*EMMC_INTERRUPT=*EMMC_INTERRUPT; *EMMC_ARG1=arg; *EMMC_CMDTM=code;
   91534:	b9000056 	str	w22, [x2]
	if(code==CMD_SEND_IF_COND || code==CMD_APP_CMD) wait_usec(100);
   91538:	1a9f17f7 	cset	w23, eq  // eq = none
	*EMMC_INTERRUPT=*EMMC_INTERRUPT; *EMMC_ARG1=arg; *EMMC_CMDTM=code;
   9153c:	b9000033 	str	w19, [x1]
	if(code==CMD_SEND_IF_COND || code==CMD_APP_CMD) wait_usec(100);
   91540:	52a10040 	mov	w0, #0x8020000             	// #134348800
   91544:	6b00027f 	cmp	w19, w0
   91548:	1a9f16f8 	csinc	w24, w23, wzr, ne  // ne = any
   9154c:	350005f8 	cbnz	w24, 91608 <sd_cmd+0x190>
	if((r=sd_int(INT_CMD_DONE))) {uart_puts("ERROR: failed to send EMMC command\n");sd_err=r;return 0;}
   91550:	52800020 	mov	w0, #0x1                   	// #1
   91554:	97ffff93 	bl	913a0 <sd_int>
   91558:	2a0003f4 	mov	w20, w0
   9155c:	35000620 	cbnz	w0, 91620 <sd_cmd+0x1a8>
	r=*EMMC_RESP0;
   91560:	d2800200 	mov	x0, #0x10                  	// #16
	if(code==CMD_GO_IDLE || code==CMD_APP_CMD) return 0; else
   91564:	7100027f 	cmp	w19, #0x0
	r=*EMMC_RESP0;
   91568:	f2a7e600 	movk	x0, #0x3f30, lsl #16
	if(code==CMD_GO_IDLE || code==CMD_APP_CMD) return 0; else
   9156c:	7a401ae0 	ccmp	w23, #0x0, #0x0, ne  // ne = any
	r=*EMMC_RESP0;
   91570:	b9400000 	ldr	w0, [x0]
	if(code==CMD_GO_IDLE || code==CMD_APP_CMD) return 0; else
   91574:	540003e1 	b.ne	915f0 <sd_cmd+0x178>  // b.any
	if(code==(CMD_APP_CMD|CMD_RSPNS_48)) return r&SR_APP_CMD; else
   91578:	52a6e041 	mov	w1, #0x37020000            	// #922877952
   9157c:	6b01027f 	cmp	w19, w1
   91580:	54000680 	b.eq	91650 <sd_cmd+0x1d8>  // b.none
	if(code==CMD_SEND_OP_COND) return r; else
	if(code==CMD_SEND_IF_COND) return r==arg? SD_OK : SD_ERROR; else
   91584:	350007b8 	cbnz	w24, 91678 <sd_cmd+0x200>
	if(code==CMD_ALL_SEND_CID) {r|=*EMMC_RESP3; r|=*EMMC_RESP2; r|=*EMMC_RESP1; return r; } else
   91588:	52a04021 	mov	w1, #0x2010000             	// #33619968
   9158c:	6b01027f 	cmp	w19, w1
   91590:	540007e0 	b.eq	9168c <sd_cmd+0x214>  // b.none
	if(code==CMD_SEND_REL_ADDR) {
   91594:	52a06041 	mov	w1, #0x3020000             	// #50462720
   91598:	6b01027f 	cmp	w19, w1
   9159c:	54000940 	b.eq	916c4 <sd_cmd+0x24c>  // b.none
		sd_err=(((r&0x1fff))|((r&0x2000)<<6)|((r&0x4000)<<8)|((r&0x8000)<<8))&CMD_ERRORS_MASK;
		return r&CMD_RCA_MASK;
	}
	return r&CMD_ERRORS_MASK;
   915a0:	52980094 	mov	w20, #0xc004                	// #49156
   915a4:	72bfff34 	movk	w20, #0xfff9, lsl #16
   915a8:	0a140014 	and	w20, w0, w20
	// make gcc happy
	return 0;
}
   915ac:	2a1403e0 	mov	w0, w20
   915b0:	a94153f3 	ldp	x19, x20, [sp, #16]
   915b4:	a9425bf5 	ldp	x21, x22, [sp, #32]
	return r&CMD_ERRORS_MASK;
   915b8:	a94363f7 	ldp	x23, x24, [sp, #48]
}
   915bc:	a8c47bfd 	ldp	x29, x30, [sp], #64
   915c0:	d65f03c0 	ret
	if(sd_status(SR_CMD_INHIBIT)) { uart_puts("ERROR: EMMC busy\n"); sd_err= SD_TIMEOUT;return 0;}
   915c4:	90000020 	adrp	x0, 95000 <sd_init+0x3470>
   915c8:	91352000 	add	x0, x0, #0xd48
   915cc:	97ffc287 	bl	81fe8 <uart_puts>
   915d0:	52800014 	mov	w20, #0x0                   	// #0
   915d4:	92800000 	mov	x0, #0xffffffffffffffff    	// #-1
   915d8:	f904c6a0 	str	x0, [x21, #2440]
}
   915dc:	2a1403e0 	mov	w0, w20
   915e0:	a94153f3 	ldp	x19, x20, [sp, #16]
   915e4:	a9425bf5 	ldp	x21, x22, [sp, #32]
   915e8:	a8c47bfd 	ldp	x29, x30, [sp], #64
   915ec:	d65f03c0 	ret
   915f0:	2a1403e0 	mov	w0, w20
   915f4:	a94153f3 	ldp	x19, x20, [sp, #16]
   915f8:	a9425bf5 	ldp	x21, x22, [sp, #32]
   915fc:	a94363f7 	ldp	x23, x24, [sp, #48]
   91600:	a8c47bfd 	ldp	x29, x30, [sp], #64
   91604:	d65f03c0 	ret
	if(code==CMD_SEND_IF_COND || code==CMD_APP_CMD) wait_usec(100);
   91608:	52800c80 	mov	w0, #0x64                  	// #100
   9160c:	97ffc5d9 	bl	82d70 <wait_usec>
	if((r=sd_int(INT_CMD_DONE))) {uart_puts("ERROR: failed to send EMMC command\n");sd_err=r;return 0;}
   91610:	52800020 	mov	w0, #0x1                   	// #1
   91614:	97ffff63 	bl	913a0 <sd_int>
   91618:	2a0003f4 	mov	w20, w0
   9161c:	34fffa20 	cbz	w0, 91560 <sd_cmd+0xe8>
   91620:	90000020 	adrp	x0, 95000 <sd_init+0x3470>
   91624:	91358000 	add	x0, x0, #0xd60
   91628:	97ffc270 	bl	81fe8 <uart_puts>
   9162c:	93407e80 	sxtw	x0, w20
   91630:	52800014 	mov	w20, #0x0                   	// #0
   91634:	f904c6a0 	str	x0, [x21, #2440]
}
   91638:	2a1403e0 	mov	w0, w20
   9163c:	a94153f3 	ldp	x19, x20, [sp, #16]
   91640:	a9425bf5 	ldp	x21, x22, [sp, #32]
	if((r=sd_int(INT_CMD_DONE))) {uart_puts("ERROR: failed to send EMMC command\n");sd_err=r;return 0;}
   91644:	a94363f7 	ldp	x23, x24, [sp, #48]
}
   91648:	a8c47bfd 	ldp	x29, x30, [sp], #64
   9164c:	d65f03c0 	ret
	if(code==(CMD_APP_CMD|CMD_RSPNS_48)) return r&SR_APP_CMD; else
   91650:	121b0014 	and	w20, w0, #0x20
   91654:	a94363f7 	ldp	x23, x24, [sp, #48]
   91658:	17ffffe1 	b	915dc <sd_cmd+0x164>
		if(sd_rca && !r) { uart_puts("ERROR: failed to send SD APP command\n"); sd_err=SD_ERROR;return 0;}
   9165c:	90000020 	adrp	x0, 95000 <sd_init+0x3470>
   91660:	91348000 	add	x0, x0, #0xd20
   91664:	97ffc261 	bl	81fe8 <uart_puts>
   91668:	52800014 	mov	w20, #0x0                   	// #0
   9166c:	92800020 	mov	x0, #0xfffffffffffffffe    	// #-2
   91670:	f904c6a0 	str	x0, [x21, #2440]
   91674:	17ffffda 	b	915dc <sd_cmd+0x164>
	if(code==CMD_SEND_IF_COND) return r==arg? SD_OK : SD_ERROR; else
   91678:	6b16001f 	cmp	w0, w22
   9167c:	12800034 	mov	w20, #0xfffffffe            	// #-2
   91680:	1a9403f4 	csel	w20, wzr, w20, eq  // eq = none
   91684:	a94363f7 	ldp	x23, x24, [sp, #48]
   91688:	17ffffd5 	b	915dc <sd_cmd+0x164>
	if(code==CMD_ALL_SEND_CID) {r|=*EMMC_RESP3; r|=*EMMC_RESP2; r|=*EMMC_RESP1; return r; } else
   9168c:	d2800382 	mov	x2, #0x1c                  	// #28
   91690:	d2800303 	mov	x3, #0x18                  	// #24
   91694:	d2800281 	mov	x1, #0x14                  	// #20
   91698:	f2a7e602 	movk	x2, #0x3f30, lsl #16
   9169c:	f2a7e603 	movk	x3, #0x3f30, lsl #16
   916a0:	f2a7e601 	movk	x1, #0x3f30, lsl #16
   916a4:	b9400042 	ldr	w2, [x2]
   916a8:	b9400074 	ldr	w20, [x3]
   916ac:	b9400021 	ldr	w1, [x1]
   916b0:	2a020000 	orr	w0, w0, w2
   916b4:	a94363f7 	ldp	x23, x24, [sp, #48]
   916b8:	2a010294 	orr	w20, w20, w1
   916bc:	2a140014 	orr	w20, w0, w20
   916c0:	17ffffc7 	b	915dc <sd_cmd+0x164>
		sd_err=(((r&0x1fff))|((r&0x2000)<<6)|((r&0x4000)<<8)|((r&0x8000)<<8))&CMD_ERRORS_MASK;
   916c4:	53185c01 	lsl	w1, w0, #8
   916c8:	531a6402 	lsl	w2, w0, #6
   916cc:	120a0024 	and	w4, w1, #0x400000
   916d0:	12090023 	and	w3, w1, #0x800000
   916d4:	120d0042 	and	w2, w2, #0x80000
   916d8:	121e0001 	and	w1, w0, #0x4
   916dc:	2a040042 	orr	w2, w2, w4
   916e0:	2a030021 	orr	w1, w1, w3
   916e4:	2a020021 	orr	w1, w1, w2
		return r&CMD_RCA_MASK;
   916e8:	12103c14 	and	w20, w0, #0xffff0000
		sd_err=(((r&0x1fff))|((r&0x2000)<<6)|((r&0x4000)<<8)|((r&0x8000)<<8))&CMD_ERRORS_MASK;
   916ec:	f904c6a1 	str	x1, [x21, #2440]
		return r&CMD_RCA_MASK;
   916f0:	a94363f7 	ldp	x23, x24, [sp, #48]
   916f4:	17ffffba 	b	915dc <sd_cmd+0x164>

00000000000916f8 <sd_readblock>:
/**
 * read a block from sd card and return the number of bytes read
 * returns 0 on error.
 */
int sd_readblock(unsigned int lba, unsigned char *buffer, unsigned int num)
{
   916f8:	a9ba7bfd 	stp	x29, x30, [sp, #-96]!
	int r,c=0,d;
	if(num<1) num=1;
   916fc:	7100005f 	cmp	w2, #0x0
{
   91700:	910003fd 	mov	x29, sp
   91704:	a90153f3 	stp	x19, x20, [sp, #16]
   91708:	aa0103f3 	mov	x19, x1
   9170c:	2a0003f4 	mov	w20, w0
	uart_puts("sd_readblock lba ");uart_hex(lba);uart_puts(" num ");uart_hex(num);uart_send('\n');
   91710:	90000020 	adrp	x0, 95000 <sd_init+0x3470>
   91714:	9136a000 	add	x0, x0, #0xda8
{
   91718:	a9025bf5 	stp	x21, x22, [sp, #32]
	if(num<1) num=1;
   9171c:	1a9f1455 	csinc	w21, w2, wzr, ne  // ne = any
{
   91720:	a9046bf9 	stp	x25, x26, [sp, #64]
	uart_puts("sd_readblock lba ");uart_hex(lba);uart_puts(" num ");uart_hex(num);uart_send('\n');
   91724:	97ffc231 	bl	81fe8 <uart_puts>
   91728:	2a1403e0 	mov	w0, w20
   9172c:	97ffc247 	bl	82048 <uart_hex>
   91730:	90000020 	adrp	x0, 95000 <sd_init+0x3470>
   91734:	91370000 	add	x0, x0, #0xdc0
   91738:	97ffc22c 	bl	81fe8 <uart_puts>
   9173c:	2a1503e0 	mov	w0, w21
   91740:	97ffc242 	bl	82048 <uart_hex>
   91744:	52800140 	mov	w0, #0xa                   	// #10
   91748:	97ffc210 	bl	81f88 <uart_send>
	if(sd_status(SR_DAT_INHIBIT)) {sd_err=SD_TIMEOUT; return 0;}
   9174c:	52800040 	mov	w0, #0x2                   	// #2
   91750:	97fffee0 	bl	912d0 <sd_status>
   91754:	350009a0 	cbnz	w0, 91888 <sd_readblock+0x190>
	unsigned int *buf=(unsigned int *)buffer;
	if(sd_scr[0] & SCR_SUPP_CCS) {
   91758:	9000aa36 	adrp	x22, 15d5000 <allocated+0xfb940>
   9175c:	2a0003f9 	mov	w25, w0
   91760:	a90363f7 	stp	x23, x24, [sp, #48]
   91764:	f944cec0 	ldr	x0, [x22, #2456]
   91768:	92400001 	and	x1, x0, #0x1
   9176c:	37000500 	tbnz	w0, #0, 9180c <sd_readblock+0x114>
		}
		*EMMC_BLKSIZECNT = (num << 16) | 512;
		sd_cmd(num == 1 ? CMD_READ_SINGLE : CMD_READ_MULTI,lba);
		if(sd_err) return 0;
	} else {
		*EMMC_BLKSIZECNT = (1 << 16) | 512;
   91770:	d2800080 	mov	x0, #0x4                   	// #4
   91774:	52804002 	mov	w2, #0x200                 	// #512
   91778:	f2a7e600 	movk	x0, #0x3f30, lsl #16
   9177c:	a90573fb 	stp	x27, x28, [sp, #80]
   91780:	72a00022 	movk	w2, #0x1, lsl #16
   91784:	9000aa37 	adrp	x23, 15d5000 <allocated+0xfb940>
   91788:	b9000002 	str	w2, [x0]
   9178c:	53175a94 	lsl	w20, w20, #9
   91790:	91080273 	add	x19, x19, #0x200
   91794:	4b130298 	sub	w24, w20, w19
	}
	while( c < num ) {
		if(!(sd_scr[0] & SCR_SUPP_CCS)) {
			sd_cmd(CMD_READ_SINGLE,(lba+c)*512);
   91798:	5280021a 	mov	w26, #0x10                  	// #16
			if(sd_err) return 0;
		}
		if((r=sd_int(INT_READ_RDY))){uart_puts("\rERROR: Timeout waiting for ready to read\n");sd_err=r;return 0;}
		for(d=0;d<128;d++) buf[d] = *EMMC_DATA;
   9179c:	d2800414 	mov	x20, #0x20                  	// #32
		sd_cmd(num == 1 ? CMD_READ_SINGLE : CMD_READ_MULTI,lba);
   917a0:	5280001b 	mov	w27, #0x0                   	// #0
			sd_cmd(CMD_READ_SINGLE,(lba+c)*512);
   917a4:	72a2245a 	movk	w26, #0x1122, lsl #16
		for(d=0;d<128;d++) buf[d] = *EMMC_DATA;
   917a8:	f2a7e614 	movk	x20, #0x3f30, lsl #16
   917ac:	d503201f 	nop
		if(!(sd_scr[0] & SCR_SUPP_CCS)) {
   917b0:	b50000c1 	cbnz	x1, 917c8 <sd_readblock+0xd0>
			sd_cmd(CMD_READ_SINGLE,(lba+c)*512);
   917b4:	0b130301 	add	w1, w24, w19
   917b8:	2a1a03e0 	mov	w0, w26
   917bc:	97ffff2f 	bl	91478 <sd_cmd>
			if(sd_err) return 0;
   917c0:	f944c6e0 	ldr	x0, [x23, #2440]
   917c4:	b5000520 	cbnz	x0, 91868 <sd_readblock+0x170>
		if((r=sd_int(INT_READ_RDY))){uart_puts("\rERROR: Timeout waiting for ready to read\n");sd_err=r;return 0;}
   917c8:	52800400 	mov	w0, #0x20                  	// #32
   917cc:	97fffef5 	bl	913a0 <sd_int>
   917d0:	93407c1c 	sxtw	x28, w0
   917d4:	3500043c 	cbnz	w28, 91858 <sd_readblock+0x160>
   917d8:	d1080260 	sub	x0, x19, #0x200
   917dc:	d503201f 	nop
		for(d=0;d<128;d++) buf[d] = *EMMC_DATA;
   917e0:	b9400281 	ldr	w1, [x20]
   917e4:	b8004401 	str	w1, [x0], #4
   917e8:	eb00027f 	cmp	x19, x0
   917ec:	54ffffa1 	b.ne	917e0 <sd_readblock+0xe8>  // b.any
		c++; buf+=128;
   917f0:	1100077b 	add	w27, w27, #0x1
   917f4:	91080273 	add	x19, x19, #0x200
	while( c < num ) {
   917f8:	6b15037f 	cmp	w27, w21
   917fc:	540005a0 	b.eq	918b0 <sd_readblock+0x1b8>  // b.none
   91800:	f944cec0 	ldr	x0, [x22, #2456]
   91804:	92400001 	and	x1, x0, #0x1
   91808:	17ffffea 	b	917b0 <sd_readblock+0xb8>
		if(num > 1 && (sd_scr[0] & SCR_SUPP_SET_BLKCNT)) {
   9180c:	710006bf 	cmp	w21, #0x1
   91810:	54000789 	b.ls	91900 <sd_readblock+0x208>  // b.plast
   91814:	9000aa37 	adrp	x23, 15d5000 <allocated+0xfb940>
   91818:	37c809a0 	tbnz	w0, #25, 9194c <sd_readblock+0x254>
		*EMMC_BLKSIZECNT = (num << 16) | 512;
   9181c:	d2800082 	mov	x2, #0x4                   	// #4
   91820:	53103ea1 	lsl	w1, w21, #16
   91824:	f2a7e602 	movk	x2, #0x3f30, lsl #16
   91828:	32170021 	orr	w1, w1, #0x200
		sd_cmd(num == 1 ? CMD_READ_SINGLE : CMD_READ_MULTI,lba);
   9182c:	52800640 	mov	w0, #0x32                  	// #50
		*EMMC_BLKSIZECNT = (num << 16) | 512;
   91830:	b9000041 	str	w1, [x2]
		sd_cmd(num == 1 ? CMD_READ_SINGLE : CMD_READ_MULTI,lba);
   91834:	72a24440 	movk	w0, #0x1222, lsl #16
   91838:	2a1403e1 	mov	w1, w20
   9183c:	97ffff0f 	bl	91478 <sd_cmd>
		if(sd_err) return 0;
   91840:	f944c6e0 	ldr	x0, [x23, #2440]
   91844:	b5000760 	cbnz	x0, 91930 <sd_readblock+0x238>
   91848:	f944cec0 	ldr	x0, [x22, #2456]
   9184c:	a90573fb 	stp	x27, x28, [sp, #80]
   91850:	92400001 	and	x1, x0, #0x1
   91854:	17ffffce 	b	9178c <sd_readblock+0x94>
		if((r=sd_int(INT_READ_RDY))){uart_puts("\rERROR: Timeout waiting for ready to read\n");sd_err=r;return 0;}
   91858:	90000020 	adrp	x0, 95000 <sd_init+0x3470>
   9185c:	91372000 	add	x0, x0, #0xdc8
   91860:	97ffc1e2 	bl	81fe8 <uart_puts>
   91864:	f904c6fc 	str	x28, [x23, #2440]
	}
	if( num > 1 && !(sd_scr[0] & SCR_SUPP_SET_BLKCNT) && (sd_scr[0] & SCR_SUPP_CCS)) sd_cmd(CMD_STOP_TRANS,0);
	return sd_err!=SD_OK || c!=num? 0 : num*512;
}
   91868:	2a1903e0 	mov	w0, w25
   9186c:	a94153f3 	ldp	x19, x20, [sp, #16]
   91870:	a9425bf5 	ldp	x21, x22, [sp, #32]
		if((r=sd_int(INT_READ_RDY))){uart_puts("\rERROR: Timeout waiting for ready to read\n");sd_err=r;return 0;}
   91874:	a94363f7 	ldp	x23, x24, [sp, #48]
}
   91878:	a9446bf9 	ldp	x25, x26, [sp, #64]
		if((r=sd_int(INT_READ_RDY))){uart_puts("\rERROR: Timeout waiting for ready to read\n");sd_err=r;return 0;}
   9187c:	a94573fb 	ldp	x27, x28, [sp, #80]
}
   91880:	a8c67bfd 	ldp	x29, x30, [sp], #96
   91884:	d65f03c0 	ret
	if(sd_status(SR_DAT_INHIBIT)) {sd_err=SD_TIMEOUT; return 0;}
   91888:	9000aa20 	adrp	x0, 15d5000 <allocated+0xfb940>
   9188c:	52800019 	mov	w25, #0x0                   	// #0
   91890:	92800001 	mov	x1, #0xffffffffffffffff    	// #-1
   91894:	f904c401 	str	x1, [x0, #2440]
}
   91898:	2a1903e0 	mov	w0, w25
   9189c:	a94153f3 	ldp	x19, x20, [sp, #16]
   918a0:	a9425bf5 	ldp	x21, x22, [sp, #32]
   918a4:	a9446bf9 	ldp	x25, x26, [sp, #64]
   918a8:	a8c67bfd 	ldp	x29, x30, [sp], #96
   918ac:	d65f03c0 	ret
	if( num > 1 && !(sd_scr[0] & SCR_SUPP_SET_BLKCNT) && (sd_scr[0] & SCR_SUPP_CCS)) sd_cmd(CMD_STOP_TRANS,0);
   918b0:	7100077f 	cmp	w27, #0x1
   918b4:	540000c9 	b.ls	918cc <sd_readblock+0x1d4>  // b.plast
   918b8:	f944cec0 	ldr	x0, [x22, #2456]
   918bc:	92406400 	and	x0, x0, #0x3ffffff
   918c0:	92679c00 	and	x0, x0, #0xfffffffffe000001
   918c4:	f100041f 	cmp	x0, #0x1
   918c8:	54000500 	b.eq	91968 <sd_readblock+0x270>  // b.none
	return sd_err!=SD_OK || c!=num? 0 : num*512;
   918cc:	f944c6e0 	ldr	x0, [x23, #2440]
   918d0:	53175ab9 	lsl	w25, w21, #9
}
   918d4:	a94153f3 	ldp	x19, x20, [sp, #16]
	return sd_err!=SD_OK || c!=num? 0 : num*512;
   918d8:	f100001f 	cmp	x0, #0x0
   918dc:	7a5b02a0 	ccmp	w21, w27, #0x0, eq  // eq = none
   918e0:	1a9f0339 	csel	w25, w25, wzr, eq  // eq = none
}
   918e4:	2a1903e0 	mov	w0, w25
   918e8:	a9425bf5 	ldp	x21, x22, [sp, #32]
   918ec:	a94363f7 	ldp	x23, x24, [sp, #48]
   918f0:	a9446bf9 	ldp	x25, x26, [sp, #64]
   918f4:	a94573fb 	ldp	x27, x28, [sp, #80]
   918f8:	a8c67bfd 	ldp	x29, x30, [sp], #96
   918fc:	d65f03c0 	ret
		*EMMC_BLKSIZECNT = (num << 16) | 512;
   91900:	d2800081 	mov	x1, #0x4                   	// #4
   91904:	52804002 	mov	w2, #0x200                 	// #512
   91908:	f2a7e601 	movk	x1, #0x3f30, lsl #16
   9190c:	72a00022 	movk	w2, #0x1, lsl #16
		sd_cmd(num == 1 ? CMD_READ_SINGLE : CMD_READ_MULTI,lba);
   91910:	52800200 	mov	w0, #0x10                  	// #16
   91914:	9000aa37 	adrp	x23, 15d5000 <allocated+0xfb940>
		*EMMC_BLKSIZECNT = (num << 16) | 512;
   91918:	b9000022 	str	w2, [x1]
		sd_cmd(num == 1 ? CMD_READ_SINGLE : CMD_READ_MULTI,lba);
   9191c:	72a22440 	movk	w0, #0x1122, lsl #16
   91920:	2a1403e1 	mov	w1, w20
   91924:	97fffed5 	bl	91478 <sd_cmd>
		if(sd_err) return 0;
   91928:	f944c6e0 	ldr	x0, [x23, #2440]
   9192c:	b4fff8e0 	cbz	x0, 91848 <sd_readblock+0x150>
   91930:	a94363f7 	ldp	x23, x24, [sp, #48]
}
   91934:	2a1903e0 	mov	w0, w25
   91938:	a94153f3 	ldp	x19, x20, [sp, #16]
   9193c:	a9425bf5 	ldp	x21, x22, [sp, #32]
   91940:	a9446bf9 	ldp	x25, x26, [sp, #64]
   91944:	a8c67bfd 	ldp	x29, x30, [sp], #96
   91948:	d65f03c0 	ret
			sd_cmd(CMD_SET_BLOCKCNT,num);
   9194c:	2a1503e1 	mov	w1, w21
   91950:	52a2e040 	mov	w0, #0x17020000            	// #386007040
   91954:	97fffec9 	bl	91478 <sd_cmd>
			if(sd_err) return 0;
   91958:	f944c6e0 	ldr	x0, [x23, #2440]
   9195c:	b4fff600 	cbz	x0, 9181c <sd_readblock+0x124>
   91960:	a94363f7 	ldp	x23, x24, [sp, #48]
   91964:	17fffff4 	b	91934 <sd_readblock+0x23c>
	if( num > 1 && !(sd_scr[0] & SCR_SUPP_SET_BLKCNT) && (sd_scr[0] & SCR_SUPP_CCS)) sd_cmd(CMD_STOP_TRANS,0);
   91968:	52800001 	mov	w1, #0x0                   	// #0
   9196c:	52a18060 	mov	w0, #0xc030000             	// #201523200
   91970:	97fffec2 	bl	91478 <sd_cmd>
   91974:	17ffffd6 	b	918cc <sd_readblock+0x1d4>

0000000000091978 <sd_clk>:

/**
 * set SD clock to frequency in Hz
 */
int sd_clk(unsigned int f)
{
   91978:	a9bc7bfd 	stp	x29, x30, [sp, #-64]!
   9197c:	910003fd 	mov	x29, sp
   91980:	a90153f3 	stp	x19, x20, [sp, #16]
	unsigned int d,c=41666666/f,x,s=32,h=0;
	int cnt = 100000;
	while((*EMMC_STATUS & (SR_CMD_INHIBIT|SR_DAT_INHIBIT)) && cnt--) wait_usec(1);
   91984:	d2800494 	mov	x20, #0x24                  	// #36
   91988:	f2a7e614 	movk	x20, #0x3f30, lsl #16
{
   9198c:	a9025bf5 	stp	x21, x22, [sp, #32]
	unsigned int d,c=41666666/f,x,s=32,h=0;
   91990:	52990d55 	mov	w21, #0xc86a                	// #51306
	while((*EMMC_STATUS & (SR_CMD_INHIBIT|SR_DAT_INHIBIT)) && cnt--) wait_usec(1);
   91994:	b9400281 	ldr	w1, [x20]
	unsigned int d,c=41666666/f,x,s=32,h=0;
   91998:	72a04f75 	movk	w21, #0x27b, lsl #16
   9199c:	1ac00ab5 	udiv	w21, w21, w0
	while((*EMMC_STATUS & (SR_CMD_INHIBIT|SR_DAT_INHIBIT)) && cnt--) wait_usec(1);
   919a0:	f240043f 	tst	x1, #0x3
   919a4:	540001a0 	b.eq	919d8 <sd_clk+0x60>  // b.none
   919a8:	5290d3f3 	mov	w19, #0x869f                	// #34463
   919ac:	72a00033 	movk	w19, #0x1, lsl #16
   919b0:	14000004 	b	919c0 <sd_clk+0x48>
   919b4:	51000673 	sub	w19, w19, #0x1
   919b8:	3100067f 	cmn	w19, #0x1
   919bc:	54000d40 	b.eq	91b64 <sd_clk+0x1ec>  // b.none
   919c0:	52800020 	mov	w0, #0x1                   	// #1
   919c4:	97ffc4eb 	bl	82d70 <wait_usec>
   919c8:	b9400280 	ldr	w0, [x20]
   919cc:	f240041f 	tst	x0, #0x3
   919d0:	54ffff21 	b.ne	919b4 <sd_clk+0x3c>  // b.any
	if(cnt<=0) {
   919d4:	34000c93 	cbz	w19, 91b64 <sd_clk+0x1ec>
		uart_puts("ERROR: timeout waiting for inhibit flag\n");
		return SD_ERROR;
	}

	*EMMC_CONTROL1 &= ~C1_CLK_EN; wait_usec(10);
   919d8:	d2800582 	mov	x2, #0x2c                  	// #44
   919dc:	a90363f7 	stp	x23, x24, [sp, #48]
   919e0:	f2a7e602 	movk	x2, #0x3f30, lsl #16
   919e4:	52800140 	mov	w0, #0xa                   	// #10
   919e8:	b9400041 	ldr	w1, [x2]
   919ec:	121d7821 	and	w1, w1, #0xfffffffb
   919f0:	b9000041 	str	w1, [x2]
   919f4:	97ffc4df 	bl	82d70 <wait_usec>
	x=c-1; if(!x) s=0; else {
   919f8:	710006b3 	subs	w19, w21, #0x1
   919fc:	54000a40 	b.eq	91b44 <sd_clk+0x1cc>  // b.none
		if(!(x & 0xffff0000u)) { x <<= 16; s -= 16; }
   91a00:	72103e7f 	tst	w19, #0xffff0000
	unsigned int d,c=41666666/f,x,s=32,h=0;
   91a04:	52800400 	mov	w0, #0x20                  	// #32
		if(!(x & 0xffff0000u)) { x <<= 16; s -= 16; }
   91a08:	54000061 	b.ne	91a14 <sd_clk+0x9c>  // b.any
   91a0c:	53103e73 	lsl	w19, w19, #16
   91a10:	52800200 	mov	w0, #0x10                  	// #16
		if(!(x & 0xff000000u)) { x <<= 8;  s -= 8; }
   91a14:	72081e7f 	tst	w19, #0xff000000
   91a18:	54000061 	b.ne	91a24 <sd_clk+0xac>  // b.any
   91a1c:	53185e73 	lsl	w19, w19, #8
   91a20:	51002000 	sub	w0, w0, #0x8
		if(!(x & 0xf0000000u)) { x <<= 4;  s -= 4; }
   91a24:	72040e7f 	tst	w19, #0xf0000000
   91a28:	54000061 	b.ne	91a34 <sd_clk+0xbc>  // b.any
   91a2c:	531c6e73 	lsl	w19, w19, #4
   91a30:	51001000 	sub	w0, w0, #0x4
		if(!(x & 0xc0000000u)) { x <<= 2;  s -= 2; }
   91a34:	7202067f 	tst	w19, #0xc0000000
   91a38:	54000061 	b.ne	91a44 <sd_clk+0xcc>  // b.any
   91a3c:	531e7673 	lsl	w19, w19, #2
   91a40:	51000800 	sub	w0, w0, #0x2
		if(!(x & 0x80000000u)) { x <<= 1;  s -= 1; }
		if(s>0) s--;
		if(s>7) s=7;
	}
	if(sd_hv>HOST_SPEC_V2) d=c; else d=(1<<s);
   91a44:	9000aa37 	adrp	x23, 15d5000 <allocated+0xfb940>
   91a48:	0b537c13 	add	w19, w0, w19, lsr #31
   91a4c:	51000a73 	sub	w19, w19, #0x2
		if(s>7) s=7;
   91a50:	528000e0 	mov	w0, #0x7                   	// #7
	if(sd_hv>HOST_SPEC_V2) d=c; else d=(1<<s);
   91a54:	f944d6e1 	ldr	x1, [x23, #2472]
   91a58:	6b00027f 	cmp	w19, w0
   91a5c:	1a809273 	csel	w19, w19, w0, ls  // ls = plast
   91a60:	52800020 	mov	w0, #0x1                   	// #1
   91a64:	f100083f 	cmp	x1, #0x2
   91a68:	1ad32000 	lsl	w0, w0, w19
   91a6c:	1a953015 	csel	w21, w0, w21, cc  // cc = lo, ul, last
	if(d<=2) {d=2;s=0;}
   91a70:	71000abf 	cmp	w21, #0x2
   91a74:	54000709 	b.ls	91b54 <sd_clk+0x1dc>  // b.plast
   91a78:	53181eb8 	ubfiz	w24, w21, #8, #8
	uart_puts("sd_clk divisor ");uart_hex(d);uart_puts(", shift ");uart_hex(s);uart_send('\n');
   91a7c:	90000020 	adrp	x0, 95000 <sd_init+0x3470>
   91a80:	9138a000 	add	x0, x0, #0xe28
   91a84:	97ffc159 	bl	81fe8 <uart_puts>
	if(sd_hv>HOST_SPEC_V2) h=(d&0x300)>>2;
	d=(((d&0x0ff)<<8)|h);
	*EMMC_CONTROL1=(*EMMC_CONTROL1&0xffff003f)|d; wait_usec(10);
   91a88:	d2800596 	mov	x22, #0x2c                  	// #44
	uart_puts("sd_clk divisor ");uart_hex(d);uart_puts(", shift ");uart_hex(s);uart_send('\n');
   91a8c:	2a1503e0 	mov	w0, w21
   91a90:	97ffc16e 	bl	82048 <uart_hex>
   91a94:	90000020 	adrp	x0, 95000 <sd_init+0x3470>
   91a98:	9138e000 	add	x0, x0, #0xe38
   91a9c:	97ffc153 	bl	81fe8 <uart_puts>
	*EMMC_CONTROL1=(*EMMC_CONTROL1&0xffff003f)|d; wait_usec(10);
   91aa0:	f2a7e616 	movk	x22, #0x3f30, lsl #16
	uart_puts("sd_clk divisor ");uart_hex(d);uart_puts(", shift ");uart_hex(s);uart_send('\n');
   91aa4:	2a1303e0 	mov	w0, w19
   91aa8:	97ffc168 	bl	82048 <uart_hex>
   91aac:	52800140 	mov	w0, #0xa                   	// #10
   91ab0:	97ffc136 	bl	81f88 <uart_send>
	if(sd_hv>HOST_SPEC_V2) h=(d&0x300)>>2;
   91ab4:	f944d6e0 	ldr	x0, [x23, #2472]
   91ab8:	53027ea1 	lsr	w1, w21, #2
	*EMMC_CONTROL1=(*EMMC_CONTROL1&0xffff003f)|d; wait_usec(10);
   91abc:	b94002c2 	ldr	w2, [x22]
	if(sd_hv>HOST_SPEC_V2) h=(d&0x300)>>2;
   91ac0:	121a0421 	and	w1, w1, #0xc0
   91ac4:	f100041f 	cmp	x0, #0x1
	*EMMC_CONTROL1=(*EMMC_CONTROL1&0xffff003f)|d; wait_usec(10);
   91ac8:	52800140 	mov	w0, #0xa                   	// #10
   91acc:	12105442 	and	w2, w2, #0xffff003f
	if(sd_hv>HOST_SPEC_V2) h=(d&0x300)>>2;
   91ad0:	1a9f8021 	csel	w1, w1, wzr, hi  // hi = pmore
	*EMMC_CONTROL1=(*EMMC_CONTROL1&0xffff003f)|d; wait_usec(10);
   91ad4:	2a180042 	orr	w2, w2, w24
	*EMMC_CONTROL1 |= C1_CLK_EN; wait_usec(10);
	cnt=10000; while(!(*EMMC_CONTROL1 & C1_CLK_STABLE) && cnt--) wait_usec(10);
   91ad8:	aa1603f4 	mov	x20, x22
	*EMMC_CONTROL1=(*EMMC_CONTROL1&0xffff003f)|d; wait_usec(10);
   91adc:	2a010041 	orr	w1, w2, w1
   91ae0:	b90002c1 	str	w1, [x22]
	cnt=10000; while(!(*EMMC_CONTROL1 & C1_CLK_STABLE) && cnt--) wait_usec(10);
   91ae4:	5284e1f3 	mov	w19, #0x270f                	// #9999
	*EMMC_CONTROL1=(*EMMC_CONTROL1&0xffff003f)|d; wait_usec(10);
   91ae8:	97ffc4a2 	bl	82d70 <wait_usec>
	*EMMC_CONTROL1 |= C1_CLK_EN; wait_usec(10);
   91aec:	b94002c1 	ldr	w1, [x22]
   91af0:	52800140 	mov	w0, #0xa                   	// #10
   91af4:	321e0021 	orr	w1, w1, #0x4
   91af8:	b90002c1 	str	w1, [x22]
   91afc:	97ffc49d 	bl	82d70 <wait_usec>
	cnt=10000; while(!(*EMMC_CONTROL1 & C1_CLK_STABLE) && cnt--) wait_usec(10);
   91b00:	b94002c0 	ldr	w0, [x22]
   91b04:	360800a0 	tbz	w0, #1, 91b18 <sd_clk+0x1a0>
   91b08:	14000009 	b	91b2c <sd_clk+0x1b4>
   91b0c:	51000673 	sub	w19, w19, #0x1
   91b10:	3100067f 	cmn	w19, #0x1
   91b14:	54000320 	b.eq	91b78 <sd_clk+0x200>  // b.none
   91b18:	52800140 	mov	w0, #0xa                   	// #10
   91b1c:	97ffc495 	bl	82d70 <wait_usec>
   91b20:	b9400280 	ldr	w0, [x20]
   91b24:	360fff40 	tbz	w0, #1, 91b0c <sd_clk+0x194>
	if(cnt<=0) {
   91b28:	34000293 	cbz	w19, 91b78 <sd_clk+0x200>
   91b2c:	a94363f7 	ldp	x23, x24, [sp, #48]
		uart_puts("ERROR: failed to get stable clock\n");
		return SD_ERROR;
	}
	return SD_OK;
   91b30:	52800000 	mov	w0, #0x0                   	// #0
}
   91b34:	a94153f3 	ldp	x19, x20, [sp, #16]
   91b38:	a9425bf5 	ldp	x21, x22, [sp, #32]
   91b3c:	a8c47bfd 	ldp	x29, x30, [sp], #64
   91b40:	d65f03c0 	ret
   91b44:	52804018 	mov	w24, #0x200                 	// #512
	if(d<=2) {d=2;s=0;}
   91b48:	52800055 	mov	w21, #0x2                   	// #2
   91b4c:	9000aa37 	adrp	x23, 15d5000 <allocated+0xfb940>
   91b50:	17ffffcb 	b	91a7c <sd_clk+0x104>
   91b54:	52804018 	mov	w24, #0x200                 	// #512
   91b58:	52800013 	mov	w19, #0x0                   	// #0
   91b5c:	52800055 	mov	w21, #0x2                   	// #2
   91b60:	17ffffc7 	b	91a7c <sd_clk+0x104>
		uart_puts("ERROR: timeout waiting for inhibit flag\n");
   91b64:	90000020 	adrp	x0, 95000 <sd_init+0x3470>
   91b68:	9137e000 	add	x0, x0, #0xdf8
   91b6c:	97ffc11f 	bl	81fe8 <uart_puts>
		return SD_ERROR;
   91b70:	12800020 	mov	w0, #0xfffffffe            	// #-2
   91b74:	17fffff0 	b	91b34 <sd_clk+0x1bc>
		uart_puts("ERROR: failed to get stable clock\n");
   91b78:	90000020 	adrp	x0, 95000 <sd_init+0x3470>
   91b7c:	91392000 	add	x0, x0, #0xe48
   91b80:	97ffc11a 	bl	81fe8 <uart_puts>
		return SD_ERROR;
   91b84:	12800020 	mov	w0, #0xfffffffe            	// #-2
   91b88:	a94363f7 	ldp	x23, x24, [sp, #48]
   91b8c:	17ffffea 	b	91b34 <sd_clk+0x1bc>

0000000000091b90 <sd_init>:

/**
 * initialize EMMC to read SDHC card
 */
int sd_init()
{
   91b90:	a9b97bfd 	stp	x29, x30, [sp, #-112]!
	long r,cnt,ccs=0;
	// GPIO_CD
	r=*GPFSEL4; r&=~(7<<(7*3)); *GPFSEL4=r;
	*GPPUD=2; wait_cycles(150); *GPPUDCLK1=(1<<15); wait_cycles(150); *GPPUD=0; *GPPUDCLK1=0;
   91b94:	528012c0 	mov	w0, #0x96                  	// #150
{
   91b98:	910003fd 	mov	x29, sp
   91b9c:	a9025bf5 	stp	x21, x22, [sp, #32]
	r=*GPFSEL4; r&=~(7<<(7*3)); *GPFSEL4=r;
   91ba0:	d2800216 	mov	x22, #0x10                  	// #16
   91ba4:	f2a7e416 	movk	x22, #0x3f20, lsl #16
	*GPPUD=2; wait_cycles(150); *GPPUDCLK1=(1<<15); wait_cycles(150); *GPPUD=0; *GPPUDCLK1=0;
   91ba8:	d2801295 	mov	x21, #0x94                  	// #148
{
   91bac:	a90153f3 	stp	x19, x20, [sp, #16]
	r=*GPFSEL4; r&=~(7<<(7*3)); *GPFSEL4=r;
   91bb0:	b94002c1 	ldr	w1, [x22]
	*GPPUD=2; wait_cycles(150); *GPPUDCLK1=(1<<15); wait_cycles(150); *GPPUD=0; *GPPUDCLK1=0;
   91bb4:	f2a7e415 	movk	x21, #0x3f20, lsl #16
{
   91bb8:	a90363f7 	stp	x23, x24, [sp, #48]
	r=*GPFSEL4; r&=~(7<<(7*3)); *GPFSEL4=r;
   91bbc:	92407c21 	and	x1, x1, #0xffffffff
   91bc0:	9268f021 	and	x1, x1, #0xffffffffff1fffff
   91bc4:	b90002c1 	str	w1, [x22]
	*GPPUD=2; wait_cycles(150); *GPPUDCLK1=(1<<15); wait_cycles(150); *GPPUD=0; *GPPUDCLK1=0;
   91bc8:	52800057 	mov	w23, #0x2                   	// #2
   91bcc:	d2801394 	mov	x20, #0x9c                  	// #156
   91bd0:	b90002b7 	str	w23, [x21]
   91bd4:	f2a7e414 	movk	x20, #0x3f20, lsl #16
	
	sd_hv = (*EMMC_SLOTISR_VER & HOST_SPEC_NUM) >> HOST_SPEC_NUM_SHIFT;
	uart_puts("EMMC: GPIO set up\n");
	// Reset the card.
	*EMMC_CONTROL0 = 0; *EMMC_CONTROL1 |= C1_SRST_HC;
	cnt=10000; do{wait_usec(10);} while( (*EMMC_CONTROL1 & C1_SRST_HC) && cnt-- );
   91bd8:	d284e213 	mov	x19, #0x2710                	// #10000
	*GPPUD=2; wait_cycles(150); *GPPUDCLK1=(1<<15); wait_cycles(150); *GPPUD=0; *GPPUDCLK1=0;
   91bdc:	97ffc45d 	bl	82d50 <wait_cycles>
   91be0:	52900000 	mov	w0, #0x8000                	// #32768
   91be4:	b9000280 	str	w0, [x20]
   91be8:	528012c0 	mov	w0, #0x96                  	// #150
   91bec:	97ffc459 	bl	82d50 <wait_cycles>
   91bf0:	b90002bf 	str	wzr, [x21]
	r=*GPHEN1; r|=1<<15; *GPHEN1=r;
   91bf4:	d2800d02 	mov	x2, #0x68                  	// #104
	*GPPUD=2; wait_cycles(150); *GPPUDCLK1=(1<<15); wait_cycles(150); *GPPUD=0; *GPPUDCLK1=0;
   91bf8:	b900029f 	str	wzr, [x20]
	r=*GPHEN1; r|=1<<15; *GPHEN1=r;
   91bfc:	f2a7e402 	movk	x2, #0x3f20, lsl #16
	*GPPUD=2; wait_cycles(150); *GPPUDCLK1=(1<<16)|(1<<17); wait_cycles(150); *GPPUD=0; *GPPUDCLK1=0;
   91c00:	528012c0 	mov	w0, #0x96                  	// #150
	r=*GPHEN1; r|=1<<15; *GPHEN1=r;
   91c04:	b9400041 	ldr	w1, [x2]
   91c08:	32110021 	orr	w1, w1, #0x8000
   91c0c:	b9000041 	str	w1, [x2]
	r=*GPFSEL4; r|=(7<<(8*3))|(7<<(9*3)); *GPFSEL4=r;
   91c10:	b94002c1 	ldr	w1, [x22]
   91c14:	32081421 	orr	w1, w1, #0x3f000000
   91c18:	b90002c1 	str	w1, [x22]
	*GPPUD=2; wait_cycles(150); *GPPUDCLK1=(1<<16)|(1<<17); wait_cycles(150); *GPPUD=0; *GPPUDCLK1=0;
   91c1c:	b90002b7 	str	w23, [x21]
   91c20:	97ffc44c 	bl	82d50 <wait_cycles>
   91c24:	52a00060 	mov	w0, #0x30000               	// #196608
   91c28:	b9000280 	str	w0, [x20]
   91c2c:	528012c0 	mov	w0, #0x96                  	// #150
   91c30:	97ffc448 	bl	82d50 <wait_cycles>
   91c34:	b90002bf 	str	wzr, [x21]
	r=*GPFSEL5; r|=(7<<(0*3)) | (7<<(1*3)) | (7<<(2*3)) | (7<<(3*3)); *GPFSEL5=r;
   91c38:	d2800282 	mov	x2, #0x14                  	// #20
	*GPPUD=2; wait_cycles(150); *GPPUDCLK1=(1<<16)|(1<<17); wait_cycles(150); *GPPUD=0; *GPPUDCLK1=0;
   91c3c:	b900029f 	str	wzr, [x20]
	r=*GPFSEL5; r|=(7<<(0*3)) | (7<<(1*3)) | (7<<(2*3)) | (7<<(3*3)); *GPFSEL5=r;
   91c40:	f2a7e402 	movk	x2, #0x3f20, lsl #16
	*GPPUD=2; wait_cycles(150);
   91c44:	528012c0 	mov	w0, #0x96                  	// #150
	r=*GPFSEL5; r|=(7<<(0*3)) | (7<<(1*3)) | (7<<(2*3)) | (7<<(3*3)); *GPFSEL5=r;
   91c48:	b9400041 	ldr	w1, [x2]
   91c4c:	32002c21 	orr	w1, w1, #0xfff
   91c50:	b9000041 	str	w1, [x2]
	*GPPUD=2; wait_cycles(150);
   91c54:	b90002b7 	str	w23, [x21]
   91c58:	97ffc43e 	bl	82d50 <wait_cycles>
	*GPPUDCLK1=(1<<18) | (1<<19) | (1<<20) | (1<<21);
   91c5c:	52a00780 	mov	w0, #0x3c0000              	// #3932160
   91c60:	b9000280 	str	w0, [x20]
	wait_cycles(150); *GPPUD=0; *GPPUDCLK1=0;
   91c64:	528012c0 	mov	w0, #0x96                  	// #150
   91c68:	97ffc43a 	bl	82d50 <wait_cycles>
   91c6c:	b90002bf 	str	wzr, [x21]
	sd_hv = (*EMMC_SLOTISR_VER & HOST_SPEC_NUM) >> HOST_SPEC_NUM_SHIFT;
   91c70:	d2801f81 	mov	x1, #0xfc                  	// #252
	wait_cycles(150); *GPPUD=0; *GPPUDCLK1=0;
   91c74:	b900029f 	str	wzr, [x20]
	sd_hv = (*EMMC_SLOTISR_VER & HOST_SPEC_NUM) >> HOST_SPEC_NUM_SHIFT;
   91c78:	f2a7e601 	movk	x1, #0x3f30, lsl #16
   91c7c:	9000aa22 	adrp	x2, 15d5000 <allocated+0xfb940>
	uart_puts("EMMC: GPIO set up\n");
   91c80:	90000020 	adrp	x0, 95000 <sd_init+0x3470>
   91c84:	9139c000 	add	x0, x0, #0xe70
	sd_hv = (*EMMC_SLOTISR_VER & HOST_SPEC_NUM) >> HOST_SPEC_NUM_SHIFT;
   91c88:	b9400021 	ldr	w1, [x1]
   91c8c:	d3505c21 	ubfx	x1, x1, #16, #8
   91c90:	f904d441 	str	x1, [x2, #2472]
	uart_puts("EMMC: GPIO set up\n");
   91c94:	97ffc0d5 	bl	81fe8 <uart_puts>
	*EMMC_CONTROL0 = 0; *EMMC_CONTROL1 |= C1_SRST_HC;
   91c98:	d2800501 	mov	x1, #0x28                  	// #40
   91c9c:	d2800580 	mov	x0, #0x2c                  	// #44
   91ca0:	f2a7e601 	movk	x1, #0x3f30, lsl #16
   91ca4:	f2a7e600 	movk	x0, #0x3f30, lsl #16
	cnt=10000; do{wait_usec(10);} while( (*EMMC_CONTROL1 & C1_SRST_HC) && cnt-- );
   91ca8:	aa0003f4 	mov	x20, x0
	*EMMC_CONTROL0 = 0; *EMMC_CONTROL1 |= C1_SRST_HC;
   91cac:	b900003f 	str	wzr, [x1]
   91cb0:	b9400001 	ldr	w1, [x0]
   91cb4:	32080021 	orr	w1, w1, #0x1000000
   91cb8:	b9000001 	str	w1, [x0]
	cnt=10000; do{wait_usec(10);} while( (*EMMC_CONTROL1 & C1_SRST_HC) && cnt-- );
   91cbc:	14000004 	b	91ccc <sd_init+0x13c>
   91cc0:	d1000673 	sub	x19, x19, #0x1
   91cc4:	b100067f 	cmn	x19, #0x1
   91cc8:	54001d40 	b.eq	92070 <sd_init+0x4e0>  // b.none
   91ccc:	52800140 	mov	w0, #0xa                   	// #10
   91cd0:	97ffc428 	bl	82d70 <wait_usec>
   91cd4:	b9400280 	ldr	w0, [x20]
   91cd8:	37c7ff40 	tbnz	w0, #24, 91cc0 <sd_init+0x130>
	if(cnt<=0) {
   91cdc:	b4001cb3 	cbz	x19, 92070 <sd_init+0x4e0>
		uart_puts("ERROR: failed to reset EMMC\n");
		return SD_ERROR;
	}
	uart_puts("EMMC: reset OK\n");
   91ce0:	90000020 	adrp	x0, 95000 <sd_init+0x3470>
   91ce4:	913aa000 	add	x0, x0, #0xea8
   91ce8:	97ffc0c0 	bl	81fe8 <uart_puts>
	*EMMC_CONTROL1 |= C1_CLK_INTLEN | C1_TOUNIT_MAX;
   91cec:	b9400281 	ldr	w1, [x20]
   91cf0:	52800022 	mov	w2, #0x1                   	// #1
   91cf4:	72a001c2 	movk	w2, #0xe, lsl #16
	wait_usec(10);
   91cf8:	52800140 	mov	w0, #0xa                   	// #10
	*EMMC_CONTROL1 |= C1_CLK_INTLEN | C1_TOUNIT_MAX;
   91cfc:	2a020021 	orr	w1, w1, w2
   91d00:	b9000281 	str	w1, [x20]
	wait_usec(10);
   91d04:	97ffc41b 	bl	82d70 <wait_usec>
	// Set clock to setup frequency.
	if((r=sd_clk(400000))) return r;
   91d08:	52835000 	mov	w0, #0x1a80                	// #6784
   91d0c:	72a000c0 	movk	w0, #0x6, lsl #16
   91d10:	97ffff1a 	bl	91978 <sd_clk>
   91d14:	2a0003f4 	mov	w20, w0
   91d18:	340000e0 	cbz	w0, 91d34 <sd_init+0x1a4>
		uart_puts("CCS ");
	uart_send('\n');
	sd_scr[0]&=~SCR_SUPP_CCS;
	sd_scr[0]|=ccs;
	return SD_OK;
}
   91d1c:	2a1403e0 	mov	w0, w20
   91d20:	a94153f3 	ldp	x19, x20, [sp, #16]
   91d24:	a9425bf5 	ldp	x21, x22, [sp, #32]
   91d28:	a94363f7 	ldp	x23, x24, [sp, #48]
   91d2c:	a8c77bfd 	ldp	x29, x30, [sp], #112
   91d30:	d65f03c0 	ret
	*EMMC_INT_EN   = 0xffffffff;
   91d34:	d2800703 	mov	x3, #0x38                  	// #56
	*EMMC_INT_MASK = 0xffffffff;
   91d38:	d2800682 	mov	x2, #0x34                  	// #52
	*EMMC_INT_EN   = 0xffffffff;
   91d3c:	f2a7e603 	movk	x3, #0x3f30, lsl #16
	*EMMC_INT_MASK = 0xffffffff;
   91d40:	f2a7e602 	movk	x2, #0x3f30, lsl #16
   91d44:	a9046bf9 	stp	x25, x26, [sp, #64]
	*EMMC_INT_EN   = 0xffffffff;
   91d48:	12800001 	mov	w1, #0xffffffff            	// #-1
	sd_scr[0]=sd_scr[1]=sd_rca=sd_err=0;
   91d4c:	9000aa35 	adrp	x21, 15d5000 <allocated+0xfb940>
   91d50:	912662b9 	add	x25, x21, #0x998
	*EMMC_INT_EN   = 0xffffffff;
   91d54:	b9000061 	str	w1, [x3]
	sd_scr[0]=sd_scr[1]=sd_rca=sd_err=0;
   91d58:	9000aa33 	adrp	x19, 15d5000 <allocated+0xfb940>
   91d5c:	9000aa36 	adrp	x22, 15d5000 <allocated+0xfb940>
	*EMMC_INT_MASK = 0xffffffff;
   91d60:	b9000041 	str	w1, [x2]
	sd_cmd(CMD_GO_IDLE,0);
   91d64:	52800001 	mov	w1, #0x0                   	// #0
	sd_scr[0]=sd_scr[1]=sd_rca=sd_err=0;
   91d68:	f904cebf 	str	xzr, [x21, #2456]
   91d6c:	f904c67f 	str	xzr, [x19, #2440]
   91d70:	f904cadf 	str	xzr, [x22, #2448]
   91d74:	f900073f 	str	xzr, [x25, #8]
	sd_cmd(CMD_GO_IDLE,0);
   91d78:	97fffdc0 	bl	91478 <sd_cmd>
	if(sd_err) return sd_err;
   91d7c:	f944c674 	ldr	x20, [x19, #2440]
   91d80:	b5000a54 	cbnz	x20, 91ec8 <sd_init+0x338>
	sd_cmd(CMD_SEND_IF_COND,0x000001AA);
   91d84:	52803541 	mov	w1, #0x1aa                 	// #426
   91d88:	52a10040 	mov	w0, #0x8020000             	// #134348800
   91d8c:	97fffdbb 	bl	91478 <sd_cmd>
	cnt=6; r=0; while(!(r&ACMD41_CMD_COMPLETE) && cnt--) {
   91d90:	d28000d4 	mov	x20, #0x6                   	// #6
	if(sd_err) return sd_err;
   91d94:	f944c660 	ldr	x0, [x19, #2440]
   91d98:	b5000960 	cbnz	x0, 91ec4 <sd_init+0x334>
		uart_puts("EMMC: CMD_SEND_OP_COND returned ");
   91d9c:	90000038 	adrp	x24, 95000 <sd_init+0x3470>
   91da0:	913ae318 	add	x24, x24, #0xeb8
   91da4:	a90573fb 	stp	x27, x28, [sp, #80]
		r=sd_cmd(CMD_SEND_OP_COND,ACMD41_ARG_HC);
   91da8:	5290001b 	mov	w27, #0x8000                	// #32768
			uart_puts("COMPLETE ");
   91dac:	90000020 	adrp	x0, 95000 <sd_init+0x3470>
		r=sd_cmd(CMD_SEND_OP_COND,ACMD41_ARG_HC);
   91db0:	72aa3ffb 	movk	w27, #0x51ff, lsl #16
			uart_puts("COMPLETE ");
   91db4:	913b8000 	add	x0, x0, #0xee0
   91db8:	f90037e0 	str	x0, [sp, #104]
	cnt=6; r=0; while(!(r&ACMD41_CMD_COMPLETE) && cnt--) {
   91dbc:	d1000694 	sub	x20, x20, #0x1
		wait_cycles(400);
   91dc0:	52803200 	mov	w0, #0x190                 	// #400
	cnt=6; r=0; while(!(r&ACMD41_CMD_COMPLETE) && cnt--) {
   91dc4:	b100069f 	cmn	x20, #0x1
   91dc8:	54000a40 	b.eq	91f10 <sd_init+0x380>  // b.none
		wait_cycles(400);
   91dcc:	97ffc3e1 	bl	82d50 <wait_cycles>
		if(sd_err!=SD_TIMEOUT && sd_err!=SD_OK ) {
   91dd0:	9126227a 	add	x26, x19, #0x988
		r=sd_cmd(CMD_SEND_OP_COND,ACMD41_ARG_HC);
   91dd4:	2a1b03e1 	mov	w1, w27
   91dd8:	52b52040 	mov	w0, #0xa9020000            	// #-1459486720
   91ddc:	97fffda7 	bl	91478 <sd_cmd>
   91de0:	93407c17 	sxtw	x23, w0
		if(r&ACMD41_CMD_CCS)
   91de4:	120202e1 	and	w1, w23, #0x40000000
		r=sd_cmd(CMD_SEND_OP_COND,ACMD41_ARG_HC);
   91de8:	aa1703fc 	mov	x28, x23
		uart_puts("EMMC: CMD_SEND_OP_COND returned ");
   91dec:	aa1803e0 	mov	x0, x24
		if(r&ACMD41_CMD_CCS)
   91df0:	b90067e1 	str	w1, [sp, #100]
		uart_puts("EMMC: CMD_SEND_OP_COND returned ");
   91df4:	97ffc07d 	bl	81fe8 <uart_puts>
		if(r&ACMD41_CMD_COMPLETE)
   91df8:	37f80877 	tbnz	w23, #31, 91f04 <sd_init+0x374>
		if(r&ACMD41_VOLTAGE)
   91dfc:	72112380 	ands	w0, w28, #0xff8000
   91e00:	b90063e0 	str	w0, [sp, #96]
   91e04:	54000701 	b.ne	91ee4 <sd_init+0x354>  // b.any
		if(r&ACMD41_CMD_CCS)
   91e08:	37f0077c 	tbnz	w28, #30, 91ef4 <sd_init+0x364>
		uart_hex(r>>32);
   91e0c:	937ffee0 	asr	x0, x23, #63
   91e10:	97ffc08e 	bl	82048 <uart_hex>
		uart_hex(r);
   91e14:	2a1c03e0 	mov	w0, w28
   91e18:	97ffc08c 	bl	82048 <uart_hex>
		uart_send('\n');
   91e1c:	52800140 	mov	w0, #0xa                   	// #10
   91e20:	97ffc05a 	bl	81f88 <uart_send>
		if(sd_err!=SD_TIMEOUT && sd_err!=SD_OK ) {
   91e24:	f944c660 	ldr	x0, [x19, #2440]
   91e28:	d1000400 	sub	x0, x0, #0x1
   91e2c:	b1000c1f 	cmn	x0, #0x3
   91e30:	540010c9 	b.ls	92048 <sd_init+0x4b8>  // b.plast
	cnt=6; r=0; while(!(r&ACMD41_CMD_COMPLETE) && cnt--) {
   91e34:	36fffc5c 	tbz	w28, #31, 91dbc <sd_init+0x22c>
	if(!(r&ACMD41_CMD_COMPLETE) || !cnt ) return SD_TIMEOUT;
   91e38:	b40006d4 	cbz	x20, 91f10 <sd_init+0x380>
	if(!(r&ACMD41_VOLTAGE)) return SD_ERROR;
   91e3c:	b94063e0 	ldr	w0, [sp, #96]
   91e40:	34001220 	cbz	w0, 92084 <sd_init+0x4f4>
	sd_cmd(CMD_ALL_SEND_CID,0);
   91e44:	52800001 	mov	w1, #0x0                   	// #0
   91e48:	52a04020 	mov	w0, #0x2010000             	// #33619968
   91e4c:	97fffd8b 	bl	91478 <sd_cmd>
	sd_rca = sd_cmd(CMD_SEND_REL_ADDR,0);
   91e50:	52800001 	mov	w1, #0x0                   	// #0
   91e54:	52a06040 	mov	w0, #0x3020000             	// #50462720
   91e58:	97fffd88 	bl	91478 <sd_cmd>
   91e5c:	93407c01 	sxtw	x1, w0
	uart_puts("EMMC: CMD_SEND_REL_ADDR returned ");
   91e60:	90000022 	adrp	x2, 95000 <sd_init+0x3470>
	sd_rca = sd_cmd(CMD_SEND_REL_ADDR,0);
   91e64:	f904cac1 	str	x1, [x22, #2448]
	uart_puts("EMMC: CMD_SEND_REL_ADDR returned ");
   91e68:	913cc040 	add	x0, x2, #0xf30
   91e6c:	97ffc05f 	bl	81fe8 <uart_puts>
	uart_hex(sd_rca>>32);
   91e70:	b94996c0 	ldr	w0, [x22, #2452]
   91e74:	97ffc075 	bl	82048 <uart_hex>
	uart_hex(sd_rca);
   91e78:	b94992c0 	ldr	w0, [x22, #2448]
   91e7c:	97ffc073 	bl	82048 <uart_hex>
	uart_send('\n');
   91e80:	52800140 	mov	w0, #0xa                   	// #10
   91e84:	97ffc041 	bl	81f88 <uart_send>
	if(sd_err) return sd_err;
   91e88:	f9400354 	ldr	x20, [x26]
   91e8c:	b50000d4 	cbnz	x20, 91ea4 <sd_init+0x314>
	if((r=sd_clk(25000000))) return r;
   91e90:	528f0800 	mov	w0, #0x7840                	// #30784
   91e94:	72a02fa0 	movk	w0, #0x17d, lsl #16
   91e98:	97fffeb8 	bl	91978 <sd_clk>
   91e9c:	2a0003f4 	mov	w20, w0
   91ea0:	340004a0 	cbz	w0, 91f34 <sd_init+0x3a4>
}
   91ea4:	2a1403e0 	mov	w0, w20
   91ea8:	a94153f3 	ldp	x19, x20, [sp, #16]
   91eac:	a9425bf5 	ldp	x21, x22, [sp, #32]
   91eb0:	a94363f7 	ldp	x23, x24, [sp, #48]
   91eb4:	a9446bf9 	ldp	x25, x26, [sp, #64]
   91eb8:	a94573fb 	ldp	x27, x28, [sp, #80]
   91ebc:	a8c77bfd 	ldp	x29, x30, [sp], #112
   91ec0:	d65f03c0 	ret
	if(sd_err) return sd_err;
   91ec4:	2a0003f4 	mov	w20, w0
}
   91ec8:	2a1403e0 	mov	w0, w20
   91ecc:	a94153f3 	ldp	x19, x20, [sp, #16]
   91ed0:	a9425bf5 	ldp	x21, x22, [sp, #32]
   91ed4:	a94363f7 	ldp	x23, x24, [sp, #48]
	if(sd_err) return sd_err;
   91ed8:	a9446bf9 	ldp	x25, x26, [sp, #64]
}
   91edc:	a8c77bfd 	ldp	x29, x30, [sp], #112
   91ee0:	d65f03c0 	ret
			uart_puts("VOLTAGE ");
   91ee4:	90000020 	adrp	x0, 95000 <sd_init+0x3470>
   91ee8:	913bc000 	add	x0, x0, #0xef0
   91eec:	97ffc03f 	bl	81fe8 <uart_puts>
		if(r&ACMD41_CMD_CCS)
   91ef0:	36f7f8fc 	tbz	w28, #30, 91e0c <sd_init+0x27c>
			uart_puts("CCS ");
   91ef4:	90000020 	adrp	x0, 95000 <sd_init+0x3470>
   91ef8:	913c0000 	add	x0, x0, #0xf00
   91efc:	97ffc03b 	bl	81fe8 <uart_puts>
   91f00:	17ffffc3 	b	91e0c <sd_init+0x27c>
			uart_puts("COMPLETE ");
   91f04:	f94037e0 	ldr	x0, [sp, #104]
   91f08:	97ffc038 	bl	81fe8 <uart_puts>
   91f0c:	17ffffbc 	b	91dfc <sd_init+0x26c>
	if(!(r&ACMD41_CMD_COMPLETE) || !cnt ) return SD_TIMEOUT;
   91f10:	12800014 	mov	w20, #0xffffffff            	// #-1
}
   91f14:	2a1403e0 	mov	w0, w20
   91f18:	a94153f3 	ldp	x19, x20, [sp, #16]
   91f1c:	a9425bf5 	ldp	x21, x22, [sp, #32]
   91f20:	a94363f7 	ldp	x23, x24, [sp, #48]
   91f24:	a9446bf9 	ldp	x25, x26, [sp, #64]
   91f28:	a94573fb 	ldp	x27, x28, [sp, #80]
   91f2c:	a8c77bfd 	ldp	x29, x30, [sp], #112
   91f30:	d65f03c0 	ret
	sd_cmd(CMD_CARD_SELECT,sd_rca);
   91f34:	b94992c1 	ldr	w1, [x22, #2448]
   91f38:	52a0e060 	mov	w0, #0x7030000             	// #117637120
   91f3c:	97fffd4f 	bl	91478 <sd_cmd>
	if(sd_err) return sd_err;
   91f40:	f9400354 	ldr	x20, [x26]
   91f44:	b5fffb14 	cbnz	x20, 91ea4 <sd_init+0x314>
	if(sd_status(SR_DAT_INHIBIT)) return SD_TIMEOUT;
   91f48:	52800040 	mov	w0, #0x2                   	// #2
   91f4c:	97fffce1 	bl	912d0 <sd_status>
   91f50:	35fffe00 	cbnz	w0, 91f10 <sd_init+0x380>
	*EMMC_BLKSIZECNT = (1<<16) | 8;
   91f54:	d2800082 	mov	x2, #0x4                   	// #4
   91f58:	52800103 	mov	w3, #0x8                   	// #8
   91f5c:	f2a7e602 	movk	x2, #0x3f30, lsl #16
   91f60:	72a00023 	movk	w3, #0x1, lsl #16
	sd_cmd(CMD_SEND_SCR,0);
   91f64:	52800200 	mov	w0, #0x10                  	// #16
   91f68:	52800001 	mov	w1, #0x0                   	// #0
	*EMMC_BLKSIZECNT = (1<<16) | 8;
   91f6c:	b9000043 	str	w3, [x2]
	sd_cmd(CMD_SEND_SCR,0);
   91f70:	72b66440 	movk	w0, #0xb322, lsl #16
   91f74:	97fffd41 	bl	91478 <sd_cmd>
	if(sd_err) return sd_err;
   91f78:	f9400354 	ldr	x20, [x26]
   91f7c:	b5fff954 	cbnz	x20, 91ea4 <sd_init+0x314>
	if(sd_int(INT_READ_RDY)) return SD_TIMEOUT;
   91f80:	52800400 	mov	w0, #0x20                  	// #32
   91f84:	97fffd07 	bl	913a0 <sd_int>
   91f88:	2a0003f4 	mov	w20, w0
   91f8c:	35fffc20 	cbnz	w0, 91f10 <sd_init+0x380>
		if( *EMMC_STATUS & SR_READ_AVAILABLE )
   91f90:	d2800498 	mov	x24, #0x24                  	// #36
			sd_scr[r++] = *EMMC_DATA;
   91f94:	d280041a 	mov	x26, #0x20                  	// #32
	r=0; cnt=100000; while(r<2 && cnt) {
   91f98:	d2800017 	mov	x23, #0x0                   	// #0
		if( *EMMC_STATUS & SR_READ_AVAILABLE )
   91f9c:	f2a7e618 	movk	x24, #0x3f30, lsl #16
			sd_scr[r++] = *EMMC_DATA;
   91fa0:	f2a7e61a 	movk	x26, #0x3f30, lsl #16
		if( *EMMC_STATUS & SR_READ_AVAILABLE )
   91fa4:	b9400300 	ldr	w0, [x24]
			sd_scr[r++] = *EMMC_DATA;
   91fa8:	910006e1 	add	x1, x23, #0x1
		if( *EMMC_STATUS & SR_READ_AVAILABLE )
   91fac:	365805c0 	tbz	w0, #11, 92064 <sd_init+0x4d4>
			sd_scr[r++] = *EMMC_DATA;
   91fb0:	b9400340 	ldr	w0, [x26]
	r=0; cnt=100000; while(r<2 && cnt) {
   91fb4:	f100083f 	cmp	x1, #0x2
			sd_scr[r++] = *EMMC_DATA;
   91fb8:	2a0003e0 	mov	w0, w0
   91fbc:	f8377b20 	str	x0, [x25, x23, lsl #3]
   91fc0:	aa0103f7 	mov	x23, x1
	r=0; cnt=100000; while(r<2 && cnt) {
   91fc4:	54ffff01 	b.ne	91fa4 <sd_init+0x414>  // b.any
	if(sd_scr[0] & SCR_SD_BUS_WIDTH_4) {
   91fc8:	f9400320 	ldr	x0, [x25]
   91fcc:	36500180 	tbz	w0, #10, 91ffc <sd_init+0x46c>
		sd_cmd(CMD_SET_BUS_WIDTH,sd_rca|2);
   91fd0:	f944cac1 	ldr	x1, [x22, #2448]
   91fd4:	52b0c040 	mov	w0, #0x86020000            	// #-2046689280
   91fd8:	321f0021 	orr	w1, w1, #0x2
   91fdc:	97fffd27 	bl	91478 <sd_cmd>
		if(sd_err) return sd_err;
   91fe0:	f944c660 	ldr	x0, [x19, #2440]
   91fe4:	b5000580 	cbnz	x0, 92094 <sd_init+0x504>
		*EMMC_CONTROL0 |= C0_HCTL_DWITDH;
   91fe8:	d2800501 	mov	x1, #0x28                  	// #40
   91fec:	f2a7e601 	movk	x1, #0x3f30, lsl #16
   91ff0:	b9400020 	ldr	w0, [x1]
   91ff4:	321f0000 	orr	w0, w0, #0x2
   91ff8:	b9000020 	str	w0, [x1]
	uart_puts("EMMC: supports ");
   91ffc:	90000020 	adrp	x0, 95000 <sd_init+0x3470>
   92000:	913d6000 	add	x0, x0, #0xf58
   92004:	97ffbff9 	bl	81fe8 <uart_puts>
	if(sd_scr[0] & SCR_SUPP_SET_BLKCNT)
   92008:	f944cea0 	ldr	x0, [x21, #2456]
   9200c:	37c80540 	tbnz	w0, #25, 920b4 <sd_init+0x524>
	if(ccs)
   92010:	b94067e0 	ldr	w0, [sp, #100]
   92014:	35000480 	cbnz	w0, 920a4 <sd_init+0x514>
	uart_send('\n');
   92018:	52800140 	mov	w0, #0xa                   	// #10
   9201c:	97ffbfdb 	bl	81f88 <uart_send>
	sd_scr[0]&=~SCR_SUPP_CCS;
   92020:	f944cea0 	ldr	x0, [x21, #2456]
	if(r&ACMD41_CMD_CCS) ccs=SCR_SUPP_CCS;
   92024:	b94067e1 	ldr	w1, [sp, #100]
	sd_scr[0]&=~SCR_SUPP_CCS;
   92028:	927ff800 	and	x0, x0, #0xfffffffffffffffe
	if(r&ACMD41_CMD_CCS) ccs=SCR_SUPP_CCS;
   9202c:	7100003f 	cmp	w1, #0x0
   92030:	9a9f07e1 	cset	x1, ne  // ne = any
	sd_scr[0]|=ccs;
   92034:	aa010000 	orr	x0, x0, x1
   92038:	f904cea0 	str	x0, [x21, #2456]
	return SD_OK;
   9203c:	a9446bf9 	ldp	x25, x26, [sp, #64]
   92040:	a94573fb 	ldp	x27, x28, [sp, #80]
   92044:	17ffff36 	b	91d1c <sd_init+0x18c>
			uart_puts("ERROR: EMMC ACMD41 returned error\n");
   92048:	f0000000 	adrp	x0, 95000 <sd_init+0x3470>
   9204c:	913c2000 	add	x0, x0, #0xf08
   92050:	97ffbfe6 	bl	81fe8 <uart_puts>
			return sd_err;
   92054:	b9400354 	ldr	w20, [x26]
   92058:	a9446bf9 	ldp	x25, x26, [sp, #64]
   9205c:	a94573fb 	ldp	x27, x28, [sp, #80]
   92060:	17ffff2f 	b	91d1c <sd_init+0x18c>
			wait_usec(1);
   92064:	52800020 	mov	w0, #0x1                   	// #1
   92068:	97ffc342 	bl	82d70 <wait_usec>
   9206c:	17ffffce 	b	91fa4 <sd_init+0x414>
		uart_puts("ERROR: failed to reset EMMC\n");
   92070:	f0000000 	adrp	x0, 95000 <sd_init+0x3470>
		return SD_ERROR;
   92074:	12800034 	mov	w20, #0xfffffffe            	// #-2
		uart_puts("ERROR: failed to reset EMMC\n");
   92078:	913a2000 	add	x0, x0, #0xe88
   9207c:	97ffbfdb 	bl	81fe8 <uart_puts>
		return SD_ERROR;
   92080:	17ffff27 	b	91d1c <sd_init+0x18c>
	if(!(r&ACMD41_VOLTAGE)) return SD_ERROR;
   92084:	12800034 	mov	w20, #0xfffffffe            	// #-2
   92088:	a9446bf9 	ldp	x25, x26, [sp, #64]
   9208c:	a94573fb 	ldp	x27, x28, [sp, #80]
   92090:	17ffff23 	b	91d1c <sd_init+0x18c>
		if(sd_err) return sd_err;
   92094:	2a0003f4 	mov	w20, w0
   92098:	a9446bf9 	ldp	x25, x26, [sp, #64]
   9209c:	a94573fb 	ldp	x27, x28, [sp, #80]
   920a0:	17ffff1f 	b	91d1c <sd_init+0x18c>
		uart_puts("CCS ");
   920a4:	f0000000 	adrp	x0, 95000 <sd_init+0x3470>
   920a8:	913c0000 	add	x0, x0, #0xf00
   920ac:	97ffbfcf 	bl	81fe8 <uart_puts>
   920b0:	17ffffda 	b	92018 <sd_init+0x488>
		uart_puts("SET_BLKCNT ");
   920b4:	f0000000 	adrp	x0, 95000 <sd_init+0x3470>
   920b8:	913da000 	add	x0, x0, #0xf68
   920bc:	97ffbfcb 	bl	81fe8 <uart_puts>
   920c0:	17ffffd4 	b	92010 <sd_init+0x480>
